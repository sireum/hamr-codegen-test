{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "testevent--SeL4_Only\/components\/emitter_impl\/emitter_impl.camkes", { "type" : "Resource","content" : "component emitter_impl {\n  include <sb_top_impl_Instance_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  emits ReceiveEvent sb_e;\n  dataport sb_event_counter_t sb_e_counter;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/components\/consumer_impl\/consumer_impl.camkes", { "type" : "Resource","content" : "component consumer_impl {\n  include <sb_top_impl_Instance_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  consumes ReceiveEvent sb_s;\n  dataport sb_event_counter_t sb_s_counter;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/top_impl_Instance.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport \"components\/emitter_impl\/emitter_impl.camkes\";\nimport \"components\/consumer_impl\/consumer_impl.camkes\";\n\nassembly {\n  composition {\n    component emitter_impl src;\n    component consumer_impl snk;\n\n    connection seL4Notification conn1(from src.sb_e, to snk.sb_s);\n    connection seL4SharedData conn2(from src.sb_e_counter, to snk.sb_s_counter);\n  }\n\n  configuration {\n    src.sb_e_counter_access = \"W\";\n    snk.sb_s_counter_access = \"R\";\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/components\/emitter_impl\/src\/emitter.c", { "type" : "Resource","content" : "\/* testevent\/components\/emitter\/src\/emitter.c *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_proc_types.h>\n#include <sb_emitter_impl.h>\n\nvoid testevent_emitter_component_init(const int64_t *in_arg)\n{\n    printf(\"testevent_emitter_component_init called\\n\");\n}\n\n\/* control thread: keep calling enqueue for thing\n *\/\nvoid run_emitter(const int64_t *in_arg)\n{\n    sb_e_enqueue();\n    printf(\"[Emitter] Sent event.\\n\");\n}\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/components\/consumer_impl\/src\/consumer.c", { "type" : "Resource","content" : "\/* apps\/testevent\/components\/Consumer\/src\/main.c *\/\n\n\/* Similar to the \"helloevent\" example in CAmkES doc,\n * tidied up a bit.\n *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_impl.h>\n\nstatic int8_t _value;\n\nvoid testevent_consumer_component_init(const int64_t *in_arg) {\n  printf(\"testevent_consumer_component_init called\\n\");\n  _value = 0;\n}\n\nvoid testevent_consumer_s_event_handler() {\n\n  printf(\"[Consumer] Callback %d fired.\\n\", _value);\n  _value = (_value + 1) % 500;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nDeclareCAmkESComponent(emitter_impl\n  SOURCES components\/emitter_impl\/\/src\/emitter.c components\/emitter_impl\/src\/sb_emitter_impl.c\n  INCLUDES components\/emitter_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_impl\n  SOURCES components\/consumer_impl\/\/src\/consumer.c components\/consumer_impl\/src\/sb_consumer_impl.c\n  INCLUDES components\/consumer_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/bin\/run-camkes.sh", { "type" : "Resource","content" : "#!\/usr\/bin\/env bash\n\nset -e\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n\n# location of camkes-projects directory\nif [ -n \"$1\" ]; then\n    CAMKES_DIR=$1\nelif [ -d \"\/host\/camkes-project\" ]; then\n    CAMKES_DIR=\"\/host\/camkes-project\"\nelif [ -d \"${HOME}\/CASE\/camkes\" ]; then\n    CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"$CAMKES_DIR\" || ! -d \"${CAMKES_DIR}\" ]]; then\n    echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your CAmkES project directory\"\n    exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name \nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=$CAMKES_DIR\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ ! -e \"${CAMKES_APPS_DIR}\" ]; then\n    ln -sv $PROJECT_HOME $CAMKES_APPS_DIR\nfi\n\n\n########################\n# run CAmkES\/seL4 build\n########################\n\ncd $CAMKES_DIR\n\nBUILD_DIR=build_$HAMR_CAMKES_PROJ\n\nrm -rf $BUILD_DIR\nmkdir $BUILD_DIR\ncd $BUILD_DIR\n\n..\/init-build.sh -DCAMKES_APP=$HAMR_CAMKES_PROJ && ninja\n\n########################\n# simulate via QEMU\n########################\n\n.\/simulate                   \n","overwrite" : true,"makeExecutable" : true}],[ "testevent--SeL4_Only\/components\/emitter_impl\/src\/sb_emitter_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_emitter_impl.h\"\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_e_enqueue\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to send to a remote event port.\n *\n ************************************************************************\/\nbool sb_e_enqueue(void) {\n  \/\/ sb_e_counter is a dataport (shared memory) that is written by the sender \n  \/\/ and read by the receiver(s). This counter is monotonicly increasing, \n  \/\/ but can wrap.\n  (*sb_e_counter)++;\n\n  \/\/ Release memory fence - ensure subsequent write occurs after any preceeding read or write\n  sb_e_counter_release();\n\n  sb_e_emit();\n\n  return true;\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_emitter_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_impl_initializer(const int64_t * in_arg) {\n  testevent_emitter_component_init((int64_t *) in_arg);\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_impl_initializer(&sb_dummy);\n  }\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/components\/emitter_impl\/includes\/sb_emitter_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_emitter_impl_types__H\n#define __sb_AADL_emitter_impl_types__H\n\n#include <sb_top_impl_Instance_types.h>\n\nbool sb_e_enqueue(void);\n\nvoid testevent_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_emitter_impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/components\/consumer_impl\/src\/sb_consumer_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_impl.h\"\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic sb_event_counter_t sb_s_received_events = 0;\nstatic sb_event_counter_t sb_s_last_counter = 0;\n\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * s\n *\n ************************************************************************\/\nstatic void sb_s_handler(void *_ UNUSED){\n  MUTEXOP(sb_dispatch_sem_post());\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * sb_s_dequeue:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_dequeue() {\n  if(sb_s_received_events > 0) {\n    sb_s_received_events--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_impl_s(void){\n  testevent_consumer_s_event_handler();\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_impl_initializer(const int64_t * in_arg) {\n  testevent_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_impl_initializer(&sb_dummy);\n  }\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    { \/\/ drain queue for incoming event port 's'\n\n      sb_event_counter_t current_sb_s_counter;\n\n      sb_s_received_events = 0; \/\/ drop any events not handled during last dispatch\n\n      \/\/ get current shared counter value\n      current_sb_s_counter = *sb_s_counter;\n\n      \/\/ Acquire memory fence - ensure preceding read occurs before any subsequent read or write\n      sb_s_counter_acquire();\n\n      \/\/ NOTE: Counters can wrap, so we must use != below instead of >\n      while(current_sb_s_counter != sb_s_last_counter){\n        sb_s_last_counter++;\n        sb_s_received_events++;\n      }\n\n      if(sb_s_received_events > 0) {\n\n        \/\/ s's queue size is 1\n        if(sb_s_received_events > 1) {\n          \/\/printf(\"consumer_impl: dropping %i event(s) from incoming event port s\\n\", (sb_s_received_events - 1));\n\n          \/\/ drop events\n          sb_s_received_events = 1;\n        }\n\n        \/\/ dequeue one event and call the event handler\n        sb_s_dequeue();\n        sb_entrypoint_consumer_impl_s();\n      }\n    }\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/components\/consumer_impl\/includes\/sb_consumer_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_impl_types__H\n#define __sb_AADL_consumer_impl_types__H\n\n#include <sb_top_impl_Instance_types.h>\n\nbool sb_s_dequeue(void);\n\nvoid testevent_consumer_s_event_handler(void);\n\nvoid testevent_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/includes\/sb_top_impl_Instance_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_top_impl_Instance_types__H\n#define __SB_AADL_sb_top_impl_Instance_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_top_impl_Instance_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "testevent--SeL4_Only\/includes\/sb_event_counter.h", { "type" : "Resource","content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t; \n","overwrite" : true,"makeExecutable" : false}]]}}
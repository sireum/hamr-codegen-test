{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "testevent--SeL4_Only\/components\/emitter_impl\/emitter_impl.camkes", { "type" : "Resource","content" : "component emitter_impl {\n  include <sb_proc_types.h>;\n  control;\n  emits ReceiveEvent sb_e;\n  dataport int32_t sb_e_counter;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testevent--SeL4_Only\/components\/consumer_impl\/consumer_impl.camkes", { "type" : "Resource","content" : "component consumer_impl {\n  include <sb_proc_types.h>;\n  control;\n  consumes ReceiveEvent sb_s;\n  dataport int32_t sb_s_counter;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testevent--SeL4_Only\/testevent.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport \"components\/emitter_impl\/emitter_impl.camkes\";\nimport \"components\/consumer_impl\/consumer_impl.camkes\";\n\nassembly {\n  composition {\n    component emitter_impl src;\n    component consumer_impl snk;\n\n    connection seL4Notification conn1(from src.sb_e, to snk.sb_s);\n    connection seL4SharedData conn2(from src.sb_e_counter, to snk.sb_s_counter);\n  }\n\n  configuration {\n    src.sb_e_counter_access = \"W\";\n    snk.sb_s_counter_access = \"R\";\n  }\n}\n"}],[ "testevent--SeL4_Only\/components\/emitter_impl\/\/src\/emitter.c", { "type" : "Resource","content" : "\/* testevent\/components\/emitter\/src\/emitter.c *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_proc_types.h>\n#include <sb_emitter_impl.h>\n\nvoid testevent_emitter_component_init(const int64_t *in_arg)\n{\n    printf(\"testevent_emitter_component_init called\\n\");\n}\n\n\/* control thread: keep calling enqueue for thing\n *\/\nvoid run_emitter(const int64_t *in_arg)\n{\n    sb_emitter_impl_write_e();\n    printf(\"[Emitter] Sent event.\\n\");\n}\n"}],[ "testevent--SeL4_Only\/components\/consumer_impl\/\/src\/consumer.c", { "type" : "Resource","content" : "\/* apps\/testevent\/components\/Consumer\/src\/main.c *\/\n\n\/* Similar to the \"helloevent\" example in CAmkES doc,\n * tidied up a bit.\n *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_impl.h>\n\nstatic int8_t _value;\n\nvoid testevent_consumer_component_init(const int64_t *in_arg) {\n  printf(\"testevent_consumer_component_init called\\n\");\n  _value = 0;\n}\n\nvoid testevent_consumer_s_event_handler() {\n\n  printf(\"[Consumer] Callback %d fired.\\n\", _value);\n  _value = (_value + 1) % 500;\n}\n"}],[ "testevent--SeL4_Only\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (testevent C)\n\nDeclareCAmkESComponent(emitter_impl\n  SOURCES components\/emitter_impl\/\/src\/emitter.c components\/emitter_impl\/src\/sb_emitter_impl.c\n  INCLUDES components\/emitter_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_impl\n  SOURCES components\/consumer_impl\/\/src\/consumer.c components\/consumer_impl\/src\/sb_consumer_impl.c\n  INCLUDES components\/consumer_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(testevent.camkes)\n"}],[ "testevent--SeL4_Only\/components\/emitter_impl\/src\/sb_emitter_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_emitter_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_emitter_impl_write_e\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to send to a remote event port.\n *\n ************************************************************************\/\nbool sb_emitter_impl_write_e(void) {\n  (*sb_e_counter)++;\n  sb_e_emit();\n  return true;\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_emitter_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_impl_initializer(const int64_t * in_arg) {\n  testevent_emitter_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "testevent--SeL4_Only\/components\/emitter_impl\/includes\/sb_emitter_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_emitter_impl_types__H\n#define __sb_AADL_emitter_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_emitter_impl_write_e(void);\n\nvoid testevent_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_emitter_impl_types__H\n"}],[ "testevent--SeL4_Only\/components\/consumer_impl\/src\/sb_consumer_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic int32_t sb_s_current_events = 0;\nstatic int32_t sb_s_last_counter = 0;\n\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * s\n *\n ************************************************************************\/\nstatic void sb_s_handler(void *_ UNUSED){\n  MUTEXOP(sb_dispatch_sem_post());\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * sb_consumer_impl_read_s:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_consumer_impl_read_s() {\n  if(sb_s_current_events > 0) {\n    sb_s_current_events--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_impl_s(void){\n  testevent_consumer_s_event_handler();\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_impl_initializer(const int64_t * in_arg) {\n  testevent_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  int32_t sb_s_current_counter;\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    sb_s_current_counter = *sb_s_counter;\n    if(sb_s_last_counter < sb_s_current_counter) {\n      sb_s_current_events = sb_s_current_counter - sb_s_last_counter;\n      if(sb_s_current_events > 1) {\n        \/\/ drop events\n        sb_s_current_events = 1;\n      }\n      sb_s_last_counter = sb_s_current_counter;\n      sb_entrypoint_consumer_impl_s();\n    }\n  }\n  return 0;\n}\n"}],[ "testevent--SeL4_Only\/components\/consumer_impl\/includes\/sb_consumer_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_impl_types__H\n#define __sb_AADL_consumer_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_consumer_impl_read_s(void);\n\nvoid testevent_consumer_s_event_handler(void);\n\nvoid testevent_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_impl_types__H\n"}],[ "testevent--SeL4_Only\/includes\/sb_proc_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_proc_types__H\n#define __SB_AADL_sb_proc_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_proc_types__H\n"}]]}}
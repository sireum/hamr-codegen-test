{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "uav_alt_domains--SeL4_Only\/components\/RadioDriver_Impl\/RadioDriver_Impl.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\n\ncomponent RadioDriver_Impl {\n  include <sb_PROC_HW_types.h>;\n  include <sp_SW__Command_Impl.h>;\n  control;\n  uses Timer sb_timer;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sp_SW__Command_Impl_t recv_map_out;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/FlightPlanner_Impl\/FlightPlanner_Impl.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\n\ncomponent FlightPlanner_Impl {\n  include <sb_PROC_HW_types.h>;\n  include <sp_SW__Mission.h>;\n  include <sp_bool.h>;\n  include <sp_SW__Command_Impl.h>;\n  control;\n  uses Timer sb_timer;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sp_SW__Mission_t flight_plan;\n  dataport sp_bool_t mission_rcv;\n  dataport sp_SW__Command_Impl_t recv_map;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/WaypointManager_Impl\/WaypointManager_Impl.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\n\ncomponent WaypointManager_Impl {\n  include <sb_PROC_HW_types.h>;\n  include <sp_SW__Mission.h>;\n  include <sp_bool.h>;\n  include <sp_SW__MissionWindow.h>;\n  include <sp_int64_t.h>;\n  control;\n  uses Timer sb_timer;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sp_SW__Mission_t flight_plan;\n  dataport sp_bool_t mission_rcv;\n  dataport sp_SW__MissionWindow_t mission_window;\n  dataport sp_int64_t_t tracking_id;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/UARTDriver_Impl\/UARTDriver_Impl.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\n\ncomponent UARTDriver_Impl {\n  include <sb_PROC_HW_types.h>;\n  include <sp_SW__MissionWindow.h>;\n  include <sp_int64_t.h>;\n  control;\n  uses Timer sb_timer;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sp_SW__MissionWindow_t mission_window;\n  dataport sp_int64_t_t tracking_id;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/dispatch_periodic\/dispatch_periodic.camkes", { "type" : "Resource","content" : "import <global-connectors.camkes>;\n\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_RADIO_periodic_dispatch_notification;\n  emits Notification sb_FPLN_periodic_dispatch_notification;\n  emits Notification sb_WPM_periodic_dispatch_notification;\n  emits Notification sb_UART_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/PROC_SW.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/RadioDriver_Impl\/RadioDriver_Impl.camkes\";\nimport \"components\/FlightPlanner_Impl\/FlightPlanner_Impl.camkes\";\nimport \"components\/WaypointManager_Impl\/WaypointManager_Impl.camkes\";\nimport \"components\/UARTDriver_Impl\/UARTDriver_Impl.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component RadioDriver_Impl RADIO;\n    component FlightPlanner_Impl FPLN;\n    component WaypointManager_Impl WPM;\n    component UARTDriver_Impl UART;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4TimeServer conn1(from RADIO.sb_timer, to time_server.the_timer);\n    connection seL4Notification conn2(from dispatch_periodic_inst.sb_RADIO_periodic_dispatch_notification, to RADIO.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn3(from FPLN.sb_timer, to time_server.the_timer);\n    connection seL4Notification conn4(from dispatch_periodic_inst.sb_FPLN_periodic_dispatch_notification, to FPLN.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn5(from WPM.sb_timer, to time_server.the_timer);\n    connection seL4Notification conn6(from dispatch_periodic_inst.sb_WPM_periodic_dispatch_notification, to WPM.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn7(from UART.sb_timer, to time_server.the_timer);\n    connection seL4Notification conn8(from dispatch_periodic_inst.sb_UART_periodic_dispatch_notification, to UART.sb_periodic_dispatch_notification);\n    connection seL4SharedData conn9(from RADIO.recv_map_out, to FPLN.recv_map);\n    connection seL4SharedData conn10(from FPLN.flight_plan, to WPM.flight_plan);\n    connection seL4SharedData conn11(from WPM.mission_rcv, to FPLN.mission_rcv);\n    connection seL4SharedData conn12(from WPM.mission_window, to UART.mission_window);\n    connection seL4SharedData conn13(from UART.tracking_id, to WPM.tracking_id);\n    connection seL4TimeServer conn14(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn15(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    RADIO.recv_map_out_access = \"W\";\n    RADIO.sb_timer_attributes = 1;\n    RADIO.sb_timer_global_endpoint = \"RadioDriver_Impl_sb_timer\";\n    FPLN.flight_plan_access = \"W\";\n    FPLN.mission_rcv_access = \"R\";\n    FPLN.recv_map_access = \"R\";\n    FPLN.sb_timer_attributes = 2;\n    FPLN.sb_timer_global_endpoint = \"FlightPlanner_Impl_sb_timer\";\n    WPM.flight_plan_access = \"R\";\n    WPM.mission_rcv_access = \"W\";\n    WPM.mission_window_access = \"W\";\n    WPM.tracking_id_access = \"R\";\n    WPM.sb_timer_attributes = 3;\n    WPM.sb_timer_global_endpoint = \"WaypointManager_Impl_sb_timer\";\n    UART.mission_window_access = \"R\";\n    UART.tracking_id_access = \"W\";\n    UART.sb_timer_attributes = 4;\n    UART.sb_timer_global_endpoint = \"UARTDriver_Impl_sb_timer\";\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 5;\n    dispatch_periodic_inst.timer_global_endpoint = \"dispatch_periodic_timer\";\n    dispatch_periodic_inst.timer_complete_global_endpoint = \"dispatch_periodic_timer\";\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/RadioDriver_Impl\/\/src\/radiodriver.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_RadioDriver_Impl.h>\n#include <assert.h>\n\nvoid init(const int64_t * in_arg) {\n\n  printf(\"RDIO: initialise entry point called\\n\");\n\n  SW__Command_Impl command = {\n    .Map = {{ .lat = 0, .longitude = 1, .alt = 2 },\n            { .lat = 1, .longitude = 2, .alt = 3 },\n            { .lat = 2, .longitude = 3, .alt = 4 },\n            { .lat = 3, .longitude = 4, .alt = 5 }},\n      .Pattern = Perimeter,\n      .HMAC = true\n  };\n\n  printf(\"RDIO:> Sending command.\\n\");\n\n  \/\/ send command to FPLN  \n  assert(sb_recv_map_out_write(&command)==true);\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/FlightPlanner_Impl\/\/src\/flightplanner.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_FlightPlanner_Impl.h>\n#include <assert.h>\n\nstatic bool missioncommand_sent = false;\n\nvoid init(const int64_t *arg){\n}\n\nvoid printCommand(const SW__Command_Impl * command) {\n  \tprintf(\"  Map     = [\\n\");\n    for(int i = 0; i < 4; i++){\n      SW__Coordinate_Impl c = command->Map[i];\n      printf(\"             %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n    }  \t\n    printf(\"            ]\\n\");\n\t\tprintf(\"  Pattern = %i\\n\", command->Pattern);\n\t\tprintf(\"  HMAC    = %i\\n\", command->HMAC);\n}\n\nvoid recv_map(const SW__Command_Impl * command) {\n\n  \tprintf(\"FPLN:< Command.\\n\");\n  \tprintCommand(command);\n\n  \tif(!missioncommand_sent) {\n\n  \t    \/\/ simulate the creation of a new mission\n  \t\tsb_SW__Mission_container mission = { .f = {{ .lat = 0, .longitude = 1, .alt = 2},\n   \t\t                                           { .lat = 1, .longitude = 2, .alt = 3},\n  \t\t                                           { .lat = 2, .longitude = 3, .alt = 4},\n  \t\t                                           { .lat = 3, .longitude = 4, .alt = 5},\n  \t\t                                           { .lat = 4, .longitude = 5, .alt = 6},\n  \t\t                                           { .lat = 5, .longitude = 6, .alt = 7},\n  \t\t                                           { .lat = 6, .longitude = 7, .alt = 8},\n  \t\t                                           { .lat = 7, .longitude = 8, .alt = 9},\n  \t\t                                           { .lat = 8, .longitude = 9, .alt = 10},\n  \t\t                                           { .lat = 9, .longitude = 10, .alt = 11}}};\n\n  \t\tprintf(\"FPLN:> new mission notification.\\n\");\n\n  \t\t\/\/ send the flight plan to WMP\n  \t\tassert(sb_flight_plan_write(&mission) == true);\n\n    \tmissioncommand_sent = true;\n  \t}\n}\n\nvoid mission_rcv(const bool * value) {\n\tprintf(\"FPLN:< Received mission receipt confirmation: %i.\\n\", *value);\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/WaypointManager_Impl\/\/src\/waypointmanager.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_WaypointManager_Impl.h>\n#include <assert.h>\n#include <string.h>\n\n\nsb_SW__Mission_container _mission;\n\nvoid init(const int64_t * __unused__) {\n}\n\nvoid printMission(const sb_SW__Mission_container * mission){\n  printf(\"  Mission:\\n\");\n  for(int i = 0; i < 10; i++){\n    SW__Coordinate_Impl c = mission->f[i];\n    printf(\"    %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n  }\n}\n\nvoid sendWin(int i) {\n\n  \/\/ simulate creation of new mission windows\n  sb_SW__MissionWindow_container missionWindow = { \n    .f = { _mission.f[i % 10], \n           _mission.f[(i + 1) % 10],\n           _mission.f[(i + 2) % 10],\n           _mission.f[(i + 3) % 10]} \n  };\n\n  \/\/ send mission window to UART  \n  assert(sb_mission_window_write(&missionWindow) == true);\n\n  printf(\"WM:> Sent mission window\\n\");\n}\n\nvoid flight_plan(const sb_SW__Mission_container * mission){\n  printf(\"WM:< Received flight plan\\n\");\n\n  memcpy(&_mission, mission, sizeof(struct sb_SW__Mission_container));\n\n  printMission(&_mission);\n\n  sendWin(0);\n\n  \/\/ send receipt confirmation back to FPLN\n  bool dummy = true;\n  assert(sb_mission_rcv_write(&dummy) == true);\n}\n\nvoid tracking_id(const uintmax_t * nid) {\n  printf(\"WM:< Received %\" PRIu64 \" as the next id.\\n\", *nid);\n\n  sendWin(*nid);\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/UARTDriver_Impl\/\/src\/uartdriver.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_UARTDriver_Impl.h>\n#include <assert.h>\n\nstatic uintmax_t i = 0;\n\nvoid init(const int64_t * in_arg) {\n}\n\nvoid printMissionWindow(const sb_SW__MissionWindow_container * missionWindow){\n  printf(\"  MissionWindow:\\n\");\n  for(int i = 0; i < 4; i++){\n    SW__Coordinate_Impl c = missionWindow->f[i];\n    printf(\"    %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n  }\n}\n\nvoid mission_window(const sb_SW__MissionWindow_container * missionWindow){\n  printf(\"UART:< Received mission window\\n\");\n  printMissionWindow(missionWindow);\n\n  for(unsigned int j = 0; j < 100000000; j++){}\n\n  i++;\n\n  printf(\"UART:> Sending %\" PRIu64 \" as the next id.\\n\", i);\n\n  \/\/ send tracking id to WPM\n  assert(sb_tracking_id_write(&i) == true);\n}\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/seqNum.h", { "type" : "Resource","content" : "#ifndef _SEQNUM_H_\n#define _SEQNUM_H_\n\n\/\/ Typedef for seqNum to make it easy to change the type. Keep these consistent!\ntypedef uintmax_t seqNum_t;\n#define SEQNUM_MAX UINTMAX_MAX\n#define PRIseqNum PRIuMAX\n\n\/\/ DIRTY_SEQ_NUM is used to mark a sampling port message as dirty while it is\n\/\/ being writen. DIRTY_SEQ_NUM is not a valid sequence number. Valid sequence\n\/\/ numbers are from 0 to DIRTY_SEQ_NUM-1 is never a valid sequence number.\nstatic const seqNum_t DIRTY_SEQ_NUM = SEQNUM_MAX;\n\n#endif"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_int64_t.h", { "type" : "Resource","content" : "#ifndef MACRO_NAME\n#define MACRO_NAME\n\n#include \"seqNum.h\"\n\n\/\/ Sampling port message with bool data\ntypedef struct sp_int64_t {\n\n  \/\/ The sampling port message data.\n  \/\/\/\n  \/\/ TODO: How do we handle differnet data types?  Possible options:\n  \/\/\n  \/\/   - HAMR could generate a dedicated struct for each data port type. In\n  \/\/     the long run this may be the best options since AADL can specify the\n  \/\/     message type.\n  \/\/\n  \/\/   - Generalize this struct with some C wizardry. Would it help to split\n  \/\/     this into two data parts, one for the data and one for the sequence\n  \/\/     number?\n  \/\/\n  int64_t data;\n\n  \/\/ Sequence number incremented by the writer every time the sampling port is\n  \/\/ written. Read by the reciever to detect dropped messages and incoherant\n  \/\/ message reads.  An incoherant message is one that is formed of parts of\n  \/\/ more than one message.  An incoherent message can occure when writing\n  \/\/ happens durring read. If the component runs long enough, this counter\n  \/\/ will wrap back to zero.  This causes no problems unless the reciever is\n  \/\/ delayed for the wrap time. In that case the reciever may not detect\n  \/\/ dropped or incoherent messags. But if the reciver is delayed for that\n  \/\/ long the system is probably in a very bad state. Also see DIRTY_SEQ_NUM\n  \/\/ above.\n  \/\/\n  \/\/ TODO: Currently using ggc builtin _Atomic. Would like to use c11 std, but\n  \/\/ have not figured out how to do this int the seL4 cmake build environment.\n  _Atomic seqNum_t seqNum;  \n\n} sp_int64_t_t;\n\nvoid init_sp_int64_t(sp_int64_t_t *port, seqNum_t *seqNum);\n\nbool write_sp_int64_t(sp_int64_t_t *port, const int64_t *data, seqNum_t *seqNum);\n\nbool read_sp_int64_t(sp_int64_t_t *port, int64_t *data, seqNum_t *seqNum);\n\n#endif\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_int64_t.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sel4\/sel4.h>\n#include <utils\/util.h>\n#include <sel4utils\/util.h>\n#include <sel4utils\/helpers.h>\n\n#include \"sp_int64_t.h\"\n\nvoid init_sp_int64_t(sp_int64_t_t *port, seqNum_t *seqNum) {\n  *seqNum = 0; \/\/ First message sequence number will be 1.\n  port->seqNum = DIRTY_SEQ_NUM;\n}\n\n\/\/ Write message to a sampling port (data type: int)\n\/\/\n\/\/ Returns true when sucessful. Otherwise returns false. Currently there is no\n\/\/ way to fail and true is alwasy returned. But this may change in the\n\/\/ future. seqNum is incremented when a message is succefully sent. seqNum\n\/\/ should not be modified otherwise.\n\/\/\n\/\/ TODO: Encapsulate this better. seqNum state should be maintained internaly. Possible solutions:\n\/\/\n\/\/    - Allow write to have read access to dataport. Then seqNum is simply in the data port.\n\/\/\n\/\/    - Create a wrapper struct.\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_RELEASE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool write_sp_int64_t(sp_int64_t_t *port, const int64_t *data, seqNum_t *seqNum) {\n  \/\/ Mark the message dirty BEFORE we start writting.\n  port->seqNum = DIRTY_SEQ_NUM;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Write the data\n  port->data = *data;\n  \/\/ Increment the sequence number. We are the only writer of seqNum, so\n  \/\/ increment does not have to be atomic.\n  *seqNum = (*seqNum + 1) % DIRTY_SEQ_NUM;\n  port->seqNum = *seqNum;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE continuing\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Can't fail for now.\n  return true;\n}\n\n\/\/ Read a message from a sampling port (data type: int)\n\/\/\n\/\/ Return true upon successful read. Data is updated with the read\n\/\/ message. The sequence number of the message is also returned. The messaage,\n\/\/ might be tha same previously read. The sequences number can be used to\n\/\/ detect rereading the same message or dropped messages.\n\/\/\n\/\/ Return false if we fail to read a message. For now the only way to fail is\n\/\/ when we detect the possibliliy of a write durring read. In this case data\n\/\/ may be incoherent and should not be used. Sequence number is set to\n\/\/ DIRTY_SEQ_NUM;\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_ACQUIRE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool read_sp_int64_t(sp_int64_t_t *port, int64_t *data, seqNum_t *seqNum) {\n  seqNum_t newSeqNum = port->seqNum;\n  \/\/ Acquire memory fence - Read seqNum BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  *data = port->data;\n  \/\/ Acquire memory fence - Read data BEFORE reading seqNum again \n  \/\/atomic_thread_fence(memory_order_acquire);\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  \/\/ The following logic will NOT catch case where the writer wrapped\n  \/\/ sequence numbers since our last read. For this to happen, this reader\n  \/\/ would have to be delayed for the entire time to wrap. \n  if (newSeqNum != DIRTY_SEQ_NUM && newSeqNum == port->seqNum) {\n    \/\/ Message data is good.  Write did not occure durring read. \n    *seqNum = newSeqNum;\n    return true;\n  } else {\n    \/\/ Writer may have updated data while we were reading. Do not use possibly incoherent data.\n    *seqNum = DIRTY_SEQ_NUM;\n    return false;\n  }\n}\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_SW__Command_Impl.h", { "type" : "Resource","content" : "#ifndef MACRO_NAME\n#define MACRO_NAME\n\n#include \"seqNum.h\"\n\n\/\/ Sampling port message with bool data\ntypedef struct sp_SW__Command_Impl {\n\n  \/\/ The sampling port message data.\n  \/\/\/\n  \/\/ TODO: How do we handle differnet data types?  Possible options:\n  \/\/\n  \/\/   - HAMR could generate a dedicated struct for each data port type. In\n  \/\/     the long run this may be the best options since AADL can specify the\n  \/\/     message type.\n  \/\/\n  \/\/   - Generalize this struct with some C wizardry. Would it help to split\n  \/\/     this into two data parts, one for the data and one for the sequence\n  \/\/     number?\n  \/\/\n  SW__Command_Impl data;\n\n  \/\/ Sequence number incremented by the writer every time the sampling port is\n  \/\/ written. Read by the reciever to detect dropped messages and incoherant\n  \/\/ message reads.  An incoherant message is one that is formed of parts of\n  \/\/ more than one message.  An incoherent message can occure when writing\n  \/\/ happens durring read. If the component runs long enough, this counter\n  \/\/ will wrap back to zero.  This causes no problems unless the reciever is\n  \/\/ delayed for the wrap time. In that case the reciever may not detect\n  \/\/ dropped or incoherent messags. But if the reciver is delayed for that\n  \/\/ long the system is probably in a very bad state. Also see DIRTY_SEQ_NUM\n  \/\/ above.\n  \/\/\n  \/\/ TODO: Currently using ggc builtin _Atomic. Would like to use c11 std, but\n  \/\/ have not figured out how to do this int the seL4 cmake build environment.\n  _Atomic seqNum_t seqNum;  \n\n} sp_SW__Command_Impl_t;\n\nvoid init_sp_SW__Command_Impl(sp_SW__Command_Impl_t *port, seqNum_t *seqNum);\n\nbool write_sp_SW__Command_Impl(sp_SW__Command_Impl_t *port, const SW__Command_Impl *data, seqNum_t *seqNum);\n\nbool read_sp_SW__Command_Impl(sp_SW__Command_Impl_t *port, SW__Command_Impl *data, seqNum_t *seqNum);\n\n#endif\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_SW__Command_Impl.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sel4\/sel4.h>\n#include <utils\/util.h>\n#include <sel4utils\/util.h>\n#include <sel4utils\/helpers.h>\n\n#include \"sp_SW__Command_Impl.h\"\n\nvoid init_sp_SW__Command_Impl(sp_SW__Command_Impl_t *port, seqNum_t *seqNum) {\n  *seqNum = 0; \/\/ First message sequence number will be 1.\n  port->seqNum = DIRTY_SEQ_NUM;\n}\n\n\/\/ Write message to a sampling port (data type: int)\n\/\/\n\/\/ Returns true when sucessful. Otherwise returns false. Currently there is no\n\/\/ way to fail and true is alwasy returned. But this may change in the\n\/\/ future. seqNum is incremented when a message is succefully sent. seqNum\n\/\/ should not be modified otherwise.\n\/\/\n\/\/ TODO: Encapsulate this better. seqNum state should be maintained internaly. Possible solutions:\n\/\/\n\/\/    - Allow write to have read access to dataport. Then seqNum is simply in the data port.\n\/\/\n\/\/    - Create a wrapper struct.\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_RELEASE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool write_sp_SW__Command_Impl(sp_SW__Command_Impl_t *port, const SW__Command_Impl *data, seqNum_t *seqNum) {\n  \/\/ Mark the message dirty BEFORE we start writting.\n  port->seqNum = DIRTY_SEQ_NUM;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Write the data\n  port->data = *data;\n  \/\/ Increment the sequence number. We are the only writer of seqNum, so\n  \/\/ increment does not have to be atomic.\n  *seqNum = (*seqNum + 1) % DIRTY_SEQ_NUM;\n  port->seqNum = *seqNum;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE continuing\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Can't fail for now.\n  return true;\n}\n\n\/\/ Read a message from a sampling port (data type: int)\n\/\/\n\/\/ Return true upon successful read. Data is updated with the read\n\/\/ message. The sequence number of the message is also returned. The messaage,\n\/\/ might be tha same previously read. The sequences number can be used to\n\/\/ detect rereading the same message or dropped messages.\n\/\/\n\/\/ Return false if we fail to read a message. For now the only way to fail is\n\/\/ when we detect the possibliliy of a write durring read. In this case data\n\/\/ may be incoherent and should not be used. Sequence number is set to\n\/\/ DIRTY_SEQ_NUM;\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_ACQUIRE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool read_sp_SW__Command_Impl(sp_SW__Command_Impl_t *port, SW__Command_Impl *data, seqNum_t *seqNum) {\n  seqNum_t newSeqNum = port->seqNum;\n  \/\/ Acquire memory fence - Read seqNum BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  *data = port->data;\n  \/\/ Acquire memory fence - Read data BEFORE reading seqNum again \n  \/\/atomic_thread_fence(memory_order_acquire);\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  \/\/ The following logic will NOT catch case where the writer wrapped\n  \/\/ sequence numbers since our last read. For this to happen, this reader\n  \/\/ would have to be delayed for the entire time to wrap. \n  if (newSeqNum != DIRTY_SEQ_NUM && newSeqNum == port->seqNum) {\n    \/\/ Message data is good.  Write did not occure durring read. \n    *seqNum = newSeqNum;\n    return true;\n  } else {\n    \/\/ Writer may have updated data while we were reading. Do not use possibly incoherent data.\n    *seqNum = DIRTY_SEQ_NUM;\n    return false;\n  }\n}\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_SW__Mission.h", { "type" : "Resource","content" : "#ifndef MACRO_NAME\n#define MACRO_NAME\n\n#include \"seqNum.h\"\n\n\/\/ Sampling port message with bool data\ntypedef struct sp_SW__Mission {\n\n  \/\/ The sampling port message data.\n  \/\/\/\n  \/\/ TODO: How do we handle differnet data types?  Possible options:\n  \/\/\n  \/\/   - HAMR could generate a dedicated struct for each data port type. In\n  \/\/     the long run this may be the best options since AADL can specify the\n  \/\/     message type.\n  \/\/\n  \/\/   - Generalize this struct with some C wizardry. Would it help to split\n  \/\/     this into two data parts, one for the data and one for the sequence\n  \/\/     number?\n  \/\/\n  SW__Mission data;\n\n  \/\/ Sequence number incremented by the writer every time the sampling port is\n  \/\/ written. Read by the reciever to detect dropped messages and incoherant\n  \/\/ message reads.  An incoherant message is one that is formed of parts of\n  \/\/ more than one message.  An incoherent message can occure when writing\n  \/\/ happens durring read. If the component runs long enough, this counter\n  \/\/ will wrap back to zero.  This causes no problems unless the reciever is\n  \/\/ delayed for the wrap time. In that case the reciever may not detect\n  \/\/ dropped or incoherent messags. But if the reciver is delayed for that\n  \/\/ long the system is probably in a very bad state. Also see DIRTY_SEQ_NUM\n  \/\/ above.\n  \/\/\n  \/\/ TODO: Currently using ggc builtin _Atomic. Would like to use c11 std, but\n  \/\/ have not figured out how to do this int the seL4 cmake build environment.\n  _Atomic seqNum_t seqNum;  \n\n} sp_SW__Mission_t;\n\nvoid init_sp_SW__Mission(sp_SW__Mission_t *port, seqNum_t *seqNum);\n\nbool write_sp_SW__Mission(sp_SW__Mission_t *port, const SW__Mission *data, seqNum_t *seqNum);\n\nbool read_sp_SW__Mission(sp_SW__Mission_t *port, SW__Mission *data, seqNum_t *seqNum);\n\n#endif\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_SW__Mission.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sel4\/sel4.h>\n#include <utils\/util.h>\n#include <sel4utils\/util.h>\n#include <sel4utils\/helpers.h>\n\n#include \"sp_SW__Mission.h\"\n\nvoid init_sp_SW__Mission(sp_SW__Mission_t *port, seqNum_t *seqNum) {\n  *seqNum = 0; \/\/ First message sequence number will be 1.\n  port->seqNum = DIRTY_SEQ_NUM;\n}\n\n\/\/ Write message to a sampling port (data type: int)\n\/\/\n\/\/ Returns true when sucessful. Otherwise returns false. Currently there is no\n\/\/ way to fail and true is alwasy returned. But this may change in the\n\/\/ future. seqNum is incremented when a message is succefully sent. seqNum\n\/\/ should not be modified otherwise.\n\/\/\n\/\/ TODO: Encapsulate this better. seqNum state should be maintained internaly. Possible solutions:\n\/\/\n\/\/    - Allow write to have read access to dataport. Then seqNum is simply in the data port.\n\/\/\n\/\/    - Create a wrapper struct.\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_RELEASE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool write_sp_SW__Mission(sp_SW__Mission_t *port, const SW__Mission *data, seqNum_t *seqNum) {\n  \/\/ Mark the message dirty BEFORE we start writting.\n  port->seqNum = DIRTY_SEQ_NUM;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Write the data\n  port->data = *data;\n  \/\/ Increment the sequence number. We are the only writer of seqNum, so\n  \/\/ increment does not have to be atomic.\n  *seqNum = (*seqNum + 1) % DIRTY_SEQ_NUM;\n  port->seqNum = *seqNum;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE continuing\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Can't fail for now.\n  return true;\n}\n\n\/\/ Read a message from a sampling port (data type: int)\n\/\/\n\/\/ Return true upon successful read. Data is updated with the read\n\/\/ message. The sequence number of the message is also returned. The messaage,\n\/\/ might be tha same previously read. The sequences number can be used to\n\/\/ detect rereading the same message or dropped messages.\n\/\/\n\/\/ Return false if we fail to read a message. For now the only way to fail is\n\/\/ when we detect the possibliliy of a write durring read. In this case data\n\/\/ may be incoherent and should not be used. Sequence number is set to\n\/\/ DIRTY_SEQ_NUM;\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_ACQUIRE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool read_sp_SW__Mission(sp_SW__Mission_t *port, SW__Mission *data, seqNum_t *seqNum) {\n  seqNum_t newSeqNum = port->seqNum;\n  \/\/ Acquire memory fence - Read seqNum BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  *data = port->data;\n  \/\/ Acquire memory fence - Read data BEFORE reading seqNum again \n  \/\/atomic_thread_fence(memory_order_acquire);\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  \/\/ The following logic will NOT catch case where the writer wrapped\n  \/\/ sequence numbers since our last read. For this to happen, this reader\n  \/\/ would have to be delayed for the entire time to wrap. \n  if (newSeqNum != DIRTY_SEQ_NUM && newSeqNum == port->seqNum) {\n    \/\/ Message data is good.  Write did not occure durring read. \n    *seqNum = newSeqNum;\n    return true;\n  } else {\n    \/\/ Writer may have updated data while we were reading. Do not use possibly incoherent data.\n    *seqNum = DIRTY_SEQ_NUM;\n    return false;\n  }\n}\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_bool.h", { "type" : "Resource","content" : "#ifndef MACRO_NAME\n#define MACRO_NAME\n\n#include \"seqNum.h\"\n\n\/\/ Sampling port message with bool data\ntypedef struct sp_bool {\n\n  \/\/ The sampling port message data.\n  \/\/\/\n  \/\/ TODO: How do we handle differnet data types?  Possible options:\n  \/\/\n  \/\/   - HAMR could generate a dedicated struct for each data port type. In\n  \/\/     the long run this may be the best options since AADL can specify the\n  \/\/     message type.\n  \/\/\n  \/\/   - Generalize this struct with some C wizardry. Would it help to split\n  \/\/     this into two data parts, one for the data and one for the sequence\n  \/\/     number?\n  \/\/\n  bool data;\n\n  \/\/ Sequence number incremented by the writer every time the sampling port is\n  \/\/ written. Read by the reciever to detect dropped messages and incoherant\n  \/\/ message reads.  An incoherant message is one that is formed of parts of\n  \/\/ more than one message.  An incoherent message can occure when writing\n  \/\/ happens durring read. If the component runs long enough, this counter\n  \/\/ will wrap back to zero.  This causes no problems unless the reciever is\n  \/\/ delayed for the wrap time. In that case the reciever may not detect\n  \/\/ dropped or incoherent messags. But if the reciver is delayed for that\n  \/\/ long the system is probably in a very bad state. Also see DIRTY_SEQ_NUM\n  \/\/ above.\n  \/\/\n  \/\/ TODO: Currently using ggc builtin _Atomic. Would like to use c11 std, but\n  \/\/ have not figured out how to do this int the seL4 cmake build environment.\n  _Atomic seqNum_t seqNum;  \n\n} sp_bool_t;\n\nvoid init_sp_bool(sp_bool_t *port, seqNum_t *seqNum);\n\nbool write_sp_bool(sp_bool_t *port, const bool *data, seqNum_t *seqNum);\n\nbool read_sp_bool(sp_bool_t *port, bool *data, seqNum_t *seqNum);\n\n#endif\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_bool.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sel4\/sel4.h>\n#include <utils\/util.h>\n#include <sel4utils\/util.h>\n#include <sel4utils\/helpers.h>\n\n#include \"sp_bool.h\"\n\nvoid init_sp_bool(sp_bool_t *port, seqNum_t *seqNum) {\n  *seqNum = 0; \/\/ First message sequence number will be 1.\n  port->seqNum = DIRTY_SEQ_NUM;\n}\n\n\/\/ Write message to a sampling port (data type: int)\n\/\/\n\/\/ Returns true when sucessful. Otherwise returns false. Currently there is no\n\/\/ way to fail and true is alwasy returned. But this may change in the\n\/\/ future. seqNum is incremented when a message is succefully sent. seqNum\n\/\/ should not be modified otherwise.\n\/\/\n\/\/ TODO: Encapsulate this better. seqNum state should be maintained internaly. Possible solutions:\n\/\/\n\/\/    - Allow write to have read access to dataport. Then seqNum is simply in the data port.\n\/\/\n\/\/    - Create a wrapper struct.\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_RELEASE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool write_sp_bool(sp_bool_t *port, const bool *data, seqNum_t *seqNum) {\n  \/\/ Mark the message dirty BEFORE we start writting.\n  port->seqNum = DIRTY_SEQ_NUM;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Write the data\n  port->data = *data;\n  \/\/ Increment the sequence number. We are the only writer of seqNum, so\n  \/\/ increment does not have to be atomic.\n  *seqNum = (*seqNum + 1) % DIRTY_SEQ_NUM;\n  port->seqNum = *seqNum;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE continuing\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Can't fail for now.\n  return true;\n}\n\n\/\/ Read a message from a sampling port (data type: int)\n\/\/\n\/\/ Return true upon successful read. Data is updated with the read\n\/\/ message. The sequence number of the message is also returned. The messaage,\n\/\/ might be tha same previously read. The sequences number can be used to\n\/\/ detect rereading the same message or dropped messages.\n\/\/\n\/\/ Return false if we fail to read a message. For now the only way to fail is\n\/\/ when we detect the possibliliy of a write durring read. In this case data\n\/\/ may be incoherent and should not be used. Sequence number is set to\n\/\/ DIRTY_SEQ_NUM;\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_ACQUIRE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool read_sp_bool(sp_bool_t *port, bool *data, seqNum_t *seqNum) {\n  seqNum_t newSeqNum = port->seqNum;\n  \/\/ Acquire memory fence - Read seqNum BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  *data = port->data;\n  \/\/ Acquire memory fence - Read data BEFORE reading seqNum again \n  \/\/atomic_thread_fence(memory_order_acquire);\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  \/\/ The following logic will NOT catch case where the writer wrapped\n  \/\/ sequence numbers since our last read. For this to happen, this reader\n  \/\/ would have to be delayed for the entire time to wrap. \n  if (newSeqNum != DIRTY_SEQ_NUM && newSeqNum == port->seqNum) {\n    \/\/ Message data is good.  Write did not occure durring read. \n    *seqNum = newSeqNum;\n    return true;\n  } else {\n    \/\/ Writer may have updated data while we were reading. Do not use possibly incoherent data.\n    *seqNum = DIRTY_SEQ_NUM;\n    return false;\n  }\n}\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_SW__MissionWindow.h", { "type" : "Resource","content" : "#ifndef MACRO_NAME\n#define MACRO_NAME\n\n#include \"seqNum.h\"\n\n\/\/ Sampling port message with bool data\ntypedef struct sp_SW__MissionWindow {\n\n  \/\/ The sampling port message data.\n  \/\/\/\n  \/\/ TODO: How do we handle differnet data types?  Possible options:\n  \/\/\n  \/\/   - HAMR could generate a dedicated struct for each data port type. In\n  \/\/     the long run this may be the best options since AADL can specify the\n  \/\/     message type.\n  \/\/\n  \/\/   - Generalize this struct with some C wizardry. Would it help to split\n  \/\/     this into two data parts, one for the data and one for the sequence\n  \/\/     number?\n  \/\/\n  SW__MissionWindow data;\n\n  \/\/ Sequence number incremented by the writer every time the sampling port is\n  \/\/ written. Read by the reciever to detect dropped messages and incoherant\n  \/\/ message reads.  An incoherant message is one that is formed of parts of\n  \/\/ more than one message.  An incoherent message can occure when writing\n  \/\/ happens durring read. If the component runs long enough, this counter\n  \/\/ will wrap back to zero.  This causes no problems unless the reciever is\n  \/\/ delayed for the wrap time. In that case the reciever may not detect\n  \/\/ dropped or incoherent messags. But if the reciver is delayed for that\n  \/\/ long the system is probably in a very bad state. Also see DIRTY_SEQ_NUM\n  \/\/ above.\n  \/\/\n  \/\/ TODO: Currently using ggc builtin _Atomic. Would like to use c11 std, but\n  \/\/ have not figured out how to do this int the seL4 cmake build environment.\n  _Atomic seqNum_t seqNum;  \n\n} sp_SW__MissionWindow_t;\n\nvoid init_sp_SW__MissionWindow(sp_SW__MissionWindow_t *port, seqNum_t *seqNum);\n\nbool write_sp_SW__MissionWindow(sp_SW__MissionWindow_t *port, const SW__MissionWindow *data, seqNum_t *seqNum);\n\nbool read_sp_SW__MissionWindow(sp_SW__MissionWindow_t *port, SW__MissionWindow *data, seqNum_t *seqNum);\n\n#endif\n"}],[ "uav_alt_domains--SeL4_Only\/sampling_ports\/sp_SW__MissionWindow.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sel4\/sel4.h>\n#include <utils\/util.h>\n#include <sel4utils\/util.h>\n#include <sel4utils\/helpers.h>\n\n#include \"sp_SW__MissionWindow.h\"\n\nvoid init_sp_SW__MissionWindow(sp_SW__MissionWindow_t *port, seqNum_t *seqNum) {\n  *seqNum = 0; \/\/ First message sequence number will be 1.\n  port->seqNum = DIRTY_SEQ_NUM;\n}\n\n\/\/ Write message to a sampling port (data type: int)\n\/\/\n\/\/ Returns true when sucessful. Otherwise returns false. Currently there is no\n\/\/ way to fail and true is alwasy returned. But this may change in the\n\/\/ future. seqNum is incremented when a message is succefully sent. seqNum\n\/\/ should not be modified otherwise.\n\/\/\n\/\/ TODO: Encapsulate this better. seqNum state should be maintained internaly. Possible solutions:\n\/\/\n\/\/    - Allow write to have read access to dataport. Then seqNum is simply in the data port.\n\/\/\n\/\/    - Create a wrapper struct.\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_RELEASE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool write_sp_SW__MissionWindow(sp_SW__MissionWindow_t *port, const SW__MissionWindow *data, seqNum_t *seqNum) {\n  \/\/ Mark the message dirty BEFORE we start writting.\n  port->seqNum = DIRTY_SEQ_NUM;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Write the data\n  port->data = *data;\n  \/\/ Increment the sequence number. We are the only writer of seqNum, so\n  \/\/ increment does not have to be atomic.\n  *seqNum = (*seqNum + 1) % DIRTY_SEQ_NUM;\n  port->seqNum = *seqNum;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE continuing\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Can't fail for now.\n  return true;\n}\n\n\/\/ Read a message from a sampling port (data type: int)\n\/\/\n\/\/ Return true upon successful read. Data is updated with the read\n\/\/ message. The sequence number of the message is also returned. The messaage,\n\/\/ might be tha same previously read. The sequences number can be used to\n\/\/ detect rereading the same message or dropped messages.\n\/\/\n\/\/ Return false if we fail to read a message. For now the only way to fail is\n\/\/ when we detect the possibliliy of a write durring read. In this case data\n\/\/ may be incoherent and should not be used. Sequence number is set to\n\/\/ DIRTY_SEQ_NUM;\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_ACQUIRE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool read_sp_SW__MissionWindow(sp_SW__MissionWindow_t *port, SW__MissionWindow *data, seqNum_t *seqNum) {\n  seqNum_t newSeqNum = port->seqNum;\n  \/\/ Acquire memory fence - Read seqNum BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  *data = port->data;\n  \/\/ Acquire memory fence - Read data BEFORE reading seqNum again \n  \/\/atomic_thread_fence(memory_order_acquire);\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  \/\/ The following logic will NOT catch case where the writer wrapped\n  \/\/ sequence numbers since our last read. For this to happen, this reader\n  \/\/ would have to be delayed for the entire time to wrap. \n  if (newSeqNum != DIRTY_SEQ_NUM && newSeqNum == port->seqNum) {\n    \/\/ Message data is good.  Write did not occure durring read. \n    *seqNum = newSeqNum;\n    return true;\n  } else {\n    \/\/ Writer may have updated data while we were reading. Do not use possibly incoherent data.\n    *seqNum = DIRTY_SEQ_NUM;\n    return false;\n  }\n}\n"}],[ "uav_alt_domains--SeL4_Only\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (PROC_SW C)\n\nincludeGlobalComponents()\n\nDeclareCAmkESComponent(RadioDriver_Impl\n  SOURCES components\/RadioDriver_Impl\/\/src\/radiodriver.c components\/RadioDriver_Impl\/src\/sb_RadioDriver_Impl.c sampling_ports\/sp_SW__Command_Impl.c\n  INCLUDES components\/RadioDriver_Impl\/includes\/ sampling_ports includes\n\n)\n\nDeclareCAmkESComponent(FlightPlanner_Impl\n  SOURCES components\/FlightPlanner_Impl\/\/src\/flightplanner.c components\/FlightPlanner_Impl\/src\/sb_FlightPlanner_Impl.c sampling_ports\/sp_SW__Mission.c sampling_ports\/sp_bool.c sampling_ports\/sp_SW__Command_Impl.c\n  INCLUDES components\/FlightPlanner_Impl\/includes\/ sampling_ports sampling_ports sampling_ports includes\n\n)\n\nDeclareCAmkESComponent(WaypointManager_Impl\n  SOURCES components\/WaypointManager_Impl\/\/src\/waypointmanager.c components\/WaypointManager_Impl\/src\/sb_WaypointManager_Impl.c sampling_ports\/sp_SW__Mission.c sampling_ports\/sp_bool.c sampling_ports\/sp_SW__MissionWindow.c sampling_ports\/sp_int64_t.c\n  INCLUDES components\/WaypointManager_Impl\/includes\/ sampling_ports sampling_ports sampling_ports sampling_ports includes\n\n)\n\nDeclareCAmkESComponent(UARTDriver_Impl\n  SOURCES components\/UARTDriver_Impl\/\/src\/uartdriver.c components\/UARTDriver_Impl\/src\/sb_UARTDriver_Impl.c sampling_ports\/sp_SW__MissionWindow.c sampling_ports\/sp_int64_t.c\n  INCLUDES components\/UARTDriver_Impl\/includes\/ sampling_ports sampling_ports includes\n\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  INCLUDES includes\n\n)\n\nDeclareCAmkESRootserver(PROC_SW.camkes)\n"}],[ "uav_alt_domains--SeL4_Only\/components\/RadioDriver_Impl\/src\/sb_RadioDriver_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_RadioDriver_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = sb_timer_time() \/ 1000LL;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nseqNum_t sb_recv_map_out_seqNum;\n\nbool sb_recv_map_out_write(const SW__Command_Impl * value) {\n  return write_sp_SW__Command_Impl(recv_map_out, value, &sb_recv_map_out_seqNum);\n}\n\n\/************************************************************************\n *  sb_entrypoint_RadioDriver_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_RadioDriver_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_RadioDriver_Impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/RadioDriver_Impl\/includes\/sb_RadioDriver_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_RadioDriver_Impl_types__H\n#define __sb_AADL_RadioDriver_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_recv_map_out_write(const SW__Command_Impl * value);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_RadioDriver_Impl_types__H\n"}],[ "uav_alt_domains--SeL4_Only\/components\/FlightPlanner_Impl\/src\/sb_FlightPlanner_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_FlightPlanner_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = sb_timer_time() \/ 1000LL;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nseqNum_t sb_recv_map_seqNum;\n\nseqNum_t sb_mission_rcv_seqNum;\n\nseqNum_t sb_flight_plan_seqNum;\n\nbool sb_flight_plan_write(const SW__Mission * value) {\n  return write_sp_SW__Mission(flight_plan, value, &sb_flight_plan_seqNum);\n}\n\nbool sb_mission_rcv_read(bool * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_bool(mission_rcv, value, &new_seqNum) ) {\n    sb_mission_rcv_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\nbool sb_recv_map_read(SW__Command_Impl * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_SW__Command_Impl(recv_map, value, &new_seqNum) ) {\n    sb_recv_map_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\n\/************************************************************************\n *  sb_entrypoint_FlightPlanner_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_FlightPlanner_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_FlightPlanner_Impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/FlightPlanner_Impl\/includes\/sb_FlightPlanner_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_FlightPlanner_Impl_types__H\n#define __sb_AADL_FlightPlanner_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_flight_plan_write(const SW__Mission * value);\n\nbool sb_mission_rcv_read(bool * value);\n\nbool sb_recv_map_read(SW__Command_Impl * value);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_FlightPlanner_Impl_types__H\n"}],[ "uav_alt_domains--SeL4_Only\/components\/WaypointManager_Impl\/src\/sb_WaypointManager_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_WaypointManager_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = sb_timer_time() \/ 1000LL;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nseqNum_t sb_tracking_id_seqNum;\n\nseqNum_t sb_mission_window_seqNum;\n\nseqNum_t sb_mission_rcv_seqNum;\n\nseqNum_t sb_flight_plan_seqNum;\n\nbool sb_flight_plan_read(SW__Mission * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_SW__Mission(flight_plan, value, &new_seqNum) ) {\n    sb_flight_plan_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\nbool sb_mission_rcv_write(const bool * value) {\n  return write_sp_bool(mission_rcv, value, &sb_mission_rcv_seqNum);\n}\n\nbool sb_mission_window_write(const SW__MissionWindow * value) {\n  return write_sp_SW__MissionWindow(mission_window, value, &sb_mission_window_seqNum);\n}\n\nbool sb_tracking_id_read(int64_t * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_int64_t(tracking_id, value, &new_seqNum) ) {\n    sb_tracking_id_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\n\/************************************************************************\n *  sb_entrypoint_WaypointManager_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_WaypointManager_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_WaypointManager_Impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/WaypointManager_Impl\/includes\/sb_WaypointManager_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_WaypointManager_Impl_types__H\n#define __sb_AADL_WaypointManager_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_flight_plan_read(SW__Mission * value);\n\nbool sb_mission_rcv_write(const bool * value);\n\nbool sb_mission_window_write(const SW__MissionWindow * value);\n\nbool sb_tracking_id_read(int64_t * value);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_WaypointManager_Impl_types__H\n"}],[ "uav_alt_domains--SeL4_Only\/components\/UARTDriver_Impl\/src\/sb_UARTDriver_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_UARTDriver_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = sb_timer_time() \/ 1000LL;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nseqNum_t sb_tracking_id_seqNum;\n\nseqNum_t sb_mission_window_seqNum;\n\nbool sb_mission_window_read(SW__MissionWindow * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_SW__MissionWindow(mission_window, value, &new_seqNum) ) {\n    sb_mission_window_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\nbool sb_tracking_id_write(const int64_t * value) {\n  return write_sp_int64_t(tracking_id, value, &sb_tracking_id_seqNum);\n}\n\n\/************************************************************************\n *  sb_entrypoint_UARTDriver_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_UARTDriver_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_UARTDriver_Impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/components\/UARTDriver_Impl\/includes\/sb_UARTDriver_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_UARTDriver_Impl_types__H\n#define __sb_AADL_UARTDriver_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_mission_window_read(SW__MissionWindow * value);\n\nbool sb_tracking_id_write(const int64_t * value);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_UARTDriver_Impl_types__H\n"}],[ "uav_alt_domains--SeL4_Only\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c", { "type" : "Resource","content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_RADIO_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_FPLN_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_WPM_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_UART_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n"}],[ "uav_alt_domains--SeL4_Only\/includes\/sb_PROC_HW_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_PROC_HW_types__H\n#define __SB_AADL_sb_PROC_HW_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef\n  struct MC__MISSING_TYPE_Impl {\n    int32_t MISSING;\n  } MC__MISSING_TYPE_Impl;\n\ntypedef\n  enum {ZigZag, StraightLine, Perimeter} SW__FlightPattern;\n\ntypedef\n  struct SW__Coordinate_Impl {\n    int32_t lat;\n    int32_t longitude;\n    int32_t alt;\n  } SW__Coordinate_Impl;\n\ntypedef SW__Coordinate_Impl SW__Map [4];\n\ntypedef\n  struct sb_SW__Map_container {\n    SW__Map f;\n  } sb_SW__Map_container;\n\ntypedef\n  struct SW__Command_Impl {\n    SW__Map Map;\n    SW__FlightPattern Pattern;\n    bool HMAC;\n  } SW__Command_Impl;\n\ntypedef SW__Coordinate_Impl SW__Mission [10];\n\ntypedef\n  struct sb_SW__Mission_container {\n    SW__Mission f;\n  } sb_SW__Mission_container;\n\ntypedef SW__Coordinate_Impl SW__MissionWindow [4];\n\ntypedef\n  struct sb_SW__MissionWindow_container {\n    SW__MissionWindow f;\n  } sb_SW__MissionWindow_container;\n\n#endif \/\/ __SB_AADL_sb_PROC_HW_types__H\n"}]]}}
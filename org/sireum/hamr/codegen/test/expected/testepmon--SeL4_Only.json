{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "testepmon--SeL4_Only\/components\/emitter_t_impl\/emitter_t_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t_1_Sender.idl4\";\n\ncomponent emitter_t_impl {\n  include <sb_proc_types.h>;\n  control;\n  uses sb_Monitor_int8_t_1_Sender sb_enq0;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testepmon--SeL4_Only\/components\/consumer_t_impl\/consumer_t_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t_1_Receiver.idl4\";\n\ncomponent consumer_t_impl {\n  include <sb_proc_types.h>;\n  control;\n  uses sb_Monitor_int8_t_1_Receiver sb_deq;\n  consumes ReceiveEvent sb_deq_notification;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testepmon--SeL4_Only\/components\/sb_Monitors\/sb_dest_deq_Monitor\/sb_dest_deq_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int8_t_1_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/sb_Monitor_int8_t_1_Sender.idl4\";\n\ncomponent sb_dest_deq_Monitor {\n\n  provides sb_Monitor_int8_t_1_Receiver mon_receive;\n  provides sb_Monitor_int8_t_1_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "testepmon--SeL4_Only\/testepmon.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport \"components\/emitter_t_impl\/emitter_t_impl.camkes\";\nimport \"components\/consumer_t_impl\/consumer_t_impl.camkes\";\nimport \"components\/sb_Monitors\/sb_dest_deq_Monitor\/sb_dest_deq_Monitor.camkes\";\n\nassembly {\n  composition {\n    component emitter_t_impl src;\n    component consumer_t_impl dest;\n    component sb_dest_deq_Monitor sb_dest_deq_monitor;\n\n    connection seL4RPCCall conn1(from src.sb_enq0, to sb_dest_deq_monitor.mon_send);\n    connection seL4RPCCall conn2(from dest.sb_deq, to sb_dest_deq_monitor.mon_receive);\n    connection seL4Notification conn3(from sb_dest_deq_monitor.monsig, to dest.sb_deq_notification);\n  }\n\n  configuration {\n  }\n}\n"}],[ "testepmon--SeL4_Only\/components\/emitter_t_impl\/\/src\/emitter.c", { "type" : "Resource","content" : "\/* testepmon\/components\/emitter\/src\/emitter.c *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_proc_types.h>\n#include <sb_emitter_t_impl.h>\n\nstatic int8_t _value;\n\nvoid testepmon_emitter_component_init(const int64_t *in_arg)\n{\n    printf(\"testepmon_emitter_component_init called\\n\");\n    _value = 0;\n}\n\n\/* control thread: keep calling enqueue for thing\n *\/\nvoid run_emitter(const int64_t *in_arg)\n{\n    if (sb_enq_enqueue( &_value ) ) {\n        printf(\"[source] Sent %d\\n\", _value);\n        _value = (_value + 1) % 500;\n    } else {\n        printf(\"[source] Unable to send\\n\");\n    }\n}\n"}],[ "testepmon--SeL4_Only\/components\/consumer_t_impl\/\/src\/consumer.c", { "type" : "Resource","content" : "\/* testepmon\/components\/consumer\/src\/consumer *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_proc_types.h>\n#include <sb_consumer_t_impl.h>\n\nvoid testepmon_consumer_component_init(const int64_t *in_arg)\n{\n    printf(\"testepmon_consumer_component_init called\\n\");\n}\n\n\n\/* Handle monsig notification: there is QueuedData\n *\/\nvoid testepmon_consumer_s_event_handler(const int8_t * in_arg)\n{\n    \/* keep dequeuing until no more things can be had\n     *\/\n    int8_t value;\n\n    if (sb_deq_dequeue(&value)) {\n        printf(\"[destination] value {%d}\\n\", value);\n    } else {\n        printf(\"[destination] no value consumed.\\n\");\n    }\n}\n"}],[ "testepmon--SeL4_Only\/interfaces\/sb_Monitor_int8_t_1_Receiver.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int8_t_1_Receiver {\n  include <sb_proc_types.h>;\n  bool dequeue(out int8_t m);\n};"}],[ "testepmon--SeL4_Only\/interfaces\/sb_Monitor_int8_t_1_Sender.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int8_t_1_Sender {\n  include <sb_proc_types.h>;\n  bool enqueue(refin int8_t m);\n};"}],[ "testepmon--SeL4_Only\/components\/sb_Monitors\/sb_dest_deq_Monitor\/src\/sb_dest_deq_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n#include <camkes.h>\n#include <sb_proc_types.h>\n#include \"..\/includes\/sb_dest_deq_Monitor.h\"\n\nstruct queue {\n    int head;\n    int tail;\n    int len;\n    int8_t elt[1];\n} q = {.head=0, .tail=0, .len=0};\n\nstatic bool is_full(void) {\n  return q.len == 1;\n}\n\nstatic bool is_empty(void) {\n  return q.len == 0;\n}\n\nbool mon_receive_dequeue(int8_t * m) {\n  if (is_empty()) {\n    return false;\n  } else {\n    m_lock();\n    *m = q.elt[q.tail];\n    q.tail = (q.tail + 1) % 1;\n    q.len--;\n    m_unlock();\n    return true;\n  }\n}\n\nbool mon_send_enqueue(const int8_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    m_lock();\n    q.elt[q.head] = *m;\n    q.head = (q.head + 1) % 1;\n    q.len++;\n    m_unlock();\n    monsig_emit();    \n    return true;\n  }\n}\n"}],[ "testepmon--SeL4_Only\/components\/sb_Monitors\/sb_dest_deq_Monitor\/includes\/sb_dest_deq_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_dest_deq_Monitor_H__\n#define __sb_dest_deq_Monitor_H__\n\n#endif \/\/ __sb_dest_deq_Monitor_H__\n"}],[ "testepmon--SeL4_Only\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (testepmon C)\n\nDeclareCAmkESComponent(emitter_t_impl\n  SOURCES components\/emitter_t_impl\/\/src\/emitter.c components\/emitter_t_impl\/src\/sb_emitter_t_impl.c\n  INCLUDES components\/emitter_t_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_t_impl\n  SOURCES components\/consumer_t_impl\/\/src\/consumer.c components\/consumer_t_impl\/src\/sb_consumer_t_impl.c\n  INCLUDES components\/consumer_t_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_dest_deq_Monitor\n  SOURCES components\/sb_Monitors\/sb_dest_deq_Monitor\/src\/sb_dest_deq_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_dest_deq_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(testepmon.camkes)\n"}],[ "testepmon--SeL4_Only\/components\/emitter_t_impl\/src\/sb_emitter_t_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_emitter_t_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_enq_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_enq_enqueue(const int8_t * sb_enq){\n  bool sb_result = true;\n  sb_result &= sb_enq0_enqueue((int8_t *) sb_enq);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_emitter_t_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_t_impl_initializer(const int64_t * in_arg) {\n  testepmon_emitter_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_t_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "testepmon--SeL4_Only\/components\/emitter_t_impl\/includes\/sb_emitter_t_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_emitter_t_impl_types__H\n#define __sb_AADL_emitter_t_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_enq_enqueue(const int8_t * sb_enq);\n\nvoid testepmon_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_emitter_t_impl_types__H\n"}],[ "testepmon--SeL4_Only\/components\/consumer_t_impl\/src\/sb_consumer_t_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_t_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic void sb_deq_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypointsb_consumer_t_impl_deq:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_consumer_t_impl_deq(const int8_t * in_arg) {\n  testepmon_consumer_s_event_handler((int8_t *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_t_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_t_impl_initializer(const int64_t * in_arg) {\n  testepmon_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  int8_t sb_deq;\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_t_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    while (sb_deq_dequeue((int8_t *) &sb_deq)) {\n      sb_entrypointsb_consumer_t_impl_deq(&sb_deq);\n    }\n  }\n  return 0;\n}\n"}],[ "testepmon--SeL4_Only\/components\/consumer_t_impl\/includes\/sb_consumer_t_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_t_impl_types__H\n#define __sb_AADL_consumer_t_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_deq_dequeue(int8_t * sb_deq);\n\nvoid testepmon_consumer_s_event_handler(const int8_t * in_arg);\n\nvoid testepmon_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_t_impl_types__H\n"}],[ "testepmon--SeL4_Only\/includes\/sb_proc_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_proc_types__H\n#define __SB_AADL_sb_proc_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_proc_types__H\n"}]]}}
{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "testshare--SeL4_TB\/components\/publisher_impl\/publisher_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_testshare__Thing_t_impl_shared_var.idl4\";\n\ncomponent publisher_impl {\n  include <sb_proc_types.h>;\n  control;\n  dataport testshare__Thing_t_impl b1;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testshare--SeL4_TB\/components\/subscriber_impl\/subscriber_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_testshare__Thing_t_impl_shared_var.idl4\";\n\ncomponent subscriber_impl {\n  include <sb_proc_types.h>;\n  control;\n  dataport testshare__Thing_t_impl b2;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testshare--SeL4_TB\/testshare.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport \"components\/publisher_impl\/publisher_impl.camkes\";\nimport \"components\/subscriber_impl\/subscriber_impl.camkes\";\n\nassembly {\n  composition {\n    component publisher_impl publisher_inst;\n    component subscriber_impl subscriber_inst;\n\n    connection seL4SharedData conn1(from subscriber_inst.b2, to publisher_inst.b1);\n  }\n\n  configuration {\n  }\n}\n"}],[ "testshare--SeL4_TB\/interfaces\/sb_testshare__Thing_t_impl_shared_var.idl4", { "type" : "Resource","content" : "procedure sb_testshare__Thing_t_impl_shared_var {\n  include <sb_proc_types.h>;\n  void read_testshare__Thing_t_impl(out testshare__Thing_t_impl arg);\n  void write_testshare__Thing_t_impl(refin testshare__Thing_t_impl arg);\n};"}],[ "testshare--SeL4_TB\/components\/publisher_impl\/\/src\/publisher.c", { "type" : "Resource","content" : "\/* testshare\/components\/publisher\/src\/publisher.c *\/\n\n#include <stdio.h>\n#include <camkes.h>\n#include <sb_proc_types.h>\n#include <sb_publisher_impl.h>\n\nstatic int8_t _value;\n\nvoid testshare_publisher_component_init(const int64_t *arg) {\n  printf(\"testshare_publisher_component_init called\\n\");\n  _value = 0;\n}\n\nvoid run_publisher(const int64_t *in_arg)\n{\n    printf(\"[publisher] starting\\n\");\n    b1->lepht = _value;\n    b1->right = _value + 1;\n    b1->top   = _value + 2;\n    b1->bottom = _value + 3;\n    b1_release(); \/* release memory fence *\/\n    printf(\"[publisher] wrote b1={%d,%d,%d,%d}\\n\",\n           b1->lepht, b1->right, b1->top, b1->bottom );\n    _value = (_value + 4) % 500;\n}\n"}],[ "testshare--SeL4_TB\/components\/subscriber_impl\/\/src\/subscriber.c", { "type" : "Resource","content" : "\/* testshare\/components\/subscriber\/src\/subscriber.c *\/\n\n#include <stdio.h>\n#include <camkes.h>\n#include <sb_subscriber_impl.h>\n#include <sb_proc_types.h>\n\nvoid testshare_subscriber_component_init(const int64_t *arg) {\n    printf(\"testshare_subscriber_component_init called\\n\");\n    printf(\"[subscriber] starting--poll for nonzero thing_t\\n\");\n}\n\nvoid run_subscriber(const int64_t *arg)\n{\n    b2_acquire();  \/* acquire memory fence *\/\n    if (b2->bottom) {\n        printf(\"[subscriber] b2={%d,%d,%d,%d}\\n\",\n               b2->lepht, b2->right, b2->top, b2->bottom );\n    }\n}\n"}],[ "testshare--SeL4_TB\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (testshare C)\n\nadd_definitions(-DCAMKES)\n\nDeclareCAmkESComponent(publisher_impl\n  SOURCES components\/publisher_impl\/\/src\/publisher.c components\/publisher_impl\/src\/sb_publisher_impl.c\n  INCLUDES components\/publisher_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(subscriber_impl\n  SOURCES components\/subscriber_impl\/\/src\/subscriber.c components\/subscriber_impl\/src\/sb_subscriber_impl.c\n  INCLUDES components\/subscriber_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(testshare.camkes)\n"}],[ "testshare--SeL4_TB\/components\/publisher_impl\/src\/sb_publisher_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_publisher_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *  sb_entrypoint_publisher_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_publisher_impl_initializer(const int64_t * in_arg) {\n  testshare_publisher_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_publisher_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "testshare--SeL4_TB\/components\/publisher_impl\/includes\/sb_publisher_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_publisher_impl_types__H\n#define __sb_AADL_publisher_impl_types__H\n\n#include <sb_proc_types.h>\n\nvoid testshare_publisher_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_publisher_impl_types__H\n"}],[ "testshare--SeL4_TB\/components\/subscriber_impl\/src\/sb_subscriber_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_subscriber_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *  sb_entrypoint_subscriber_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_subscriber_impl_initializer(const int64_t * in_arg) {\n  testshare_subscriber_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_subscriber_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "testshare--SeL4_TB\/components\/subscriber_impl\/includes\/sb_subscriber_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_subscriber_impl_types__H\n#define __sb_AADL_subscriber_impl_types__H\n\n#include <sb_proc_types.h>\n\nvoid testshare_subscriber_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_subscriber_impl_types__H\n"}],[ "testshare--SeL4_TB\/includes\/sb_proc_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_proc_types__H\n#define __SB_AADL_sb_proc_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef\n  struct testshare__Thing_t_impl {\n    int8_t lepht;\n    int8_t right;\n    int8_t top;\n    int8_t bottom;\n  } testshare__Thing_t_impl;\n\n#endif \/\/ __SB_AADL_sb_proc_types__H\n"}]]}}
{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "testsubprogram--SeL4_TB\/components\/sender_impl\/sender_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/operations_interface.idl4\";\n\ncomponent sender_impl {\n  include <sb_proc_types.h>;\n  control;\n  uses operations_interface operations;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testsubprogram--SeL4_TB\/components\/receiver_impl\/receiver_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/operations_interface.idl4\";\n\ncomponent receiver_impl {\n  include <sb_proc_types.h>;\n  control;\n  provides operations_interface operations;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testsubprogram--SeL4_TB\/testsubprogram.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport \"components\/sender_impl\/sender_impl.camkes\";\nimport \"components\/receiver_impl\/receiver_impl.camkes\";\n\nassembly {\n  composition {\n    component sender_impl source_inst;\n    component receiver_impl destination_inst;\n\n    connection seL4RPCCall conn1(from source_inst.operations, to destination_inst.operations);\n  }\n\n  configuration {\n  }\n}\n"}],[ "testsubprogram--SeL4_TB\/interfaces\/add_uint32.idl4", { "type" : "Resource","content" : "procedure add_uint32 {\n  void sub1(in Unsigned_32 A,in Unsigned_32 B,out Unsigned_32 result);\n};"}],[ "testsubprogram--SeL4_TB\/interfaces\/subtract_uint32.idl4", { "type" : "Resource","content" : "procedure subtract_uint32 {\n  void sub2(in Unsigned_32 A,in Unsigned_32 B,out Unsigned_32 result);\n};"}],[ "testsubprogram--SeL4_TB\/interfaces\/operations_interface.idl4", { "type" : "Resource","content" : "procedure operations_interface {\n  void add(in uint32_t A,in uint32_t B,out uint32_t result);\n  void subtract(in uint32_t A,in uint32_t B,out uint32_t result);\n};"}],[ "testsubprogram--SeL4_TB\/components\/sender_impl\/\/src\/sender.c", { "type" : "Resource","content" : "\/* testsubprogram\/components\/sender\/src\/sender *\/\n\n#include <camkes.h>\n#include <sb_proc_types.h>\n#include \"..\/includes\/sb_sender_impl.h\"\n\nvoid sender_init(const int64_t *arg){\n   printf(\"Initializer method for sender invoked\\n\");\n}\n\nvoid run_sender(int64_t * arg) {\n   uint32_t result;\n\n   operations_add(10, 5, &result);\n   printf(\"Result of 'add' call to receiver with arguments 10, 5 : (%d) \\n\", result);\n\n   operations_subtract(10, 5, &result);  \n   printf(\"Result of 'subtract' call to receiver with arguments 10, 5 : (%d) \\n\", result);\n}\n"}],[ "testsubprogram--SeL4_TB\/components\/receiver_impl\/\/src\/receiver.c", { "type" : "Resource","content" : "\/* testsubprogram\/components\/receiver\/src\/receiver *\/\n\n#include <camkes.h>\n#include <sb_proc_types.h>\n#include \"..\/includes\/sb_receiver_impl.h\"\n\nvoid operations_add(uint32_t A, uint32_t B, uint32_t *result) {\n\t*result = A + B;\n}\n\nvoid operations_subtract(uint32_t A, uint32_t B, uint32_t *result) {\n\t*result = A - B;\n}\n"}],[ "testsubprogram--SeL4_TB\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (testsubprogram C)\n\nadd_definitions(-DCAMKES)\n\nDeclareCAmkESComponent(sender_impl\n  SOURCES components\/sender_impl\/\/src\/sender.c components\/sender_impl\/src\/sb_sender_impl.c\n  INCLUDES components\/sender_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(receiver_impl\n  SOURCES components\/receiver_impl\/\/src\/receiver.c components\/receiver_impl\/src\/sb_receiver_impl.c\n  INCLUDES components\/receiver_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(testsubprogram.camkes)\n"}],[ "testsubprogram--SeL4_TB\/components\/sender_impl\/src\/sb_sender_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_sender_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *  sb_entrypoint_sender_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_sender_impl_initializer(const int64_t * in_arg) {\n  sender_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_sender_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "testsubprogram--SeL4_TB\/components\/sender_impl\/includes\/sb_sender_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_sender_impl_types__H\n#define __sb_AADL_sender_impl_types__H\n\n#include <sb_proc_types.h>\n\nvoid sender_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_sender_impl_types__H\n"}],[ "testsubprogram--SeL4_TB\/components\/receiver_impl\/src\/sb_receiver_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_receiver_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "testsubprogram--SeL4_TB\/components\/receiver_impl\/includes\/sb_receiver_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_receiver_impl_types__H\n#define __sb_AADL_receiver_impl_types__H\n\n#include <sb_proc_types.h>\n\n\n#endif \/\/ __sb_AADL_receiver_impl_types__H\n"}],[ "testsubprogram--SeL4_TB\/includes\/sb_proc_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_proc_types__H\n#define __SB_AADL_sb_proc_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_proc_types__H\n"}]]}}
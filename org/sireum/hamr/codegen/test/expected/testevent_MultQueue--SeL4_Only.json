{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "testevent_MultQueue--SeL4_Only\/components\/emitter_impl\/emitter_impl.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\n\ncomponent emitter_impl {\n  include <sb_proc_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  emits ReceiveEvent sb_e;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sb_event_counter_t sb_e_counter;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/consumer_impl\/consumer_impl.camkes", { "type" : "Resource","content" : "component consumer_impl {\n  include <sb_proc_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  consumes ReceiveEvent sb_s;\n  dataport sb_event_counter_t sb_s_counter;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/dispatch_periodic\/dispatch_periodic.camkes", { "type" : "Resource","content" : "import <global-connectors.camkes>;\n\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_src_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/testevent.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/emitter_impl\/emitter_impl.camkes\";\nimport \"components\/consumer_impl\/consumer_impl.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component emitter_impl src;\n    component consumer_impl snk;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4Notification conn1(from dispatch_periodic_inst.sb_src_periodic_dispatch_notification, to src.sb_periodic_dispatch_notification);\n    connection seL4Notification conn2(from src.sb_e, to snk.sb_s);\n    connection seL4SharedData conn3(from src.sb_e_counter, to snk.sb_s_counter);\n    connection seL4TimeServer conn4(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn5(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    src.sb_e_counter_access = \"W\";\n    snk.sb_s_counter_access = \"R\";\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/emitter_impl\/src\/emitter.c", { "type" : "Resource","content" : "\/* testevent\/components\/emitter\/src\/emitter.c *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_proc_types.h>\n#include <sb_emitter_impl.h>\n\nstatic int32_t counter = 0;\n\nvoid testevent_emitter_component_init(const int64_t *in_arg)\n{\n    printf(\"testevent_emitter_component_init called\\n\");\n}\n\n\/* control thread: keep calling enqueue for thing\n *\/\nvoid run_emitter(const int64_t *in_arg){\n  int numEvents = counter % 7; \/\/ send 0 - 6 events per dispatch, consumer's queue size is 5\n  for(int32_t i = 0; i < numEvents; i++) {\n    sb_e_write();\n  }\n  printf(\"[Emitter] Sent %i events.\\n\", numEvents);\n\n  counter++;\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/consumer_impl\/src\/consumer.c", { "type" : "Resource","content" : "\/* apps\/testevent\/components\/Consumer\/src\/main.c *\/\n\n\/* Similar to the \"helloevent\" example in CAmkES doc,\n * tidied up a bit.\n *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_impl.h>\n\nvoid testevent_consumer_component_init(const int64_t *in_arg) {\n  printf(\"testevent_consumer_component_init called\\n\");\n}\n\nvoid testevent_consumer_s_event_handler() {\n  int32_t receivedEvents = 0;\n  while(sb_s_read()) {\n    receivedEvents++;\n  }\n\n  printf(\"[Consumer] received %i events\\n\\n\", receivedEvents);\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (testevent C)\n\nadd_definitions(-DCAMKES)\n\nincludeGlobalComponents()\n\nDeclareCAmkESComponent(emitter_impl\n  SOURCES components\/emitter_impl\/\/src\/emitter.c components\/emitter_impl\/src\/sb_emitter_impl.c\n  INCLUDES components\/emitter_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_impl\n  SOURCES components\/consumer_impl\/\/src\/consumer.c components\/consumer_impl\/src\/sb_consumer_impl.c\n  INCLUDES components\/consumer_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  INCLUDES includes\n\n)\n\nDeclareCAmkESRootserver(testevent.camkes)\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/emitter_impl\/src\/sb_emitter_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_emitter_impl.h\"\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_e_write\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to send to a remote event port.\n *\n ************************************************************************\/\nbool sb_e_write(void) {\n  \/\/ sb_e_counter is a dataport (shared memory) that is written by the sender \n  \/\/ and read by the receiver(s). This counter is monotonicly increasing, \n  \/\/ but can wrap.\n  (*sb_e_counter)++;\n\n  \/\/ Release memory fence - ensure subsequent write occurs after any preceeding read or write\n  sb_e_counter_release();\n\n  sb_e_emit();\n\n  return true;\n}\n\n\nvoid sb_entrypoint_emitter_impl_periodic_dispatcher(const int64_t * in_arg) {\n  run_emitter((int64_t *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_emitter_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_impl_initializer(const int64_t * in_arg) {\n  testevent_emitter_component_init((int64_t *) in_arg);\n}\n\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_emitter_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/emitter_impl\/includes\/sb_emitter_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_emitter_impl_types__H\n#define __sb_AADL_emitter_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_e_write(void);\n\nvoid run_emitter(const int64_t *);\n\nvoid testevent_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_emitter_impl_types__H\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/consumer_impl\/src\/sb_consumer_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_impl.h\"\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic sb_event_counter_t sb_s_received_events = 0;\nstatic sb_event_counter_t sb_s_last_counter = 0;\n\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * s\n *\n ************************************************************************\/\nstatic void sb_s_handler(void *_ UNUSED){\n  MUTEXOP(sb_dispatch_sem_post());\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * sb_s_read:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_read() {\n  if(sb_s_received_events > 0) {\n    sb_s_received_events--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_impl_s(void){\n  testevent_consumer_s_event_handler();\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_impl_initializer(const int64_t * in_arg) {\n  testevent_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    { \/\/ drain queue for incoming event port 's'\n\n      sb_event_counter_t current_sb_s_counter;\n\n      sb_s_received_events = 0; \/\/ drop any events not handled during last dispatch\n\n      \/\/ get current shared counter value\n      current_sb_s_counter = *sb_s_counter;\n\n      \/\/ Acquire memory fence - ensure preceding read occurs before any subsequent read or write\n      sb_s_counter_acquire();\n\n      \/\/ NOTE: Counters can wrap, so we must use != below instead of >\n      while(current_sb_s_counter != sb_s_last_counter){\n        sb_s_last_counter++;\n        sb_s_received_events++;\n      }\n\n      if(sb_s_received_events > 0) {\n\n        \/\/ s's queue size is 5\n        if(sb_s_received_events > 5) {\n          \/\/printf(\"consumer_impl: dropping %i event(s) from incoming event port s\\n\", (sb_s_received_events - 5));\n\n          \/\/ drop events\n          sb_s_received_events = 5;\n        }\n\n        sb_entrypoint_consumer_impl_s();\n      }\n    }\n  }\n  return 0;\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/consumer_impl\/includes\/sb_consumer_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_impl_types__H\n#define __sb_AADL_consumer_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_s_read(void);\n\nvoid testevent_consumer_s_event_handler(void);\n\nvoid testevent_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_impl_types__H\n"}],[ "testevent_MultQueue--SeL4_Only\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c", { "type" : "Resource","content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_proc_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (2000 \/ aadl_tick_interval)) == 0) {\n    sb_src_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n"}],[ "testevent_MultQueue--SeL4_Only\/includes\/sb_proc_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_proc_types__H\n#define __SB_AADL_sb_proc_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_proc_types__H\n"}],[ "testevent_MultQueue--SeL4_Only\/includes\/sb_event_counter.h", { "type" : "Resource","content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t; \n"}]]}}
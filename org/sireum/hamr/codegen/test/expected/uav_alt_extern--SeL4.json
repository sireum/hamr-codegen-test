{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/data\/uav_project_extern\/MC\/MISSING_TYPE_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.MC\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject MISSING_TYPE_Impl {\n  def empty(): MC.MISSING_TYPE_Impl = {\n    return MC.MISSING_TYPE_Impl(Base_Types.Integer_32_empty())\n  }\n}\n\n@datatype class MISSING_TYPE_Impl(\n  MISSING : S32) {\n}\n\nobject MISSING_TYPE_Impl_Payload {\n  def empty(): MISSING_TYPE_Impl_Payload = {\n    return MISSING_TYPE_Impl_Payload(MC.MISSING_TYPE_Impl.empty())\n  }\n}\n\n@datatype class MISSING_TYPE_Impl_Payload(value: MC.MISSING_TYPE_Impl) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/data\/uav_project_extern\/SW\/Coordinate_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Coordinate_Impl {\n  def empty(): SW.Coordinate_Impl = {\n    return SW.Coordinate_Impl(Base_Types.Integer_32_empty(), Base_Types.Integer_32_empty(), Base_Types.Integer_32_empty())\n  }\n}\n\n@datatype class Coordinate_Impl(\n  lat : S32,\n  longitude : S32,\n  alt : S32) {\n}\n\nobject Coordinate_Impl_Payload {\n  def empty(): Coordinate_Impl_Payload = {\n    return Coordinate_Impl_Payload(SW.Coordinate_Impl.empty())\n  }\n}\n\n@datatype class Coordinate_Impl_Payload(value: SW.Coordinate_Impl) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/data\/uav_project_extern\/SW\/Map.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Map {\n  def empty(): SW.Map = {\n    return SW.Map(ISZ.create(4, SW.Coordinate_Impl.empty()))\n  }\n}\n\n@datatype class Map(\n  value : ISZ[SW.Coordinate_Impl]) {\n  \/\/{  assert (value.size == 4) }\n}\n\nobject Map_Payload {\n  def empty(): Map_Payload = {\n    return Map_Payload(SW.Map.empty())\n  }\n}\n\n@datatype class Map_Payload(value: SW.Map) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/data\/uav_project_extern\/SW\/FlightPattern.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@enum object FlightPattern {\n  'ZigZag\n  'StraightLine\n  'Perimeter\n}\n\nobject FlightPattern_Payload {\n  def empty(): FlightPattern_Payload = {\n    return FlightPattern_Payload(SW.FlightPattern.byOrdinal(0).get)\n  }\n}\n\n@datatype class FlightPattern_Payload(value: SW.FlightPattern.Type) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/data\/uav_project_extern\/SW\/Command_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Command_Impl {\n  def empty(): SW.Command_Impl = {\n    return SW.Command_Impl(SW.Map.empty(), SW.FlightPattern.byOrdinal(0).get, Base_Types.Boolean_empty())\n  }\n}\n\n@datatype class Command_Impl(\n  Map : SW.Map,\n  Pattern : SW.FlightPattern.Type,\n  HMAC : B) {\n}\n\nobject Command_Impl_Payload {\n  def empty(): Command_Impl_Payload = {\n    return Command_Impl_Payload(SW.Command_Impl.empty())\n  }\n}\n\n@datatype class Command_Impl_Payload(value: SW.Command_Impl) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/data\/uav_project_extern\/SW\/Mission.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Mission {\n  def empty(): SW.Mission = {\n    return SW.Mission(ISZ.create(10, SW.Coordinate_Impl.empty()))\n  }\n}\n\n@datatype class Mission(\n  value : ISZ[SW.Coordinate_Impl]) {\n  \/\/{  assert (value.size == 10) }\n}\n\nobject Mission_Payload {\n  def empty(): Mission_Payload = {\n    return Mission_Payload(SW.Mission.empty())\n  }\n}\n\n@datatype class Mission_Payload(value: SW.Mission) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/data\/uav_project_extern\/SW\/MissionWindow.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject MissionWindow {\n  def empty(): SW.MissionWindow = {\n    return SW.MissionWindow(ISZ.create(4, SW.Coordinate_Impl.empty()))\n  }\n}\n\n@datatype class MissionWindow(\n  value : ISZ[SW.Coordinate_Impl]) {\n  \/\/{  assert (value.size == 4) }\n}\n\nobject MissionWindow_Payload {\n  def empty(): MissionWindow_Payload = {\n    return MissionWindow_Payload(SW.MissionWindow.empty())\n  }\n}\n\n@datatype class MissionWindow_Payload(value: SW.MissionWindow) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/data\/uav_project_extern\/Base_Types.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern\n\nimport org.sireum._\nimport org.sireum.S8._\nimport org.sireum.S16._\nimport org.sireum.S32._\nimport org.sireum.S64._\nimport org.sireum.U8._\nimport org.sireum.U16._\nimport org.sireum.U32._\nimport org.sireum.U64._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Base_Types {\n\n  type Boolean = org.sireum.B\n\n  type Integer = org.sireum.Z\n\n  type Integer_8 = org.sireum.S8\n  type Integer_16 = org.sireum.S16\n  type Integer_32 = org.sireum.S32\n  type Integer_64 = org.sireum.S64\n\n  type Unsigned_8 = org.sireum.U8\n  type Unsigned_16 = org.sireum.U16\n  type Unsigned_32 = org.sireum.U32\n  type Unsigned_64 = org.sireum.U64\n\n  \/\/ TODO: Base_Types::Natural\n\n  type Float = org.sireum.R\n  type Float_32 = org.sireum.F32\n  type Float_64 = org.sireum.F64\n\n  type Character = org.sireum.C\n  type String = org.sireum.String\n\n  type Bits = org.sireum.ISZ[B]\n\n  @datatype class Boolean_Payload(value: B) extends art.DataContent\n\n  @datatype class Integer_Payload(value: Z) extends art.DataContent\n\n  @datatype class Integer_8_Payload(value: S8) extends art.DataContent\n  @datatype class Integer_16_Payload(value: S16) extends art.DataContent\n  @datatype class Integer_32_Payload(value: S32) extends art.DataContent\n  @datatype class Integer_64_Payload(value: S64) extends art.DataContent\n\n  @datatype class Unsigned_8_Payload(value: U8) extends art.DataContent\n  @datatype class Unsigned_16_Payload(value: U16) extends art.DataContent\n  @datatype class Unsigned_32_Payload(value: U32) extends art.DataContent\n  @datatype class Unsigned_64_Payload(value: U64) extends art.DataContent\n\n  @datatype class Float_Payload(value: R) extends art.DataContent\n  @datatype class Float_32_Payload(value: F32) extends art.DataContent\n  @datatype class Float_64_Payload(value: F64) extends art.DataContent\n\n  @datatype class Character_Payload(value: C) extends art.DataContent\n  @datatype class String_Payload(value: String) extends art.DataContent\n\n  @datatype class Bits_Payload(value: ISZ[B]) extends art.DataContent\n\n  def Boolean_empty(): Boolean = { return F }\n\n  def Integer_empty(): Integer = { return z\"0\" }\n\n  def Integer_8_empty(): Integer_8 = { return s8\"0\" }\n  def Integer_16_empty(): Integer_16 = { return s16\"0\" }\n  def Integer_32_empty(): Integer_32 = { return s32\"0\" }\n  def Integer_64_empty(): Integer_64 = { return s64\"0\" }\n\n  def Unsigned_8_empty(): Unsigned_8 = { return u8\"0\" }\n  def Unsigned_16_empty(): Unsigned_16 = { return u16\"0\" }\n  def Unsigned_32_empty(): Unsigned_32 = { return u32\"0\" }\n  def Unsigned_64_empty(): Unsigned_64 = { return u64\"0\" }\n\n  def Float_empty(): Float = { return r\"0\" }\n  def Float_32_empty(): Float_32 = { return f32\"0\" }\n  def Float_64_empty(): Float_64 = { return f64\"0\" }\n\n  def Character_empty(): Character = { return ' ' }\n  def String_empty(): String = { return \"\" }\n\n  def Bits_empty(): Bits = { return ISZ() }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/architecture\/uav_project_extern\/Arch.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern\n\nimport org.sireum._\nimport art._\nimport art.PortMode._\nimport art.DispatchPropertyProtocol._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Arch {\n  val UAV_Impl_Instance_MCMP_PROC_SW_RADIO : uav_project_extern.SW.RadioDriver_Impl_Bridge = {\n    val recv_map_out = Port[SW.Command_Impl] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_recv_map_out\", mode = EventOut)\n\n    uav_project_extern.SW.RadioDriver_Impl_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO\",\n      dispatchProtocol = Sporadic(min = 1),\n      dispatchTriggers = None(),\n\n      recv_map_out = recv_map_out\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_FPLN : uav_project_extern.SW.FlightPlanner_Impl_Bridge = {\n    val mission_rcv = Port[B] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FPLN_mission_rcv\", mode = EventIn)\n    val recv_map = Port[SW.Command_Impl] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FPLN_recv_map\", mode = EventIn)\n    val flight_plan = Port[SW.Mission] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FPLN_flight_plan\", mode = EventOut)\n\n    uav_project_extern.SW.FlightPlanner_Impl_Bridge(\n      id = 1,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_FPLN\",\n      dispatchProtocol = Sporadic(min = 1),\n      dispatchTriggers = None(),\n\n      mission_rcv = mission_rcv,\n      recv_map = recv_map,\n      flight_plan = flight_plan\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_WPM : uav_project_extern.SW.WaypointManager_Impl_Bridge = {\n    val flight_plan = Port[SW.Mission] (id = 4, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_flight_plan\", mode = EventIn)\n    val tracking_id = Port[S64] (id = 5, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_tracking_id\", mode = EventIn)\n    val mission_rcv = Port[B] (id = 6, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_mission_rcv\", mode = EventOut)\n    val mission_window = Port[SW.MissionWindow] (id = 7, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_mission_window\", mode = EventOut)\n\n    uav_project_extern.SW.WaypointManager_Impl_Bridge(\n      id = 2,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM\",\n      dispatchProtocol = Sporadic(min = 1),\n      dispatchTriggers = None(),\n\n      flight_plan = flight_plan,\n      tracking_id = tracking_id,\n      mission_rcv = mission_rcv,\n      mission_window = mission_window\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_UART : uav_project_extern.SW.UARTDriver_Impl_Bridge = {\n    val mission_window = Port[SW.MissionWindow] (id = 8, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UART_mission_window\", mode = EventIn)\n    val tracking_id = Port[S64] (id = 9, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UART_tracking_id\", mode = EventOut)\n\n    uav_project_extern.SW.UARTDriver_Impl_Bridge(\n      id = 3,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_UART\",\n      dispatchProtocol = Sporadic(min = 1),\n      dispatchTriggers = None(),\n\n      mission_window = mission_window,\n      tracking_id = tracking_id\n    )\n  }\n\n  val ad : ArchitectureDescription = {\n\n    ArchitectureDescription(\n      components = MSZ (UAV_Impl_Instance_MCMP_PROC_SW_RADIO, UAV_Impl_Instance_MCMP_PROC_SW_FPLN, UAV_Impl_Instance_MCMP_PROC_SW_WPM, UAV_Impl_Instance_MCMP_PROC_SW_UART),\n\n      connections = ISZ (Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_RADIO.recv_map_out, to = UAV_Impl_Instance_MCMP_PROC_SW_FPLN.recv_map),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_FPLN.flight_plan, to = UAV_Impl_Instance_MCMP_PROC_SW_WPM.flight_plan),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_WPM.mission_rcv, to = UAV_Impl_Instance_MCMP_PROC_SW_FPLN.mission_rcv),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_WPM.mission_window, to = UAV_Impl_Instance_MCMP_PROC_SW_UART.mission_window),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_UART.tracking_id, to = UAV_Impl_Instance_MCMP_PROC_SW_WPM.tracking_id))\n    )\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/architecture\/uav_project_extern\/Demo.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ This file was auto-generated.  Do not edit\npackage uav_project_extern\n\nobject Demo extends App {\n  art.Art.run(Arch.ad)\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/test\/bridge\/uav_project_extern\/SW\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO_Test.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport art.{ArtNative_Ext, Empty}\nimport uav_project_extern._\nimport org.sireum._\n\n\/\/ the contents of this file will not be overwritten\nclass UAV_Impl_Instance_MCMP_PROC_SW_RADIO_Test extends BridgeTestSuite[RadioDriver_Impl_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_RADIO) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ getter for out EventDataPort\n  def get_recv_map_out(): Option[SW.Command_Impl] = {\n    val value: Option[SW.Command_Impl] = get_recv_map_out_payload() match {\n      case Some(SW.Command_Impl_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port recv_map_out.  Expecting 'SW.Command_Impl_Payload' but received ${v}\") \n      case _ => None[SW.Command_Impl]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_recv_map_out_payload(): Option[SW.Command_Impl_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.api.recv_map_out_Id).asInstanceOf[Option[SW.Command_Impl_Payload]]\n  }\n\n  def getComponent(): RadioDriver_Impl_Impl = {\n    return bridge.entryPoints.asInstanceOf[RadioDriver_Impl_Bridge.EntryPoints].component\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/bridge\/uav_project_extern\/SW\/RadioDriver_Impl_Bridge.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport art._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class RadioDriver_Impl_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  recv_map_out: Port[SW.Command_Impl]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(recv_map_out),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(),\n\n    eventOuts = ISZ(recv_map_out)\n  )\n\n  val api : RadioDriver_Impl_Bridge.Api =\n    RadioDriver_Impl_Bridge.Api(\n      id,\n      recv_map_out.id\n    )\n\n  val entryPoints : Bridge.EntryPoints =\n    RadioDriver_Impl_Bridge.EntryPoints(\n      id,\n\n      recv_map_out.id,\n\n      dispatchTriggers,\n\n      RadioDriver_Impl_Impl(api)\n    )\n}\n\nobject RadioDriver_Impl_Bridge {\n\n  @record class Api(\n    id : Art.BridgeId,\n    recv_map_out_Id : Art.PortId) {\n\n    def sendrecv_map_out(value : SW.Command_Impl) : Unit = {\n      Art.putValue(recv_map_out_Id, SW.Command_Impl_Payload(value))\n    }\n\n\n    def logInfo(msg: String): Unit = {\n      Art.logInfo(id, msg)\n    }\n\n    def logDebug(msg: String): Unit = {\n      Art.logDebug(id, msg)\n    }\n\n    def logError(msg: String): Unit = {\n      Art.logError(id, msg)\n    }\n  }\n\n  @record class EntryPoints(\n    RadioDriver_Impl_BridgeId : Art.BridgeId,\n\n    recv_map_out_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    component : RadioDriver_Impl_Impl ) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(recv_map_out_Id)\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(RadioDriver_Impl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] = \n        if(dispatchTriggers.isEmpty) receivedEvents \n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(RadioDriver_Impl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] = \n        if(dispatchTriggers.isEmpty) receivedEvents \n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate: Unit = {\n      component.activate()\n    }\n\n    def deactivate: Unit = {\n      component.deactivate()\n    }\n\n    def finalise: Unit = {\n      component.finalise()\n    }\n\n    def initialise: Unit = {\n      component.initialise()\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover: Unit = {\n      component.recover()\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/component\/uav_project_extern\/SW\/RadioDriver_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@msig trait RadioDriver_Impl {\n\n  def api : RadioDriver_Impl_Bridge.Api\n\n  def activate(): Unit = {}\n\n  def deactivate(): Unit = {}\n\n  def finalise(): Unit = {}\n\n  def initialise(): Unit = {}\n\n  def recover(): Unit = {}\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/component\/uav_project_extern\/SW\/RadioDriver_Impl_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ the contents of this file will not be overwritten\n@record class RadioDriver_Impl_Impl (val api : RadioDriver_Impl_Bridge.Api) extends RadioDriver_Impl {\n\n  override def initialise(): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.sendrecv_map_out(SW.Command_Impl.empty())\n  }\n\n\n  override def activate(): Unit = {\n    \/\/ example override of activate\n  }\n\n  override def deactivate(): Unit = {\n    \/\/ example override of deactivate\n  }\n\n  override def finalise(): Unit = {\n    \/\/ example override of finalise\n  }\n\n  override def recover(): Unit = {\n    \/\/ example override of recover\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/test\/bridge\/uav_project_extern\/SW\/BridgeTestSuite.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport art.{Art, Bridge}\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\n\n\/**\n * A test suite that provides the following functionality for unit tests:\n *  - Clears all registers bridges and ports before each test\n *  - Initializes the selected bridge and ports before each test\n *  - Finalizes the bridge after each test\n *  - Creates a new instance of the test suite class for each test\n *    -> NOTE: this is NOT the same as having a separate JVM per-test (or suite), but is useful for test-local variables\n *\n *  If automatic calls to initTest() or finalizeTest() are not desired, simply override beforeEach() or afterEach()\n *  methods to change the desired behavior.\n *\n * @param bridge the bridge being tested, see [[uav_project_extern.Arch]] for potential values.\n * @tparam T the type of the bridge being tested\n *\/\n\n\/\/ This file was auto-generated.  Do no edit\n\nclass BridgeTestSuite[+T <: Bridge](val bridge: T) extends AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach {\n\n  \/**\n   * Automatically called before each test. Currently calls Art.initTest for the given bridge. Override as needed.\n   *\/\n  override protected def beforeEach(): Unit = {\n    Art.initTest(bridge)\n  }\n\n  \/**\n   * Automatically called after each test. Currently calls Art.finalizeTest for the given bridge. Override as needed.\n   *\/\n  override protected def afterEach(): Unit = {\n    Art.finalizeTest(bridge)\n  }\n\n  \/**\n   * Invokes testCompute() once per registered bridge.\n   *\n   * IMPORTANT: This method also clears all bridge output BEFORE each call. This will have no effect the first time it's\n   * invoked (because all output will be empty), but it does ensure that output doesn't \"leak\" across multiple\n   * invocations.\n   *\n   *\/\n  def executeTest(): Unit = {\n    Art.manuallyClearOutput()\n    Art.executeTest(bridge)\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/test\/bridge\/uav_project_extern\/SW\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN_Test.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport art.{ArtNative_Ext, Empty}\nimport uav_project_extern._\nimport org.sireum._\n\n\/\/ the contents of this file will not be overwritten\nclass UAV_Impl_Instance_MCMP_PROC_SW_FPLN_Test extends BridgeTestSuite[FlightPlanner_Impl_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_FPLN) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ setter for in EventDataPort\n  def put_mission_rcv(value : B): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.api.mission_rcv_Id, Base_Types.Boolean_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_recv_map(value : SW.Command_Impl): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.api.recv_map_Id, SW.Command_Impl_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_flight_plan(): Option[SW.Mission] = {\n    val value: Option[SW.Mission] = get_flight_plan_payload() match {\n      case Some(SW.Mission_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port flight_plan.  Expecting 'SW.Mission_Payload' but received ${v}\") \n      case _ => None[SW.Mission]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_flight_plan_payload(): Option[SW.Mission_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.api.flight_plan_Id).asInstanceOf[Option[SW.Mission_Payload]]\n  }\n\n  def getComponent(): FlightPlanner_Impl_Impl = {\n    return bridge.entryPoints.asInstanceOf[FlightPlanner_Impl_Bridge.EntryPoints].component\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/bridge\/uav_project_extern\/SW\/FlightPlanner_Impl_Bridge.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport art._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class FlightPlanner_Impl_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  mission_rcv: Port[B],\n  recv_map: Port[SW.Command_Impl],\n  flight_plan: Port[SW.Mission]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(mission_rcv,\n              recv_map,\n              flight_plan),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(mission_rcv,\n                   recv_map),\n\n    eventOuts = ISZ(flight_plan)\n  )\n\n  val api : FlightPlanner_Impl_Bridge.Api =\n    FlightPlanner_Impl_Bridge.Api(\n      id,\n      mission_rcv.id,\n      recv_map.id,\n      flight_plan.id\n    )\n\n  val entryPoints : Bridge.EntryPoints =\n    FlightPlanner_Impl_Bridge.EntryPoints(\n      id,\n\n      mission_rcv.id,\n      recv_map.id,\n      flight_plan.id,\n\n      dispatchTriggers,\n\n      FlightPlanner_Impl_Impl(api)\n    )\n}\n\nobject FlightPlanner_Impl_Bridge {\n\n  @record class Api(\n    id : Art.BridgeId,\n    mission_rcv_Id : Art.PortId,\n    recv_map_Id : Art.PortId,\n    flight_plan_Id : Art.PortId) {\n\n    def getmission_rcv() : Option[B] = {\n      val value : Option[B] = Art.getValue(mission_rcv_Id) match {\n        case Some(Base_Types.Boolean_Payload(v)) => Some(v)\n        case Some(v) => \n          Art.logError(id, s\"Unexpected payload on port mission_rcv.  Expecting 'Base_Types.Boolean_Payload' but received ${v}\")\n          None[B]() \n        case _ => None[B]()\n      }\n      return value\n    }\n\n    def getrecv_map() : Option[SW.Command_Impl] = {\n      val value : Option[SW.Command_Impl] = Art.getValue(recv_map_Id) match {\n        case Some(SW.Command_Impl_Payload(v)) => Some(v)\n        case Some(v) => \n          Art.logError(id, s\"Unexpected payload on port recv_map.  Expecting 'SW.Command_Impl_Payload' but received ${v}\")\n          None[SW.Command_Impl]() \n        case _ => None[SW.Command_Impl]()\n      }\n      return value\n    }\n\n    def sendflight_plan(value : SW.Mission) : Unit = {\n      Art.putValue(flight_plan_Id, SW.Mission_Payload(value))\n    }\n\n\n    def logInfo(msg: String): Unit = {\n      Art.logInfo(id, msg)\n    }\n\n    def logDebug(msg: String): Unit = {\n      Art.logDebug(id, msg)\n    }\n\n    def logError(msg: String): Unit = {\n      Art.logError(id, msg)\n    }\n  }\n\n  @record class EntryPoints(\n    FlightPlanner_Impl_BridgeId : Art.BridgeId,\n\n    mission_rcv_Id : Art.PortId,\n    recv_map_Id : Art.PortId,\n    flight_plan_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    component : FlightPlanner_Impl_Impl ) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(mission_rcv_Id,\n                                              recv_map_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(flight_plan_Id)\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(FlightPlanner_Impl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] = \n        if(dispatchTriggers.isEmpty) receivedEvents \n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n\n        if(portId == mission_rcv_Id){\n          val Some(Base_Types.Boolean_Payload(value)) = Art.getValue(mission_rcv_Id)\n          component.handlemission_rcv(value)\n        }\n        else if(portId == recv_map_Id){\n          val Some(SW.Command_Impl_Payload(value)) = Art.getValue(recv_map_Id)\n          component.handlerecv_map(value)\n        }\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(FlightPlanner_Impl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] = \n        if(dispatchTriggers.isEmpty) receivedEvents \n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n\n        if(portId == mission_rcv_Id){\n          val Some(Base_Types.Boolean_Payload(value)) = Art.getValue(mission_rcv_Id)\n          component.handlemission_rcv(value)\n        }\n        else if(portId == recv_map_Id){\n          val Some(SW.Command_Impl_Payload(value)) = Art.getValue(recv_map_Id)\n          component.handlerecv_map(value)\n        }\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate: Unit = {\n      component.activate()\n    }\n\n    def deactivate: Unit = {\n      component.deactivate()\n    }\n\n    def finalise: Unit = {\n      component.finalise()\n    }\n\n    def initialise: Unit = {\n      component.initialise()\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover: Unit = {\n      component.recover()\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/component\/uav_project_extern\/SW\/FlightPlanner_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@msig trait FlightPlanner_Impl {\n\n  def api : FlightPlanner_Impl_Bridge.Api\n\n  def handlemission_rcv(value : B): Unit = {\n    api.logInfo(\"default handlemission_rcv implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  def handlerecv_map(value : SW.Command_Impl): Unit = {\n    api.logInfo(\"default handlerecv_map implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  def activate(): Unit = {}\n\n  def deactivate(): Unit = {}\n\n  def finalise(): Unit = {}\n\n  def initialise(): Unit = {}\n\n  def recover(): Unit = {}\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/component\/uav_project_extern\/SW\/FlightPlanner_Impl_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ the contents of this file will not be overwritten\n@record class FlightPlanner_Impl_Impl (val api : FlightPlanner_Impl_Bridge.Api) extends FlightPlanner_Impl {\n\n  override def initialise(): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    val apiUsage_mission_rcv: Option[B] = api.getmission_rcv()\n    val apiUsage_recv_map: Option[SW.Command_Impl] = api.getrecv_map()\n    api.sendflight_plan(SW.Mission.empty())\n  }\n\n  override def handlemission_rcv(value : B): Unit = {\n    api.logInfo(\"example handlemission_rcv implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  override def handlerecv_map(value : SW.Command_Impl): Unit = {\n    api.logInfo(\"example handlerecv_map implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  override def activate(): Unit = {\n    \/\/ example override of activate\n  }\n\n  override def deactivate(): Unit = {\n    \/\/ example override of deactivate\n  }\n\n  override def finalise(): Unit = {\n    \/\/ example override of finalise\n  }\n\n  override def recover(): Unit = {\n    \/\/ example override of recover\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/test\/bridge\/uav_project_extern\/SW\/UAV_Impl_Instance_MCMP_PROC_SW_WPM_Test.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport art.{ArtNative_Ext, Empty}\nimport uav_project_extern._\nimport org.sireum._\n\n\/\/ the contents of this file will not be overwritten\nclass UAV_Impl_Instance_MCMP_PROC_SW_WPM_Test extends BridgeTestSuite[WaypointManager_Impl_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_WPM) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ setter for in EventDataPort\n  def put_flight_plan(value : SW.Mission): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.api.flight_plan_Id, SW.Mission_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_tracking_id(value : S64): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.api.tracking_id_Id, Base_Types.Integer_64_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_mission_rcv(): Option[B] = {\n    val value: Option[B] = get_mission_rcv_payload() match {\n      case Some(Base_Types.Boolean_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port mission_rcv.  Expecting 'Base_Types.Boolean_Payload' but received ${v}\") \n      case _ => None[B]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_mission_rcv_payload(): Option[Base_Types.Boolean_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.api.mission_rcv_Id).asInstanceOf[Option[Base_Types.Boolean_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_mission_window(): Option[SW.MissionWindow] = {\n    val value: Option[SW.MissionWindow] = get_mission_window_payload() match {\n      case Some(SW.MissionWindow_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port mission_window.  Expecting 'SW.MissionWindow_Payload' but received ${v}\") \n      case _ => None[SW.MissionWindow]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_mission_window_payload(): Option[SW.MissionWindow_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.api.mission_window_Id).asInstanceOf[Option[SW.MissionWindow_Payload]]\n  }\n\n  def getComponent(): WaypointManager_Impl_Impl = {\n    return bridge.entryPoints.asInstanceOf[WaypointManager_Impl_Bridge.EntryPoints].component\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/bridge\/uav_project_extern\/SW\/WaypointManager_Impl_Bridge.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport art._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class WaypointManager_Impl_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  flight_plan: Port[SW.Mission],\n  tracking_id: Port[S64],\n  mission_rcv: Port[B],\n  mission_window: Port[SW.MissionWindow]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(flight_plan,\n              tracking_id,\n              mission_rcv,\n              mission_window),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(flight_plan,\n                   tracking_id),\n\n    eventOuts = ISZ(mission_rcv,\n                    mission_window)\n  )\n\n  val api : WaypointManager_Impl_Bridge.Api =\n    WaypointManager_Impl_Bridge.Api(\n      id,\n      flight_plan.id,\n      tracking_id.id,\n      mission_rcv.id,\n      mission_window.id\n    )\n\n  val entryPoints : Bridge.EntryPoints =\n    WaypointManager_Impl_Bridge.EntryPoints(\n      id,\n\n      flight_plan.id,\n      tracking_id.id,\n      mission_rcv.id,\n      mission_window.id,\n\n      dispatchTriggers,\n\n      WaypointManager_Impl_Impl(api)\n    )\n}\n\nobject WaypointManager_Impl_Bridge {\n\n  @record class Api(\n    id : Art.BridgeId,\n    flight_plan_Id : Art.PortId,\n    tracking_id_Id : Art.PortId,\n    mission_rcv_Id : Art.PortId,\n    mission_window_Id : Art.PortId) {\n\n    def getflight_plan() : Option[SW.Mission] = {\n      val value : Option[SW.Mission] = Art.getValue(flight_plan_Id) match {\n        case Some(SW.Mission_Payload(v)) => Some(v)\n        case Some(v) => \n          Art.logError(id, s\"Unexpected payload on port flight_plan.  Expecting 'SW.Mission_Payload' but received ${v}\")\n          None[SW.Mission]() \n        case _ => None[SW.Mission]()\n      }\n      return value\n    }\n\n    def gettracking_id() : Option[S64] = {\n      val value : Option[S64] = Art.getValue(tracking_id_Id) match {\n        case Some(Base_Types.Integer_64_Payload(v)) => Some(v)\n        case Some(v) => \n          Art.logError(id, s\"Unexpected payload on port tracking_id.  Expecting 'Base_Types.Integer_64_Payload' but received ${v}\")\n          None[S64]() \n        case _ => None[S64]()\n      }\n      return value\n    }\n\n    def sendmission_rcv(value : B) : Unit = {\n      Art.putValue(mission_rcv_Id, Base_Types.Boolean_Payload(value))\n    }\n\n    def sendmission_window(value : SW.MissionWindow) : Unit = {\n      Art.putValue(mission_window_Id, SW.MissionWindow_Payload(value))\n    }\n\n\n    def logInfo(msg: String): Unit = {\n      Art.logInfo(id, msg)\n    }\n\n    def logDebug(msg: String): Unit = {\n      Art.logDebug(id, msg)\n    }\n\n    def logError(msg: String): Unit = {\n      Art.logError(id, msg)\n    }\n  }\n\n  @record class EntryPoints(\n    WaypointManager_Impl_BridgeId : Art.BridgeId,\n\n    flight_plan_Id : Art.PortId,\n    tracking_id_Id : Art.PortId,\n    mission_rcv_Id : Art.PortId,\n    mission_window_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    component : WaypointManager_Impl_Impl ) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(flight_plan_Id,\n                                              tracking_id_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(mission_rcv_Id,\n                                               mission_window_Id)\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(WaypointManager_Impl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] = \n        if(dispatchTriggers.isEmpty) receivedEvents \n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n\n        if(portId == flight_plan_Id){\n          val Some(SW.Mission_Payload(value)) = Art.getValue(flight_plan_Id)\n          component.handleflight_plan(value)\n        }\n        else if(portId == tracking_id_Id){\n          val Some(Base_Types.Integer_64_Payload(value)) = Art.getValue(tracking_id_Id)\n          component.handletracking_id(value)\n        }\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(WaypointManager_Impl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] = \n        if(dispatchTriggers.isEmpty) receivedEvents \n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n\n        if(portId == flight_plan_Id){\n          val Some(SW.Mission_Payload(value)) = Art.getValue(flight_plan_Id)\n          component.handleflight_plan(value)\n        }\n        else if(portId == tracking_id_Id){\n          val Some(Base_Types.Integer_64_Payload(value)) = Art.getValue(tracking_id_Id)\n          component.handletracking_id(value)\n        }\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate: Unit = {\n      component.activate()\n    }\n\n    def deactivate: Unit = {\n      component.deactivate()\n    }\n\n    def finalise: Unit = {\n      component.finalise()\n    }\n\n    def initialise: Unit = {\n      component.initialise()\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover: Unit = {\n      component.recover()\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/component\/uav_project_extern\/SW\/WaypointManager_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@msig trait WaypointManager_Impl {\n\n  def api : WaypointManager_Impl_Bridge.Api\n\n  def handleflight_plan(value : SW.Mission): Unit = {\n    api.logInfo(\"default handleflight_plan implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  def handletracking_id(value : S64): Unit = {\n    api.logInfo(\"default handletracking_id implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  def activate(): Unit = {}\n\n  def deactivate(): Unit = {}\n\n  def finalise(): Unit = {}\n\n  def initialise(): Unit = {}\n\n  def recover(): Unit = {}\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/component\/uav_project_extern\/SW\/WaypointManager_Impl_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ the contents of this file will not be overwritten\n@record class WaypointManager_Impl_Impl (val api : WaypointManager_Impl_Bridge.Api) extends WaypointManager_Impl {\n\n  override def initialise(): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    val apiUsage_flight_plan: Option[SW.Mission] = api.getflight_plan()\n    val apiUsage_tracking_id: Option[S64] = api.gettracking_id()\n    api.sendmission_rcv(Base_Types.Boolean_empty())\n    api.sendmission_window(SW.MissionWindow.empty())\n  }\n\n  override def handleflight_plan(value : SW.Mission): Unit = {\n    api.logInfo(\"example handleflight_plan implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  override def handletracking_id(value : S64): Unit = {\n    api.logInfo(\"example handletracking_id implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  override def activate(): Unit = {\n    \/\/ example override of activate\n  }\n\n  override def deactivate(): Unit = {\n    \/\/ example override of deactivate\n  }\n\n  override def finalise(): Unit = {\n    \/\/ example override of finalise\n  }\n\n  override def recover(): Unit = {\n    \/\/ example override of recover\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/test\/bridge\/uav_project_extern\/SW\/UAV_Impl_Instance_MCMP_PROC_SW_UART_Test.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport art.{ArtNative_Ext, Empty}\nimport uav_project_extern._\nimport org.sireum._\n\n\/\/ the contents of this file will not be overwritten\nclass UAV_Impl_Instance_MCMP_PROC_SW_UART_Test extends BridgeTestSuite[UARTDriver_Impl_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_UART) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ setter for in EventDataPort\n  def put_mission_window(value : SW.MissionWindow): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.api.mission_window_Id, SW.MissionWindow_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_tracking_id(): Option[S64] = {\n    val value: Option[S64] = get_tracking_id_payload() match {\n      case Some(Base_Types.Integer_64_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port tracking_id.  Expecting 'Base_Types.Integer_64_Payload' but received ${v}\") \n      case _ => None[S64]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_tracking_id_payload(): Option[Base_Types.Integer_64_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.api.tracking_id_Id).asInstanceOf[Option[Base_Types.Integer_64_Payload]]\n  }\n\n  def getComponent(): UARTDriver_Impl_Impl = {\n    return bridge.entryPoints.asInstanceOf[UARTDriver_Impl_Bridge.EntryPoints].component\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/bridge\/uav_project_extern\/SW\/UARTDriver_Impl_Bridge.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport art._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class UARTDriver_Impl_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  mission_window: Port[SW.MissionWindow],\n  tracking_id: Port[S64]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(mission_window,\n              tracking_id),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(mission_window),\n\n    eventOuts = ISZ(tracking_id)\n  )\n\n  val api : UARTDriver_Impl_Bridge.Api =\n    UARTDriver_Impl_Bridge.Api(\n      id,\n      mission_window.id,\n      tracking_id.id\n    )\n\n  val entryPoints : Bridge.EntryPoints =\n    UARTDriver_Impl_Bridge.EntryPoints(\n      id,\n\n      mission_window.id,\n      tracking_id.id,\n\n      dispatchTriggers,\n\n      UARTDriver_Impl_Impl(api)\n    )\n}\n\nobject UARTDriver_Impl_Bridge {\n\n  @record class Api(\n    id : Art.BridgeId,\n    mission_window_Id : Art.PortId,\n    tracking_id_Id : Art.PortId) {\n\n    def getmission_window() : Option[SW.MissionWindow] = {\n      val value : Option[SW.MissionWindow] = Art.getValue(mission_window_Id) match {\n        case Some(SW.MissionWindow_Payload(v)) => Some(v)\n        case Some(v) => \n          Art.logError(id, s\"Unexpected payload on port mission_window.  Expecting 'SW.MissionWindow_Payload' but received ${v}\")\n          None[SW.MissionWindow]() \n        case _ => None[SW.MissionWindow]()\n      }\n      return value\n    }\n\n    def sendtracking_id(value : S64) : Unit = {\n      Art.putValue(tracking_id_Id, Base_Types.Integer_64_Payload(value))\n    }\n\n\n    def logInfo(msg: String): Unit = {\n      Art.logInfo(id, msg)\n    }\n\n    def logDebug(msg: String): Unit = {\n      Art.logDebug(id, msg)\n    }\n\n    def logError(msg: String): Unit = {\n      Art.logError(id, msg)\n    }\n  }\n\n  @record class EntryPoints(\n    UARTDriver_Impl_BridgeId : Art.BridgeId,\n\n    mission_window_Id : Art.PortId,\n    tracking_id_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    component : UARTDriver_Impl_Impl ) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(mission_window_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(tracking_id_Id)\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(UARTDriver_Impl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] = \n        if(dispatchTriggers.isEmpty) receivedEvents \n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n\n        if(portId == mission_window_Id){\n          val Some(SW.MissionWindow_Payload(value)) = Art.getValue(mission_window_Id)\n          component.handlemission_window(value)\n        }\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(UARTDriver_Impl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] = \n        if(dispatchTriggers.isEmpty) receivedEvents \n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n\n        if(portId == mission_window_Id){\n          val Some(SW.MissionWindow_Payload(value)) = Art.getValue(mission_window_Id)\n          component.handlemission_window(value)\n        }\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate: Unit = {\n      component.activate()\n    }\n\n    def deactivate: Unit = {\n      component.deactivate()\n    }\n\n    def finalise: Unit = {\n      component.finalise()\n    }\n\n    def initialise: Unit = {\n      component.initialise()\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover: Unit = {\n      component.recover()\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/component\/uav_project_extern\/SW\/UARTDriver_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@msig trait UARTDriver_Impl {\n\n  def api : UARTDriver_Impl_Bridge.Api\n\n  def handlemission_window(value : SW.MissionWindow): Unit = {\n    api.logInfo(\"default handlemission_window implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  def activate(): Unit = {}\n\n  def deactivate(): Unit = {}\n\n  def finalise(): Unit = {}\n\n  def initialise(): Unit = {}\n\n  def recover(): Unit = {}\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/component\/uav_project_extern\/SW\/UARTDriver_Impl_Impl.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport uav_project_extern._\n\n\/\/ the contents of this file will not be overwritten\n@record class UARTDriver_Impl_Impl (val api : UARTDriver_Impl_Bridge.Api) extends UARTDriver_Impl {\n\n  override def initialise(): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    val apiUsage_mission_window: Option[SW.MissionWindow] = api.getmission_window()\n    api.sendtracking_id(Base_Types.Integer_64_empty())\n  }\n\n  override def handlemission_window(value : SW.MissionWindow): Unit = {\n    api.logInfo(\"example handlemission_window implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  override def activate(): Unit = {\n    \/\/ example override of activate\n  }\n\n  override def deactivate(): Unit = {\n    \/\/ example override of deactivate\n  }\n\n  override def finalise(): Unit = {\n    \/\/ example override of finalise\n  }\n\n  override def recover(): Unit = {\n    \/\/ example override of recover\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/RADIO.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_RADIO\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport uav_project_extern._\nimport uav_project_extern.SW.RadioDriver_Impl_seL4Nix\n\nobject RADIO extends App {\n\n  val RADIOBridge : uav_project_extern.SW.RadioDriver_Impl_Bridge = {\n    val recv_map_out = Port[SW.Command_Impl] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_recv_map_out\", mode = EventOut)\n\n    uav_project_extern.SW.RadioDriver_Impl_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO\",\n      dispatchProtocol = Sporadic(min = 1),\n      dispatchTriggers = None(),\n\n      recv_map_out = recv_map_out\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = RADIOBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ recv_map_out: Out EventDataPort SW.Command_Impl\n  val recv_map_out_id: Art.PortId = RADIOBridge.recv_map_out.id\n  var recv_map_out_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    var portIds: ISZ[Art.PortId] = ISZ()\n    return EventTriggered(portIds)\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    halt(s\"Unexpected: RADIO.getValue called with: ${portId}\")\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == recv_map_out_id) {\n      recv_map_out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: RADIO.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(recv_map_out_port.nonEmpty) {\n      RadioDriver_Impl_seL4Nix.recv_map_out_Send(recv_map_out_port.get)\n      recv_map_out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = MSZ (RADIOBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Integer_32_Payload(Base_Types.Integer_32_empty()))\n    printDataContent(MC.MISSING_TYPE_Impl_Payload(MC.MISSING_TYPE_Impl.empty()))\n    printDataContent(SW.Coordinate_Impl_Payload(SW.Coordinate_Impl.empty()))\n    printDataContent(SW.Map_Payload(SW.Map.empty()))\n    printDataContent(SW.FlightPattern_Payload(SW.FlightPattern.byOrdinal(0).get))\n    printDataContent(Base_Types.Boolean_Payload(Base_Types.Boolean_empty()))\n    printDataContent(SW.Command_Impl_Payload(SW.Command_Impl.empty()))\n    printDataContent(SW.Mission_Payload(SW.Mission.empty()))\n    printDataContent(Base_Types.Integer_64_Payload(Base_Types.Integer_64_empty()))\n    printDataContent(SW.MissionWindow_Payload(SW.MissionWindow.empty()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SW\/RadioDriver_Impl_seL4Nix.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport art._\n\n@ext object RadioDriver_Impl_seL4Nix {\n  \/\/ send payload 'd' to components connected to seL4's recv_map_out port\n  def recv_map_out_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SW\/RadioDriver_Impl_seL4Nix_Ext.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport org.sireum._\nimport art._\n\nobject RadioDriver_Impl_seL4Nix_Ext {\n  def recv_map_out_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/ext.c",
        {
          "type" : "Resource",
          "content" : "#include <all.h>\n#include <ext.h>\n\n\/\/ add c extension code here",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/ext.h",
        {
          "type" : "Resource",
          "content" : "#ifndef EXT_H\n#define EXT_H\n\n#endif",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/RadioDriver_Impl_adapter.c",
        {
          "type" : "Resource",
          "content" : "#include <RadioDriver_Impl_adapter.h>\n\nUnit uav_project_extern_SW_RadioDriver_Impl_adapter_initialiseArchitecture() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RADIO_initialiseArchitecture(SF_LAST);\n}\n\nUnit uav_project_extern_SW_RadioDriver_Impl_adapter_initialiseEntryPoint() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RADIO_initialiseEntryPoint(SF_LAST);\n}\n\nUnit uav_project_extern_SW_RadioDriver_Impl_adapter_computeEntryPoint() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RADIO_computeEntryPoint(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/RadioDriver_Impl_adapter.h",
        {
          "type" : "Resource",
          "content" : "#ifndef RADIODRIVER_IMPL_ADAPTER_H\n#define RADIODRIVER_IMPL_ADAPTER_H\n\n#include <all.h>\n\nUnit uav_project_extern_SW_RadioDriver_Impl_adapter_initialiseArchitecture();\n\nUnit uav_project_extern_SW_RadioDriver_Impl_adapter_initialiseEntryPoint();\n\nUnit uav_project_extern_SW_RadioDriver_Impl_adapter_computeEntryPoint();\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/FPLN.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_FPLN\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport uav_project_extern._\nimport uav_project_extern.SW.FlightPlanner_Impl_seL4Nix\n\nobject FPLN extends App {\n\n  val FPLNBridge : uav_project_extern.SW.FlightPlanner_Impl_Bridge = {\n    val mission_rcv = Port[B] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FPLN_mission_rcv\", mode = EventIn)\n    val recv_map = Port[SW.Command_Impl] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FPLN_recv_map\", mode = EventIn)\n    val flight_plan = Port[SW.Mission] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FPLN_flight_plan\", mode = EventOut)\n\n    uav_project_extern.SW.FlightPlanner_Impl_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_FPLN\",\n      dispatchProtocol = Sporadic(min = 1),\n      dispatchTriggers = None(),\n\n      mission_rcv = mission_rcv,\n      recv_map = recv_map,\n      flight_plan = flight_plan\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = FPLNBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ mission_rcv: In EventDataPort Base_Types.Boolean\n  val mission_rcv_id: Art.PortId = FPLNBridge.mission_rcv.id\n  var mission_rcv_port: Option[DataContent] = noData\n\n  \/\/ recv_map: In EventDataPort SW.Command_Impl\n  val recv_map_id: Art.PortId = FPLNBridge.recv_map.id\n  var recv_map_port: Option[DataContent] = noData\n\n  \/\/ flight_plan: Out EventDataPort SW.Mission\n  val flight_plan_id: Art.PortId = FPLNBridge.flight_plan.id\n  var flight_plan_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    var portIds: ISZ[Art.PortId] = ISZ()\n    if(!FlightPlanner_Impl_seL4Nix.mission_rcv_IsEmpty()) {\n      portIds = portIds :+ mission_rcv_id\n    }\n    if(!FlightPlanner_Impl_seL4Nix.recv_map_IsEmpty()) {\n      portIds = portIds :+ recv_map_id\n    }\n    return EventTriggered(portIds)\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == mission_rcv_id) {\n      return mission_rcv_port\n    } else if(portId == recv_map_id) {\n      return recv_map_port\n    } else {\n      halt(s\"Unexpected: FPLN.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    mission_rcv_port = FlightPlanner_Impl_seL4Nix.mission_rcv_Receive()\n\n    recv_map_port = FlightPlanner_Impl_seL4Nix.recv_map_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == flight_plan_id) {\n      flight_plan_port = Some(data)\n    } else {\n      halt(s\"Unexpected: FPLN.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(flight_plan_port.nonEmpty) {\n      FlightPlanner_Impl_seL4Nix.flight_plan_Send(flight_plan_port.get)\n      flight_plan_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = MSZ (FPLNBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Integer_32_Payload(Base_Types.Integer_32_empty()))\n    printDataContent(MC.MISSING_TYPE_Impl_Payload(MC.MISSING_TYPE_Impl.empty()))\n    printDataContent(SW.Coordinate_Impl_Payload(SW.Coordinate_Impl.empty()))\n    printDataContent(SW.Map_Payload(SW.Map.empty()))\n    printDataContent(SW.FlightPattern_Payload(SW.FlightPattern.byOrdinal(0).get))\n    printDataContent(Base_Types.Boolean_Payload(Base_Types.Boolean_empty()))\n    printDataContent(SW.Command_Impl_Payload(SW.Command_Impl.empty()))\n    printDataContent(SW.Mission_Payload(SW.Mission.empty()))\n    printDataContent(Base_Types.Integer_64_Payload(Base_Types.Integer_64_empty()))\n    printDataContent(SW.MissionWindow_Payload(SW.MissionWindow.empty()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SW\/FlightPlanner_Impl_seL4Nix.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport art._\n\n@ext object FlightPlanner_Impl_seL4Nix {\n  \/\/ returns T if seL4's mission_rcv port is empty, F otherwise \n  def mission_rcv_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's mission_rcv port \n  def mission_rcv_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's recv_map port is empty, F otherwise \n  def recv_map_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's recv_map port \n  def recv_map_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's flight_plan port\n  def flight_plan_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SW\/FlightPlanner_Impl_seL4Nix_Ext.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport org.sireum._\nimport art._\n\nobject FlightPlanner_Impl_seL4Nix_Ext {\n  def mission_rcv_IsEmpty(): B = halt(\"stub\")\n\n  def mission_rcv_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def recv_map_IsEmpty(): B = halt(\"stub\")\n\n  def recv_map_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def flight_plan_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/FlightPlanner_Impl_adapter.c",
        {
          "type" : "Resource",
          "content" : "#include <FlightPlanner_Impl_adapter.h>\n\nUnit uav_project_extern_SW_FlightPlanner_Impl_adapter_initialiseArchitecture() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_FPLN_FPLN_initialiseArchitecture(SF_LAST);\n}\n\nUnit uav_project_extern_SW_FlightPlanner_Impl_adapter_initialiseEntryPoint() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_FPLN_FPLN_initialiseEntryPoint(SF_LAST);\n}\n\nUnit uav_project_extern_SW_FlightPlanner_Impl_adapter_computeEntryPoint() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_FPLN_FPLN_computeEntryPoint(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/FlightPlanner_Impl_adapter.h",
        {
          "type" : "Resource",
          "content" : "#ifndef FLIGHTPLANNER_IMPL_ADAPTER_H\n#define FLIGHTPLANNER_IMPL_ADAPTER_H\n\n#include <all.h>\n\nUnit uav_project_extern_SW_FlightPlanner_Impl_adapter_initialiseArchitecture();\n\nUnit uav_project_extern_SW_FlightPlanner_Impl_adapter_initialiseEntryPoint();\n\nUnit uav_project_extern_SW_FlightPlanner_Impl_adapter_computeEntryPoint();\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/WPM.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_WPM\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport uav_project_extern._\nimport uav_project_extern.SW.WaypointManager_Impl_seL4Nix\n\nobject WPM extends App {\n\n  val WPMBridge : uav_project_extern.SW.WaypointManager_Impl_Bridge = {\n    val flight_plan = Port[SW.Mission] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_flight_plan\", mode = EventIn)\n    val tracking_id = Port[S64] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_tracking_id\", mode = EventIn)\n    val mission_rcv = Port[B] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_mission_rcv\", mode = EventOut)\n    val mission_window = Port[SW.MissionWindow] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_mission_window\", mode = EventOut)\n\n    uav_project_extern.SW.WaypointManager_Impl_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM\",\n      dispatchProtocol = Sporadic(min = 1),\n      dispatchTriggers = None(),\n\n      flight_plan = flight_plan,\n      tracking_id = tracking_id,\n      mission_rcv = mission_rcv,\n      mission_window = mission_window\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = WPMBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ flight_plan: In EventDataPort SW.Mission\n  val flight_plan_id: Art.PortId = WPMBridge.flight_plan.id\n  var flight_plan_port: Option[DataContent] = noData\n\n  \/\/ tracking_id: In EventDataPort Base_Types.Integer_64\n  val tracking_id_id: Art.PortId = WPMBridge.tracking_id.id\n  var tracking_id_port: Option[DataContent] = noData\n\n  \/\/ mission_rcv: Out EventDataPort Base_Types.Boolean\n  val mission_rcv_id: Art.PortId = WPMBridge.mission_rcv.id\n  var mission_rcv_port: Option[DataContent] = noData\n\n  \/\/ mission_window: Out EventDataPort SW.MissionWindow\n  val mission_window_id: Art.PortId = WPMBridge.mission_window.id\n  var mission_window_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    var portIds: ISZ[Art.PortId] = ISZ()\n    if(!WaypointManager_Impl_seL4Nix.flight_plan_IsEmpty()) {\n      portIds = portIds :+ flight_plan_id\n    }\n    if(!WaypointManager_Impl_seL4Nix.tracking_id_IsEmpty()) {\n      portIds = portIds :+ tracking_id_id\n    }\n    return EventTriggered(portIds)\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == flight_plan_id) {\n      return flight_plan_port\n    } else if(portId == tracking_id_id) {\n      return tracking_id_port\n    } else {\n      halt(s\"Unexpected: WPM.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    flight_plan_port = WaypointManager_Impl_seL4Nix.flight_plan_Receive()\n\n    tracking_id_port = WaypointManager_Impl_seL4Nix.tracking_id_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == mission_rcv_id) {\n      mission_rcv_port = Some(data)\n    } else if(portId == mission_window_id) {\n      mission_window_port = Some(data)\n    } else {\n      halt(s\"Unexpected: WPM.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(mission_rcv_port.nonEmpty) {\n      WaypointManager_Impl_seL4Nix.mission_rcv_Send(mission_rcv_port.get)\n      mission_rcv_port = noData\n    }\n\n    if(mission_window_port.nonEmpty) {\n      WaypointManager_Impl_seL4Nix.mission_window_Send(mission_window_port.get)\n      mission_window_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = MSZ (WPMBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Integer_32_Payload(Base_Types.Integer_32_empty()))\n    printDataContent(MC.MISSING_TYPE_Impl_Payload(MC.MISSING_TYPE_Impl.empty()))\n    printDataContent(SW.Coordinate_Impl_Payload(SW.Coordinate_Impl.empty()))\n    printDataContent(SW.Map_Payload(SW.Map.empty()))\n    printDataContent(SW.FlightPattern_Payload(SW.FlightPattern.byOrdinal(0).get))\n    printDataContent(Base_Types.Boolean_Payload(Base_Types.Boolean_empty()))\n    printDataContent(SW.Command_Impl_Payload(SW.Command_Impl.empty()))\n    printDataContent(SW.Mission_Payload(SW.Mission.empty()))\n    printDataContent(Base_Types.Integer_64_Payload(Base_Types.Integer_64_empty()))\n    printDataContent(SW.MissionWindow_Payload(SW.MissionWindow.empty()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SW\/WaypointManager_Impl_seL4Nix.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport art._\n\n@ext object WaypointManager_Impl_seL4Nix {\n  \/\/ returns T if seL4's flight_plan port is empty, F otherwise \n  def flight_plan_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's flight_plan port \n  def flight_plan_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's tracking_id port is empty, F otherwise \n  def tracking_id_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's tracking_id port \n  def tracking_id_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's mission_rcv port\n  def mission_rcv_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's mission_window port\n  def mission_window_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SW\/WaypointManager_Impl_seL4Nix_Ext.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport org.sireum._\nimport art._\n\nobject WaypointManager_Impl_seL4Nix_Ext {\n  def flight_plan_IsEmpty(): B = halt(\"stub\")\n\n  def flight_plan_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def tracking_id_IsEmpty(): B = halt(\"stub\")\n\n  def tracking_id_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def mission_rcv_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def mission_window_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/WaypointManager_Impl_adapter.c",
        {
          "type" : "Resource",
          "content" : "#include <WaypointManager_Impl_adapter.h>\n\nUnit uav_project_extern_SW_WaypointManager_Impl_adapter_initialiseArchitecture() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_WPM_WPM_initialiseArchitecture(SF_LAST);\n}\n\nUnit uav_project_extern_SW_WaypointManager_Impl_adapter_initialiseEntryPoint() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_WPM_WPM_initialiseEntryPoint(SF_LAST);\n}\n\nUnit uav_project_extern_SW_WaypointManager_Impl_adapter_computeEntryPoint() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_WPM_WPM_computeEntryPoint(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/WaypointManager_Impl_adapter.h",
        {
          "type" : "Resource",
          "content" : "#ifndef WAYPOINTMANAGER_IMPL_ADAPTER_H\n#define WAYPOINTMANAGER_IMPL_ADAPTER_H\n\n#include <all.h>\n\nUnit uav_project_extern_SW_WaypointManager_Impl_adapter_initialiseArchitecture();\n\nUnit uav_project_extern_SW_WaypointManager_Impl_adapter_initialiseEntryPoint();\n\nUnit uav_project_extern_SW_WaypointManager_Impl_adapter_computeEntryPoint();\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/UART.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_UART\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport uav_project_extern._\nimport uav_project_extern.SW.UARTDriver_Impl_seL4Nix\n\nobject UART extends App {\n\n  val UARTBridge : uav_project_extern.SW.UARTDriver_Impl_Bridge = {\n    val mission_window = Port[SW.MissionWindow] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UART_mission_window\", mode = EventIn)\n    val tracking_id = Port[S64] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UART_tracking_id\", mode = EventOut)\n\n    uav_project_extern.SW.UARTDriver_Impl_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_UART\",\n      dispatchProtocol = Sporadic(min = 1),\n      dispatchTriggers = None(),\n\n      mission_window = mission_window,\n      tracking_id = tracking_id\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = UARTBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ mission_window: In EventDataPort SW.MissionWindow\n  val mission_window_id: Art.PortId = UARTBridge.mission_window.id\n  var mission_window_port: Option[DataContent] = noData\n\n  \/\/ tracking_id: Out EventDataPort Base_Types.Integer_64\n  val tracking_id_id: Art.PortId = UARTBridge.tracking_id.id\n  var tracking_id_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    var portIds: ISZ[Art.PortId] = ISZ()\n    if(!UARTDriver_Impl_seL4Nix.mission_window_IsEmpty()) {\n      portIds = portIds :+ mission_window_id\n    }\n    return EventTriggered(portIds)\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == mission_window_id) {\n      return mission_window_port\n    } else {\n      halt(s\"Unexpected: UART.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    mission_window_port = UARTDriver_Impl_seL4Nix.mission_window_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == tracking_id_id) {\n      tracking_id_port = Some(data)\n    } else {\n      halt(s\"Unexpected: UART.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(tracking_id_port.nonEmpty) {\n      UARTDriver_Impl_seL4Nix.tracking_id_Send(tracking_id_port.get)\n      tracking_id_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = MSZ (UARTBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Integer_32_Payload(Base_Types.Integer_32_empty()))\n    printDataContent(MC.MISSING_TYPE_Impl_Payload(MC.MISSING_TYPE_Impl.empty()))\n    printDataContent(SW.Coordinate_Impl_Payload(SW.Coordinate_Impl.empty()))\n    printDataContent(SW.Map_Payload(SW.Map.empty()))\n    printDataContent(SW.FlightPattern_Payload(SW.FlightPattern.byOrdinal(0).get))\n    printDataContent(Base_Types.Boolean_Payload(Base_Types.Boolean_empty()))\n    printDataContent(SW.Command_Impl_Payload(SW.Command_Impl.empty()))\n    printDataContent(SW.Mission_Payload(SW.Mission.empty()))\n    printDataContent(Base_Types.Integer_64_Payload(Base_Types.Integer_64_empty()))\n    printDataContent(SW.MissionWindow_Payload(SW.MissionWindow.empty()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SW\/UARTDriver_Impl_seL4Nix.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SW\n\nimport org.sireum._\nimport art._\n\n@ext object UARTDriver_Impl_seL4Nix {\n  \/\/ returns T if seL4's mission_window port is empty, F otherwise \n  def mission_window_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's mission_window port \n  def mission_window_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's tracking_id port\n  def tracking_id_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SW\/UARTDriver_Impl_seL4Nix_Ext.scala",
        {
          "type" : "Resource",
          "content" : "package uav_project_extern.SW\n\nimport org.sireum._\nimport art._\n\nobject UARTDriver_Impl_seL4Nix_Ext {\n  def mission_window_IsEmpty(): B = halt(\"stub\")\n\n  def mission_window_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def tracking_id_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/UARTDriver_Impl_adapter.c",
        {
          "type" : "Resource",
          "content" : "#include <UARTDriver_Impl_adapter.h>\n\nUnit uav_project_extern_SW_UARTDriver_Impl_adapter_initialiseArchitecture() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_UART_UART_initialiseArchitecture(SF_LAST);\n}\n\nUnit uav_project_extern_SW_UARTDriver_Impl_adapter_initialiseEntryPoint() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_UART_UART_initialiseEntryPoint(SF_LAST);\n}\n\nUnit uav_project_extern_SW_UARTDriver_Impl_adapter_computeEntryPoint() {\n  uav_project_extern_UAV_Impl_Instance_MCMP_PROC_SW_UART_UART_computeEntryPoint(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/UARTDriver_Impl_adapter.h",
        {
          "type" : "Resource",
          "content" : "#ifndef UARTDRIVER_IMPL_ADAPTER_H\n#define UARTDRIVER_IMPL_ADAPTER_H\n\n#include <all.h>\n\nUnit uav_project_extern_SW_UARTDriver_Impl_adapter_initialiseArchitecture();\n\nUnit uav_project_extern_SW_UARTDriver_Impl_adapter_initialiseEntryPoint();\n\nUnit uav_project_extern_SW_UARTDriver_Impl_adapter_computeEntryPoint();\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/seL4Nix\/uav_project_extern\/SlangTypeLibrary\/SlangTypeLibrary.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage uav_project_extern.SlangTypeLibrary\n\nimport org.sireum._\nimport art._\nimport uav_project_extern._\n\nobject SlangTypeLibrary extends App {\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Integer_32_Payload(Base_Types.Integer_32_empty()))\n    printDataContent(MC.MISSING_TYPE_Impl_Payload(MC.MISSING_TYPE_Impl.empty()))\n    printDataContent(SW.Coordinate_Impl_Payload(SW.Coordinate_Impl.empty()))\n    printDataContent(SW.Map_Payload(SW.Map.empty()))\n    printDataContent(SW.FlightPattern_Payload(SW.FlightPattern.byOrdinal(0).get))\n    printDataContent(Base_Types.Boolean_Payload(Base_Types.Boolean_empty()))\n    printDataContent(SW.Command_Impl_Payload(SW.Command_Impl.empty()))\n    printDataContent(SW.Mission_Payload(SW.Mission.empty()))\n    printDataContent(Base_Types.Integer_64_Payload(Base_Types.Integer_64_empty()))\n    printDataContent(SW.MissionWindow_Payload(SW.MissionWindow.empty()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/bin\/compile-hamr-lib.sh",
        {
          "type" : "Resource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\n\ncd \"${PROJECT_HOME}\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\"\nmkdir -p sel4-build\ncd sel4-build\ncmake ..\nmake $MAKE_ARGS\n\n\ncd \"${PROJECT_HOME}\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\"\nmkdir -p sel4-build\ncd sel4-build\ncmake ..\nmake $MAKE_ARGS\n\n\ncd \"${PROJECT_HOME}\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\"\nmkdir -p sel4-build\ncd sel4-build\ncmake ..\nmake $MAKE_ARGS\n\n\ncd \"${PROJECT_HOME}\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\"\nmkdir -p sel4-build\ncd sel4-build\ncmake ..\nmake $MAKE_ARGS\n\n\ncd \"${PROJECT_HOME}\/hamr\/SlangTypeLibrary\"\nmkdir -p sel4-build\ncd sel4-build\ncmake ..\nmake $MAKE_ARGS\n\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/bin\/transpile-sel4.sh",
        {
          "type" : "Resource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\n\nif [ -z \"${SIREUM_HOME}\" ]; then\n  echo \"SIREUM_HOME not set. Refer to https:\/\/github.com\/sireum\/kekinian\/#installing\"\n  exit 1\nfi\n\nSCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\n\nPATH_SEP=\":\"\nif [ -n \"$COMSPEC\" -a -x \"$COMSPEC\" ]; then\n  PATH_SEP=\";\"\nfi\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"main\" \\\n  --apps \"uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_RADIO.RADIO\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 10 \\\n  --sequence \"MS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=1;IS[Z,art.UConnection]=1\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=1\" \\\n  --forward \"art.ArtNative=uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_RADIO.RADIO\" \\\n  --stack-size \"8388608\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/RadioDriver_Impl_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/RadioDriver_Impl_adapter.c\" \\\n  --lib-only \\\n  --verbose\n\nFILE=${OUTPUT_DIR}\/CMakeLists.txt\necho -e \"\\n\\nadd_definitions(-DCAMKES)\" >> $FILE\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"main\" \\\n  --apps \"uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_FPLN.FPLN\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 10 \\\n  --sequence \"MS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=3;IS[Z,art.UConnection]=1\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=3\" \\\n  --forward \"art.ArtNative=uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_FPLN.FPLN\" \\\n  --stack-size \"8388608\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/FlightPlanner_Impl_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/FlightPlanner_Impl_adapter.c\" \\\n  --lib-only \\\n  --verbose\n\nFILE=${OUTPUT_DIR}\/CMakeLists.txt\necho -e \"\\n\\nadd_definitions(-DCAMKES)\" >> $FILE\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"main\" \\\n  --apps \"uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_WPM.WPM\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 10 \\\n  --sequence \"MS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=4;IS[Z,art.UConnection]=1\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=4\" \\\n  --forward \"art.ArtNative=uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_WPM.WPM\" \\\n  --stack-size \"8388608\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/WaypointManager_Impl_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/WaypointManager_Impl_adapter.c\" \\\n  --lib-only \\\n  --verbose\n\nFILE=${OUTPUT_DIR}\/CMakeLists.txt\necho -e \"\\n\\nadd_definitions(-DCAMKES)\" >> $FILE\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_UART\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"main\" \\\n  --apps \"uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_UART.UART\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 10 \\\n  --sequence \"MS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=2;IS[Z,art.UConnection]=1\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=2\" \\\n  --forward \"art.ArtNative=uav_project_extern.UAV_Impl_Instance_MCMP_PROC_SW_UART.UART\" \\\n  --stack-size \"8388608\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/UARTDriver_Impl_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/UARTDriver_Impl_adapter.c\" \\\n  --lib-only \\\n  --verbose\n\nFILE=${OUTPUT_DIR}\/CMakeLists.txt\necho -e \"\\n\\nadd_definitions(-DCAMKES)\" >> $FILE\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/hamr\/SlangTypeLibrary\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/uav_project_extern\/SlangTypeLibrary\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"main\" \\\n  --apps \"uav_project_extern.SlangTypeLibrary.SlangTypeLibrary\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 10 \\\n  --forward \"art.ArtNative=uav_project_extern.SlangTypeLibrary.SlangTypeLibrary\" \\\n  --stack-size \"16777216\" \\\n  --stable-type-id \\\n  --lib-only \\\n  --verbose\n\nFILE=${OUTPUT_DIR}\/CMakeLists.txt\necho -e \"\\n\\nadd_definitions(-DCAMKES)\" >> $FILE",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/ArtTimer_Ext.scala",
        {
          "type" : "Resource",
          "content" : "package art\n\nimport org.sireum.{B, F, ISZ, String, T}\nimport art.Art.{BridgeId, Time}\n\nimport scala.collection.mutable.{Map => MMap}\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.util.concurrent.Executors\nimport java.util.concurrent.TimeUnit\n\nobject ArtTimer_Ext {\n\n  val m: MMap[String, AtomicBoolean] = ArtNative_Ext.concMap()\n  val executor = Executors.newSingleThreadScheduledExecutor()\n\n  def finalise(): Unit = {\n    executor.shutdownNow()\n    ArtNative.logInfo(Art.logTitle, \"Finalized ArtTimer\")\n  }\n\n  def clearTimeout(eventId: String): Unit = {\n    m.get(eventId) match {\n      case Some(b) =>\n        b.set(false)\n        m.remove(eventId)\n        ArtNative.logInfo(Art.logTitle, s\"timeout cleared for $eventId\")\n      case _ =>\n    }\n  }\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = {\n    if(m.get(eventId).nonEmpty) {\n      art.Art.logError(bridgeId, s\"callback already set for $eventId\")\n      return\n    }\n\n    if(wait < 0) {\n      art.Art.logError(bridgeId, s\"Invalid wait time: ${wait}.  Value must be non-negative.\")\n      return\n    }\n\n    var b = new AtomicBoolean(true)\n\n    val bridge = Art.bridge(bridgeId)\n    val eventOuts = bridge.ports.eventOuts.map(_.id)\n    val dataOuts = bridge.ports.dataOuts.map(_.id)\n\n    val task = new Runnable {\n      override def run(): Unit = {\n        if (b.get()) {\n          bridge.synchronized {\n            callback()\n            Art.sendOutput(eventOuts, dataOuts)\n            if(autoClear) {\n              clearTimeout(eventId)\n            }\n          }\n        }\n      }\n    }\n\n    m.put(eventId, b)\n\n    val adjusted = wait.toMP.toLong * ArtNative_Ext.slowdown.toMP.toLong\n    executor.schedule(task, adjusted, TimeUnit.MILLISECONDS)\n\n    art.Art.logInfo(bridgeId, s\"callback set for $eventId\")\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/ArchitectureDescription.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n\n@record class ArchitectureDescription(components: MSZ[Bridge],\n                                      connections: ISZ[UConnection]) {\n  @spec val allPorts: ISZ[UPort] = $\n\n  @spec def allPortsSpec(i: Z): ISZ[UPort] = $\n  \/*\n    l\"\"\"\n    = base:  ISZ[UPort](), if i == 0\n    = rec:   components(i).ports.all ++ allPorts(i - 1), if 0 < i \u2227 i < components.size\n  \"\"\"\n\n  l\"\"\" invariant\n\n         AllPorts:\n           allPorts \u2261 allPortsSpec(components.size - 1)\n\n         ComponentIdUnique:\n           \u2200i: [0, components.size)\n             \u2200j: [0, components.size)\n               i \u2260 j \u2192 components(i).id \u2260 components(j).id\n\n         PortIdUnique:\n           \u2200i: [0, allPorts.size)\n             \u2200j: [0, allPorts.size)\n               i \u2260 j \u2192 allPorts(i).id \u2260 allPorts(j).id\n   \"\"\"\n  *\/\n}\n\n@datatype trait UConnection {\n  \/*\n  l\"\"\" invariant\n         FromPortOut:   from.mode \u2261 PortMode.DataOut \u2228 from.mode \u2261 PortMode.EventOut\n         DataPort:    (from.mode \u2261 PortMode.DataOut) \u2261 (to.mode \u2261 PortMode.DataIn)\n         EventPort:  (from.mode \u2261 PortMode.EventOut) \u2261 (to.mode \u2261 PortMode.EventIn)  \"\"\"\n  *\/\n\n  def from: UPort\n\n  def to: UPort\n}\n\n@datatype class Connection(val from: UPort, val to: UPort)\n  extends UConnection\n\n\n@enum object PortMode {\n  'DataIn\n  'DataOut\n  'EventIn\n  'EventOut\n}\n\n@datatype trait UPort {\n  def id: Art.PortId\n\n  def name: String\n\n  def mode: PortMode.Type\n}\n\n@datatype class Port[T](val id: Art.PortId,\n                        val name: String,\n                        val mode: PortMode.Type)\n  extends UPort\n\n@datatype class UrgentPort[T](val id: Art.PortId,\n                              val name: String,\n                              val mode: PortMode.Type,\n                              val urgency: Z)\n  extends UPort\n\n@msig trait Bridge {\n  def id: Art.BridgeId\n\n  def name: String\n\n  def ports: Bridge.Ports\n\n  def entryPoints: Bridge.EntryPoints\n\n  def dispatchProtocol: DispatchPropertyProtocol\n}\n\n\nobject Bridge {\n\n  \/\/ initialise()  ( compute() | activate() deactivate() | recover() )* finalise()\n  @msig trait EntryPoints {\n\n    def initialise(): Unit\n\n    def activate(): Unit\n\n    def deactivate(): Unit\n\n    def compute(): Unit\n\n    def recover(): Unit\n\n    def finalise(): Unit\n\n    def testCompute(): Unit = { println(\"Default testCompute\") }\n  }\n\n  @datatype class Ports(all: ISZ[UPort],\n                        dataIns: ISZ[UPort],\n                        dataOuts: ISZ[UPort],\n                        eventIns: ISZ[UPort],\n                        eventOuts: ISZ[UPort])\n\n}\n\n\n@datatype trait DispatchPropertyProtocol\n\nobject DispatchPropertyProtocol {\n\n  @datatype class Periodic(period: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Aperiodic() extends DispatchPropertyProtocol\n\n  @datatype class Sporadic(min: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Timed() extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Hybrid() extends DispatchPropertyProtocol\n}\n\n@datatype trait DispatchStatus\n\n@datatype class TimeTriggered() extends DispatchStatus\n\n@datatype class EventTriggered(portIds: ISZ[Art.PortId]) extends DispatchStatus",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/Art.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\nobject Art {\n  type PortId = Z\n  type BridgeId = Z\n  type Time = Z\n\n  val z16max: PortId = org.sireum.conversions.Z16.toZ(Z16.Max) \/\/ 32,767\n\n  val maxComponents: BridgeId = 4\n  val maxPorts: PortId = 10\n\n  val logTitle: String = \"Art\"\n  val bridges: MS[BridgeId, MOption[Bridge]] = MS.create[BridgeId, MOption[Bridge]](maxComponents, MNone[Bridge]())\n  val connections: MS[PortId, ISZ[PortId]] = MS.create[PortId, ISZ[PortId]](maxPorts, ISZ())\n  val ports: MS[PortId, Option[UPort]] = MS.create[PortId, Option[UPort]](maxPorts, None[UPort]())\n\n  def bridge(bridgeId: BridgeId): Bridge = {\n    val MSome(r) = bridges(bridgeId)\n    return r\n  }\n\n  def port(p: PortId) : UPort = {\n    val Some(r) = ports(p)\n    return r\n  }\n\n  def register(bridge: Bridge): Unit = {\n    bridges(bridge.id) = MSome(bridge)\n    bridge.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (periodic: $period)\")\n      case DispatchPropertyProtocol.Sporadic(min) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (sporadic: $min)\")\n    }\n    for (port <- bridge.ports.all) {\n      ports(port.id) = Some(port)\n      port.mode match {\n        case PortMode.DataIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data in)\")\n        case PortMode.DataOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data out)\")\n        case PortMode.EventIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event in)\")\n        case PortMode.EventOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event out)\")\n      }\n    }\n  }\n\n  \/\/ can't find definition in the standard ??\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = { \/\/ DISPATCH_STATUS\n    return ArtNative.dispatchStatus(bridgeId)\n  }\n\n  def receiveInput(eventPortIds: ISZ[PortId], dataPortIds: ISZ[PortId]): Unit = { \/\/ RECEIVE_INPUT\n    ArtNative.receiveInput(eventPortIds, dataPortIds)\n  }\n\n  def putValue(portId: PortId, data: DataContent): Unit = { \/\/ PUT_VALUE\n    ArtNative.putValue(portId, data)\n  }\n\n  def getValue(portId: PortId): Option[DataContent] = { \/\/ GET_VALUE\n    return ArtNative.getValue(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    ArtNative.sendOutput(eventPortIds, dataPortIds)\n  }\n\n  def logInfo(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logInfo(bridge(bridgeId).name, msg)\n  }\n\n  def logError(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logError(bridge(bridgeId).name, msg)\n  }\n\n  def logDebug(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logDebug(bridge(bridgeId).name, msg)\n  }\n\n  def connect(from: UPort, to: UPort): Unit = {\n    connections(from.id) = connections(from.id) :+ to.id\n    ArtNative.logInfo(logTitle, s\"Connected ports: ${from.name} -> ${to.name}\")\n  }\n\n  def run(system: ArchitectureDescription): Unit = {\n\n    for (component <- system.components) {\n      register(component)\n    }\n\n    for (connection <- system.connections) {\n      connect(connection.from, connection.to)\n    }\n\n    ArtNative.run()\n  }\n\n  def time(): Time = {\n    return ArtNative.time()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Clears any existing ports and bridges, then sets up ports\/bridges for the next test.\n   *\n   * Automatically called by BridgeTestSuite before each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = MNone()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n\n    \/\/ register bridge passed to this method\n    register(bridge)\n\n    \/\/ let ArtNative reset itself as well\n    ArtNative.initTest(bridge)\n  }\n\n  def executeTest(bridge: Bridge): Unit = {\n    ArtNative.executeTest(bridge)\n  }\n\n  def finalizeTest(bridge: Bridge): Unit = {\n    ArtNative.finalizeTest(bridge)\n  }\n\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    ArtNative.releaseOutput(eventPortIds, dataPortIds)\n  }\n\n  def manuallyClearOutput(): Unit = {\n    ArtNative.manuallyClearOutput()\n  }\n\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    ArtNative.insertInPortValue(dstPortId, data)\n  }\n\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    ArtNative.observeOutPortValue(portId)\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/ArtNative_Ext.scala",
        {
          "type" : "Resource",
          "content" : "package art\n\nimport org.sireum._\n\nimport java.util.concurrent.CountDownLatch\nimport java.util.concurrent.atomic.AtomicBoolean\n\n\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtMessage {\n  val UNSET: Z = -1\n}\n\ncase class ArtMessage (data: DataContent,\n\n                       var srcPortId: Art.PortId = ArtMessage.UNSET,\n                       var dstPortId: Art.PortId = ArtMessage.UNSET,\n\n                       \/\/ when putValue was called by producer\n                       var putValueTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when sendOutput transferred message from out port var of producer \n                       var sendOutputTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when message arrived via transport layer\n                       var dstArrivalTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when receiveInput transferred message to in port vars of consumer\n                       var receiveInputTimestamp: Z = ArtMessage.UNSET\n                      )\n\nobject ArtNative_Ext {\n  val noTime: Art.Time = 0\n\n  val slowdown: Z = 1\n\n  val lastSporadic: MMap[Art.BridgeId, Art.Time] = concMap()\n  val eventPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val dataPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val receivedPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n  val sentPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val portIds = ISZ[Art.PortId](Art.bridge(bridgeId).ports.eventIns.elements.map(_.id).filter(eventPortVariables.get(_).nonEmpty): _*)\n    if (portIds.isEmpty) {\n      TimeTriggered()\n    } else {\n      val urgentFifo = ops.ISZOps(portIds.map(Art.port(_))).sortWith { \/\/ reverse sort\n        case (p1: UrgentPort[_], p2: UrgentPort[_]) =>\n          if(p1.urgency < p2.urgency) F\n          else if(p1.urgency > p2.urgency) T\n          else eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n        case (_: UrgentPort[_], _: Port[_]) => T \/\/ urgent ports take precedence\n        case (_: Port[_], _: UrgentPort[_]) => F \/\/ urgent ports take precedence\n        case (p1: Port[_], p2: Port[_]) =>\n          eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n      }.map(_.id)\n      EventTriggered(urgentFifo)\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (portId <- eventPortIds) {\n      receivedPortValues -= portId \/\/ remove stale events from previous dispatch\n      eventPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          eventPortVariables -= portId\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      dataPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    sentPortValues(portId) = ArtMessage(data = data, srcPortId = portId, putValueTimestamp = Art.time())\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    val data = receivedPortValues.get(portId) match {\n      case scala.Some(v) => org.sireum.Some(v.data)\n      case _ => org.sireum.None[DataContent]()\n    }\n    return data\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      sentPortValues.get(srcPortId) match {\n        case scala.Some(msg) =>\n          \/\/ todo send on emission as well as receive\n          for(dstPortId <- Art.connections(srcPortId).elements) {\n\n            \/\/ simulate sending msg via transport middleware\n\n            val _msg = msg.copy(dstPortId = dstPortId, sendOutputTimestamp = Art.time())\n\n            Art.port(dstPortId).mode match {\n              case PortMode.DataIn | PortMode.DataOut =>\n                dataPortVariables(dstPortId) = _msg\n              case PortMode.EventIn | PortMode.EventOut =>\n                eventPortVariables(dstPortId) = _msg\n            }\n\n            _msg.dstArrivalTimestamp = Art.time()\n\n            ArtDebug_Ext.outputCallback(srcPortId, dstPortId, _msg.data, _msg.dstArrivalTimestamp)\n          }\n          sentPortValues -= srcPortId\n        case _ =>\n      }\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = log(\"info\", title, msg)\n\n  def logError(title: String, msg: String): Unit = log(\"error\", title, msg)\n\n  def logDebug(title: String, msg: String): Unit = log(\"debug\", title, msg)\n\n  def time(): Art.Time = toZ(System.currentTimeMillis())\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    val b = Art.bridge(bridgeId)\n    b.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        val ls = lastSporadic.getOrElse(bridgeId, noTime)\n        if (time() - ls < minRate) {\n          return F\n        } else {\n          return b.ports.eventIns.elements.exists(port => eventPortVariables.contains(port.id))\n        }\n    }\n  }\n\n  def run(): Unit = {\n    \/\/require(Art.bridges.elements.forall(_.nonEmpty))\n\n    val bridges = {\n      var r = Vector[Bridge]()\n      for (e <- Art.bridges.elements) e match {\n        case MSome(b) => r :+= b\n        case _ =>\n      }\n      r\n    }\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n    }\n\n    val terminated = new AtomicBoolean()\n    val numTerminated = new CountDownLatch(bridges.size)\n\n    for (bridge <- bridges) {\n      val rate = bridge.dispatchProtocol match {\n        case DispatchPropertyProtocol.Periodic(period) => period\n        case DispatchPropertyProtocol.Sporadic(min) => min\n      }\n\n      new Thread(() => {\n        logInfo(Art.logTitle, s\"Thread for ${bridge.name} instantiated.\")\n        ArtNative_Ext.synchronized {\n          ArtNative_Ext.wait()\n        }\n        while (!terminated.get()) {\n          Thread.sleep((rate * slowdown).toMP.toLong)\n          if (shouldDispatch(bridge.id))\n            try {\n              bridge.synchronized {\n                bridge.entryPoints.compute()\n              }\n            }\n            catch {\n              case x : Throwable =>\n                x.printStackTrace()\n                terminated.set(true)\n            }\n        }\n        numTerminated.countDown()\n      }).start()\n    }\n\n    Thread.sleep(1000)\n\n    logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    ArtDebug_Ext.start()\n\n    ArtNative_Ext.synchronized {\n      ArtNative_Ext.notifyAll()\n    }\n\n    Console.in.readLine()\n    terminated.set(true)\n    numTerminated.await()\n    logInfo(Art.logTitle, s\"End execution...\")\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n    }\n\n    ArtTimer_Ext.finalise()\n    ArtDebug_Ext.stop()\n  }\n\n  def log(kind: String, title: String, msg: String): Unit = {\n    Console.out.println(s\"\"\"{ \"log\" : \"$kind\", \"title\" : ${escape(title)}, \"msg\" : ${escape(msg)}, \"time\" : \"${time()}\" }\"\"\")\n    Console.out.flush()\n  }\n\n  def escape(raw: String): String = {\n    import scala.reflect.runtime.universe._\n    Literal(Constant(raw.value)).toString\n  }\n\n  def toZ(value: Long): Z = Z(value)\n\n  def concMap[K, V](): MMap[K, V] = {\n    import scala.collection.JavaConverters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asScala\n  }\n\n\n\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges AND resets all inputs and outputs for all ports.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ note that all ports and bridges were deleted by Art's initTest\n\n    \/\/ delete ALL port values as well as lastSporadic tracker\n    lastSporadic.clear()\n    eventPortVariables.clear()\n    dataPortVariables.clear()\n    receivedPortValues.clear()\n    sentPortValues.clear()\n\n    \/\/ clear pending ArtTimer events (also done after a test completes)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n\n    bridge.entryPoints.initialise()\n    logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n  }\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.testCompute()\n  }\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.finalise()\n    logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n\n    \/\/ clear pending ArtTimer events (also done before a test begins)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n  }\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ testing SEND_OUTPUT\n    \/\/ note: sendOutput is usually accessed via: Art.sendOutput -> ArtNative.sendOutput -> ArtNative_Ext.sendOutput\n    \/\/ NO OP\n  }\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = {\n    sentPortValues.clear()\n  }\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    val artMessage = ArtMessage(data = data, dstPortId = dstPortId, dstArrivalTimestamp = Art.time())\n    Art.port(dstPortId).mode match {\n      case PortMode.DataIn | PortMode.DataOut =>\n        dataPortVariables(dstPortId) = artMessage\n      case PortMode.EventIn | PortMode.EventOut =>\n        eventPortVariables(dstPortId) = artMessage\n    }\n  }\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    sentPortValues.get(portId) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/DataContent.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait DataContent\n\n@datatype class Empty extends art.DataContent",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/ArtTimer.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.Art.BridgeId\n\n@ext object ArtTimer {\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = $\n\n  def clearTimeout(eventId: String): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/ArtDebug.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtDebug {\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = $\n\n  def registerListener(listener: ArtListener): Unit = $\n\n  def setDebugObject[T](key: String, o: T): Unit = $\n\n  def getDebugObject[T](key: String): Option[T] = $\n}\n\n@msig trait ArtListener {\n\n  \/\/ lifecycle information\n  def start(time: Art.Time): Unit\n  def stop(time: Art.Time): Unit\n\n  \/\/ communication information\n  def output(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Art.Time): Unit\n\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/ArtDebug_Ext.scala",
        {
          "type" : "Resource",
          "content" : "package art\n\nimport org.sireum._\nimport art.Art.Time\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtDebug_Ext {\n  private val debugObjects: MMap[String, Any] = ArtNative_Ext.concMap()\n  private val listeners: MSet[ArtListener] = concSet()\n\n  protected[art] def start(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.start(time))\n  }\n\n  protected[art] def stop(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.stop(time))\n  }\n\n  protected[art] def outputCallback(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Time): Unit = {\n    listeners.foreach((listener: ArtListener) => listener.output(src, dst, data, time))\n  }\n\n  def setDebugObject[T](key: String, o: T): Unit = {\n    ArtNative.logDebug(Art.logTitle, s\"Set debug object for $key\")\n    debugObjects(key) = o\n  }\n\n  def getDebugObject[T](key: String): Option[T] = {\n    debugObjects.get(key) match {\n      case scala.Some(o) => Some(o.asInstanceOf[T])\n      case _ => None[T]()\n    }\n  }\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = {\n    assert(z\"0\" <= bridgeId && bridgeId < Art.maxComponents && Art.bridges(bridgeId).nonEmpty)\n\n    val bridge = Art.bridges(bridgeId).get\n    assert(bridge.ports.all.elements.map(_.id).contains(port))\n\n    if(bridge.ports.dataOuts.elements.map(_.id).contains(port) ||\n      bridge.ports.eventOuts.elements.map(_.id).contains(port)) {\n\n      ArtNative.logDebug(Art.logTitle, s\"Injecting from port ${Art.ports(port).get.name}\")\n\n      ArtNative.putValue(port, data)\n      ArtNative.sendOutput(bridge.ports.eventOuts.map(_.id), bridge.ports.dataOuts.map(_.id))\n    } else {\n      ArtNative.logDebug(Art.logTitle, s\"Injecting to port ${Art.ports(port).get.name}\")\n\n      if(bridge.ports.dataIns.elements.map(_.id).contains(port)) {\n        ArtNative_Ext.dataPortVariables(port) = ArtMessage(data)\n      } else {\n        ArtNative_Ext.eventPortVariables(port) = ArtMessage(data)\n      }\n    }\n  }\n\n  def registerListener(listener: ArtListener): Unit = {\n    listeners.add(listener)\n  }\n\n  def concSet[K](): MSet[K] = {\n    import scala.collection.JavaConverters._\n    val m: java.util.Set[K] = java.util.concurrent.ConcurrentHashMap.newKeySet()\n    m.asScala\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/src\/main\/art\/ArtNative.scala",
        {
          "type" : "Resource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtNative {\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = $\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = $\n\n  def getValue(portId: Art.PortId): Option[DataContent] = $\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def logInfo(title: String, msg: String): Unit = $\n\n  def logError(title: String, msg: String): Unit = $\n\n  def logDebug(title: String, msg: String): Unit = $\n\n  def run(): Unit = $\n\n  def time(): Art.Time = $\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = $\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = $\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = $\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/build.sbt",
        {
          "type" : "Resource",
          "content" : "\/\/ Example sbt build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ To open the following project in Sireum IVE select 'File > Open ...' and then\n\/\/ navigate to the directory containing this file then click 'OK'.  To install\n\/\/ Sireum IVE see https:\/\/github.com\/sireum\/kekinian#installing\n\nlazy val UAV_Impl_Instance = slangEmbeddedTestProject(\"UAV_Impl_Instance\", \".\")\n\n\nval scalaVer = \"2.12.11\"\n\nval sireumScalacVersion = \"4.20200423.382fffa\" \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20200423.382fffa\n\nval runtimeVersion = \"59f0e47\" \/\/ https:\/\/github.com\/sireum\/runtime\/tree\/59f0e47\n\nval scalaTestVersion = \"3.1.1\"\n\n\nval commonSettings = Seq(\n  organization := \"org.sireum\",\n  incOptions := incOptions.value.withLogRecompileOnMacro(false),\n  scalaVersion := scalaVer,\n  scalacOptions := Seq(\"-target:jvm-1.8\", \"-deprecation\",\n    \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-Xfatal-warnings\"),\n  Test \/ parallelExecution := true,\n  resolvers ++= Seq(Resolver.sonatypeRepo(\"public\"), \"jitpack\" at \"https:\/\/jitpack.io\"),\n  addCompilerPlugin(\"org.sireum\" %% \"scalac-plugin\" % sireumScalacVersion),\n  libraryDependencies ++= Seq(\n    \"org.sireum.runtime\" %% \"library\" % runtimeVersion withSources() withJavadoc()\n  )\n)\n\nval slangEmbeddedSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/art\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/architecture\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/bridge\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/component\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/data\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/seL4Nix\" \n)\n\ndef standardProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).settings(commonSettings)\n\ndef slangEmbeddedProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings)\n\ndef slangEmbeddedTestProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings ++\n      Seq(\n        Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/bridge\",\n        libraryDependencies += \"org.scalatest\" %% \"scalatest\" % scalaTestVersion % \"test\")\n    )        \n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/slang-embedded\/project\/build.properties",
        {
          "type" : "Resource",
          "content" : "sbt.version=1.3.3\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/RadioDriver_Impl\/RadioDriver_Impl.camkes",
        {
          "type" : "Resource",
          "content" : "component RadioDriver_Impl {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_recv_map_out_1_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_recv_map_out_queue_1;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/FlightPlanner_Impl\/FlightPlanner_Impl.camkes",
        {
          "type" : "Resource",
          "content" : "component FlightPlanner_Impl {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_flight_plan_1_notification;\n  consumes ReceiveEvent sb_mission_rcv_notification;\n  consumes ReceiveEvent sb_recv_map_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_mission_rcv_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_recv_map_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_flight_plan_queue_1;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/WaypointManager_Impl\/WaypointManager_Impl.camkes",
        {
          "type" : "Resource",
          "content" : "component WaypointManager_Impl {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  include <sb_queue_union_art_DataContent_512.h>;\n  control;\n  emits ReceiveEvent sb_mission_rcv_1_notification;\n  emits ReceiveEvent sb_mission_window_512_notification;\n  consumes ReceiveEvent sb_flight_plan_notification;\n  consumes ReceiveEvent sb_tracking_id_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_flight_plan_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_tracking_id_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_mission_rcv_queue_1;\n  dataport sb_queue_union_art_DataContent_512_t sb_mission_window_queue_512;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/UARTDriver_Impl\/UARTDriver_Impl.camkes",
        {
          "type" : "Resource",
          "content" : "component UARTDriver_Impl {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_512.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_tracking_id_1_notification;\n  consumes ReceiveEvent sb_mission_window_notification;\n  dataport sb_queue_union_art_DataContent_512_t sb_mission_window_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_tracking_id_queue_1;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/UAV_Impl_Instance.camkes",
        {
          "type" : "Resource",
          "content" : "import <std_connector.camkes>;\nimport \"components\/RadioDriver_Impl\/RadioDriver_Impl.camkes\";\nimport \"components\/FlightPlanner_Impl\/FlightPlanner_Impl.camkes\";\nimport \"components\/WaypointManager_Impl\/WaypointManager_Impl.camkes\";\nimport \"components\/UARTDriver_Impl\/UARTDriver_Impl.camkes\";\n\nassembly {\n  composition {\n    component RadioDriver_Impl RADIO;\n    component FlightPlanner_Impl FPLN;\n    component WaypointManager_Impl WPM;\n    component UARTDriver_Impl UART;\n\n    connection seL4Notification conn1(from RADIO.sb_recv_map_out_1_notification, to FPLN.sb_recv_map_notification);\n    connection seL4SharedData conn2(from RADIO.sb_recv_map_out_queue_1, to FPLN.sb_recv_map_queue);\n    connection seL4Notification conn3(from FPLN.sb_flight_plan_1_notification, to WPM.sb_flight_plan_notification);\n    connection seL4SharedData conn4(from FPLN.sb_flight_plan_queue_1, to WPM.sb_flight_plan_queue);\n    connection seL4Notification conn5(from WPM.sb_mission_rcv_1_notification, to FPLN.sb_mission_rcv_notification);\n    connection seL4SharedData conn6(from WPM.sb_mission_rcv_queue_1, to FPLN.sb_mission_rcv_queue);\n    connection seL4Notification conn7(from WPM.sb_mission_window_512_notification, to UART.sb_mission_window_notification);\n    connection seL4SharedData conn8(from WPM.sb_mission_window_queue_512, to UART.sb_mission_window_queue);\n    connection seL4Notification conn9(from UART.sb_tracking_id_1_notification, to WPM.sb_tracking_id_notification);\n    connection seL4SharedData conn10(from UART.sb_tracking_id_queue_1, to WPM.sb_tracking_id_queue);\n  }\n\n  configuration {\n    RADIO._stack_size = 8388608;\n    FPLN._stack_size = 8388608;\n    WPM._stack_size = 8388608;\n    UART._stack_size = 8388608;\n    RADIO.sb_recv_map_out_queue_1_access = \"W\";\n    FPLN.sb_recv_map_queue_access = \"R\";\n    FPLN.sb_flight_plan_queue_1_access = \"W\";\n    WPM.sb_flight_plan_queue_access = \"R\";\n    WPM.sb_mission_rcv_queue_1_access = \"W\";\n    FPLN.sb_mission_rcv_queue_access = \"R\";\n    WPM.sb_mission_window_queue_512_access = \"W\";\n    UART.sb_mission_window_queue_access = \"R\";\n    UART.sb_tracking_id_queue_1_access = \"W\";\n    WPM.sb_tracking_id_queue_access = \"R\";\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/CMakeLists.txt",
        {
          "type" : "Resource",
          "content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (UAV_Impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nexecute_process(COMMAND bash -c \"${CMAKE_CURRENT_LIST_DIR}\/bin\/compile-hamr-lib.sh\")\n\nset(HAMR_LIB_UAV_Impl_Instance_MCMP_PROC_SW_FPLN ${CMAKE_CURRENT_LIST_DIR}\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/sel4-build\/libmain.a)\n\nset(HAMR_INCLUDES_UAV_Impl_Instance_MCMP_PROC_SW_FPLN\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/org\/sireum\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/org\/sireum\/ops\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/uav_project_extern\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/uav_project_extern\/SW\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/uav_project_extern\/SW\/FlightPattern\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/uav_project_extern\/SW\/FlightPlanner_Impl_Bridge\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/uav_project_extern\/MC\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/uav_project_extern\/Base_Types\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/art\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/art\/DispatchPropertyProtocol\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/art\/PortMode\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/library\/art\/Bridge\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/runtime\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_FPLN\/ext\n)\n\nset(HAMR_LIB_UAV_Impl_Instance_MCMP_PROC_SW_UART ${CMAKE_CURRENT_LIST_DIR}\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/sel4-build\/libmain.a)\n\nset(HAMR_INCLUDES_UAV_Impl_Instance_MCMP_PROC_SW_UART\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/org\/sireum\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/org\/sireum\/ops\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/uav_project_extern\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/uav_project_extern\/SW\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/uav_project_extern\/SW\/FlightPattern\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/uav_project_extern\/SW\/UARTDriver_Impl_Bridge\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/uav_project_extern\/MC\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_UART\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/uav_project_extern\/Base_Types\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/art\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/art\/DispatchPropertyProtocol\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/art\/PortMode\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/library\/art\/Bridge\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/runtime\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_UART\/ext\n)\n\nset(HAMR_LIB_UAV_Impl_Instance_MCMP_PROC_SW_WPM ${CMAKE_CURRENT_LIST_DIR}\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/sel4-build\/libmain.a)\n\nset(HAMR_INCLUDES_UAV_Impl_Instance_MCMP_PROC_SW_WPM\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/org\/sireum\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/org\/sireum\/ops\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/uav_project_extern\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/uav_project_extern\/SW\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/uav_project_extern\/SW\/FlightPattern\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/uav_project_extern\/SW\/WaypointManager_Impl_Bridge\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/uav_project_extern\/MC\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/uav_project_extern\/Base_Types\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/art\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/art\/DispatchPropertyProtocol\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/art\/PortMode\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/library\/art\/Bridge\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/runtime\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_WPM\/ext\n)\n\nset(HAMR_LIB_SlangTypeLibrary ${CMAKE_CURRENT_LIST_DIR}\/hamr\/SlangTypeLibrary\/sel4-build\/libmain.a)\n\nset(HAMR_INCLUDES_SlangTypeLibrary\n  hamr\/SlangTypeLibrary\/library\/org\/sireum\n  hamr\/SlangTypeLibrary\/library\/uav_project_extern\n  hamr\/SlangTypeLibrary\/library\/uav_project_extern\/SW\n  hamr\/SlangTypeLibrary\/library\/uav_project_extern\/SW\/FlightPattern\n  hamr\/SlangTypeLibrary\/library\/uav_project_extern\/MC\n  hamr\/SlangTypeLibrary\/library\/uav_project_extern\/Base_Types\n  hamr\/SlangTypeLibrary\/library\/uav_project_extern\/SlangTypeLibrary\n  hamr\/SlangTypeLibrary\/library\/art\n  hamr\/SlangTypeLibrary\/runtime\n)\n\nset(HAMR_LIB_UAV_Impl_Instance_MCMP_PROC_SW_RADIO ${CMAKE_CURRENT_LIST_DIR}\/hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/sel4-build\/libmain.a)\n\nset(HAMR_INCLUDES_UAV_Impl_Instance_MCMP_PROC_SW_RADIO\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/org\/sireum\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/org\/sireum\/ops\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/uav_project_extern\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/uav_project_extern\/SW\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/uav_project_extern\/SW\/RadioDriver_Impl_Bridge\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/uav_project_extern\/SW\/FlightPattern\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/uav_project_extern\/MC\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/uav_project_extern\/Base_Types\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/uav_project_extern\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/art\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/art\/DispatchPropertyProtocol\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/art\/PortMode\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/library\/art\/Bridge\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/runtime\n  hamr\/UAV_Impl_Instance_MCMP_PROC_SW_RADIO\/ext\n)\n\nDeclareCAmkESComponent(RadioDriver_Impl\n  SOURCES components\/RadioDriver_Impl\/src\/sb_RadioDriver_Impl.c includes\/sb_queue_union_art_DataContent_1.c\n  INCLUDES ${HAMR_INCLUDES_UAV_Impl_Instance_MCMP_PROC_SW_RADIO} components\/RadioDriver_Impl\/includes\/ includes\n  LIBS ${HAMR_LIB_UAV_Impl_Instance_MCMP_PROC_SW_RADIO}\n)\n\nDeclareCAmkESComponent(FlightPlanner_Impl\n  SOURCES components\/FlightPlanner_Impl\/src\/sb_FlightPlanner_Impl.c includes\/sb_queue_union_art_DataContent_1.c includes\/sb_queue_union_art_DataContent_1.c includes\/sb_queue_union_art_DataContent_1.c\n  INCLUDES ${HAMR_INCLUDES_UAV_Impl_Instance_MCMP_PROC_SW_FPLN} components\/FlightPlanner_Impl\/includes\/ includes\n  LIBS ${HAMR_LIB_UAV_Impl_Instance_MCMP_PROC_SW_FPLN}\n)\n\nDeclareCAmkESComponent(WaypointManager_Impl\n  SOURCES components\/WaypointManager_Impl\/src\/sb_WaypointManager_Impl.c includes\/sb_queue_union_art_DataContent_1.c includes\/sb_queue_union_art_DataContent_1.c includes\/sb_queue_union_art_DataContent_1.c includes\/sb_queue_union_art_DataContent_512.c\n  INCLUDES ${HAMR_INCLUDES_UAV_Impl_Instance_MCMP_PROC_SW_WPM} components\/WaypointManager_Impl\/includes\/ includes\n  LIBS ${HAMR_LIB_UAV_Impl_Instance_MCMP_PROC_SW_WPM}\n)\n\nDeclareCAmkESComponent(UARTDriver_Impl\n  SOURCES components\/UARTDriver_Impl\/src\/sb_UARTDriver_Impl.c includes\/sb_queue_union_art_DataContent_512.c includes\/sb_queue_union_art_DataContent_1.c\n  INCLUDES ${HAMR_INCLUDES_UAV_Impl_Instance_MCMP_PROC_SW_UART} components\/UARTDriver_Impl\/includes\/ includes\n  LIBS ${HAMR_LIB_UAV_Impl_Instance_MCMP_PROC_SW_UART}\n)\n\nDeclareCAmkESRootserver(UAV_Impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/bin\/run-camkes.sh",
        {
          "type" : "Resource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -e\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n\n# location of camkes-projects directory\nif [ -n \"$1\" ]; then\n    CAMKES_DIR=$1\nelif [ -d \"\/host\/camkes-project\" ]; then\n    CAMKES_DIR=\"\/host\/camkes-project\"\nelif [ -d \"${HOME}\/CASE\/camkes\" ]; then\n    CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"$CAMKES_DIR\" || ! -d \"${CAMKES_DIR}\" ]]; then\n    echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your CAmkES project directory\"\n    exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name \nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=$CAMKES_DIR\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ ! -e \"${CAMKES_APPS_DIR}\" ]; then\n    ln -sv $PROJECT_HOME $CAMKES_APPS_DIR\nfi\n\n\n########################\n# run CAmkES\/seL4 build\n########################\n\ncd $CAMKES_DIR\n\nBUILD_DIR=build_$HAMR_CAMKES_PROJ\n\nrm -rf $BUILD_DIR\nmkdir $BUILD_DIR\ncd $BUILD_DIR\n\n..\/init-build.sh -DCAMKES_APP=$HAMR_CAMKES_PROJ && ninja\n\n########################\n# simulate via QEMU\n########################\n\n.\/simulate                   \n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/RadioDriver_Impl\/src\/sb_RadioDriver_Impl.c",
        {
          "type" : "Resource",
          "content" : "#include \"..\/includes\/sb_RadioDriver_Impl.h\"\n#include <sb_queue_union_art_DataContent_1.h>\n#include <RadioDriver_Impl_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nbool sb_recv_map_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_recv_map_out_queue_1, (union_art_DataContent*) data);\n  sb_recv_map_out_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send recv_map_out: Out EventDataPort SW__Command_Impl\nUnit uav_project_extern_SW_RadioDriver_Impl_seL4Nix_recv_map_out_Send(STACK_FRAME \n  art_DataContent d) {\n  sb_recv_map_out_enqueue(d);\n}\n\nvoid pre_init(void) {\n  printf(\"Entering pre-init of RadioDriver_Impl\\n\");\n\n  \/\/ initialise data structure for outgoing event data port recv_map_out\n  sb_queue_union_art_DataContent_1_init(sb_recv_map_out_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  uav_project_extern_SW_RadioDriver_Impl_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  uav_project_extern_SW_RadioDriver_Impl_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of RadioDriver_Impl\\n\");\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    \/\/ call the component's compute entrypoint\n    uav_project_extern_SW_RadioDriver_Impl_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/RadioDriver_Impl\/includes\/sb_RadioDriver_Impl.h",
        {
          "type" : "Resource",
          "content" : "#ifndef __sb_AADL_RadioDriver_Impl_types__H\n#define __sb_AADL_RadioDriver_Impl_types__H\n\n#include <sb_types.h>\n\nbool sb_recv_map_out_enqueue(const union_art_DataContent *);\n\n#endif \/\/ __sb_AADL_RadioDriver_Impl_types__H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/FlightPlanner_Impl\/src\/sb_FlightPlanner_Impl.c",
        {
          "type" : "Resource",
          "content" : "#include \"..\/includes\/sb_FlightPlanner_Impl.h\"\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <FlightPlanner_Impl_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_mission_rcv_recv_queue;\n\n\/************************************************************************\n * sb_mission_rcv_dequeue_poll:\n ************************************************************************\/\nbool sb_mission_rcv_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_mission_rcv_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_mission_rcv_dequeue:\n ************************************************************************\/\nbool sb_mission_rcv_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_mission_rcv_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_mission_rcv_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_mission_rcv_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_mission_rcv_recv_queue);\n}\n\n\/************************************************************************\n * sb_mission_rcv_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_mission_rcv\n *\n ************************************************************************\/\nstatic void sb_mission_rcv_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_mission_rcv_notification_reg_callback(sb_mission_rcv_notification_handler, NULL));\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_recv_map_recv_queue;\n\n\/************************************************************************\n * sb_recv_map_dequeue_poll:\n ************************************************************************\/\nbool sb_recv_map_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_recv_map_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_recv_map_dequeue:\n ************************************************************************\/\nbool sb_recv_map_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_recv_map_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_recv_map_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_recv_map_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_recv_map_recv_queue);\n}\n\n\/************************************************************************\n * sb_recv_map_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_recv_map\n *\n ************************************************************************\/\nstatic void sb_recv_map_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_recv_map_notification_reg_callback(sb_recv_map_notification_handler, NULL));\n}\n\nbool sb_flight_plan_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_flight_plan_queue_1, (union_art_DataContent*) data);\n  sb_flight_plan_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send flight_plan: Out EventDataPort SW__Mission\nUnit uav_project_extern_SW_FlightPlanner_Impl_seL4Nix_flight_plan_Send(STACK_FRAME \n  art_DataContent d) {\n  sb_flight_plan_enqueue(d);\n}\n\n\/\/ is_empty mission_rcv: In EventDataPort\nB uav_project_extern_SW_FlightPlanner_Impl_seL4Nix_mission_rcv_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_mission_rcv_is_empty();\n}\n\n\/\/ receive mission_rcv: In EventDataPort union_art_DataContent\nUnit uav_project_extern_SW_FlightPlanner_Impl_seL4Nix_mission_rcv_Receive(STACK_FRAME\n  Option_8E9F45 result) {\n  union_art_DataContent val;\n  if(sb_mission_rcv_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(STACK_FRAME &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty recv_map: In EventDataPort\nB uav_project_extern_SW_FlightPlanner_Impl_seL4Nix_recv_map_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_recv_map_is_empty();\n}\n\n\/\/ receive recv_map: In EventDataPort union_art_DataContent\nUnit uav_project_extern_SW_FlightPlanner_Impl_seL4Nix_recv_map_Receive(STACK_FRAME\n  Option_8E9F45 result) {\n  union_art_DataContent val;\n  if(sb_recv_map_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(STACK_FRAME &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  printf(\"Entering pre-init of FlightPlanner_Impl\\n\");\n\n  \/\/ initialise data structure for incoming event data port mission_rcv\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_mission_rcv_recv_queue, sb_mission_rcv_queue);\n\n  \/\/ initialise data structure for incoming event data port recv_map\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_recv_map_recv_queue, sb_recv_map_queue);\n\n  \/\/ initialise data structure for outgoing event data port flight_plan\n  sb_queue_union_art_DataContent_1_init(sb_flight_plan_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  uav_project_extern_SW_FlightPlanner_Impl_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  uav_project_extern_SW_FlightPlanner_Impl_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of FlightPlanner_Impl\\n\");\n}\n\nvoid post_init(void){\n  \/\/ register callback for EventDataPort port mission_rcv\n  CALLBACKOP(sb_mission_rcv_notification_reg_callback(sb_mission_rcv_notification_handler, NULL));\n\n  \/\/ register callback for EventDataPort port recv_map\n  CALLBACKOP(sb_recv_map_notification_reg_callback(sb_recv_map_notification_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    \/\/ call the component's compute entrypoint\n    uav_project_extern_SW_FlightPlanner_Impl_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/FlightPlanner_Impl\/includes\/sb_FlightPlanner_Impl.h",
        {
          "type" : "Resource",
          "content" : "#ifndef __sb_AADL_FlightPlanner_Impl_types__H\n#define __sb_AADL_FlightPlanner_Impl_types__H\n\n#include <sb_types.h>\n\nbool sb_mission_rcv_dequeue(union_art_DataContent *);\n\nbool sb_recv_map_dequeue(union_art_DataContent *);\n\nbool sb_flight_plan_enqueue(const union_art_DataContent *);\n\n#endif \/\/ __sb_AADL_FlightPlanner_Impl_types__H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/WaypointManager_Impl\/src\/sb_WaypointManager_Impl.c",
        {
          "type" : "Resource",
          "content" : "#include \"..\/includes\/sb_WaypointManager_Impl.h\"\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_queue_union_art_DataContent_512.h>\n#include <WaypointManager_Impl_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_flight_plan_recv_queue;\n\n\/************************************************************************\n * sb_flight_plan_dequeue_poll:\n ************************************************************************\/\nbool sb_flight_plan_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_flight_plan_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_flight_plan_dequeue:\n ************************************************************************\/\nbool sb_flight_plan_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_flight_plan_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_flight_plan_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_flight_plan_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_flight_plan_recv_queue);\n}\n\n\/************************************************************************\n * sb_flight_plan_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_flight_plan\n *\n ************************************************************************\/\nstatic void sb_flight_plan_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_flight_plan_notification_reg_callback(sb_flight_plan_notification_handler, NULL));\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_tracking_id_recv_queue;\n\n\/************************************************************************\n * sb_tracking_id_dequeue_poll:\n ************************************************************************\/\nbool sb_tracking_id_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_tracking_id_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_tracking_id_dequeue:\n ************************************************************************\/\nbool sb_tracking_id_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_tracking_id_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_tracking_id_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_tracking_id_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_tracking_id_recv_queue);\n}\n\n\/************************************************************************\n * sb_tracking_id_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_tracking_id\n *\n ************************************************************************\/\nstatic void sb_tracking_id_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_tracking_id_notification_reg_callback(sb_tracking_id_notification_handler, NULL));\n}\n\nbool sb_mission_rcv_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_mission_rcv_queue_1, (union_art_DataContent*) data);\n  sb_mission_rcv_1_notification_emit();\n\n  return true;\n}\n\nbool sb_mission_window_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_512_enqueue(sb_mission_window_queue_512, (union_art_DataContent*) data);\n  sb_mission_window_512_notification_emit();\n\n  return true;\n}\n\n\/\/ send mission_rcv: Out EventDataPort bool\nUnit uav_project_extern_SW_WaypointManager_Impl_seL4Nix_mission_rcv_Send(STACK_FRAME \n  art_DataContent d) {\n  sb_mission_rcv_enqueue(d);\n}\n\n\/\/ send mission_window: Out EventDataPort SW__MissionWindow\nUnit uav_project_extern_SW_WaypointManager_Impl_seL4Nix_mission_window_Send(STACK_FRAME \n  art_DataContent d) {\n  sb_mission_window_enqueue(d);\n}\n\n\/\/ is_empty flight_plan: In EventDataPort\nB uav_project_extern_SW_WaypointManager_Impl_seL4Nix_flight_plan_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_flight_plan_is_empty();\n}\n\n\/\/ receive flight_plan: In EventDataPort union_art_DataContent\nUnit uav_project_extern_SW_WaypointManager_Impl_seL4Nix_flight_plan_Receive(STACK_FRAME\n  Option_8E9F45 result) {\n  union_art_DataContent val;\n  if(sb_flight_plan_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(STACK_FRAME &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty tracking_id: In EventDataPort\nB uav_project_extern_SW_WaypointManager_Impl_seL4Nix_tracking_id_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_tracking_id_is_empty();\n}\n\n\/\/ receive tracking_id: In EventDataPort union_art_DataContent\nUnit uav_project_extern_SW_WaypointManager_Impl_seL4Nix_tracking_id_Receive(STACK_FRAME\n  Option_8E9F45 result) {\n  union_art_DataContent val;\n  if(sb_tracking_id_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(STACK_FRAME &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  printf(\"Entering pre-init of WaypointManager_Impl\\n\");\n\n  \/\/ initialise data structure for incoming event data port flight_plan\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_flight_plan_recv_queue, sb_flight_plan_queue);\n\n  \/\/ initialise data structure for incoming event data port tracking_id\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_tracking_id_recv_queue, sb_tracking_id_queue);\n\n  \/\/ initialise data structure for outgoing event data port mission_rcv\n  sb_queue_union_art_DataContent_1_init(sb_mission_rcv_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port mission_window\n  sb_queue_union_art_DataContent_512_init(sb_mission_window_queue_512);\n\n  \/\/ initialise slang-embedded components\/ports\n  uav_project_extern_SW_WaypointManager_Impl_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  uav_project_extern_SW_WaypointManager_Impl_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of WaypointManager_Impl\\n\");\n}\n\nvoid post_init(void){\n  \/\/ register callback for EventDataPort port flight_plan\n  CALLBACKOP(sb_flight_plan_notification_reg_callback(sb_flight_plan_notification_handler, NULL));\n\n  \/\/ register callback for EventDataPort port tracking_id\n  CALLBACKOP(sb_tracking_id_notification_reg_callback(sb_tracking_id_notification_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    \/\/ call the component's compute entrypoint\n    uav_project_extern_SW_WaypointManager_Impl_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/WaypointManager_Impl\/includes\/sb_WaypointManager_Impl.h",
        {
          "type" : "Resource",
          "content" : "#ifndef __sb_AADL_WaypointManager_Impl_types__H\n#define __sb_AADL_WaypointManager_Impl_types__H\n\n#include <sb_types.h>\n\nbool sb_flight_plan_dequeue(union_art_DataContent *);\n\nbool sb_tracking_id_dequeue(union_art_DataContent *);\n\nbool sb_mission_rcv_enqueue(const union_art_DataContent *);\n\nbool sb_mission_window_enqueue(const union_art_DataContent *);\n\n#endif \/\/ __sb_AADL_WaypointManager_Impl_types__H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/UARTDriver_Impl\/src\/sb_UARTDriver_Impl.c",
        {
          "type" : "Resource",
          "content" : "#include \"..\/includes\/sb_UARTDriver_Impl.h\"\n#include <sb_queue_union_art_DataContent_512.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <UARTDriver_Impl_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_512_Recv_t sb_mission_window_recv_queue;\n\n\/************************************************************************\n * sb_mission_window_dequeue_poll:\n ************************************************************************\/\nbool sb_mission_window_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_512_dequeue(&sb_mission_window_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_mission_window_dequeue:\n ************************************************************************\/\nbool sb_mission_window_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_mission_window_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_mission_window_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_mission_window_is_empty(){\n  return sb_queue_union_art_DataContent_512_is_empty(&sb_mission_window_recv_queue);\n}\n\n\/************************************************************************\n * sb_mission_window_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_mission_window\n *\n ************************************************************************\/\nstatic void sb_mission_window_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_mission_window_notification_reg_callback(sb_mission_window_notification_handler, NULL));\n}\n\nbool sb_tracking_id_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_tracking_id_queue_1, (union_art_DataContent*) data);\n  sb_tracking_id_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send tracking_id: Out EventDataPort int64_t\nUnit uav_project_extern_SW_UARTDriver_Impl_seL4Nix_tracking_id_Send(STACK_FRAME \n  art_DataContent d) {\n  sb_tracking_id_enqueue(d);\n}\n\n\/\/ is_empty mission_window: In EventDataPort\nB uav_project_extern_SW_UARTDriver_Impl_seL4Nix_mission_window_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_mission_window_is_empty();\n}\n\n\/\/ receive mission_window: In EventDataPort union_art_DataContent\nUnit uav_project_extern_SW_UARTDriver_Impl_seL4Nix_mission_window_Receive(STACK_FRAME\n  Option_8E9F45 result) {\n  union_art_DataContent val;\n  if(sb_mission_window_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(STACK_FRAME &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  printf(\"Entering pre-init of UARTDriver_Impl\\n\");\n\n  \/\/ initialise data structure for incoming event data port mission_window\n  sb_queue_union_art_DataContent_512_Recv_init(&sb_mission_window_recv_queue, sb_mission_window_queue);\n\n  \/\/ initialise data structure for outgoing event data port tracking_id\n  sb_queue_union_art_DataContent_1_init(sb_tracking_id_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  uav_project_extern_SW_UARTDriver_Impl_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  uav_project_extern_SW_UARTDriver_Impl_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of UARTDriver_Impl\\n\");\n}\n\nvoid post_init(void){\n  \/\/ register callback for EventDataPort port mission_window\n  CALLBACKOP(sb_mission_window_notification_reg_callback(sb_mission_window_notification_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    \/\/ call the component's compute entrypoint\n    uav_project_extern_SW_UARTDriver_Impl_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/components\/UARTDriver_Impl\/includes\/sb_UARTDriver_Impl.h",
        {
          "type" : "Resource",
          "content" : "#ifndef __sb_AADL_UARTDriver_Impl_types__H\n#define __sb_AADL_UARTDriver_Impl_types__H\n\n#include <sb_types.h>\n\nbool sb_mission_window_dequeue(union_art_DataContent *);\n\nbool sb_tracking_id_enqueue(const union_art_DataContent *);\n\n#endif \/\/ __sb_AADL_UARTDriver_Impl_types__H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/includes\/sb_queue_union_art_DataContent_1.h",
        {
          "type" : "Resource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE-1 elements.\n#define SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_union_art_DataContent_1 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type union_art_DataContent \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  union_art_DataContent elt[SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE];\n\n} sb_queue_union_art_DataContent_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue, \n  union_art_DataContent *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_union_art_DataContent_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_union_art_DataContent_1_t *queue;\n\n} sb_queue_union_art_DataContent_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_union_art_DataContent_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_union_art_DataContent_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/includes\/sb_queue_union_art_DataContent_1.c",
        {
          "type" : "Resource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_union_art_DataContent_1.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue, \n  union_art_DataContent *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_union_art_DataContent_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/includes\/sb_queue_union_art_DataContent_512.h",
        {
          "type" : "Resource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE-1 elements.\n#define SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE 513\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_union_art_DataContent_512 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type union_art_DataContent \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  union_art_DataContent elt[SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE];\n\n} sb_queue_union_art_DataContent_512_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_union_art_DataContent_512_init(sb_queue_union_art_DataContent_512_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_union_art_DataContent_512_enqueue(\n  sb_queue_union_art_DataContent_512_t *queue, \n  union_art_DataContent *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_union_art_DataContent_512_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_union_art_DataContent_512_t *queue;\n\n} sb_queue_union_art_DataContent_512_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_union_art_DataContent_512_Recv_init(\n  sb_queue_union_art_DataContent_512_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_512_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_union_art_DataContent_512_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_union_art_DataContent_512_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_union_art_DataContent_512_dequeue(\n  sb_queue_union_art_DataContent_512_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_union_art_DataContent_512_is_empty(sb_queue_union_art_DataContent_512_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/includes\/sb_queue_union_art_DataContent_512.c",
        {
          "type" : "Resource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_union_art_DataContent_512.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_512.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_512_init(sb_queue_union_art_DataContent_512_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_union_art_DataContent_512_enqueue(\n  sb_queue_union_art_DataContent_512_t *queue, \n  union_art_DataContent *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_512.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_512_Recv_init(\n  sb_queue_union_art_DataContent_512_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_512_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_union_art_DataContent_512_dequeue(\n  sb_queue_union_art_DataContent_512_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_union_art_DataContent_512_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE - 1) ? 0 : numNew - SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_UNION_ART_DATACONTENT_512_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_union_art_DataContent_512_is_empty(sb_queue_union_art_DataContent_512_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/includes\/sb_types.h",
        {
          "type" : "Resource",
          "content" : "#ifndef __SB_AADL_sb_types__H\n#define __SB_AADL_sb_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n#include <all.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef union art_DataContent union_art_DataContent;\n\n#endif \/\/ __SB_AADL_sb_types__H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_alt_extern--SeL4\/includes\/sb_event_counter.h",
        {
          "type" : "Resource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t; \n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
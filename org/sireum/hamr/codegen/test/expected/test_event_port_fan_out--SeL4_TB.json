{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "test_event_port_fan_out--SeL4_TB\/components\/emitter_impl\/emitter_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/AADLEvent_Sender.idl4\";\nimport <std_connector.camkes>;\n\ncomponent emitter_impl {\n  include <sb_proc_types.h>;\n  control;\n  uses AADLEvent_Sender sb_e0;\n  uses AADLEvent_Sender sb_e1;\n  uses AADLEvent_Sender sb_e2;\n  uses AADLEvent_Sender sb_e3;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_default_impl\/consumer_queue_default_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\n\ncomponent consumer_queue_default_impl {\n  include <sb_proc_types.h>;\n  control;\n  uses AADLEvent_Receiver sb_s;\n  consumes ReceiveEvent sb_s_notification;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_2_impl\/consumer_queue_2_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\n\ncomponent consumer_queue_2_impl {\n  include <sb_proc_types.h>;\n  control;\n  uses AADLEvent_Receiver sb_s;\n  consumes ReceiveEvent sb_s_notification;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_5_impl\/consumer_queue_5_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\n\ncomponent consumer_queue_5_impl {\n  include <sb_proc_types.h>;\n  control;\n  uses AADLEvent_Receiver sb_s;\n  consumes ReceiveEvent sb_s_notification;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkDefault_s_Monitor\/sb_snkDefault_s_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/AADLEvent_Sender.idl4\";\n\ncomponent sb_snkDefault_s_Monitor {\n\n  provides AADLEvent_Receiver mon_receive;\n  provides AADLEvent_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue2_A_s_Monitor\/sb_snkQueue2_A_s_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/AADLEvent_Sender.idl4\";\n\ncomponent sb_snkQueue2_A_s_Monitor {\n\n  provides AADLEvent_Receiver mon_receive;\n  provides AADLEvent_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue2_B_s_Monitor\/sb_snkQueue2_B_s_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/AADLEvent_Sender.idl4\";\n\ncomponent sb_snkQueue2_B_s_Monitor {\n\n  provides AADLEvent_Receiver mon_receive;\n  provides AADLEvent_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue5_s_Monitor\/sb_snkQueue5_s_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/AADLEvent_Sender.idl4\";\n\ncomponent sb_snkQueue5_s_Monitor {\n\n  provides AADLEvent_Receiver mon_receive;\n  provides AADLEvent_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/dispatch_periodic\/dispatch_periodic.camkes", { "type" : "Resource","content" : "import <global-connectors.camkes>;\n\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_src_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/test_event_port.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/emitter_impl\/emitter_impl.camkes\";\nimport \"components\/consumer_queue_default_impl\/consumer_queue_default_impl.camkes\";\nimport \"components\/consumer_queue_2_impl\/consumer_queue_2_impl.camkes\";\nimport \"components\/consumer_queue_5_impl\/consumer_queue_5_impl.camkes\";\nimport \"components\/sb_Monitors\/sb_snkDefault_s_Monitor\/sb_snkDefault_s_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_snkQueue2_A_s_Monitor\/sb_snkQueue2_A_s_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_snkQueue2_B_s_Monitor\/sb_snkQueue2_B_s_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_snkQueue5_s_Monitor\/sb_snkQueue5_s_Monitor.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component emitter_impl src;\n    component consumer_queue_default_impl snkDefault;\n    component consumer_queue_2_impl snkQueue2_A;\n    component consumer_queue_2_impl snkQueue2_B;\n    component consumer_queue_5_impl snkQueue5;\n    component sb_snkDefault_s_Monitor sb_snkdefault_s_monitor;\n    component sb_snkQueue2_A_s_Monitor sb_snkqueue2_a_s_monitor;\n    component sb_snkQueue2_B_s_Monitor sb_snkqueue2_b_s_monitor;\n    component sb_snkQueue5_s_Monitor sb_snkqueue5_s_monitor;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4Notification conn1(from dispatch_periodic_inst.sb_src_periodic_dispatch_notification, to src.sb_periodic_dispatch_notification);\n    connection seL4RPCCall conn2(from src.sb_e0, to sb_snkdefault_s_monitor.mon_send);\n    connection seL4RPCCall conn3(from snkDefault.sb_s, to sb_snkdefault_s_monitor.mon_receive);\n    connection seL4Notification conn4(from sb_snkdefault_s_monitor.monsig, to snkDefault.sb_s_notification);\n    connection seL4RPCCall conn5(from src.sb_e1, to sb_snkqueue2_a_s_monitor.mon_send);\n    connection seL4RPCCall conn6(from snkQueue2_A.sb_s, to sb_snkqueue2_a_s_monitor.mon_receive);\n    connection seL4Notification conn7(from sb_snkqueue2_a_s_monitor.monsig, to snkQueue2_A.sb_s_notification);\n    connection seL4RPCCall conn8(from src.sb_e2, to sb_snkqueue2_b_s_monitor.mon_send);\n    connection seL4RPCCall conn9(from snkQueue2_B.sb_s, to sb_snkqueue2_b_s_monitor.mon_receive);\n    connection seL4Notification conn10(from sb_snkqueue2_b_s_monitor.monsig, to snkQueue2_B.sb_s_notification);\n    connection seL4RPCCall conn11(from src.sb_e3, to sb_snkqueue5_s_monitor.mon_send);\n    connection seL4RPCCall conn12(from snkQueue5.sb_s, to sb_snkqueue5_s_monitor.mon_receive);\n    connection seL4Notification conn13(from sb_snkqueue5_s_monitor.monsig, to snkQueue5.sb_s_notification);\n    connection seL4TimeServer conn14(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn15(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/emitter_impl\/\/src\/emitter.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_proc_types.h>\n#include <sb_emitter_impl.h>\n\nint32_t counter = 0;\n\nvoid test_event_port_emitter_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_emitter_component_init called\\n\", get_instance_name());\n}\n\nvoid run_emitter(const int64_t *in_arg) {\n  for(int32_t i = 0; i < counter; i++) {\n    sb_e_write();\n  }\n  printf(\"---------------------------------------\\n\");\n  printf(\"[%s] Sent %i events.\\n\", get_instance_name(), counter);\n\n  counter = (counter + 1) % 7; \/\/ send b\/w 0 to 6 events per dispatch\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_default_impl\/\/src\/consumer_queue_default.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_queue_default_impl.h>\n\nvoid test_event_port_consumer_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_port_consumer_s_event_handler() {\n int32_t counter = 0;\n  while(sb_s_read()) {\n    counter++;\n  }\n\n  printf(\"[%s] Received %i events\\n\", get_instance_name(), counter);\n}\n\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_2_impl\/\/src\/consumer_queue_2.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_queue_2_impl.h>\n\nvoid test_event_port_consumer_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_port_consumer_s_event_handler() {\n int32_t counter = 0;\n  while(sb_s_read()) {\n    counter++;\n  }\n\n  printf(\"[%s] Received %i events\\n\", get_instance_name(), counter);\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_5_impl\/\/src\/consumer_queue_5.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_queue_5_impl.h>\n\nvoid test_event_port_consumer_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_port_consumer_s_event_handler() {\n int32_t counter = 0;\n  while(sb_s_read()) {\n    counter++;\n  }\n\n  printf(\"[%s] Received %i events\\n\", get_instance_name(), counter);\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/interfaces\/AADLEvent_Receiver.idl4", { "type" : "Resource","content" : "procedure AADLEvent_Receiver {\n  include <sb_proc_types.h>;\n  int32_t get_events();\n};"}],[ "test_event_port_fan_out--SeL4_TB\/interfaces\/AADLEvent_Sender.idl4", { "type" : "Resource","content" : "procedure AADLEvent_Sender {\n  include <sb_proc_types.h>;\n  void raise();\n};"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkDefault_s_Monitor\/src\/sb_snkDefault_s_Monitor.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <string.h>\n\nint32_t num_events = 0;\n\nstatic inline void ignore_result(long long int unused_result) { (void) unused_result; }\n\nvoid mon_send_raise(void) {\n  int do_emit = 0;\n  ignore_result(m_lock());\n  if (num_events < 1) {\n    num_events++;\n    do_emit = 1;\n  }\n  ignore_result(m_unlock());\n  if (do_emit) {\n    monsig_emit();\n  }\n}\n\nint32_t mon_receive_get_events(void) {\n  ignore_result(m_lock());\n  int ne = num_events;\n  num_events = 0;\n  ignore_result(m_unlock());\n  return ne;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkDefault_s_Monitor\/includes\/sb_snkDefault_s_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_snkDefault_s_Monitor_H__\n#define __sb_snkDefault_s_Monitor_H__\n\n#endif \/\/ __sb_snkDefault_s_Monitor_H__\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue2_A_s_Monitor\/src\/sb_snkQueue2_A_s_Monitor.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <string.h>\n\nint32_t num_events = 0;\n\nstatic inline void ignore_result(long long int unused_result) { (void) unused_result; }\n\nvoid mon_send_raise(void) {\n  int do_emit = 0;\n  ignore_result(m_lock());\n  if (num_events < 2) {\n    num_events++;\n    do_emit = 1;\n  }\n  ignore_result(m_unlock());\n  if (do_emit) {\n    monsig_emit();\n  }\n}\n\nint32_t mon_receive_get_events(void) {\n  ignore_result(m_lock());\n  int ne = num_events;\n  num_events = 0;\n  ignore_result(m_unlock());\n  return ne;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue2_A_s_Monitor\/includes\/sb_snkQueue2_A_s_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_snkQueue2_A_s_Monitor_H__\n#define __sb_snkQueue2_A_s_Monitor_H__\n\n#endif \/\/ __sb_snkQueue2_A_s_Monitor_H__\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue2_B_s_Monitor\/src\/sb_snkQueue2_B_s_Monitor.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <string.h>\n\nint32_t num_events = 0;\n\nstatic inline void ignore_result(long long int unused_result) { (void) unused_result; }\n\nvoid mon_send_raise(void) {\n  int do_emit = 0;\n  ignore_result(m_lock());\n  if (num_events < 2) {\n    num_events++;\n    do_emit = 1;\n  }\n  ignore_result(m_unlock());\n  if (do_emit) {\n    monsig_emit();\n  }\n}\n\nint32_t mon_receive_get_events(void) {\n  ignore_result(m_lock());\n  int ne = num_events;\n  num_events = 0;\n  ignore_result(m_unlock());\n  return ne;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue2_B_s_Monitor\/includes\/sb_snkQueue2_B_s_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_snkQueue2_B_s_Monitor_H__\n#define __sb_snkQueue2_B_s_Monitor_H__\n\n#endif \/\/ __sb_snkQueue2_B_s_Monitor_H__\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue5_s_Monitor\/src\/sb_snkQueue5_s_Monitor.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <string.h>\n\nint32_t num_events = 0;\n\nstatic inline void ignore_result(long long int unused_result) { (void) unused_result; }\n\nvoid mon_send_raise(void) {\n  int do_emit = 0;\n  ignore_result(m_lock());\n  if (num_events < 5) {\n    num_events++;\n    do_emit = 1;\n  }\n  ignore_result(m_unlock());\n  if (do_emit) {\n    monsig_emit();\n  }\n}\n\nint32_t mon_receive_get_events(void) {\n  ignore_result(m_lock());\n  int ne = num_events;\n  num_events = 0;\n  ignore_result(m_unlock());\n  return ne;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snkQueue5_s_Monitor\/includes\/sb_snkQueue5_s_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_snkQueue5_s_Monitor_H__\n#define __sb_snkQueue5_s_Monitor_H__\n\n#endif \/\/ __sb_snkQueue5_s_Monitor_H__\n"}],[ "test_event_port_fan_out--SeL4_TB\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (test_event_port C)\n\nadd_definitions(-DCAMKES)\n\nincludeGlobalComponents()\n\nDeclareCAmkESComponent(emitter_impl\n  SOURCES components\/emitter_impl\/\/src\/emitter.c components\/emitter_impl\/src\/sb_emitter_impl.c\n  INCLUDES components\/emitter_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_queue_default_impl\n  SOURCES components\/consumer_queue_default_impl\/\/src\/consumer_queue_default.c components\/consumer_queue_default_impl\/src\/sb_consumer_queue_default_impl.c\n  INCLUDES components\/consumer_queue_default_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_queue_2_impl\n  SOURCES components\/consumer_queue_2_impl\/\/src\/consumer_queue_2.c components\/consumer_queue_2_impl\/src\/sb_consumer_queue_2_impl.c\n  INCLUDES components\/consumer_queue_2_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_queue_2_impl\n  SOURCES components\/consumer_queue_2_impl\/\/src\/consumer_queue_2.c components\/consumer_queue_2_impl\/src\/sb_consumer_queue_2_impl.c\n  INCLUDES components\/consumer_queue_2_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_queue_5_impl\n  SOURCES components\/consumer_queue_5_impl\/\/src\/consumer_queue_5.c components\/consumer_queue_5_impl\/src\/sb_consumer_queue_5_impl.c\n  INCLUDES components\/consumer_queue_5_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  INCLUDES includes\n\n)\n\nDeclareCAmkESComponent(sb_snkDefault_s_Monitor\n  SOURCES components\/sb_Monitors\/sb_snkDefault_s_Monitor\/src\/sb_snkDefault_s_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snkDefault_s_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_snkQueue2_A_s_Monitor\n  SOURCES components\/sb_Monitors\/sb_snkQueue2_A_s_Monitor\/src\/sb_snkQueue2_A_s_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snkQueue2_A_s_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_snkQueue2_B_s_Monitor\n  SOURCES components\/sb_Monitors\/sb_snkQueue2_B_s_Monitor\/src\/sb_snkQueue2_B_s_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snkQueue2_B_s_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_snkQueue5_s_Monitor\n  SOURCES components\/sb_Monitors\/sb_snkQueue5_s_Monitor\/src\/sb_snkQueue5_s_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snkQueue5_s_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(test_event_port.camkes)\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/emitter_impl\/src\/sb_emitter_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_emitter_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_e_write\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to send to a remote event port.\n *\n ************************************************************************\/\nbool sb_e_write(void) {\n  sb_e0_raise();\n  sb_e1_raise();\n  sb_e2_raise();\n  sb_e3_raise();\n  return true;\n}\n\n\nvoid sb_entrypoint_emitter_impl_periodic_dispatcher(const int64_t * in_arg) {\n  run_emitter((int64_t *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_emitter_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_impl_initializer(const int64_t * in_arg) {\n  test_event_port_emitter_component_init((int64_t *) in_arg);\n}\n\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_emitter_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/emitter_impl\/includes\/sb_emitter_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_emitter_impl_types__H\n#define __sb_AADL_emitter_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_e_write(void);\n\nvoid run_emitter(const int64_t *);\n\nvoid test_event_port_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_emitter_impl_types__H\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_default_impl\/src\/sb_consumer_queue_default_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_queue_default_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic int32_t sb_s_index = 0;\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback that  \n * dispatches the active-thread due to the arrival of an event on \n * its s event port\n *\n ************************************************************************\/\nstatic void sb_s_handler(void *_ UNUSED){\n  MUTEXOP(sb_dispatch_sem_post());\n  CALLBACKOP(sb_s_notification_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * sb_s_read:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_read(){\n  if(sb_s_index > 0) {\n    sb_s_index--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n *  sb_entrypointsb_consumer_queue_default_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_consumer_queue_default_impl_s(void){\n  test_event_port_consumer_s_event_handler();\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_default_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_default_impl_initializer(const int64_t * in_arg) {\n  test_event_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_s_notification_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_default_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    sb_s_index = sb_s_get_events();\n    if(sb_s_index > 0){\n      sb_entrypointsb_consumer_queue_default_impl_s();\n    }\n  }\n  return 0;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_default_impl\/includes\/sb_consumer_queue_default_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_queue_default_impl_types__H\n#define __sb_AADL_consumer_queue_default_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_s_read(void);\n\nvoid test_event_port_consumer_s_event_handler(void);\n\nvoid test_event_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_queue_default_impl_types__H\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_2_impl\/src\/sb_consumer_queue_2_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_queue_2_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic int32_t sb_s_index = 0;\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback that  \n * dispatches the active-thread due to the arrival of an event on \n * its s event port\n *\n ************************************************************************\/\nstatic void sb_s_handler(void *_ UNUSED){\n  MUTEXOP(sb_dispatch_sem_post());\n  CALLBACKOP(sb_s_notification_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * sb_s_read:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_read(){\n  if(sb_s_index > 0) {\n    sb_s_index--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n *  sb_entrypointsb_consumer_queue_2_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_consumer_queue_2_impl_s(void){\n  test_event_port_consumer_s_event_handler();\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_2_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_initializer(const int64_t * in_arg) {\n  test_event_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_s_notification_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_2_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    sb_s_index = sb_s_get_events();\n    if(sb_s_index > 0){\n      sb_entrypointsb_consumer_queue_2_impl_s();\n    }\n  }\n  return 0;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_2_impl\/includes\/sb_consumer_queue_2_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_queue_2_impl_types__H\n#define __sb_AADL_consumer_queue_2_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_s_read(void);\n\nvoid test_event_port_consumer_s_event_handler(void);\n\nvoid test_event_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_queue_2_impl_types__H\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_5_impl\/src\/sb_consumer_queue_5_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_queue_5_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic int32_t sb_s_index = 0;\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback that  \n * dispatches the active-thread due to the arrival of an event on \n * its s event port\n *\n ************************************************************************\/\nstatic void sb_s_handler(void *_ UNUSED){\n  MUTEXOP(sb_dispatch_sem_post());\n  CALLBACKOP(sb_s_notification_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * sb_s_read:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_read(){\n  if(sb_s_index > 0) {\n    sb_s_index--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n *  sb_entrypointsb_consumer_queue_5_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_consumer_queue_5_impl_s(void){\n  test_event_port_consumer_s_event_handler();\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_5_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_5_impl_initializer(const int64_t * in_arg) {\n  test_event_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_s_notification_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_5_impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    sb_s_index = sb_s_get_events();\n    if(sb_s_index > 0){\n      sb_entrypointsb_consumer_queue_5_impl_s();\n    }\n  }\n  return 0;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/consumer_queue_5_impl\/includes\/sb_consumer_queue_5_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_queue_5_impl_types__H\n#define __sb_AADL_consumer_queue_5_impl_types__H\n\n#include <sb_proc_types.h>\n\nbool sb_s_read(void);\n\nvoid test_event_port_consumer_s_event_handler(void);\n\nvoid test_event_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_queue_5_impl_types__H\n"}],[ "test_event_port_fan_out--SeL4_TB\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c", { "type" : "Resource","content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_proc_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (2000 \/ aadl_tick_interval)) == 0) {\n    sb_src_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n"}],[ "test_event_port_fan_out--SeL4_TB\/includes\/sb_proc_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_proc_types__H\n#define __SB_AADL_sb_proc_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_proc_types__H\n"}]]}}
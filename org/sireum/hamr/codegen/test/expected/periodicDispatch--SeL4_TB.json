{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "periodicDispatch--SeL4_TB\/components\/Comp_A_Impl\/Comp_A_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int32_t_1.idl4\";\nimport <std_connector.camkes>;\n\ncomponent Comp_A_Impl {\n  include <sb_PROC_types.h>;\n  control;\n  uses sb_Monitor_int32_t_1 sb_output0;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/Comp_B_Impl\/Comp_B_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int32_t_1.idl4\";\n\ncomponent Comp_B_Impl {\n  include <sb_PROC_types.h>;\n  control;\n  uses sb_Monitor_int32_t_1 sb_input;\n  consumes QueuedData sb_input_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/sb_Monitors\/sb_B_input_Monitor\/sb_B_input_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int32_t_1.idl4\";\n\ncomponent sb_B_input_Monitor {\n\n  provides sb_Monitor_int32_t_1 mon;\n  emits QueuedData monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/dispatch_periodic\/dispatch_periodic.camkes", { "type" : "Resource","content" : "import <global-connectors.camkes>;\n\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_A_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/SW.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/Comp_A_Impl\/Comp_A_Impl.camkes\";\nimport \"components\/Comp_B_Impl\/Comp_B_Impl.camkes\";\nimport \"components\/sb_Monitors\/sb_B_input_Monitor\/sb_B_input_Monitor.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component Comp_A_Impl A;\n    component Comp_B_Impl B;\n    component sb_B_input_Monitor sb_b_input_monitor;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4Notification conn1(from dispatch_periodic_inst.sb_A_periodic_dispatch_notification, to A.sb_periodic_dispatch_notification);\n    connection seL4RPCCall conn2(from A.sb_output0, to sb_b_input_monitor.mon);\n    connection seL4RPCCall conn3(from B.sb_input, to sb_b_input_monitor.mon);\n    connection seL4Notification conn4(from sb_b_input_monitor.monsig, to B.sb_input_notification);\n    connection seL4TimeServer conn5(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn6(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/Comp_A_Impl\/src\/comp_a.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <assert.h>\n#include <sb_Comp_A_Impl.h>\n\nint32_t t = 0;\n\nvoid Comp_A_time_triggered(const int64_t *arg){\n  printf(\"Comp_A_time_triggered invoked.  Sending %i to Comp_B\\n\", t);\n  sb_output_enqueue(&t);\n  t++;  \n}","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/Comp_B_Impl\/src\/comp_b.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid Comp_B_input(const int32_t * in_arg){\n  printf(\"Comp_B_input received event %i\\n\", *in_arg);\n}","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/interfaces\/sb_Monitor_int32_t_1.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int32_t_1 {\n  include <sb_PROC_types.h>;\n  bool enqueue(refin int32_t m);\n  bool dequeue(out int32_t m);\n};","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/sb_Monitors\/sb_B_input_Monitor\/src\/sb_B_input_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n\n#include <sb_PROC_types.h>\n#include \"..\/includes\/sb_B_input_Monitor.h\"\n\nint mon_get_sender_id(void);\nint monsig_emit(void);\n\nint32_t contents[1];\nstatic uint32_t front = 0;\nstatic uint32_t length = 0;\n\nstatic bool is_full(void) {\n  return length == 1;\n}\n\nstatic bool is_empty(void) {\n  return length == 0;\n}\n\nbool mon_dequeue(int32_t * m) {\n  if (is_empty()) {\n    return false;\n  } else {\n    *m = contents[front];\n    front = (front + 1) % 1;\n    length--;\n    return true;\n  }\n}\n\nbool mon_enqueue(const int32_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    contents[(front + length) % 1] = *m;\n    length++;\n    monsig_emit();\n    return true;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/sb_Monitors\/sb_B_input_Monitor\/includes\/sb_B_input_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_B_input_Monitor_H__\n#define __sb_B_input_Monitor_H__\n\n#endif \/\/ __sb_B_input_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (SW C)\n\nadd_definitions(-DCAMKES)\n\nincludeGlobalComponents()\n\nDeclareCAmkESComponent(Comp_A_Impl\n  SOURCES components\/Comp_A_Impl\/\/src\/comp_a.c components\/Comp_A_Impl\/src\/sb_Comp_A_Impl.c\n  INCLUDES components\/Comp_A_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(Comp_B_Impl\n  SOURCES components\/Comp_B_Impl\/\/src\/comp_b.c components\/Comp_B_Impl\/src\/sb_Comp_B_Impl.c\n  INCLUDES components\/Comp_B_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  INCLUDES includes\n\n)\n\nDeclareCAmkESComponent(sb_B_input_Monitor\n  SOURCES components\/sb_Monitors\/sb_B_input_Monitor\/src\/sb_B_input_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_B_input_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(SW.camkes)\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/Comp_A_Impl\/src\/sb_Comp_A_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_Comp_A_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_output_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_output_enqueue(const int32_t * sb_output){\n  bool sb_result = true;\n  sb_result &= sb_output0_enqueue((int32_t *) sb_output);\n  return sb_result;\n}\n\nvoid sb_entrypoint_Comp_A_Impl_periodic_dispatcher(const int64_t * in_arg) {\n  Comp_A_time_triggered((int64_t *) in_arg);\n}\n\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_Comp_A_Impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/Comp_A_Impl\/includes\/sb_Comp_A_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_Comp_A_Impl_types__H\n#define __sb_AADL_Comp_A_Impl_types__H\n\n#include <sb_PROC_types.h>\n\nbool sb_output_enqueue(const int32_t * sb_output);\n\nvoid Comp_A_time_triggered(const int64_t *);\n\n#endif \/\/ __sb_AADL_Comp_A_Impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/Comp_B_Impl\/src\/sb_Comp_B_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_Comp_B_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic void sb_input_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_input_notification_reg_callback(sb_input_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_Comp_B_Impl_input:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_Comp_B_Impl_input(const int32_t * in_arg) {\n  Comp_B_input((int32_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_input_notification_reg_callback(sb_input_notification_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  int32_t sb_input;\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    while (sb_input_dequeue((int32_t *) &sb_input)) {\n      sb_entrypoint_Comp_B_Impl_input(&sb_input);\n    }\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/Comp_B_Impl\/includes\/sb_Comp_B_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_Comp_B_Impl_types__H\n#define __sb_AADL_Comp_B_Impl_types__H\n\n#include <sb_PROC_types.h>\n\nbool sb_input_dequeue(int32_t * sb_input);\n\nvoid Comp_B_input(const int32_t * in_arg);\n\n#endif \/\/ __sb_AADL_Comp_B_Impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c", { "type" : "Resource","content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_PROC_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_A_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "periodicDispatch--SeL4_TB\/includes\/sb_PROC_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_PROC_types__H\n#define __SB_AADL_sb_PROC_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_PROC_types__H\n","overwrite" : true,"makeExecutable" : false}]]}}
{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "test_event_data_port_fan_out--SeL4_TB\/components\/emitter_impl\/emitter_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t_1.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_int8_t_2.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_int8_t_5.idl4\";\nimport <std_connector.camkes>;\n\ncomponent emitter_impl {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int8_t_1 sb_enq0;\n  uses sb_Monitor_int8_t_2 sb_enq1;\n  uses sb_Monitor_int8_t_2 sb_enq2;\n  uses sb_Monitor_int8_t_5 sb_enq3;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_default_impl\/consumer_queue_default_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t_1.idl4\";\n\ncomponent consumer_queue_default_impl {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int8_t_1 sb_deq;\n  consumes QueuedData sb_deq_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_2_impl\/consumer_queue_2_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t_2.idl4\";\n\ncomponent consumer_queue_2_impl {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int8_t_2 sb_deq;\n  consumes QueuedData sb_deq_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_5_impl\/consumer_queue_5_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t_5.idl4\";\n\ncomponent consumer_queue_5_impl {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int8_t_5 sb_deq;\n  consumes QueuedData sb_deq_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_default_deq_Monitor\/sb_snk_default_deq_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int8_t_1.idl4\";\n\ncomponent sb_snk_default_deq_Monitor {\n\n  provides sb_Monitor_int8_t_1 mon;\n  emits QueuedData monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_2_A_deq_Monitor\/sb_snk_2_A_deq_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int8_t_2.idl4\";\n\ncomponent sb_snk_2_A_deq_Monitor {\n\n  provides sb_Monitor_int8_t_2 mon;\n  emits QueuedData monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_2_B_deq_Monitor\/sb_snk_2_B_deq_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int8_t_2.idl4\";\n\ncomponent sb_snk_2_B_deq_Monitor {\n\n  provides sb_Monitor_int8_t_2 mon;\n  emits QueuedData monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_5_deq_Monitor\/sb_snk_5_deq_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int8_t_5.idl4\";\n\ncomponent sb_snk_5_deq_Monitor {\n\n  provides sb_Monitor_int8_t_5 mon;\n  emits QueuedData monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/dispatch_periodic\/dispatch_periodic.camkes", { "type" : "Resource","content" : "import <global-connectors.camkes>;\n\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_src_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/top_impl_Instance.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/emitter_impl\/emitter_impl.camkes\";\nimport \"components\/consumer_queue_default_impl\/consumer_queue_default_impl.camkes\";\nimport \"components\/consumer_queue_2_impl\/consumer_queue_2_impl.camkes\";\nimport \"components\/consumer_queue_5_impl\/consumer_queue_5_impl.camkes\";\nimport \"components\/sb_Monitors\/sb_snk_default_deq_Monitor\/sb_snk_default_deq_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_snk_2_A_deq_Monitor\/sb_snk_2_A_deq_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_snk_2_B_deq_Monitor\/sb_snk_2_B_deq_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_snk_5_deq_Monitor\/sb_snk_5_deq_Monitor.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component emitter_impl src;\n    component consumer_queue_default_impl snk_default;\n    component consumer_queue_2_impl snk_2_A;\n    component consumer_queue_2_impl snk_2_B;\n    component consumer_queue_5_impl snk_5;\n    component sb_snk_default_deq_Monitor sb_snk_default_deq_monitor;\n    component sb_snk_2_A_deq_Monitor sb_snk_2_a_deq_monitor;\n    component sb_snk_2_B_deq_Monitor sb_snk_2_b_deq_monitor;\n    component sb_snk_5_deq_Monitor sb_snk_5_deq_monitor;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4RPCCall conn1(from src.sb_enq0, to sb_snk_default_deq_monitor.mon);\n    connection seL4RPCCall conn2(from snk_default.sb_deq, to sb_snk_default_deq_monitor.mon);\n    connection seL4Notification conn3(from sb_snk_default_deq_monitor.monsig, to snk_default.sb_deq_notification);\n    connection seL4RPCCall conn4(from src.sb_enq1, to sb_snk_2_a_deq_monitor.mon);\n    connection seL4RPCCall conn5(from snk_2_A.sb_deq, to sb_snk_2_a_deq_monitor.mon);\n    connection seL4Notification conn6(from sb_snk_2_a_deq_monitor.monsig, to snk_2_A.sb_deq_notification);\n    connection seL4RPCCall conn7(from src.sb_enq2, to sb_snk_2_b_deq_monitor.mon);\n    connection seL4RPCCall conn8(from snk_2_B.sb_deq, to sb_snk_2_b_deq_monitor.mon);\n    connection seL4Notification conn9(from sb_snk_2_b_deq_monitor.monsig, to snk_2_B.sb_deq_notification);\n    connection seL4RPCCall conn10(from src.sb_enq3, to sb_snk_5_deq_monitor.mon);\n    connection seL4RPCCall conn11(from snk_5.sb_deq, to sb_snk_5_deq_monitor.mon);\n    connection seL4Notification conn12(from sb_snk_5_deq_monitor.monsig, to snk_5.sb_deq_notification);\n    connection seL4Notification conn13(from dispatch_periodic_inst.sb_src_periodic_dispatch_notification, to src.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn14(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn15(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/emitter_impl\/src\/emitter.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_emitter_impl.h>\n\nint8_t counter = 0;\n\nvoid test_event_data_port_emitter_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_data_port_emitter_component_init called\\n\", get_instance_name());\n}\n\nvoid run_emitter(const int64_t *in_arg) {\n  for(int8_t i = 1; i <= counter; i++) {\n    sb_enq_enqueue(&i);\n  }\n  printf(\"---------------------------------------\\n\");\n  printf(\"[%s] Sent %i events.\\n\", get_instance_name(), counter);\n\n  counter = (counter + 1) % 7; \/\/ send b\/w 0 to 6 events per dispatch\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_default_impl\/src\/consumer_queue_default.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_consumer_queue_default_impl.h>\n\nvoid test_event_data_port_consumer_component_init(const int64_t *in_arg)\n{\n    printf(\"[%s] test_event_data_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg)\n{\n    int32_t received = 1; \/\/ 1 for the event the glue code dequeued\n    int8_t value;\n\n    printf(\"[%s] received value {%d}\\n\", get_instance_name(), *in_arg);\n\n    \/\/ keep dequeuing until no more things can be had\n    while(sb_deq_dequeue(&value)) {\n      printf(\"[%s] received value {%d}\\n\", get_instance_name(), value);\n      received++;\n    }\n\n    printf(\"[%s] %i events received\\n\", get_instance_name(), received);\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_2_impl\/src\/consumer_queue_2.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_consumer_queue_2_impl.h>\n\nvoid test_event_data_port_consumer_component_init(const int64_t *in_arg)\n{\n    printf(\"[%s] test_event_data_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg)\n{\n    int32_t received = 1; \/\/ 1 for the event the glue code dequeued\n    int8_t value;\n\n    printf(\"[%s] received value {%d}\\n\", get_instance_name(), *in_arg);\n\n    \/\/ keep dequeuing until no more things can be had\n    while(sb_deq_dequeue(&value)) {\n      printf(\"[%s] received value {%d}\\n\", get_instance_name(), value);\n      received++;\n    }\n\n    printf(\"[%s] %i events received\\n\", get_instance_name(), received);\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_5_impl\/src\/consumer_queue_5.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_consumer_queue_5_impl.h>\n\nvoid test_event_data_port_consumer_component_init(const int64_t *in_arg)\n{\n    printf(\"[%s] test_event_data_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg)\n{\n    int32_t received = 1; \/\/ 1 for the event the glue code dequeued\n    int8_t value;\n\n    printf(\"[%s] received value {%d}\\n\", get_instance_name(), *in_arg);\n\n    \/\/ keep dequeuing until no more things can be had\n    while(sb_deq_dequeue(&value)) {\n      printf(\"[%s] received value {%d}\\n\", get_instance_name(), value);\n      received++;\n    }\n\n    printf(\"[%s] %i events received\\n\", get_instance_name(), received);\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/interfaces\/sb_Monitor_int8_t_1.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int8_t_1 {\n  include <sb_types.h>;\n  bool is_empty();\n  bool enqueue(refin int8_t m);\n  bool dequeue(out int8_t m);\n};","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_default_deq_Monitor\/src\/sb_snk_default_deq_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n\n#include <sb_types.h>\n#include \"..\/includes\/sb_snk_default_deq_Monitor.h\"\n\nint mon_get_sender_id(void);\nint monsig_emit(void);\n\nint8_t contents[1];\nstatic uint32_t front = 0;\nstatic uint32_t length = 0;\n\nstatic bool is_full(void) {\n  return length == 1;\n}\n\nbool mon_is_empty(void) {\n  return length == 0;\n}\n\nbool mon_dequeue(int8_t * m) {\n  if (mon_is_empty()) {\n    return false;\n  } else {\n    *m = contents[front];\n    front = (front + 1) % 1;\n    length--;\n    return true;\n  }\n}\n\nbool mon_enqueue(const int8_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    contents[(front + length) % 1] = *m;\n    length++;\n    monsig_emit();\n    return true;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_default_deq_Monitor\/includes\/sb_snk_default_deq_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_snk_default_deq_Monitor_H__\n#define __sb_snk_default_deq_Monitor_H__\n\n#endif \/\/ __sb_snk_default_deq_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/interfaces\/sb_Monitor_int8_t_2.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int8_t_2 {\n  include <sb_types.h>;\n  bool is_empty();\n  bool enqueue(refin int8_t m);\n  bool dequeue(out int8_t m);\n};","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_2_A_deq_Monitor\/src\/sb_snk_2_A_deq_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n\n#include <sb_types.h>\n#include \"..\/includes\/sb_snk_2_A_deq_Monitor.h\"\n\nint mon_get_sender_id(void);\nint monsig_emit(void);\n\nint8_t contents[2];\nstatic uint32_t front = 0;\nstatic uint32_t length = 0;\n\nstatic bool is_full(void) {\n  return length == 2;\n}\n\nbool mon_is_empty(void) {\n  return length == 0;\n}\n\nbool mon_dequeue(int8_t * m) {\n  if (mon_is_empty()) {\n    return false;\n  } else {\n    *m = contents[front];\n    front = (front + 1) % 2;\n    length--;\n    return true;\n  }\n}\n\nbool mon_enqueue(const int8_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    contents[(front + length) % 2] = *m;\n    length++;\n    monsig_emit();\n    return true;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_2_A_deq_Monitor\/includes\/sb_snk_2_A_deq_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_snk_2_A_deq_Monitor_H__\n#define __sb_snk_2_A_deq_Monitor_H__\n\n#endif \/\/ __sb_snk_2_A_deq_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_2_B_deq_Monitor\/src\/sb_snk_2_B_deq_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n\n#include <sb_types.h>\n#include \"..\/includes\/sb_snk_2_B_deq_Monitor.h\"\n\nint mon_get_sender_id(void);\nint monsig_emit(void);\n\nint8_t contents[2];\nstatic uint32_t front = 0;\nstatic uint32_t length = 0;\n\nstatic bool is_full(void) {\n  return length == 2;\n}\n\nbool mon_is_empty(void) {\n  return length == 0;\n}\n\nbool mon_dequeue(int8_t * m) {\n  if (mon_is_empty()) {\n    return false;\n  } else {\n    *m = contents[front];\n    front = (front + 1) % 2;\n    length--;\n    return true;\n  }\n}\n\nbool mon_enqueue(const int8_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    contents[(front + length) % 2] = *m;\n    length++;\n    monsig_emit();\n    return true;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_2_B_deq_Monitor\/includes\/sb_snk_2_B_deq_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_snk_2_B_deq_Monitor_H__\n#define __sb_snk_2_B_deq_Monitor_H__\n\n#endif \/\/ __sb_snk_2_B_deq_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/interfaces\/sb_Monitor_int8_t_5.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int8_t_5 {\n  include <sb_types.h>;\n  bool is_empty();\n  bool enqueue(refin int8_t m);\n  bool dequeue(out int8_t m);\n};","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_5_deq_Monitor\/src\/sb_snk_5_deq_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n\n#include <sb_types.h>\n#include \"..\/includes\/sb_snk_5_deq_Monitor.h\"\n\nint mon_get_sender_id(void);\nint monsig_emit(void);\n\nint8_t contents[5];\nstatic uint32_t front = 0;\nstatic uint32_t length = 0;\n\nstatic bool is_full(void) {\n  return length == 5;\n}\n\nbool mon_is_empty(void) {\n  return length == 0;\n}\n\nbool mon_dequeue(int8_t * m) {\n  if (mon_is_empty()) {\n    return false;\n  } else {\n    *m = contents[front];\n    front = (front + 1) % 5;\n    length--;\n    return true;\n  }\n}\n\nbool mon_enqueue(const int8_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    contents[(front + length) % 5] = *m;\n    length++;\n    monsig_emit();\n    return true;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/sb_Monitors\/sb_snk_5_deq_Monitor\/includes\/sb_snk_5_deq_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_snk_5_deq_Monitor_H__\n#define __sb_snk_5_deq_Monitor_H__\n\n#endif \/\/ __sb_snk_5_deq_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nincludeGlobalComponents()\n\nDeclareCAmkESComponent(emitter_impl\n  SOURCES components\/emitter_impl\/\/src\/emitter.c components\/emitter_impl\/src\/sb_emitter_impl.c\n  INCLUDES components\/emitter_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_queue_default_impl\n  SOURCES components\/consumer_queue_default_impl\/\/src\/consumer_queue_default.c components\/consumer_queue_default_impl\/src\/sb_consumer_queue_default_impl.c\n  INCLUDES components\/consumer_queue_default_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_queue_2_impl\n  SOURCES components\/consumer_queue_2_impl\/\/src\/consumer_queue_2.c components\/consumer_queue_2_impl\/src\/sb_consumer_queue_2_impl.c\n  INCLUDES components\/consumer_queue_2_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_queue_2_impl\n  SOURCES components\/consumer_queue_2_impl\/\/src\/consumer_queue_2.c components\/consumer_queue_2_impl\/src\/sb_consumer_queue_2_impl.c\n  INCLUDES components\/consumer_queue_2_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_queue_5_impl\n  SOURCES components\/consumer_queue_5_impl\/\/src\/consumer_queue_5.c components\/consumer_queue_5_impl\/src\/sb_consumer_queue_5_impl.c\n  INCLUDES components\/consumer_queue_5_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  INCLUDES includes\n\n)\n\nDeclareCAmkESComponent(sb_snk_default_deq_Monitor\n  SOURCES components\/sb_Monitors\/sb_snk_default_deq_Monitor\/src\/sb_snk_default_deq_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snk_default_deq_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_snk_2_A_deq_Monitor\n  SOURCES components\/sb_Monitors\/sb_snk_2_A_deq_Monitor\/src\/sb_snk_2_A_deq_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snk_2_A_deq_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_snk_2_B_deq_Monitor\n  SOURCES components\/sb_Monitors\/sb_snk_2_B_deq_Monitor\/src\/sb_snk_2_B_deq_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snk_2_B_deq_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_snk_5_deq_Monitor\n  SOURCES components\/sb_Monitors\/sb_snk_5_deq_Monitor\/src\/sb_snk_5_deq_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snk_5_deq_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/bin\/run-camkes.sh", { "type" : "Resource","content" : "#!\/usr\/bin\/env bash\n\nset -e\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n\n# location of camkes-projects directory\nif [ -n \"$1\" ]; then\n    CAMKES_DIR=$1\nelif [ -d \"\/host\/camkes-project\" ]; then\n    CAMKES_DIR=\"\/host\/camkes-project\"\nelif [ -d \"${HOME}\/CASE\/camkes\" ]; then\n    CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"$CAMKES_DIR\" || ! -d \"${CAMKES_DIR}\" ]]; then\n    echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your CAmkES project directory\"\n    exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name \nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=$CAMKES_DIR\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ ! -e \"${CAMKES_APPS_DIR}\" ]; then\n    ln -sv $PROJECT_HOME $CAMKES_APPS_DIR\nfi\n\n\n########################\n# run CAmkES\/seL4 build\n########################\n\ncd $CAMKES_DIR\n\nBUILD_DIR=build_$HAMR_CAMKES_PROJ\n\nrm -rf $BUILD_DIR\nmkdir $BUILD_DIR\ncd $BUILD_DIR\n\n..\/init-build.sh -DCAMKES_APP=$HAMR_CAMKES_PROJ && ninja\n\n########################\n# simulate via QEMU\n########################\n\n.\/simulate                   \n","overwrite" : true,"makeExecutable" : true}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/emitter_impl\/src\/sb_emitter_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_emitter_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nvoid sb_entrypoint_emitter_impl_periodic_dispatcher(const int64_t * in_arg) {\n  run_emitter((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * sb_enq_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_enq_enqueue(const int8_t * sb_enq){\n  bool sb_result = true;\n  sb_result &= sb_enq0_enqueue((int8_t *) sb_enq);\n  sb_result &= sb_enq1_enqueue((int8_t *) sb_enq);\n  sb_result &= sb_enq2_enqueue((int8_t *) sb_enq);\n  sb_result &= sb_enq3_enqueue((int8_t *) sb_enq);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_emitter_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_impl_initializer(const int64_t * in_arg) {\n  test_event_data_port_emitter_component_init((int64_t *) in_arg);\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_impl_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_emitter_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/emitter_impl\/includes\/sb_emitter_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_emitter_impl_types__H\n#define __sb_AADL_emitter_impl_types__H\n\n#include <sb_types.h>\n\nbool sb_enq_enqueue(const int8_t * sb_enq);\n\nvoid run_emitter(const int64_t *);\n\nvoid test_event_data_port_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_emitter_impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_default_impl\/src\/sb_consumer_queue_default_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_queue_default_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_deq_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * deq\n *\n ************************************************************************\/\nstatic void sb_deq_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_consumer_queue_default_impl_deq:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_default_impl_deq(const int8_t * in_arg) {\n  test_event_data_port_consumer_s_event_handler((int8_t *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_default_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_default_impl_initializer(const int64_t * in_arg) {\n  test_event_data_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid post_init(void){\n  \/\/ register callback for EventDataPort port deq\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  int8_t sb_deq;\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_default_impl_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    while (sb_deq_dequeue((int8_t *) &sb_deq)) {\n      sb_entrypoint_consumer_queue_default_impl_deq(&sb_deq);\n    }\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_default_impl\/includes\/sb_consumer_queue_default_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_queue_default_impl_types__H\n#define __sb_AADL_consumer_queue_default_impl_types__H\n\n#include <sb_types.h>\n\nbool sb_deq_dequeue(int8_t * sb_deq);\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg);\n\nvoid test_event_data_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_queue_default_impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_2_impl\/src\/sb_consumer_queue_2_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_queue_2_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_deq_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * deq\n *\n ************************************************************************\/\nstatic void sb_deq_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_consumer_queue_2_impl_deq:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_deq(const int8_t * in_arg) {\n  test_event_data_port_consumer_s_event_handler((int8_t *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_2_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_initializer(const int64_t * in_arg) {\n  test_event_data_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid post_init(void){\n  \/\/ register callback for EventDataPort port deq\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  int8_t sb_deq;\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_2_impl_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    while (sb_deq_dequeue((int8_t *) &sb_deq)) {\n      sb_entrypoint_consumer_queue_2_impl_deq(&sb_deq);\n    }\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_2_impl\/includes\/sb_consumer_queue_2_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_queue_2_impl_types__H\n#define __sb_AADL_consumer_queue_2_impl_types__H\n\n#include <sb_types.h>\n\nbool sb_deq_dequeue(int8_t * sb_deq);\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg);\n\nvoid test_event_data_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_queue_2_impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_5_impl\/src\/sb_consumer_queue_5_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_consumer_queue_5_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_deq_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * deq\n *\n ************************************************************************\/\nstatic void sb_deq_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_consumer_queue_5_impl_deq:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_5_impl_deq(const int8_t * in_arg) {\n  test_event_data_port_consumer_s_event_handler((int8_t *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_5_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_5_impl_initializer(const int64_t * in_arg) {\n  test_event_data_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid post_init(void){\n  \/\/ register callback for EventDataPort port deq\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  int8_t sb_deq;\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_5_impl_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    while (sb_deq_dequeue((int8_t *) &sb_deq)) {\n      sb_entrypoint_consumer_queue_5_impl_deq(&sb_deq);\n    }\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/consumer_queue_5_impl\/includes\/sb_consumer_queue_5_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_consumer_queue_5_impl_types__H\n#define __sb_AADL_consumer_queue_5_impl_types__H\n\n#include <sb_types.h>\n\nbool sb_deq_dequeue(int8_t * sb_deq);\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg);\n\nvoid test_event_data_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_queue_5_impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c", { "type" : "Resource","content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (2000 \/ aadl_tick_interval)) == 0) {\n    sb_src_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_event_data_port_fan_out--SeL4_TB\/includes\/sb_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_types__H\n#define __SB_AADL_sb_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_types__H\n","overwrite" : true,"makeExecutable" : false}]]}}
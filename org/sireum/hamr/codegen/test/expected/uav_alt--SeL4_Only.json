{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "uav_alt--SeL4_Only\/components\/RadioDriver_Impl\/RadioDriver_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Command_Impl_1_Sender.idl4\";\n\ncomponent RadioDriver_Impl {\n  include <sb_PROC_HW_types.h>;\n  control;\n  uses sb_Monitor_SW__Command_Impl_1_Sender sb_recv_map_out0;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/FlightPlanner_Impl\/FlightPlanner_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Mission_1_Sender.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_bool_1_Receiver.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_SW__Command_Impl_1_Receiver.idl4\";\n\ncomponent FlightPlanner_Impl {\n  include <sb_PROC_HW_types.h>;\n  control;\n  uses sb_Monitor_SW__Mission_1_Sender sb_flight_plan0;\n  uses sb_Monitor_bool_1_Receiver sb_mission_rcv;\n  uses sb_Monitor_SW__Command_Impl_1_Receiver sb_recv_map;\n  consumes ReceiveEvent sb_mission_rcv_notification;\n  consumes ReceiveEvent sb_recv_map_notification;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/WaypointManager_Impl\/WaypointManager_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Mission_1_Receiver.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_bool_1_Sender.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_SW__MissionWindow_1_Sender.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_int64_t_1_Receiver.idl4\";\n\ncomponent WaypointManager_Impl {\n  include <sb_PROC_HW_types.h>;\n  control;\n  uses sb_Monitor_SW__Mission_1_Receiver sb_flight_plan;\n  uses sb_Monitor_bool_1_Sender sb_mission_rcv0;\n  uses sb_Monitor_SW__MissionWindow_1_Sender sb_mission_window0;\n  uses sb_Monitor_int64_t_1_Receiver sb_tracking_id;\n  consumes ReceiveEvent sb_flight_plan_notification;\n  consumes ReceiveEvent sb_tracking_id_notification;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/UARTDriver_Impl\/UARTDriver_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__MissionWindow_1_Receiver.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_int64_t_1_Sender.idl4\";\n\ncomponent UARTDriver_Impl {\n  include <sb_PROC_HW_types.h>;\n  control;\n  uses sb_Monitor_SW__MissionWindow_1_Receiver sb_mission_window;\n  uses sb_Monitor_int64_t_1_Sender sb_tracking_id0;\n  consumes ReceiveEvent sb_mission_window_notification;\n  has semaphore sb_dispatch_sem;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/sb_FPLN_mission_rcv_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_bool_1_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/sb_Monitor_bool_1_Sender.idl4\";\n\ncomponent sb_FPLN_mission_rcv_Monitor {\n\n  provides sb_Monitor_bool_1_Receiver mon_receive;\n  provides sb_Monitor_bool_1_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/sb_WPM_tracking_id_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int64_t_1_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/sb_Monitor_int64_t_1_Sender.idl4\";\n\ncomponent sb_WPM_tracking_id_Monitor {\n\n  provides sb_Monitor_int64_t_1_Receiver mon_receive;\n  provides sb_Monitor_int64_t_1_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/sb_FPLN_recv_map_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__Command_Impl_1_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/sb_Monitor_SW__Command_Impl_1_Sender.idl4\";\n\ncomponent sb_FPLN_recv_map_Monitor {\n\n  provides sb_Monitor_SW__Command_Impl_1_Receiver mon_receive;\n  provides sb_Monitor_SW__Command_Impl_1_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/sb_UART_mission_window_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__MissionWindow_1_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/sb_Monitor_SW__MissionWindow_1_Sender.idl4\";\n\ncomponent sb_UART_mission_window_Monitor {\n\n  provides sb_Monitor_SW__MissionWindow_1_Receiver mon_receive;\n  provides sb_Monitor_SW__MissionWindow_1_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/sb_WPM_flight_plan_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__Mission_1_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/sb_Monitor_SW__Mission_1_Sender.idl4\";\n\ncomponent sb_WPM_flight_plan_Monitor {\n\n  provides sb_Monitor_SW__Mission_1_Receiver mon_receive;\n  provides sb_Monitor_SW__Mission_1_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n"}],[ "uav_alt--SeL4_Only\/PROC_SW.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport \"components\/RadioDriver_Impl\/RadioDriver_Impl.camkes\";\nimport \"components\/FlightPlanner_Impl\/FlightPlanner_Impl.camkes\";\nimport \"components\/WaypointManager_Impl\/WaypointManager_Impl.camkes\";\nimport \"components\/UARTDriver_Impl\/UARTDriver_Impl.camkes\";\nimport \"components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/sb_FPLN_mission_rcv_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/sb_WPM_tracking_id_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/sb_FPLN_recv_map_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_UART_mission_window_Monitor\/sb_UART_mission_window_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/sb_WPM_flight_plan_Monitor.camkes\";\n\nassembly {\n  composition {\n    component RadioDriver_Impl RADIO;\n    component FlightPlanner_Impl FPLN;\n    component WaypointManager_Impl WPM;\n    component UARTDriver_Impl UART;\n    component sb_FPLN_mission_rcv_Monitor sb_fpln_mission_rcv_monitor;\n    component sb_WPM_tracking_id_Monitor sb_wpm_tracking_id_monitor;\n    component sb_FPLN_recv_map_Monitor sb_fpln_recv_map_monitor;\n    component sb_UART_mission_window_Monitor sb_uart_mission_window_monitor;\n    component sb_WPM_flight_plan_Monitor sb_wpm_flight_plan_monitor;\n\n    connection seL4RPCCall conn1(from RADIO.sb_recv_map_out0, to sb_fpln_recv_map_monitor.mon_send);\n    connection seL4RPCCall conn2(from FPLN.sb_recv_map, to sb_fpln_recv_map_monitor.mon_receive);\n    connection seL4Notification conn3(from sb_fpln_recv_map_monitor.monsig, to FPLN.sb_recv_map_notification);\n    connection seL4RPCCall conn4(from FPLN.sb_flight_plan0, to sb_wpm_flight_plan_monitor.mon_send);\n    connection seL4RPCCall conn5(from WPM.sb_flight_plan, to sb_wpm_flight_plan_monitor.mon_receive);\n    connection seL4Notification conn6(from sb_wpm_flight_plan_monitor.monsig, to WPM.sb_flight_plan_notification);\n    connection seL4RPCCall conn7(from WPM.sb_mission_rcv0, to sb_fpln_mission_rcv_monitor.mon_send);\n    connection seL4RPCCall conn8(from FPLN.sb_mission_rcv, to sb_fpln_mission_rcv_monitor.mon_receive);\n    connection seL4Notification conn9(from sb_fpln_mission_rcv_monitor.monsig, to FPLN.sb_mission_rcv_notification);\n    connection seL4RPCCall conn10(from WPM.sb_mission_window0, to sb_uart_mission_window_monitor.mon_send);\n    connection seL4RPCCall conn11(from UART.sb_mission_window, to sb_uart_mission_window_monitor.mon_receive);\n    connection seL4Notification conn12(from sb_uart_mission_window_monitor.monsig, to UART.sb_mission_window_notification);\n    connection seL4RPCCall conn13(from UART.sb_tracking_id0, to sb_wpm_tracking_id_monitor.mon_send);\n    connection seL4RPCCall conn14(from WPM.sb_tracking_id, to sb_wpm_tracking_id_monitor.mon_receive);\n    connection seL4Notification conn15(from sb_wpm_tracking_id_monitor.monsig, to WPM.sb_tracking_id_notification);\n  }\n\n  configuration {\n  }\n}\n"}],[ "uav_alt--SeL4_Only\/components\/RadioDriver_Impl\/\/src\/radiodriver.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_RadioDriver_Impl.h>\n#include <assert.h>\n\nvoid init(const int64_t * in_arg) {\n\n  printf(\"RDIO: initialise entry point called\\n\");\n\n  SW__Command_Impl command = {\n    .Map = {{ .lat = 0, .longitude = 1, .alt = 2 },\n            { .lat = 1, .longitude = 2, .alt = 3 },\n            { .lat = 2, .longitude = 3, .alt = 4 },\n            { .lat = 3, .longitude = 4, .alt = 5 }},\n      .Pattern = Perimeter,\n      .HMAC = true\n  };\n\n  printf(\"RDIO:> Sending command.\\n\");\n\n  \/\/ send command to FPLN  \n  assert(sb_recv_map_out_enqueue(&command)==true);\n}"}],[ "uav_alt--SeL4_Only\/components\/FlightPlanner_Impl\/\/src\/flightplanner.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_FlightPlanner_Impl.h>\n#include <assert.h>\n\nstatic bool missioncommand_sent = false;\n\nvoid init(const int64_t *arg){\n}\n\nvoid printCommand(const SW__Command_Impl * command) {\n  \tprintf(\"  Map     = [\\n\");\n    for(int i = 0; i < 4; i++){\n      SW__Coordinate_Impl c = command->Map[i];\n      printf(\"             %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n    }  \t\n    printf(\"            ]\\n\");\n\t\tprintf(\"  Pattern = %i\\n\", command->Pattern);\n\t\tprintf(\"  HMAC    = %i\\n\", command->HMAC);\n}\n\nvoid recv_map(const SW__Command_Impl * command) {\n\n  \tprintf(\"FPLN:< Command.\\n\");\n  \tprintCommand(command);\n\n  \tif(!missioncommand_sent) {\n\n  \t    \/\/ simulate the creation of a new mission\n  \t\tsb_SW__Mission_container mission = { .f = {{ .lat = 0, .longitude = 1, .alt = 2},\n   \t\t                                           { .lat = 1, .longitude = 2, .alt = 3},\n  \t\t                                           { .lat = 2, .longitude = 3, .alt = 4},\n  \t\t                                           { .lat = 3, .longitude = 4, .alt = 5},\n  \t\t                                           { .lat = 4, .longitude = 5, .alt = 6},\n  \t\t                                           { .lat = 5, .longitude = 6, .alt = 7},\n  \t\t                                           { .lat = 6, .longitude = 7, .alt = 8},\n  \t\t                                           { .lat = 7, .longitude = 8, .alt = 9},\n  \t\t                                           { .lat = 8, .longitude = 9, .alt = 10},\n  \t\t                                           { .lat = 9, .longitude = 10, .alt = 11}}};\n\n  \t\tprintf(\"FPLN:> new mission notification.\\n\");\n\n  \t\t\/\/ send the flight plan to WMP\n  \t\tassert(sb_flight_plan_enqueue(&mission) == true);\n\n    \tmissioncommand_sent = true;\n  \t}\n}\n\nvoid mission_rcv(const bool * value) {\n\tprintf(\"FPLN:< Received mission receipt confirmation: %i.\\n\", *value);\n}"}],[ "uav_alt--SeL4_Only\/components\/WaypointManager_Impl\/\/src\/waypointmanager.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_WaypointManager_Impl.h>\n#include <assert.h>\n#include <string.h>\n\n\nsb_SW__Mission_container _mission;\n\nvoid init(const int64_t * __unused__) {\n}\n\nvoid printMission(const sb_SW__Mission_container * mission){\n  printf(\"  Mission:\\n\");\n  for(int i = 0; i < 10; i++){\n    SW__Coordinate_Impl c = mission->f[i];\n    printf(\"    %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n  }\n}\n\nvoid sendWin(int i) {\n\n  \/\/ simulate creation of new mission windows\n  sb_SW__MissionWindow_container missionWindow = { \n    .f = { _mission.f[i % 10], \n           _mission.f[(i + 1) % 10],\n           _mission.f[(i + 2) % 10],\n           _mission.f[(i + 3) % 10]} \n  };\n\n  \/\/ send mission window to UART  \n  assert(sb_mission_window_enqueue(&missionWindow) == true);\n\n  printf(\"WM:> Sent mission window\\n\");\n}\n\nvoid flight_plan(const sb_SW__Mission_container * mission){\n  printf(\"WM:< Received flight plan\\n\");\n\n  memcpy(&_mission, mission, sizeof(struct sb_SW__Mission_container));\n\n  printMission(&_mission);\n\n  sendWin(0);\n\n  \/\/ send receipt confirmation back to FPLN\n  bool dummy = true;\n  assert(sb_mission_rcv_enqueue(&dummy) == true);\n}\n\nvoid tracking_id(const int64_t * nid) {\n  printf(\"WM:< Received %lu as the next id.\\n\", *nid);\n\n  sendWin(*nid);\n}"}],[ "uav_alt--SeL4_Only\/components\/UARTDriver_Impl\/\/src\/uartdriver.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_UARTDriver_Impl.h>\n#include <assert.h>\n\nstatic int64_t i = 0;\n\nvoid init(const int64_t * in_arg) {\n}\n\nvoid printMissionWindow(const sb_SW__MissionWindow_container * missionWindow){\n  printf(\"  MissionWindow:\\n\");\n  for(int i = 0; i < 4; i++){\n    SW__Coordinate_Impl c = missionWindow->f[i];\n    printf(\"    %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n  }\n}\n\nvoid mission_window(const sb_SW__MissionWindow_container * missionWindow){\n  printf(\"UART:< Received mission window\\n\");\n  printMissionWindow(missionWindow);\n\n  for(unsigned int j = 0; j < 100000000; j++){}\n\n  i++;\n\n  printf(\"UART:> Sending %lu as the next id.\\n\", i);\n\n  \/\/ send tracking id to WPM\n  assert(sb_tracking_id_enqueue(&i) == true);\n}\n"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_bool_1_Receiver.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_bool_1_Receiver {\n  include <sb_PROC_HW_types.h>;\n  bool dequeue(out bool m);\n};"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_bool_1_Sender.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_bool_1_Sender {\n  include <sb_PROC_HW_types.h>;\n  bool enqueue(refin bool m);\n};"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/src\/sb_FPLN_mission_rcv_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_FPLN_mission_rcv_Monitor.h\"\n\nstruct queue {\n    int head;\n    int tail;\n    int len;\n    bool elt[1];\n} q = {.head=0, .tail=0, .len=0};\n\nstatic bool is_full(void) {\n  return q.len == 1;\n}\n\nstatic bool is_empty(void) {\n  return q.len == 0;\n}\n\nbool mon_receive_dequeue(bool * m) {\n  if (is_empty()) {\n    return false;\n  } else {\n    m_lock();\n    *m = q.elt[q.tail];\n    q.tail = (q.tail + 1) % 1;\n    q.len--;\n    m_unlock();\n    return true;\n  }\n}\n\nbool mon_send_enqueue(const bool * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    m_lock();\n    q.elt[q.head] = *m;\n    q.head = (q.head + 1) % 1;\n    q.len++;\n    m_unlock();\n    monsig_emit();    \n    return true;\n  }\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/includes\/sb_FPLN_mission_rcv_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_FPLN_mission_rcv_Monitor_H__\n#define __sb_FPLN_mission_rcv_Monitor_H__\n\n#endif \/\/ __sb_FPLN_mission_rcv_Monitor_H__\n"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_int64_t_1_Receiver.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int64_t_1_Receiver {\n  include <sb_PROC_HW_types.h>;\n  bool dequeue(out int64_t m);\n};"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_int64_t_1_Sender.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int64_t_1_Sender {\n  include <sb_PROC_HW_types.h>;\n  bool enqueue(refin int64_t m);\n};"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/src\/sb_WPM_tracking_id_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_WPM_tracking_id_Monitor.h\"\n\nstruct queue {\n    int head;\n    int tail;\n    int len;\n    int64_t elt[1];\n} q = {.head=0, .tail=0, .len=0};\n\nstatic bool is_full(void) {\n  return q.len == 1;\n}\n\nstatic bool is_empty(void) {\n  return q.len == 0;\n}\n\nbool mon_receive_dequeue(int64_t * m) {\n  if (is_empty()) {\n    return false;\n  } else {\n    m_lock();\n    *m = q.elt[q.tail];\n    q.tail = (q.tail + 1) % 1;\n    q.len--;\n    m_unlock();\n    return true;\n  }\n}\n\nbool mon_send_enqueue(const int64_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    m_lock();\n    q.elt[q.head] = *m;\n    q.head = (q.head + 1) % 1;\n    q.len++;\n    m_unlock();\n    monsig_emit();    \n    return true;\n  }\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/includes\/sb_WPM_tracking_id_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_WPM_tracking_id_Monitor_H__\n#define __sb_WPM_tracking_id_Monitor_H__\n\n#endif \/\/ __sb_WPM_tracking_id_Monitor_H__\n"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_SW__Command_Impl_1_Receiver.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__Command_Impl_1_Receiver {\n  include <sb_PROC_HW_types.h>;\n  bool dequeue(out SW__Command_Impl m);\n};"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_SW__Command_Impl_1_Sender.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__Command_Impl_1_Sender {\n  include <sb_PROC_HW_types.h>;\n  bool enqueue(refin SW__Command_Impl m);\n};"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/src\/sb_FPLN_recv_map_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_FPLN_recv_map_Monitor.h\"\n\nstruct queue {\n    int head;\n    int tail;\n    int len;\n    SW__Command_Impl elt[1];\n} q = {.head=0, .tail=0, .len=0};\n\nstatic bool is_full(void) {\n  return q.len == 1;\n}\n\nstatic bool is_empty(void) {\n  return q.len == 0;\n}\n\nbool mon_receive_dequeue(SW__Command_Impl * m) {\n  if (is_empty()) {\n    return false;\n  } else {\n    m_lock();\n    *m = q.elt[q.tail];\n    q.tail = (q.tail + 1) % 1;\n    q.len--;\n    m_unlock();\n    return true;\n  }\n}\n\nbool mon_send_enqueue(const SW__Command_Impl * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    m_lock();\n    q.elt[q.head] = *m;\n    q.head = (q.head + 1) % 1;\n    q.len++;\n    m_unlock();\n    monsig_emit();    \n    return true;\n  }\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/includes\/sb_FPLN_recv_map_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_FPLN_recv_map_Monitor_H__\n#define __sb_FPLN_recv_map_Monitor_H__\n\n#endif \/\/ __sb_FPLN_recv_map_Monitor_H__\n"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_SW__MissionWindow_1_Receiver.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__MissionWindow_1_Receiver {\n  include <sb_PROC_HW_types.h>;\n  bool dequeue(out sb_SW__MissionWindow_container m);\n};"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_SW__MissionWindow_1_Sender.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__MissionWindow_1_Sender {\n  include <sb_PROC_HW_types.h>;\n  bool enqueue(refin sb_SW__MissionWindow_container m);\n};"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/src\/sb_UART_mission_window_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_UART_mission_window_Monitor.h\"\n\nstruct queue {\n    int head;\n    int tail;\n    int len;\n    sb_SW__MissionWindow_container elt[1];\n} q = {.head=0, .tail=0, .len=0};\n\nstatic bool is_full(void) {\n  return q.len == 1;\n}\n\nstatic bool is_empty(void) {\n  return q.len == 0;\n}\n\nbool mon_receive_dequeue(sb_SW__MissionWindow_container * m) {\n  if (is_empty()) {\n    return false;\n  } else {\n    m_lock();\n    *m = q.elt[q.tail];\n    q.tail = (q.tail + 1) % 1;\n    q.len--;\n    m_unlock();\n    return true;\n  }\n}\n\nbool mon_send_enqueue(const sb_SW__MissionWindow_container * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    m_lock();\n    q.elt[q.head] = *m;\n    q.head = (q.head + 1) % 1;\n    q.len++;\n    m_unlock();\n    monsig_emit();    \n    return true;\n  }\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/includes\/sb_UART_mission_window_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_UART_mission_window_Monitor_H__\n#define __sb_UART_mission_window_Monitor_H__\n\n#endif \/\/ __sb_UART_mission_window_Monitor_H__\n"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_SW__Mission_1_Receiver.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__Mission_1_Receiver {\n  include <sb_PROC_HW_types.h>;\n  bool dequeue(out sb_SW__Mission_container m);\n};"}],[ "uav_alt--SeL4_Only\/interfaces\/sb_Monitor_SW__Mission_1_Sender.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__Mission_1_Sender {\n  include <sb_PROC_HW_types.h>;\n  bool enqueue(refin sb_SW__Mission_container m);\n};"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/src\/sb_WPM_flight_plan_Monitor.c", { "type" : "Resource","content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_WPM_flight_plan_Monitor.h\"\n\nstruct queue {\n    int head;\n    int tail;\n    int len;\n    sb_SW__Mission_container elt[1];\n} q = {.head=0, .tail=0, .len=0};\n\nstatic bool is_full(void) {\n  return q.len == 1;\n}\n\nstatic bool is_empty(void) {\n  return q.len == 0;\n}\n\nbool mon_receive_dequeue(sb_SW__Mission_container * m) {\n  if (is_empty()) {\n    return false;\n  } else {\n    m_lock();\n    *m = q.elt[q.tail];\n    q.tail = (q.tail + 1) % 1;\n    q.len--;\n    m_unlock();\n    return true;\n  }\n}\n\nbool mon_send_enqueue(const sb_SW__Mission_container * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    m_lock();\n    q.elt[q.head] = *m;\n    q.head = (q.head + 1) % 1;\n    q.len++;\n    m_unlock();\n    monsig_emit();    \n    return true;\n  }\n}\n"}],[ "uav_alt--SeL4_Only\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/includes\/sb_WPM_flight_plan_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_WPM_flight_plan_Monitor_H__\n#define __sb_WPM_flight_plan_Monitor_H__\n\n#endif \/\/ __sb_WPM_flight_plan_Monitor_H__\n"}],[ "uav_alt--SeL4_Only\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (PROC_SW C)\n\nDeclareCAmkESComponent(RadioDriver_Impl\n  SOURCES components\/RadioDriver_Impl\/\/src\/radiodriver.c components\/RadioDriver_Impl\/src\/sb_RadioDriver_Impl.c\n  INCLUDES components\/RadioDriver_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(FlightPlanner_Impl\n  SOURCES components\/FlightPlanner_Impl\/\/src\/flightplanner.c components\/FlightPlanner_Impl\/src\/sb_FlightPlanner_Impl.c\n  INCLUDES components\/FlightPlanner_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(WaypointManager_Impl\n  SOURCES components\/WaypointManager_Impl\/\/src\/waypointmanager.c components\/WaypointManager_Impl\/src\/sb_WaypointManager_Impl.c\n  INCLUDES components\/WaypointManager_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(UARTDriver_Impl\n  SOURCES components\/UARTDriver_Impl\/\/src\/uartdriver.c components\/UARTDriver_Impl\/src\/sb_UARTDriver_Impl.c\n  INCLUDES components\/UARTDriver_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_FPLN_mission_rcv_Monitor\n  SOURCES components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/src\/sb_FPLN_mission_rcv_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_WPM_tracking_id_Monitor\n  SOURCES components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/src\/sb_WPM_tracking_id_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_FPLN_recv_map_Monitor\n  SOURCES components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/src\/sb_FPLN_recv_map_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_UART_mission_window_Monitor\n  SOURCES components\/sb_Monitors\/sb_UART_mission_window_Monitor\/src\/sb_UART_mission_window_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_UART_mission_window_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_WPM_flight_plan_Monitor\n  SOURCES components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/src\/sb_WPM_flight_plan_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(PROC_SW.camkes)\n"}],[ "uav_alt--SeL4_Only\/components\/RadioDriver_Impl\/src\/sb_RadioDriver_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_RadioDriver_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_recv_map_out_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_recv_map_out_enqueue(const SW__Command_Impl * sb_recv_map_out){\n  bool sb_result = true;\n  sb_result &= sb_recv_map_out0_enqueue((SW__Command_Impl *) sb_recv_map_out);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_RadioDriver_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_RadioDriver_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_RadioDriver_Impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/RadioDriver_Impl\/includes\/sb_RadioDriver_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_RadioDriver_Impl_types__H\n#define __sb_AADL_RadioDriver_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_recv_map_out_enqueue(const SW__Command_Impl * sb_recv_map_out);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_RadioDriver_Impl_types__H\n"}],[ "uav_alt--SeL4_Only\/components\/FlightPlanner_Impl\/src\/sb_FlightPlanner_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_FlightPlanner_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_flight_plan_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_flight_plan_enqueue(const sb_SW__Mission_container * sb_flight_plan){\n  bool sb_result = true;\n  sb_result &= sb_flight_plan0_enqueue((sb_SW__Mission_container *) sb_flight_plan);\n  return sb_result;\n}\n\nstatic void sb_mission_rcv_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_mission_rcv_notification_reg_callback(sb_mission_rcv_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypointsb_FlightPlanner_Impl_mission_rcv:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_FlightPlanner_Impl_mission_rcv(const bool * in_arg) {\n  mission_rcv((bool *) in_arg);\n}\n\nstatic void sb_recv_map_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_recv_map_notification_reg_callback(sb_recv_map_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypointsb_FlightPlanner_Impl_recv_map:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_FlightPlanner_Impl_recv_map(const SW__Command_Impl * in_arg) {\n  recv_map((SW__Command_Impl *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_FlightPlanner_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_FlightPlanner_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_mission_rcv_notification_reg_callback(sb_mission_rcv_notification_handler, NULL));\n  CALLBACKOP(sb_recv_map_notification_reg_callback(sb_recv_map_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  bool sb_mission_rcv;\n  SW__Command_Impl sb_recv_map;\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_FlightPlanner_Impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    while (sb_mission_rcv_dequeue((bool *) &sb_mission_rcv)) {\n      sb_entrypointsb_FlightPlanner_Impl_mission_rcv(&sb_mission_rcv);\n    }\n    while (sb_recv_map_dequeue((SW__Command_Impl *) &sb_recv_map)) {\n      sb_entrypointsb_FlightPlanner_Impl_recv_map(&sb_recv_map);\n    }\n  }\n  return 0;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/FlightPlanner_Impl\/includes\/sb_FlightPlanner_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_FlightPlanner_Impl_types__H\n#define __sb_AADL_FlightPlanner_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_flight_plan_enqueue(const sb_SW__Mission_container * sb_flight_plan);\n\nbool sb_mission_rcv_dequeue(bool * sb_mission_rcv);\n\nvoid mission_rcv(const bool * in_arg);\n\nbool sb_recv_map_dequeue(SW__Command_Impl * sb_recv_map);\n\nvoid recv_map(const SW__Command_Impl * in_arg);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_FlightPlanner_Impl_types__H\n"}],[ "uav_alt--SeL4_Only\/components\/WaypointManager_Impl\/src\/sb_WaypointManager_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_WaypointManager_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic void sb_flight_plan_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_flight_plan_notification_reg_callback(sb_flight_plan_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypointsb_WaypointManager_Impl_flight_plan:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_WaypointManager_Impl_flight_plan(const sb_SW__Mission_container * in_arg) {\n  flight_plan((sb_SW__Mission_container *) in_arg);\n}\n\n\/************************************************************************\n * sb_mission_rcv_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_mission_rcv_enqueue(const bool * sb_mission_rcv){\n  bool sb_result = true;\n  sb_result &= sb_mission_rcv0_enqueue((bool *) sb_mission_rcv);\n  return sb_result;\n}\n\n\/************************************************************************\n * sb_mission_window_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_mission_window_enqueue(const sb_SW__MissionWindow_container * sb_mission_window){\n  bool sb_result = true;\n  sb_result &= sb_mission_window0_enqueue((sb_SW__MissionWindow_container *) sb_mission_window);\n  return sb_result;\n}\n\nstatic void sb_tracking_id_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_tracking_id_notification_reg_callback(sb_tracking_id_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypointsb_WaypointManager_Impl_tracking_id:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_WaypointManager_Impl_tracking_id(const int64_t * in_arg) {\n  tracking_id((int64_t *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_WaypointManager_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_WaypointManager_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_flight_plan_notification_reg_callback(sb_flight_plan_notification_handler, NULL));\n  CALLBACKOP(sb_tracking_id_notification_reg_callback(sb_tracking_id_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  sb_SW__Mission_container sb_flight_plan;\n  int64_t sb_tracking_id;\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_WaypointManager_Impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    while (sb_flight_plan_dequeue((sb_SW__Mission_container *) &sb_flight_plan)) {\n      sb_entrypointsb_WaypointManager_Impl_flight_plan(&sb_flight_plan);\n    }\n    while (sb_tracking_id_dequeue((int64_t *) &sb_tracking_id)) {\n      sb_entrypointsb_WaypointManager_Impl_tracking_id(&sb_tracking_id);\n    }\n  }\n  return 0;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/WaypointManager_Impl\/includes\/sb_WaypointManager_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_WaypointManager_Impl_types__H\n#define __sb_AADL_WaypointManager_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_flight_plan_dequeue(sb_SW__Mission_container * sb_flight_plan);\n\nvoid flight_plan(const sb_SW__Mission_container * in_arg);\n\nbool sb_mission_rcv_enqueue(const bool * sb_mission_rcv);\n\nbool sb_mission_window_enqueue(const sb_SW__MissionWindow_container * sb_mission_window);\n\nbool sb_tracking_id_dequeue(int64_t * sb_tracking_id);\n\nvoid tracking_id(const int64_t * in_arg);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_WaypointManager_Impl_types__H\n"}],[ "uav_alt--SeL4_Only\/components\/UARTDriver_Impl\/src\/sb_UARTDriver_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_UARTDriver_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic void sb_mission_window_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_mission_window_notification_reg_callback(sb_mission_window_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypointsb_UARTDriver_Impl_mission_window:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypointsb_UARTDriver_Impl_mission_window(const sb_SW__MissionWindow_container * in_arg) {\n  mission_window((sb_SW__MissionWindow_container *) in_arg);\n}\n\n\/************************************************************************\n * sb_tracking_id_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_tracking_id_enqueue(const int64_t * sb_tracking_id){\n  bool sb_result = true;\n  sb_result &= sb_tracking_id0_enqueue((int64_t *) sb_tracking_id);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_UARTDriver_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_UARTDriver_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_mission_window_notification_reg_callback(sb_mission_window_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  sb_SW__MissionWindow_container sb_mission_window;\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_UARTDriver_Impl_initializer(&sb_dummy);\n  }\n\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    while (sb_mission_window_dequeue((sb_SW__MissionWindow_container *) &sb_mission_window)) {\n      sb_entrypointsb_UARTDriver_Impl_mission_window(&sb_mission_window);\n    }\n  }\n  return 0;\n}\n"}],[ "uav_alt--SeL4_Only\/components\/UARTDriver_Impl\/includes\/sb_UARTDriver_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_UARTDriver_Impl_types__H\n#define __sb_AADL_UARTDriver_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_mission_window_dequeue(sb_SW__MissionWindow_container * sb_mission_window);\n\nvoid mission_window(const sb_SW__MissionWindow_container * in_arg);\n\nbool sb_tracking_id_enqueue(const int64_t * sb_tracking_id);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_UARTDriver_Impl_types__H\n"}],[ "uav_alt--SeL4_Only\/includes\/sb_PROC_HW_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_PROC_HW_types__H\n#define __SB_AADL_sb_PROC_HW_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef\n  struct MC__MISSING_TYPE_Impl {\n    int32_t MISSING;\n  } MC__MISSING_TYPE_Impl;\n\ntypedef\n  enum {ZigZag, StraightLine, Perimeter} SW__FlightPattern;\n\ntypedef\n  struct SW__Coordinate_Impl {\n    int32_t lat;\n    int32_t longitude;\n    int32_t alt;\n  } SW__Coordinate_Impl;\n\ntypedef SW__Coordinate_Impl SW__Map [4];\n\ntypedef\n  struct sb_SW__Map_container {\n    SW__Map f;\n  } sb_SW__Map_container;\n\ntypedef\n  struct SW__Command_Impl {\n    SW__Map Map;\n    SW__FlightPattern Pattern;\n    bool HMAC;\n  } SW__Command_Impl;\n\ntypedef SW__Coordinate_Impl SW__Mission [10];\n\ntypedef\n  struct sb_SW__Mission_container {\n    SW__Mission f;\n  } sb_SW__Mission_container;\n\ntypedef SW__Coordinate_Impl SW__MissionWindow [4];\n\ntypedef\n  struct sb_SW__MissionWindow_container {\n    SW__MissionWindow f;\n  } sb_SW__MissionWindow_container;\n\n#endif \/\/ __SB_AADL_sb_PROC_HW_types__H\n"}]]}}
{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "uav_alt_domains--SeL4_TB\/components\/RadioDriver_Impl\/RadioDriver_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Command_Impl.idl4\";\nimport <std_connector.camkes>;\n\ncomponent RadioDriver_Impl {\n  include <sb_PROC_HW_types.h>;\n  control;\n  uses sb_Monitor_SW__Command_Impl sb_recv_map_out0;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/FlightPlanner_Impl\/FlightPlanner_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Mission.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_bool.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_SW__Command_Impl.idl4\";\nimport <std_connector.camkes>;\n\ncomponent FlightPlanner_Impl {\n  include <sb_PROC_HW_types.h>;\n  control;\n  uses sb_Monitor_SW__Mission sb_flight_plan0;\n  uses sb_Monitor_bool sb_mission_rcv;\n  uses sb_Monitor_SW__Command_Impl sb_recv_map;\n  consumes DataportWrite sb_mission_rcv_notification;\n  consumes DataportWrite sb_recv_map_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/WaypointManager_Impl\/WaypointManager_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Mission.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_bool.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_SW__MissionWindow.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_int64_t.idl4\";\nimport <std_connector.camkes>;\n\ncomponent WaypointManager_Impl {\n  include <sb_PROC_HW_types.h>;\n  control;\n  uses sb_Monitor_SW__Mission sb_flight_plan;\n  uses sb_Monitor_bool sb_mission_rcv0;\n  uses sb_Monitor_SW__MissionWindow sb_mission_window0;\n  uses sb_Monitor_int64_t sb_tracking_id;\n  consumes DataportWrite sb_flight_plan_notification;\n  consumes DataportWrite sb_tracking_id_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/UARTDriver_Impl\/UARTDriver_Impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__MissionWindow.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_int64_t.idl4\";\nimport <std_connector.camkes>;\n\ncomponent UARTDriver_Impl {\n  include <sb_PROC_HW_types.h>;\n  control;\n  uses sb_Monitor_SW__MissionWindow sb_mission_window;\n  uses sb_Monitor_int64_t sb_tracking_id0;\n  consumes DataportWrite sb_mission_window_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/sb_FPLN_mission_rcv_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_bool.idl4\";\n\ncomponent sb_FPLN_mission_rcv_Monitor {\n\n  provides sb_Monitor_bool mon;\n  emits DataportWrite monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/sb_WPM_tracking_id_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int64_t.idl4\";\n\ncomponent sb_WPM_tracking_id_Monitor {\n\n  provides sb_Monitor_int64_t mon;\n  emits DataportWrite monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/sb_FPLN_recv_map_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__Command_Impl.idl4\";\n\ncomponent sb_FPLN_recv_map_Monitor {\n\n  provides sb_Monitor_SW__Command_Impl mon;\n  emits DataportWrite monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/sb_UART_mission_window_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__MissionWindow.idl4\";\n\ncomponent sb_UART_mission_window_Monitor {\n\n  provides sb_Monitor_SW__MissionWindow mon;\n  emits DataportWrite monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/sb_WPM_flight_plan_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__Mission.idl4\";\n\ncomponent sb_WPM_flight_plan_Monitor {\n\n  provides sb_Monitor_SW__Mission mon;\n  emits DataportWrite monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/dispatch_periodic\/dispatch_periodic.camkes", { "type" : "Resource","content" : "import <global-connectors.camkes>;\n\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_RADIO_periodic_dispatch_notification;\n  emits Notification sb_FPLN_periodic_dispatch_notification;\n  emits Notification sb_WPM_periodic_dispatch_notification;\n  emits Notification sb_UART_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/PROC_SW.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/RadioDriver_Impl\/RadioDriver_Impl.camkes\";\nimport \"components\/FlightPlanner_Impl\/FlightPlanner_Impl.camkes\";\nimport \"components\/WaypointManager_Impl\/WaypointManager_Impl.camkes\";\nimport \"components\/UARTDriver_Impl\/UARTDriver_Impl.camkes\";\nimport \"components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/sb_FPLN_mission_rcv_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/sb_WPM_tracking_id_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/sb_FPLN_recv_map_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_UART_mission_window_Monitor\/sb_UART_mission_window_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/sb_WPM_flight_plan_Monitor.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component RadioDriver_Impl RADIO;\n    component FlightPlanner_Impl FPLN;\n    component WaypointManager_Impl WPM;\n    component UARTDriver_Impl UART;\n    component sb_FPLN_mission_rcv_Monitor sb_fpln_mission_rcv_monitor;\n    component sb_WPM_tracking_id_Monitor sb_wpm_tracking_id_monitor;\n    component sb_FPLN_recv_map_Monitor sb_fpln_recv_map_monitor;\n    component sb_UART_mission_window_Monitor sb_uart_mission_window_monitor;\n    component sb_WPM_flight_plan_Monitor sb_wpm_flight_plan_monitor;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4Notification conn1(from dispatch_periodic_inst.sb_RADIO_periodic_dispatch_notification, to RADIO.sb_periodic_dispatch_notification);\n    connection seL4Notification conn2(from dispatch_periodic_inst.sb_FPLN_periodic_dispatch_notification, to FPLN.sb_periodic_dispatch_notification);\n    connection seL4Notification conn3(from dispatch_periodic_inst.sb_WPM_periodic_dispatch_notification, to WPM.sb_periodic_dispatch_notification);\n    connection seL4Notification conn4(from dispatch_periodic_inst.sb_UART_periodic_dispatch_notification, to UART.sb_periodic_dispatch_notification);\n    connection seL4RPCCall conn5(from RADIO.sb_recv_map_out0, to sb_fpln_recv_map_monitor.mon);\n    connection seL4RPCCall conn6(from FPLN.sb_recv_map, to sb_fpln_recv_map_monitor.mon);\n    connection seL4Notification conn7(from sb_fpln_recv_map_monitor.monsig, to FPLN.sb_recv_map_notification);\n    connection seL4RPCCall conn8(from FPLN.sb_flight_plan0, to sb_wpm_flight_plan_monitor.mon);\n    connection seL4RPCCall conn9(from WPM.sb_flight_plan, to sb_wpm_flight_plan_monitor.mon);\n    connection seL4Notification conn10(from sb_wpm_flight_plan_monitor.monsig, to WPM.sb_flight_plan_notification);\n    connection seL4RPCCall conn11(from WPM.sb_mission_rcv0, to sb_fpln_mission_rcv_monitor.mon);\n    connection seL4RPCCall conn12(from FPLN.sb_mission_rcv, to sb_fpln_mission_rcv_monitor.mon);\n    connection seL4Notification conn13(from sb_fpln_mission_rcv_monitor.monsig, to FPLN.sb_mission_rcv_notification);\n    connection seL4RPCCall conn14(from WPM.sb_mission_window0, to sb_uart_mission_window_monitor.mon);\n    connection seL4RPCCall conn15(from UART.sb_mission_window, to sb_uart_mission_window_monitor.mon);\n    connection seL4Notification conn16(from sb_uart_mission_window_monitor.monsig, to UART.sb_mission_window_notification);\n    connection seL4RPCCall conn17(from UART.sb_tracking_id0, to sb_wpm_tracking_id_monitor.mon);\n    connection seL4RPCCall conn18(from WPM.sb_tracking_id, to sb_wpm_tracking_id_monitor.mon);\n    connection seL4Notification conn19(from sb_wpm_tracking_id_monitor.monsig, to WPM.sb_tracking_id_notification);\n    connection seL4TimeServer conn20(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn21(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/RadioDriver_Impl\/src\/radiodriver.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_RadioDriver_Impl.h>\n#include <assert.h>\n\nvoid init(const int64_t * in_arg) {\n\n  printf(\"RDIO: initialise entry point called\\n\");\n\n  SW__Command_Impl command = {\n    .Map = {{ .lat = 0, .longitude = 1, .alt = 2 },\n            { .lat = 1, .longitude = 2, .alt = 3 },\n            { .lat = 2, .longitude = 3, .alt = 4 },\n            { .lat = 3, .longitude = 4, .alt = 5 }},\n      .Pattern = Perimeter,\n      .HMAC = true\n  };\n\n  printf(\"RDIO:> Sending command.\\n\");\n\n  \/\/ send command to FPLN  \n  assert(sb_recv_map_out_write(&command)==true);\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/FlightPlanner_Impl\/src\/flightplanner.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_FlightPlanner_Impl.h>\n#include <assert.h>\n\nstatic bool missioncommand_sent = false;\n\nvoid init(const int64_t *arg){\n}\n\nvoid printCommand(const SW__Command_Impl * command) {\n  \tprintf(\"  Map     = [\\n\");\n    for(int i = 0; i < 4; i++){\n      SW__Coordinate_Impl c = command->Map[i];\n      printf(\"             %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n    }  \t\n    printf(\"            ]\\n\");\n\t\tprintf(\"  Pattern = %i\\n\", command->Pattern);\n\t\tprintf(\"  HMAC    = %i\\n\", command->HMAC);\n}\n\nvoid recv_map(const SW__Command_Impl * command) {\n\n  \tprintf(\"FPLN:< Command.\\n\");\n  \tprintCommand(command);\n\n  \tif(!missioncommand_sent) {\n\n  \t    \/\/ simulate the creation of a new mission\n  \t\tsb_SW__Mission_container mission = { .f = {{ .lat = 0, .longitude = 1, .alt = 2},\n   \t\t                                           { .lat = 1, .longitude = 2, .alt = 3},\n  \t\t                                           { .lat = 2, .longitude = 3, .alt = 4},\n  \t\t                                           { .lat = 3, .longitude = 4, .alt = 5},\n  \t\t                                           { .lat = 4, .longitude = 5, .alt = 6},\n  \t\t                                           { .lat = 5, .longitude = 6, .alt = 7},\n  \t\t                                           { .lat = 6, .longitude = 7, .alt = 8},\n  \t\t                                           { .lat = 7, .longitude = 8, .alt = 9},\n  \t\t                                           { .lat = 8, .longitude = 9, .alt = 10},\n  \t\t                                           { .lat = 9, .longitude = 10, .alt = 11}}};\n\n  \t\tprintf(\"FPLN:> new mission notification.\\n\");\n\n  \t\t\/\/ send the flight plan to WMP\n  \t\tassert(sb_flight_plan_write(&mission) == true);\n\n    \tmissioncommand_sent = true;\n  \t}\n}\n\nvoid mission_rcv(const bool * value) {\n\tprintf(\"FPLN:< Received mission receipt confirmation: %i.\\n\", *value);\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/WaypointManager_Impl\/src\/waypointmanager.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_WaypointManager_Impl.h>\n#include <assert.h>\n#include <string.h>\n\n\nsb_SW__Mission_container _mission;\n\nvoid init(const int64_t * __unused__) {\n}\n\nvoid printMission(const sb_SW__Mission_container * mission){\n  printf(\"  Mission:\\n\");\n  for(int i = 0; i < 10; i++){\n    SW__Coordinate_Impl c = mission->f[i];\n    printf(\"    %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n  }\n}\n\nvoid sendWin(int i) {\n\n  \/\/ simulate creation of new mission windows\n  sb_SW__MissionWindow_container missionWindow = { \n    .f = { _mission.f[i % 10], \n           _mission.f[(i + 1) % 10],\n           _mission.f[(i + 2) % 10],\n           _mission.f[(i + 3) % 10]} \n  };\n\n  \/\/ send mission window to UART  \n  assert(sb_mission_window_write(&missionWindow) == true);\n\n  printf(\"WM:> Sent mission window\\n\");\n}\n\nvoid flight_plan(const sb_SW__Mission_container * mission){\n  printf(\"WM:< Received flight plan\\n\");\n\n  memcpy(&_mission, mission, sizeof(struct sb_SW__Mission_container));\n\n  printMission(&_mission);\n\n  sendWin(0);\n\n  \/\/ send receipt confirmation back to FPLN\n  bool dummy = true;\n  assert(sb_mission_rcv_write(&dummy) == true);\n}\n\nvoid tracking_id(const uintmax_t * nid) {\n  printf(\"WM:< Received %\" PRIu64 \" as the next id.\\n\", *nid);\n\n  sendWin(*nid);\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/UARTDriver_Impl\/src\/uartdriver.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n#include <sb_UARTDriver_Impl.h>\n#include <assert.h>\n\nstatic uintmax_t i = 0;\n\nvoid init(const int64_t * in_arg) {\n}\n\nvoid printMissionWindow(const sb_SW__MissionWindow_container * missionWindow){\n  printf(\"  MissionWindow:\\n\");\n  for(int i = 0; i < 4; i++){\n    SW__Coordinate_Impl c = missionWindow->f[i];\n    printf(\"    %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n  }\n}\n\nvoid mission_window(const sb_SW__MissionWindow_container * missionWindow){\n  printf(\"UART:< Received mission window\\n\");\n  printMissionWindow(missionWindow);\n\n  for(unsigned int j = 0; j < 100000000; j++){}\n\n  i++;\n\n  printf(\"UART:> Sending %\" PRIu64 \" as the next id.\\n\", i);\n\n  \/\/ send tracking id to WPM\n  assert(sb_tracking_id_write(&i) == true);\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_bool.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_bool {\n  include <sb_PROC_HW_types.h>;\n  bool is_empty();\n  bool read(out bool m);\n  bool write(refin bool m);\n};","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/src\/sb_FPLN_mission_rcv_Monitor.c", { "type" : "Resource","content" : "#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_FPLN_mission_rcv_Monitor.h\"\n\nint monsig_emit(void);\n\nstatic bool contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(bool * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const bool * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/includes\/sb_FPLN_mission_rcv_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_FPLN_mission_rcv_Monitor_H__\n#define __sb_FPLN_mission_rcv_Monitor_H__\n\n#endif \/\/ __sb_FPLN_mission_rcv_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_int64_t.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int64_t {\n  include <sb_PROC_HW_types.h>;\n  bool is_empty();\n  bool read(out int64_t m);\n  bool write(refin int64_t m);\n};","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/src\/sb_WPM_tracking_id_Monitor.c", { "type" : "Resource","content" : "#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_WPM_tracking_id_Monitor.h\"\n\nint monsig_emit(void);\n\nstatic int64_t contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(int64_t * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const int64_t * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/includes\/sb_WPM_tracking_id_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_WPM_tracking_id_Monitor_H__\n#define __sb_WPM_tracking_id_Monitor_H__\n\n#endif \/\/ __sb_WPM_tracking_id_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_SW__Command_Impl.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__Command_Impl {\n  include <sb_PROC_HW_types.h>;\n  bool is_empty();\n  bool read(out SW__Command_Impl m);\n  bool write(refin SW__Command_Impl m);\n};","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/src\/sb_FPLN_recv_map_Monitor.c", { "type" : "Resource","content" : "#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_FPLN_recv_map_Monitor.h\"\n\nint monsig_emit(void);\n\nstatic SW__Command_Impl contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(SW__Command_Impl * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const SW__Command_Impl * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/includes\/sb_FPLN_recv_map_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_FPLN_recv_map_Monitor_H__\n#define __sb_FPLN_recv_map_Monitor_H__\n\n#endif \/\/ __sb_FPLN_recv_map_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_SW__MissionWindow.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__MissionWindow {\n  include <sb_PROC_HW_types.h>;\n  bool is_empty();\n  bool read(out sb_SW__MissionWindow_container m);\n  bool write(refin sb_SW__MissionWindow_container m);\n};","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/src\/sb_UART_mission_window_Monitor.c", { "type" : "Resource","content" : "#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_UART_mission_window_Monitor.h\"\n\nint monsig_emit(void);\n\nstatic sb_SW__MissionWindow_container contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(sb_SW__MissionWindow_container * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const sb_SW__MissionWindow_container * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/includes\/sb_UART_mission_window_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_UART_mission_window_Monitor_H__\n#define __sb_UART_mission_window_Monitor_H__\n\n#endif \/\/ __sb_UART_mission_window_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_SW__Mission.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_SW__Mission {\n  include <sb_PROC_HW_types.h>;\n  bool is_empty();\n  bool read(out sb_SW__Mission_container m);\n  bool write(refin sb_SW__Mission_container m);\n};","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/src\/sb_WPM_flight_plan_Monitor.c", { "type" : "Resource","content" : "#include <sb_PROC_HW_types.h>\n#include \"..\/includes\/sb_WPM_flight_plan_Monitor.h\"\n\nint monsig_emit(void);\n\nstatic sb_SW__Mission_container contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(sb_SW__Mission_container * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const sb_SW__Mission_container * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/includes\/sb_WPM_flight_plan_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_WPM_flight_plan_Monitor_H__\n#define __sb_WPM_flight_plan_Monitor_H__\n\n#endif \/\/ __sb_WPM_flight_plan_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (PROC_SW C)\n\nadd_definitions(-DCAMKES)\n\nincludeGlobalComponents()\n\nDeclareCAmkESComponent(RadioDriver_Impl\n  SOURCES components\/RadioDriver_Impl\/\/src\/radiodriver.c components\/RadioDriver_Impl\/src\/sb_RadioDriver_Impl.c\n  INCLUDES components\/RadioDriver_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(FlightPlanner_Impl\n  SOURCES components\/FlightPlanner_Impl\/\/src\/flightplanner.c components\/FlightPlanner_Impl\/src\/sb_FlightPlanner_Impl.c\n  INCLUDES components\/FlightPlanner_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(WaypointManager_Impl\n  SOURCES components\/WaypointManager_Impl\/\/src\/waypointmanager.c components\/WaypointManager_Impl\/src\/sb_WaypointManager_Impl.c\n  INCLUDES components\/WaypointManager_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(UARTDriver_Impl\n  SOURCES components\/UARTDriver_Impl\/\/src\/uartdriver.c components\/UARTDriver_Impl\/src\/sb_UARTDriver_Impl.c\n  INCLUDES components\/UARTDriver_Impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  INCLUDES includes\n\n)\n\nDeclareCAmkESComponent(sb_FPLN_mission_rcv_Monitor\n  SOURCES components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/src\/sb_FPLN_mission_rcv_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_WPM_tracking_id_Monitor\n  SOURCES components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/src\/sb_WPM_tracking_id_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_FPLN_recv_map_Monitor\n  SOURCES components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/src\/sb_FPLN_recv_map_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_UART_mission_window_Monitor\n  SOURCES components\/sb_Monitors\/sb_UART_mission_window_Monitor\/src\/sb_UART_mission_window_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_UART_mission_window_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_WPM_flight_plan_Monitor\n  SOURCES components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/src\/sb_WPM_flight_plan_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(PROC_SW.camkes)\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/RadioDriver_Impl\/src\/sb_RadioDriver_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_RadioDriver_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_recv_map_out_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_recv_map_out_write(const SW__Command_Impl * sb_recv_map_out){\n  bool sb_result = true;\n  sb_result &= sb_recv_map_out0_write((SW__Command_Impl *) sb_recv_map_out);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_RadioDriver_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_RadioDriver_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_RadioDriver_Impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/RadioDriver_Impl\/includes\/sb_RadioDriver_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_RadioDriver_Impl_types__H\n#define __sb_AADL_RadioDriver_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_recv_map_out_write(const SW__Command_Impl * sb_recv_map_out);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_RadioDriver_Impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/FlightPlanner_Impl\/src\/sb_FlightPlanner_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_FlightPlanner_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_flight_plan_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_flight_plan_write(const sb_SW__Mission_container * sb_flight_plan){\n  bool sb_result = true;\n  sb_result &= sb_flight_plan0_write((sb_SW__Mission_container *) sb_flight_plan);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_FlightPlanner_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_FlightPlanner_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_FlightPlanner_Impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/FlightPlanner_Impl\/includes\/sb_FlightPlanner_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_FlightPlanner_Impl_types__H\n#define __sb_AADL_FlightPlanner_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_flight_plan_write(const sb_SW__Mission_container * sb_flight_plan);\n\nbool sb_mission_rcv_read(bool * sb_mission_rcv);\n\nbool sb_recv_map_read(SW__Command_Impl * sb_recv_map);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_FlightPlanner_Impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/WaypointManager_Impl\/src\/sb_WaypointManager_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_WaypointManager_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_mission_rcv_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_mission_rcv_write(const bool * sb_mission_rcv){\n  bool sb_result = true;\n  sb_result &= sb_mission_rcv0_write((bool *) sb_mission_rcv);\n  return sb_result;\n}\n\n\/************************************************************************\n * sb_mission_window_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_mission_window_write(const sb_SW__MissionWindow_container * sb_mission_window){\n  bool sb_result = true;\n  sb_result &= sb_mission_window0_write((sb_SW__MissionWindow_container *) sb_mission_window);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_WaypointManager_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_WaypointManager_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_WaypointManager_Impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/WaypointManager_Impl\/includes\/sb_WaypointManager_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_WaypointManager_Impl_types__H\n#define __sb_AADL_WaypointManager_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_flight_plan_read(sb_SW__Mission_container * sb_flight_plan);\n\nbool sb_mission_rcv_write(const bool * sb_mission_rcv);\n\nbool sb_mission_window_write(const sb_SW__MissionWindow_container * sb_mission_window);\n\nbool sb_tracking_id_read(int64_t * sb_tracking_id);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_WaypointManager_Impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/UARTDriver_Impl\/src\/sb_UARTDriver_Impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_UARTDriver_Impl.h\"\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_tracking_id_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_tracking_id_write(const int64_t * sb_tracking_id){\n  bool sb_result = true;\n  sb_result &= sb_tracking_id0_write((int64_t *) sb_tracking_id);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_UARTDriver_Impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_UARTDriver_Impl_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_UARTDriver_Impl_initializer(&sb_dummy);\n  }\n  \/\/ Initial lock to await dispatch input.\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/UARTDriver_Impl\/includes\/sb_UARTDriver_Impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_UARTDriver_Impl_types__H\n#define __sb_AADL_UARTDriver_Impl_types__H\n\n#include <sb_PROC_HW_types.h>\n\nbool sb_mission_window_read(sb_SW__MissionWindow_container * sb_mission_window);\n\nbool sb_tracking_id_write(const int64_t * sb_tracking_id);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_UARTDriver_Impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c", { "type" : "Resource","content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_PROC_HW_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_RADIO_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_FPLN_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_WPM_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_UART_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "uav_alt_domains--SeL4_TB\/includes\/sb_PROC_HW_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_PROC_HW_types__H\n#define __SB_AADL_sb_PROC_HW_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef\n  struct MC__MISSING_TYPE_Impl {\n    int32_t MISSING;\n  } MC__MISSING_TYPE_Impl;\n\ntypedef\n  enum {ZigZag, StraightLine, Perimeter} SW__FlightPattern;\n\ntypedef\n  struct SW__Coordinate_Impl {\n    int32_t lat;\n    int32_t longitude;\n    int32_t alt;\n  } SW__Coordinate_Impl;\n\ntypedef SW__Coordinate_Impl SW__Map [4];\n\ntypedef\n  struct sb_SW__Map_container {\n    SW__Map f;\n  } sb_SW__Map_container;\n\ntypedef\n  struct SW__Command_Impl {\n    SW__Map Map;\n    SW__FlightPattern Pattern;\n    bool HMAC;\n  } SW__Command_Impl;\n\ntypedef SW__Coordinate_Impl SW__Mission [10];\n\ntypedef\n  struct sb_SW__Mission_container {\n    SW__Mission f;\n  } sb_SW__Mission_container;\n\ntypedef SW__Coordinate_Impl SW__MissionWindow [4];\n\ntypedef\n  struct sb_SW__MissionWindow_container {\n    SW__MissionWindow f;\n  } sb_SW__MissionWindow_container;\n\n#endif \/\/ __SB_AADL_sb_PROC_HW_types__H\n","overwrite" : true,"makeExecutable" : false}]]}}
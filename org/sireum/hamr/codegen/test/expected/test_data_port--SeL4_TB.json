{  "type" : "TestResult","map" : { "type" : "Map","entries" : [ [ "test_data_port--SeL4_TB\/components\/source_t_impl\/source_t_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t.idl4\";\n\ncomponent source_t_impl {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int8_t sb_write_port0;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/destination_t_impl\/destination_t_impl.camkes", { "type" : "Resource","content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t.idl4\";\n\ncomponent destination_t_impl {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int8_t sb_read_port;\n  consumes DataportWrite sb_read_port_notification;\n  has semaphore sb_dispatch_sem;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/sb_Monitors\/sb_dest_read_port_Monitor\/sb_dest_read_port_Monitor.camkes", { "type" : "Resource","content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int8_t.idl4\";\n\ncomponent sb_dest_read_port_Monitor {\n\n  provides sb_Monitor_int8_t mon;\n  emits DataportWrite monsig;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/top_impl_Instance.camkes", { "type" : "Resource","content" : "import <std_connector.camkes>;\nimport \"components\/source_t_impl\/source_t_impl.camkes\";\nimport \"components\/destination_t_impl\/destination_t_impl.camkes\";\nimport \"components\/sb_Monitors\/sb_dest_read_port_Monitor\/sb_dest_read_port_Monitor.camkes\";\n\nassembly {\n  composition {\n    component source_t_impl src;\n    component destination_t_impl dest;\n    component sb_dest_read_port_Monitor sb_dest_read_port_monitor;\n\n    connection seL4RPCCall conn1(from src.sb_write_port0, to sb_dest_read_port_monitor.mon);\n    connection seL4RPCCall conn2(from dest.sb_read_port, to sb_dest_read_port_monitor.mon);\n    connection seL4Notification conn3(from sb_dest_read_port_monitor.monsig, to dest.sb_read_port_notification);\n  }\n\n  configuration {\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/source_t_impl\/src\/source.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_source_t_impl.h>\n\nstatic int8_t _value;\n\nvoid test_data_port_source_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_data_port_source_component_init called\\n\", get_instance_name());\n  _value = 0;\n}\n\nvoid run_sender(const int64_t *in_arg) {\n  if (sb_write_port_write( &_value ) ) {\n    printf(\"---------------------------------------\\n\");\n    printf(\"[%s] Sent %d\\n\", get_instance_name(), _value );\n    _value = (_value + 1) % 500;\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/destination_t_impl\/src\/destination.c", { "type" : "Resource","content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_destination_t_impl.h>\n\nvoid test_data_port_destination_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_data_port_destination_component_init called\\n\", get_instance_name());\n}\n\nvoid run_receiver(const int64_t *in_arg) {\n\n  int8_t value;\n  if(sb_read_port_read(&value)){\n    printf(\"[%s] value {%d}\\n\", get_instance_name(), value);\n  }\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/interfaces\/sb_Monitor_int8_t.idl4", { "type" : "Resource","content" : "procedure sb_Monitor_int8_t {\n  include <sb_types.h>;\n  bool is_empty();\n  bool read(out int8_t m);\n  bool write(refin int8_t m);\n};","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/sb_Monitors\/sb_dest_read_port_Monitor\/src\/sb_dest_read_port_Monitor.c", { "type" : "Resource","content" : "#include <sb_types.h>\n#include \"..\/includes\/sb_dest_read_port_Monitor.h\"\n\nint monsig_emit(void);\n\nstatic int8_t contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(int8_t * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const int8_t * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/sb_Monitors\/sb_dest_read_port_Monitor\/includes\/sb_dest_read_port_Monitor.h", { "type" : "Resource","content" : "#ifdef __sb_dest_read_port_Monitor_H__\n#define __sb_dest_read_port_Monitor_H__\n\n#endif \/\/ __sb_dest_read_port_Monitor_H__\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/CMakeLists.txt", { "type" : "Resource","content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nDeclareCAmkESComponent(source_t_impl\n  SOURCES components\/source_t_impl\/\/src\/source.c components\/source_t_impl\/src\/sb_source_t_impl.c\n  INCLUDES components\/source_t_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(destination_t_impl\n  SOURCES components\/destination_t_impl\/\/src\/destination.c components\/destination_t_impl\/src\/sb_destination_t_impl.c\n  INCLUDES components\/destination_t_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_dest_read_port_Monitor\n  SOURCES components\/sb_Monitors\/sb_dest_read_port_Monitor\/src\/sb_dest_read_port_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_dest_read_port_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/bin\/run-camkes.sh", { "type" : "Resource","content" : "#!\/usr\/bin\/env bash\n\nset -e\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n\n# location of camkes-projects directory\nif [ -n \"$1\" ]; then\n    CAMKES_DIR=$1\nelif [ -d \"\/host\/camkes-project\" ]; then\n    CAMKES_DIR=\"\/host\/camkes-project\"\nelif [ -d \"${HOME}\/CASE\/camkes\" ]; then\n    CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"$CAMKES_DIR\" || ! -d \"${CAMKES_DIR}\" ]]; then\n    echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your CAmkES project directory\"\n    exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name \nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=$CAMKES_DIR\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ ! -e \"${CAMKES_APPS_DIR}\" ]; then\n    ln -sv $PROJECT_HOME $CAMKES_APPS_DIR\nfi\n\n\n########################\n# run CAmkES\/seL4 build\n########################\n\ncd $CAMKES_DIR\n\nBUILD_DIR=build_$HAMR_CAMKES_PROJ\n\nrm -rf $BUILD_DIR\nmkdir $BUILD_DIR\ncd $BUILD_DIR\n\n..\/init-build.sh -DCAMKES_APP=$HAMR_CAMKES_PROJ && ninja\n\n########################\n# simulate via QEMU\n########################\n\n.\/simulate                   \n","overwrite" : true,"makeExecutable" : true}],[ "test_data_port--SeL4_TB\/components\/source_t_impl\/src\/sb_source_t_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_source_t_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_write_port_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_write_port_write(const int8_t * sb_write_port){\n  bool sb_result = true;\n  sb_result &= sb_write_port0_write((int8_t *) sb_write_port);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_source_t_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_source_t_impl_initializer(const int64_t * in_arg) {\n  test_data_port_source_component_init((int64_t *) in_arg);\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_source_t_impl_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/source_t_impl\/includes\/sb_source_t_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_source_t_impl_types__H\n#define __sb_AADL_source_t_impl_types__H\n\n#include <sb_types.h>\n\nbool sb_write_port_write(const int8_t * sb_write_port);\n\nvoid test_data_port_source_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_source_t_impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/destination_t_impl\/src\/sb_destination_t_impl.c", { "type" : "Resource","content" : "#include \"..\/includes\/sb_destination_t_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *  sb_entrypoint_destination_t_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_destination_t_impl_initializer(const int64_t * in_arg) {\n  test_data_port_destination_component_init((int64_t *) in_arg);\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_destination_t_impl_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n  }\n  return 0;\n}\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/components\/destination_t_impl\/includes\/sb_destination_t_impl.h", { "type" : "Resource","content" : "#ifndef __sb_AADL_destination_t_impl_types__H\n#define __sb_AADL_destination_t_impl_types__H\n\n#include <sb_types.h>\n\nbool sb_read_port_read(int8_t * sb_read_port);\n\nvoid test_data_port_destination_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_destination_t_impl_types__H\n","overwrite" : true,"makeExecutable" : false}],[ "test_data_port--SeL4_TB\/includes\/sb_types.h", { "type" : "Resource","content" : "#ifndef __SB_AADL_sb_types__H\n#define __SB_AADL_sb_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_types__H\n","overwrite" : true,"makeExecutable" : false}]]}}
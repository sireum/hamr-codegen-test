{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "testevent--SeL4_TB\/components\/emitter_impl\/emitter_impl.camkes",
        {
          "type" : "Resource",
          "content" : "import \"..\/..\/interfaces\/AADLEvent_Sender.idl4\";\n\ncomponent emitter_impl {\n  include <sb_types.h>;\n  control;\n  uses AADLEvent_Sender sb_e0;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/consumer_impl\/consumer_impl.camkes",
        {
          "type" : "Resource",
          "content" : "import \"..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\n\ncomponent consumer_impl {\n  include <sb_types.h>;\n  control;\n  uses AADLEvent_Receiver sb_s;\n  consumes ReceiveEvent sb_s_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/sb_Monitors\/sb_snk_s_Monitor\/sb_snk_s_Monitor.camkes",
        {
          "type" : "Resource",
          "content" : "import \"..\/..\/..\/interfaces\/AADLEvent_Receiver.idl4\";\nimport \"..\/..\/..\/interfaces\/AADLEvent_Sender.idl4\";\n\ncomponent sb_snk_s_Monitor {\n\n  provides AADLEvent_Receiver mon_receive;\n  provides AADLEvent_Sender mon_send;\n  emits ReceiveEvent monsig;\n  has mutex m;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/top_impl_Instance.camkes",
        {
          "type" : "Resource",
          "content" : "import <std_connector.camkes>;\nimport \"components\/emitter_impl\/emitter_impl.camkes\";\nimport \"components\/consumer_impl\/consumer_impl.camkes\";\nimport \"components\/sb_Monitors\/sb_snk_s_Monitor\/sb_snk_s_Monitor.camkes\";\n\nassembly {\n  composition {\n    component emitter_impl src;\n    component consumer_impl snk;\n    component sb_snk_s_Monitor sb_snk_s_monitor;\n\n    connection seL4RPCCall conn1(from src.sb_e0, to sb_snk_s_monitor.mon_send);\n    connection seL4RPCCall conn2(from snk.sb_s, to sb_snk_s_monitor.mon_receive);\n    connection seL4Notification conn3(from sb_snk_s_monitor.monsig, to snk.sb_s_notification);\n  }\n\n  configuration {\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/emitter_impl\/src\/emitter.c",
        {
          "type" : "Resource",
          "content" : "\/* testevent\/components\/emitter\/src\/emitter.c *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_emitter_impl.h>\n\nvoid testevent_emitter_component_init(const int64_t *in_arg)\n{\n    printf(\"testevent_emitter_component_init called\\n\");\n}\n\n\/* control thread: keep calling enqueue for thing\n *\/\nvoid run_emitter(const int64_t *in_arg)\n{\n    sb_e_enqueue();\n    printf(\"[Emitter] Sent event.\\n\");\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/consumer_impl\/src\/consumer.c",
        {
          "type" : "Resource",
          "content" : "\/* apps\/testevent\/components\/Consumer\/src\/main.c *\/\n\n\/* Similar to the \"helloevent\" example in CAmkES doc,\n * tidied up a bit.\n *\/\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_impl.h>\n\nstatic int8_t _value;\n\nvoid testevent_consumer_component_init(const int64_t *in_arg) {\n  printf(\"testevent_consumer_component_init called\\n\");\n  _value = 0;\n}\n\nvoid testevent_consumer_s_event_handler() {\n\n  printf(\"[Consumer] Callback %d fired.\\n\", _value);\n  _value = (_value + 1) % 500;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/interfaces\/AADLEvent_Receiver.idl4",
        {
          "type" : "Resource",
          "content" : "procedure AADLEvent_Receiver {\n  include <sb_types.h>;\n  bool is_empty();\n  bool dequeue();\n};",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/interfaces\/AADLEvent_Sender.idl4",
        {
          "type" : "Resource",
          "content" : "procedure AADLEvent_Sender {\n  include <sb_types.h>;\n  bool enqueue();\n};",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/sb_Monitors\/sb_snk_s_Monitor\/src\/sb_snk_s_Monitor.c",
        {
          "type" : "Resource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <string.h>\n\nint32_t num_events = 0;\n\nstatic inline void ignore_result(long long int unused_result) { (void) unused_result; }\n\n\/\/ Send interfaces\nbool mon_send_enqueue(void) {\n  int do_emit = 0;\n  ignore_result(m_lock());\n  if (num_events < 1) {\n    num_events++;\n    do_emit = 1;\n  }\n  ignore_result(m_unlock());\n  if (do_emit) {\n    monsig_emit();\n  }\n  return true;\n}\n\n\/\/ Receive interfaces \nbool mon_receive_is_empty(void) {\n  return num_events == 0;\n}\n\nbool mon_receive_dequeue(void) {\n  ignore_result(m_lock());\n  bool ret = false;\n  if(num_events > 0){\n    num_events--;\n    ret = true;\n  }\n  ignore_result(m_unlock());\n  return ret;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/sb_Monitors\/sb_snk_s_Monitor\/includes\/sb_snk_s_Monitor.h",
        {
          "type" : "Resource",
          "content" : "#ifdef __sb_snk_s_Monitor_H__\n#define __sb_snk_s_Monitor_H__\n\n#endif \/\/ __sb_snk_s_Monitor_H__\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/CMakeLists.txt",
        {
          "type" : "Resource",
          "content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nDeclareCAmkESComponent(emitter_impl\n  SOURCES components\/emitter_impl\/\/src\/emitter.c components\/emitter_impl\/src\/sb_emitter_impl.c\n  INCLUDES components\/emitter_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(consumer_impl\n  SOURCES components\/consumer_impl\/\/src\/consumer.c components\/consumer_impl\/src\/sb_consumer_impl.c\n  INCLUDES components\/consumer_impl\/includes\/ includes\n\n)\n\nDeclareCAmkESComponent(sb_snk_s_Monitor\n  SOURCES components\/sb_Monitors\/sb_snk_s_Monitor\/src\/sb_snk_s_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_snk_s_Monitor\/includes\/ includes\n\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/bin\/run-camkes.sh",
        {
          "type" : "Resource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -e\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n\n# location of camkes-projects directory\nif [ -n \"$1\" ]; then\n    CAMKES_DIR=$1\nelif [ -d \"\/host\/camkes-project\" ]; then\n    CAMKES_DIR=\"\/host\/camkes-project\"\nelif [ -d \"${HOME}\/CASE\/camkes\" ]; then\n    CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"$CAMKES_DIR\" || ! -d \"${CAMKES_DIR}\" ]]; then\n    echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your CAmkES project directory\"\n    exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name \nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=$CAMKES_DIR\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ ! -e \"${CAMKES_APPS_DIR}\" ]; then\n    ln -sv $PROJECT_HOME $CAMKES_APPS_DIR\nfi\n\n\n########################\n# run CAmkES\/seL4 build\n########################\n\ncd $CAMKES_DIR\n\nBUILD_DIR=build_$HAMR_CAMKES_PROJ\n\nrm -rf $BUILD_DIR\nmkdir $BUILD_DIR\ncd $BUILD_DIR\n\n..\/init-build.sh -DCAMKES_APP=$HAMR_CAMKES_PROJ && ninja\n\n########################\n# simulate via QEMU\n########################\n\n.\/simulate                   \n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "testevent--SeL4_TB\/components\/emitter_impl\/src\/sb_emitter_impl.c",
        {
          "type" : "Resource",
          "content" : "#include \"..\/includes\/sb_emitter_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_e_enqueue\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to send to a remote event port.\n *\n ************************************************************************\/\nbool sb_e_enqueue(void) {\n  sb_e0_enqueue();\n  return true;\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_emitter_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_impl_initializer(const int64_t * in_arg) {\n  testevent_emitter_component_init((int64_t *) in_arg);\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_impl_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/emitter_impl\/includes\/sb_emitter_impl.h",
        {
          "type" : "Resource",
          "content" : "#ifndef __sb_AADL_emitter_impl_types__H\n#define __sb_AADL_emitter_impl_types__H\n\n#include <sb_types.h>\n\nbool sb_e_enqueue(void);\n\nvoid testevent_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_emitter_impl_types__H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/consumer_impl\/src\/sb_consumer_impl.c",
        {
          "type" : "Resource",
          "content" : "#include \"..\/includes\/sb_consumer_impl.h\"\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback that  \n * dispatches the active-thread due to the arrival of an event on \n * its s event port\n *\n ************************************************************************\/\nstatic void sb_s_handler(void *_ UNUSED){\n  MUTEXOP(sb_dispatch_sem_post());\n  CALLBACKOP(sb_s_notification_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_impl_s(void){\n  testevent_consumer_s_event_handler();\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_impl_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_impl_initializer(const int64_t * in_arg) {\n  testevent_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  CALLBACKOP(sb_s_notification_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_impl_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    while(sb_s_dequeue()){\n      sb_entrypoint_consumer_impl_s();\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/components\/consumer_impl\/includes\/sb_consumer_impl.h",
        {
          "type" : "Resource",
          "content" : "#ifndef __sb_AADL_consumer_impl_types__H\n#define __sb_AADL_consumer_impl_types__H\n\n#include <sb_types.h>\n\nbool sb_s_dequeue(void);\n\nvoid testevent_consumer_s_event_handler(void);\n\nvoid testevent_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ __sb_AADL_consumer_impl_types__H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "testevent--SeL4_TB\/includes\/sb_types.h",
        {
          "type" : "Resource",
          "content" : "#ifndef __SB_AADL_sb_types__H\n#define __SB_AADL_sb_types__H\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ __SB_AADL_sb_types__H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
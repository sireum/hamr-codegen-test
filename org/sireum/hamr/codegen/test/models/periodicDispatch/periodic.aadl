package Periodic
public
    with Base_Types;
    with HAMR;
    
	system Critical
	end Critical;
	
	system implementation Critical.Impl
		subcomponents
			PROC : processor HW_Proc.Impl;
			SW : process SW.Impl;
		properties
			HAMR::Platform => (seL4_TB);
			Actual_Processor_Binding => (reference (PROC)) applies to SW;
	end Critical.Impl;
		
	processor HW_Proc
	end HW_Proc;
	
	processor implementation HW_Proc.Impl
	end HW_Proc.Impl;
	
	process SW
	end SW;
	
	process implementation SW.Impl
		subcomponents
			A: thread Comp_A.Impl;
			B: thread Comp_B.Impl;
		connections
			c1: port A.output -> B.input;
	end SW.Impl;
		
	thread Comp_A
		features
			output: out event data port Base_Types::Integer_32;
		properties
			Dispatch_Protocol => Periodic;
			Period => 1sec;
			Source_Text => ("behavior/comp_a.c");	
			Compute_Entrypoint_Source_Text => "Comp_A_time_triggered"; 
	end Comp_A;
	
	thread implementation Comp_A.Impl
	end Comp_A.Impl;

	thread Comp_B
		features
			input: in event data port Base_Types::Integer_32 {
			  Compute_Entrypoint_Source_Text => "Comp_B_input"; 
			};
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("behavior/comp_b.c");
	end Comp_B;
	
	thread implementation Comp_B.Impl
	end Comp_B.Impl;	
end Periodic;

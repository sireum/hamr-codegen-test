package Bit_Codec
public
	with Base_Types, Data_Model, HAMR, Bit_Codec_Property_Set;

	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		subcomponents
			latitude: data Base_Types::Integer_32;
			longitude: data Base_Types::Integer_32;
			altitude: data Base_Types::Integer_32;
	end Coordinate.Impl;

	data Mission
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (3);

			HAMR::Bit_Codec_Spec => "data/Mission.sc";
			HAMR::Bit_Codec_Max_Size => 288 Bits;
	end Mission;

	system Bit_Codec_Sys
	end Bit_Codec_Sys;

	system implementation Bit_Codec_Sys.Impl
		subcomponents
			proc: process Bit_Codec_Proc.Impl;
		properties
			HAMR::Platform => (JVM, Cygwin, Linux, macOS, seL4);
			HAMR::HW => (x86, amd64, QEMU);

			HAMR::Default_Bit_Width => 32;
			HAMR::Default_Max_Sequence_Size => 1;
			HAMR::Max_String_Size => 256;

			HAMR::Bit_Codec_Raw_Connections => true;
	end Bit_Codec_Sys.Impl;

	process Bit_Codec_Proc
	end Bit_Codec_Proc;

	process implementation Bit_Codec_Proc.Impl
		subcomponents
			producer: thread Producer;
			filter: thread Filter;
			consumer: thread Consumer;
		connections
			c1: port producer.to_filter_mission -> filter.from_producer_mission;
			c2: port filter.to_consumer_mission -> consumer.from_filter_mission;
			
			c3: port producer.to_filter_bool -> filter.from_producer_bool;
			c4: port filter.to_consumer_bool -> consumer.from_filter_bool;
			
			c5: port producer.to_filter_u32 -> filter.from_producer_u32;
			c6: port filter.to_consumer_u32 -> consumer.from_filter_u32;
			
			c7: port producer.to_filter_string -> filter.from_producer_string;
			c8: port filter.to_consumer_string -> consumer.from_filter_string;
			
			c9: port producer.to_filter_event -> filter.from_producer_event;
			c10: port filter.to_consumer_event -> consumer.from_filter_event;
	end Bit_Codec_Proc.Impl;

	thread Producer
		features
			to_filter_event: out event port;
			to_filter_mission: out event data port Mission;
			to_filter_bool: out data port Base_Types::Boolean;
			to_filter_u32: out data port Base_Types::Unsigned_32;
			to_filter_string: out data port Base_Types::String; 
		properties
			Thread_Properties::Dispatch_Protocol => Periodic;
			Timing_Properties::Period => 1000ms;

			Stack_Size => Bit_Codec_Property_Set::Stack_Size;
	end Producer;

	thread Filter
		features
			from_producer_event: in event port;
			from_producer_mission: in event data port Mission;
			from_producer_bool: in data port Base_Types::Boolean;
			from_producer_u32: in data port Base_Types::Unsigned_32;
			from_producer_string: in data port Base_Types::String;
			
			to_consumer_event: out event port; 
			to_consumer_mission: out event data port Mission;
			to_consumer_bool: out data port Base_Types::Boolean;
			to_consumer_u32: out data port Base_Types::Unsigned_32;
			to_consumer_string: out data port Base_Types::String;
		properties
			Dispatch_Protocol => Sporadic;
			Period => 1000ms;

			Stack_Size => Bit_Codec_Property_Set::Stack_Size;
	end Filter;

	thread Consumer
		features
			from_filter_event: in event port;
			from_filter_mission: in event data port Mission;
			from_filter_bool: in data port Base_Types::Boolean;
			from_filter_u32: in data port Base_Types::Unsigned_32;
			from_filter_string: in data port Base_Types::String;
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;

			Stack_Size => Bit_Codec_Property_Set::Stack_Size;
	end Consumer;
end Bit_Codec;

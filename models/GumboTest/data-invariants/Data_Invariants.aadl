package Data_Invariants
public
	with Data_Model;
	with Base_Types;
	
  data Temperature
    properties
      -- Indicate that the temperature info will be a struct (record)
      -- For structs, use of the type must refer to the data component implementation (Temperature.i),
      --  which defines the fields and associated types of the struct.
      Data_Model::Data_Representation => Struct;
  end Temperature;

  data implementation Temperature.i
    subcomponents
      -- temperature message contains degrees, which is represented using an AADL Base Type
      -- defined in the AADL Data Modeling annex.
      degrees: data Base_Types::Float_32;

    annex GUMBO
    {**
      -- data invariant
      --  data invariants are assumed whenever value of the datatype is consumed
      --                  and must be proved whenever a value of the data type is constructed
      invariants
        inv "Temperature Data Invariant":
          degrees >= -459.67; -- this works since codegen is emitting real lits as F32's
          
        inv "V: real vs neg real":
          1.0 >= -459.67;
        inv "V: comparing ints":
          (1 + 1) <= (3 - 1);
        inv "V: T":
          true;
        inv "V: !F":
          not false;
        inv "V: mixed":
          false <> (1 + 1 <= 3 - 1);
        inv "V: logical ops":
          true or true orelse true and not true andthen true;
        inv "V: arith ops":
          2 - 1 - 5 / 5 + 1 * 5 = 5;

        -- currently emitted an F32 <op> Z.  Need to convert one to the other first
        --inv "I: Real vs Int":
        --  1.0 >= 0;
        
        --inv "I: int expression":
        --  ((1) + 2);
        --inv "I: logical op on ints":
        --  1 and 2;
        --inv "I: arith op on bools":
        --  (1 = 1) + true;
        --inv "I: string lits?":
        --  "invalid";
    **};
  end Temperature.i;


 data SetPoint
        -- Indicate that the set point info will be a struct (record)
    -- For structs, use of the type must refer to the data component implementation (SetPoint.i),
    --  which defines the fields and associated types of the struct.
    properties
      Data_Model::Data_Representation => Struct;
  end SetPoint;

  data implementation SetPoint.i
    subcomponents
      low: data Temperature.i;
      high: data Temperature.i;
      annex GUMBO {**       
      invariants
        inv "SetPoint Data Invariant":
          low.degrees >= 70.0 and
          high.degrees <= 100.0 and
          low.degrees <= high.degrees;
      **};
  end SetPoint.i;
  
  system s
  	
  end s;
  
  system implementation s.impl
  	subcomponents
  		p: process p.impl;
  end s.impl;
  
  process p  	
  end p;
  
  process implementation p.impl
  	subcomponents
  		t: thread t;
  end p.impl;
  
  thread t
  	features
  		setPoint: out data port SetPoint.i;
  		temp: out data port Temperature.i;
  end t;
  
end Data_Invariants;
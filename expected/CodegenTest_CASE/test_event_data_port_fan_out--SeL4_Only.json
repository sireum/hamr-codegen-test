{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/emitter_impl_test_event_data_port_src\/emitter_impl_test_event_data_port_src.camkes",
        {
          "type" : "ITestResource",
          "content" : "import <std_connector.camkes>;\ncomponent emitter_impl_test_event_data_port_src {\n  include <sb_types.h>;\n  include <sb_queue_int8_t_1.h>;\n  include <sb_queue_int8_t_2.h>;\n  include <sb_queue_int8_t_5.h>;\n  control;\n  emits ReceiveEvent sb_enq_1_notification;\n  emits ReceiveEvent sb_enq_2_notification;\n  emits ReceiveEvent sb_enq_5_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sb_queue_int8_t_1_t sb_enq_queue_1;\n  dataport sb_queue_int8_t_2_t sb_enq_queue_2;\n  dataport sb_queue_int8_t_5_t sb_enq_queue_5;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_default_impl_test_event_data_port_snk_default\/consumer_queue_default_impl_test_event_data_port_snk_default.camkes",
        {
          "type" : "ITestResource",
          "content" : "component consumer_queue_default_impl_test_event_data_port_snk_default {\n  include <sb_types.h>;\n  include <sb_queue_int8_t_1.h>;\n  control;\n  consumes ReceiveEvent sb_deq_notification;\n  dataport sb_queue_int8_t_1_t sb_deq_queue;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_2_impl_test_event_data_port_snk_2_A\/consumer_queue_2_impl_test_event_data_port_snk_2_A.camkes",
        {
          "type" : "ITestResource",
          "content" : "component consumer_queue_2_impl_test_event_data_port_snk_2_A {\n  include <sb_types.h>;\n  include <sb_queue_int8_t_2.h>;\n  control;\n  consumes ReceiveEvent sb_deq_notification;\n  dataport sb_queue_int8_t_2_t sb_deq_queue;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_2_impl_test_event_data_port_snk_2_B\/consumer_queue_2_impl_test_event_data_port_snk_2_B.camkes",
        {
          "type" : "ITestResource",
          "content" : "component consumer_queue_2_impl_test_event_data_port_snk_2_B {\n  include <sb_types.h>;\n  include <sb_queue_int8_t_2.h>;\n  control;\n  consumes ReceiveEvent sb_deq_notification;\n  dataport sb_queue_int8_t_2_t sb_deq_queue;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_5_impl_test_event_data_port_snk_5\/consumer_queue_5_impl_test_event_data_port_snk_5.camkes",
        {
          "type" : "ITestResource",
          "content" : "component consumer_queue_5_impl_test_event_data_port_snk_5 {\n  include <sb_types.h>;\n  include <sb_queue_int8_t_5.h>;\n  control;\n  consumes ReceiveEvent sb_deq_notification;\n  dataport sb_queue_int8_t_5_t sb_deq_queue;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/dispatch_periodic\/dispatch_periodic.camkes",
        {
          "type" : "ITestResource",
          "content" : "import <global-connectors.camkes>;\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_test_event_data_port_src_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/top_impl_Instance.camkes",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/emitter_impl_test_event_data_port_src\/emitter_impl_test_event_data_port_src.camkes\";\nimport \"components\/consumer_queue_default_impl_test_event_data_port_snk_default\/consumer_queue_default_impl_test_event_data_port_snk_default.camkes\";\nimport \"components\/consumer_queue_2_impl_test_event_data_port_snk_2_A\/consumer_queue_2_impl_test_event_data_port_snk_2_A.camkes\";\nimport \"components\/consumer_queue_2_impl_test_event_data_port_snk_2_B\/consumer_queue_2_impl_test_event_data_port_snk_2_B.camkes\";\nimport \"components\/consumer_queue_5_impl_test_event_data_port_snk_5\/consumer_queue_5_impl_test_event_data_port_snk_5.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component emitter_impl_test_event_data_port_src test_event_data_port_src;\n    component consumer_queue_default_impl_test_event_data_port_snk_default test_event_data_port_snk_default;\n    component consumer_queue_2_impl_test_event_data_port_snk_2_A test_event_data_port_snk_2_A;\n    component consumer_queue_2_impl_test_event_data_port_snk_2_B test_event_data_port_snk_2_B;\n    component consumer_queue_5_impl_test_event_data_port_snk_5 test_event_data_port_snk_5;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4Notification conn1(from test_event_data_port_src.sb_enq_1_notification, to test_event_data_port_snk_default.sb_deq_notification);\n    connection seL4SharedData conn2(from test_event_data_port_src.sb_enq_queue_1, to test_event_data_port_snk_default.sb_deq_queue);\n    connection seL4Notification conn3(from test_event_data_port_src.sb_enq_2_notification, to test_event_data_port_snk_2_A.sb_deq_notification, to test_event_data_port_snk_2_B.sb_deq_notification);\n    connection seL4SharedData conn4(from test_event_data_port_src.sb_enq_queue_2, to test_event_data_port_snk_2_A.sb_deq_queue, to test_event_data_port_snk_2_B.sb_deq_queue);\n    connection seL4Notification conn5(from test_event_data_port_src.sb_enq_5_notification, to test_event_data_port_snk_5.sb_deq_notification);\n    connection seL4SharedData conn6(from test_event_data_port_src.sb_enq_queue_5, to test_event_data_port_snk_5.sb_deq_queue);\n    connection seL4Notification conn7(from dispatch_periodic_inst.sb_test_event_data_port_src_periodic_dispatch_notification, to test_event_data_port_src.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn8(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn9(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    test_event_data_port_src.sb_enq_queue_1_access = \"W\";\n    test_event_data_port_snk_default.sb_deq_queue_access = \"R\";\n    test_event_data_port_src.sb_enq_queue_2_access = \"W\";\n    test_event_data_port_snk_2_A.sb_deq_queue_access = \"R\";\n    test_event_data_port_snk_2_B.sb_deq_queue_access = \"R\";\n    test_event_data_port_src.sb_enq_queue_5_access = \"W\";\n    test_event_data_port_snk_5.sb_deq_queue_access = \"R\";\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/emitter_impl_test_event_data_port_src\/src\/emitter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_emitter_impl.h>\n\nint8_t counter = 0;\n\nvoid test_event_data_port_emitter_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_data_port_emitter_component_init called\\n\", get_instance_name());\n}\n\nvoid run_emitter(const int64_t *in_arg) {\n  for(int8_t i = 1; i <= counter; i++) {\n    sb_enq_enqueue(&i);\n  }\n  printf(\"---------------------------------------\\n\");\n  printf(\"[%s] Sent %i events.\\n\", get_instance_name(), counter);\n\n  counter = (counter + 1) % 7; \/\/ send b\/w 0 to 6 events per dispatch\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_default_impl_test_event_data_port_snk_default\/src\/consumer_queue_default.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_consumer_queue_default_impl.h>\n\nvoid test_event_data_port_consumer_component_init(const int64_t *in_arg)\n{\n    printf(\"[%s] test_event_data_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg)\n{\n    int32_t received = 1; \/\/ 1 for the event the glue code dequeued\n    int8_t value;\n\n    printf(\"[%s] received value {%d}\\n\", get_instance_name(), *in_arg);\n\n    \/\/ keep dequeuing until no more things can be had\n    while(sb_deq_dequeue(&value)) {\n      printf(\"[%s] received value {%d}\\n\", get_instance_name(), value);\n      received++;\n    }\n\n    printf(\"[%s] %i events received\\n\", get_instance_name(), received);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_2_impl_test_event_data_port_snk_2_A\/src\/consumer_queue_2.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_consumer_queue_2_impl.h>\n\nvoid test_event_data_port_consumer_component_init(const int64_t *in_arg)\n{\n    printf(\"[%s] test_event_data_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg)\n{\n    int32_t received = 1; \/\/ 1 for the event the glue code dequeued\n    int8_t value;\n\n    printf(\"[%s] received value {%d}\\n\", get_instance_name(), *in_arg);\n\n    \/\/ keep dequeuing until no more things can be had\n    while(sb_deq_dequeue(&value)) {\n      printf(\"[%s] received value {%d}\\n\", get_instance_name(), value);\n      received++;\n    }\n\n    printf(\"[%s] %i events received\\n\", get_instance_name(), received);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_2_impl_test_event_data_port_snk_2_B\/src\/consumer_queue_2.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_consumer_queue_2_impl.h>\n\nvoid test_event_data_port_consumer_component_init(const int64_t *in_arg)\n{\n    printf(\"[%s] test_event_data_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg)\n{\n    int32_t received = 1; \/\/ 1 for the event the glue code dequeued\n    int8_t value;\n\n    printf(\"[%s] received value {%d}\\n\", get_instance_name(), *in_arg);\n\n    \/\/ keep dequeuing until no more things can be had\n    while(sb_deq_dequeue(&value)) {\n      printf(\"[%s] received value {%d}\\n\", get_instance_name(), value);\n      received++;\n    }\n\n    printf(\"[%s] %i events received\\n\", get_instance_name(), received);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_5_impl_test_event_data_port_snk_5\/src\/consumer_queue_5.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_consumer_queue_5_impl.h>\n\nvoid test_event_data_port_consumer_component_init(const int64_t *in_arg)\n{\n    printf(\"[%s] test_event_data_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t * in_arg)\n{\n    int32_t received = 1; \/\/ 1 for the event the glue code dequeued\n    int8_t value;\n\n    printf(\"[%s] received value {%d}\\n\", get_instance_name(), *in_arg);\n\n    \/\/ keep dequeuing until no more things can be had\n    while(sb_deq_dequeue(&value)) {\n      printf(\"[%s] received value {%d}\\n\", get_instance_name(), value);\n      received++;\n    }\n\n    printf(\"[%s] %i events received\\n\", get_instance_name(), received);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nincludeGlobalComponents()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(emitter_impl_test_event_data_port_src\n  SOURCES components\/emitter_impl_test_event_data_port_src\/\/src\/emitter.c components\/emitter_impl_test_event_data_port_src\/src\/sb_emitter_impl.c types\/src\/sb_queue_int8_t_1.c types\/src\/sb_queue_int8_t_2.c types\/src\/sb_queue_int8_t_5.c\n  INCLUDES components\/emitter_impl_test_event_data_port_src\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_queue_default_impl_test_event_data_port_snk_default\n  SOURCES components\/consumer_queue_default_impl_test_event_data_port_snk_default\/\/src\/consumer_queue_default.c components\/consumer_queue_default_impl_test_event_data_port_snk_default\/src\/sb_consumer_queue_default_impl.c types\/src\/sb_queue_int8_t_1.c\n  INCLUDES components\/consumer_queue_default_impl_test_event_data_port_snk_default\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_queue_2_impl_test_event_data_port_snk_2_A\n  SOURCES components\/consumer_queue_2_impl_test_event_data_port_snk_2_A\/\/src\/consumer_queue_2.c components\/consumer_queue_2_impl_test_event_data_port_snk_2_A\/src\/sb_consumer_queue_2_impl.c types\/src\/sb_queue_int8_t_2.c\n  INCLUDES components\/consumer_queue_2_impl_test_event_data_port_snk_2_A\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_queue_2_impl_test_event_data_port_snk_2_B\n  SOURCES components\/consumer_queue_2_impl_test_event_data_port_snk_2_B\/\/src\/consumer_queue_2.c components\/consumer_queue_2_impl_test_event_data_port_snk_2_B\/src\/sb_consumer_queue_2_impl.c types\/src\/sb_queue_int8_t_2.c\n  INCLUDES components\/consumer_queue_2_impl_test_event_data_port_snk_2_B\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_queue_5_impl_test_event_data_port_snk_5\n  SOURCES components\/consumer_queue_5_impl_test_event_data_port_snk_5\/\/src\/consumer_queue_5.c components\/consumer_queue_5_impl_test_event_data_port_snk_5\/src\/sb_consumer_queue_5_impl.c types\/src\/sb_queue_int8_t_5.c\n  INCLUDES components\/consumer_queue_5_impl_test_event_data_port_snk_5\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  LIBS SB_Type_Library\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/bin\/run-camkes.sh",
        {
          "type" : "ITestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:sh\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate,help\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"-c, --camkes-dir       Location of CAmkES project\"\n  echo \"-n, --non-interactive  Non-interactive mode.  Symlink in apps directory will be replaced\"\n  echo \"                         if present, CAmkES build directory will not be deleted\"\n  echo \"-o, --camkes-options   CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"-s, --simulate         Simulate via QEMU\"\n  echo \"-h, --help             Display this information\"\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\n    exit 2\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    -h|--help) usage; exit 0 ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\n  exit 3\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    # if the project contains VMs and USE_PRECONFIGURED_ROOTFS=OFF then\n    # deleting the build directory would force the linux image to be\n    # re-downloaded, which can take a long time\n    echo \"Non-interactive mode so not deleting existing ${BUILD_DIR}\"\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\ncat >${BUILD_DIR}\/sim << EOL\n#!\/usr\/bin\/env bash\n\nexport SCRIPT_HOME=\\$( cd \"\\$( dirname \"\\$0\" )\" &> \/dev\/null && pwd )\ncd \\${SCRIPT_HOME}\n\n# console output from simulation disappears when QEMU shuts down when run from\n# the CAmkES generated .\/simulate script. Instead call QEMU directly using the\n# default values .\/simulate would pass\n\nqemu-system-x86_64 \\\\\n    -cpu Nehalem,-vme,+pdpe1gb,-xsave,-xsaveopt,-xsavec,-fsgsbase,-invpcid,enforce \\\\\n    -nographic \\\\\n    -serial mon:stdio \\\\\n    -m size=512M \\\\\n    -kernel images\/kernel-x86_64-pc99 \\\\\n    -initrd images\/capdl-loader-image-x86_64-pc99\nEOL\n\nchmod 700 ${BUILD_DIR}\/sim\necho \"Wrote: ${BUILD_DIR}\/sim\"\n\nif [ \"${SIMULATE}\" = true ]; then\n  # ${BUILD_DIR}\/simulate\n  ${BUILD_DIR}\/sim\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/emitter_impl_test_event_data_port_src\/src\/sb_emitter_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_emitter_impl.h>\n#include <sb_queue_int8_t_1.h>\n#include <sb_queue_int8_t_2.h>\n#include <sb_queue_int8_t_5.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nvoid sb_entrypoint_emitter_impl_periodic_dispatcher(const int64_t * in_arg) {\n  run_emitter((int64_t *) in_arg);\n}\n\nbool sb_enq_enqueue(const int8_t *data) {\n  sb_queue_int8_t_1_enqueue(sb_enq_queue_1, (int8_t*) data);\n  sb_enq_1_notification_emit();\n\n  sb_queue_int8_t_2_enqueue(sb_enq_queue_2, (int8_t*) data);\n  sb_enq_2_notification_emit();\n\n  sb_queue_int8_t_5_enqueue(sb_enq_queue_5, (int8_t*) data);\n  sb_enq_5_notification_emit();\n\n  return true;\n}\n\n\/************************************************************************\n *  sb_entrypoint_emitter_impl_test_event_data_port_src_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_impl_test_event_data_port_src_initializer(const int64_t * in_arg) {\n  test_event_data_port_emitter_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise data structure for outgoing event data port enq\n  sb_queue_int8_t_1_init(sb_enq_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port enq\n  sb_queue_int8_t_2_init(sb_enq_queue_2);\n\n  \/\/ initialise data structure for outgoing event data port enq\n  sb_queue_int8_t_5_init(sb_enq_queue_5);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_impl_test_event_data_port_src_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_emitter_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/emitter_impl_test_event_data_port_src\/includes\/sb_emitter_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_EMITTER_IMPL_H\n#define SB_EMITTER_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_enq_enqueue(const int8_t *);\n\nvoid run_emitter(const int64_t *);\n\nvoid test_event_data_port_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ SB_EMITTER_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_default_impl_test_event_data_port_snk_default\/src\/sb_consumer_queue_default_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_consumer_queue_default_impl.h>\n#include <sb_queue_int8_t_1.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_int8_t_1_Recv_t sb_deq_recv_queue;\n\n\/************************************************************************\n * sb_deq_dequeue_poll:\n ************************************************************************\/\nbool sb_deq_dequeue_poll(sb_event_counter_t *numDropped, int8_t *data) {\n  return sb_queue_int8_t_1_dequeue(&sb_deq_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_deq_dequeue:\n ************************************************************************\/\nbool sb_deq_dequeue(int8_t *data) {\n  sb_event_counter_t numDropped;\n  return sb_deq_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_deq_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_deq_is_empty(){\n  return sb_queue_int8_t_1_is_empty(&sb_deq_recv_queue);\n}\n\n\/************************************************************************\n * sb_deq_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_deq\n *\n ************************************************************************\/\nstatic void sb_deq_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_consumer_queue_default_impl_deq:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_default_impl_deq(const int8_t * in_arg) {\n  test_event_data_port_consumer_s_event_handler((int8_t *) in_arg);\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_default_impl_test_event_data_port_snk_default_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_default_impl_test_event_data_port_snk_default_initializer(const int64_t * in_arg) {\n  test_event_data_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise data structure for incoming event data port deq\n  sb_queue_int8_t_1_Recv_init(&sb_deq_recv_queue, sb_deq_queue);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventDataPort port deq\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_default_impl_test_event_data_port_snk_default_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    {\n      int8_t sb_deq;\n      while (sb_deq_dequeue((int8_t *) &sb_deq)) {\n        sb_entrypoint_consumer_queue_default_impl_deq(&sb_deq);\n      }\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_default_impl_test_event_data_port_snk_default\/includes\/sb_consumer_queue_default_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CONSUMER_QUEUE_DEFAULT_IMPL_H\n#define SB_CONSUMER_QUEUE_DEFAULT_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_deq_dequeue(int8_t *);\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t *);\n\nvoid test_event_data_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_QUEUE_DEFAULT_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_2_impl_test_event_data_port_snk_2_A\/src\/sb_consumer_queue_2_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_consumer_queue_2_impl.h>\n#include <sb_queue_int8_t_2.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_int8_t_2_Recv_t sb_deq_recv_queue;\n\n\/************************************************************************\n * sb_deq_dequeue_poll:\n ************************************************************************\/\nbool sb_deq_dequeue_poll(sb_event_counter_t *numDropped, int8_t *data) {\n  return sb_queue_int8_t_2_dequeue(&sb_deq_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_deq_dequeue:\n ************************************************************************\/\nbool sb_deq_dequeue(int8_t *data) {\n  sb_event_counter_t numDropped;\n  return sb_deq_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_deq_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_deq_is_empty(){\n  return sb_queue_int8_t_2_is_empty(&sb_deq_recv_queue);\n}\n\n\/************************************************************************\n * sb_deq_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_deq\n *\n ************************************************************************\/\nstatic void sb_deq_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_consumer_queue_2_impl_deq:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_deq(const int8_t * in_arg) {\n  test_event_data_port_consumer_s_event_handler((int8_t *) in_arg);\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_2_impl_test_event_data_port_snk_2_A_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_test_event_data_port_snk_2_A_initializer(const int64_t * in_arg) {\n  test_event_data_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise data structure for incoming event data port deq\n  sb_queue_int8_t_2_Recv_init(&sb_deq_recv_queue, sb_deq_queue);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventDataPort port deq\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_2_impl_test_event_data_port_snk_2_A_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    {\n      int8_t sb_deq;\n      while (sb_deq_dequeue((int8_t *) &sb_deq)) {\n        sb_entrypoint_consumer_queue_2_impl_deq(&sb_deq);\n      }\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_2_impl_test_event_data_port_snk_2_A\/includes\/sb_consumer_queue_2_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CONSUMER_QUEUE_2_IMPL_H\n#define SB_CONSUMER_QUEUE_2_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_deq_dequeue(int8_t *);\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t *);\n\nvoid test_event_data_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_QUEUE_2_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_2_impl_test_event_data_port_snk_2_B\/src\/sb_consumer_queue_2_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_consumer_queue_2_impl.h>\n#include <sb_queue_int8_t_2.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_int8_t_2_Recv_t sb_deq_recv_queue;\n\n\/************************************************************************\n * sb_deq_dequeue_poll:\n ************************************************************************\/\nbool sb_deq_dequeue_poll(sb_event_counter_t *numDropped, int8_t *data) {\n  return sb_queue_int8_t_2_dequeue(&sb_deq_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_deq_dequeue:\n ************************************************************************\/\nbool sb_deq_dequeue(int8_t *data) {\n  sb_event_counter_t numDropped;\n  return sb_deq_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_deq_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_deq_is_empty(){\n  return sb_queue_int8_t_2_is_empty(&sb_deq_recv_queue);\n}\n\n\/************************************************************************\n * sb_deq_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_deq\n *\n ************************************************************************\/\nstatic void sb_deq_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_consumer_queue_2_impl_deq:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_deq(const int8_t * in_arg) {\n  test_event_data_port_consumer_s_event_handler((int8_t *) in_arg);\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_2_impl_test_event_data_port_snk_2_B_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_test_event_data_port_snk_2_B_initializer(const int64_t * in_arg) {\n  test_event_data_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise data structure for incoming event data port deq\n  sb_queue_int8_t_2_Recv_init(&sb_deq_recv_queue, sb_deq_queue);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventDataPort port deq\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_2_impl_test_event_data_port_snk_2_B_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    {\n      int8_t sb_deq;\n      while (sb_deq_dequeue((int8_t *) &sb_deq)) {\n        sb_entrypoint_consumer_queue_2_impl_deq(&sb_deq);\n      }\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_2_impl_test_event_data_port_snk_2_B\/includes\/sb_consumer_queue_2_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CONSUMER_QUEUE_2_IMPL_H\n#define SB_CONSUMER_QUEUE_2_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_deq_dequeue(int8_t *);\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t *);\n\nvoid test_event_data_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_QUEUE_2_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_5_impl_test_event_data_port_snk_5\/src\/sb_consumer_queue_5_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_consumer_queue_5_impl.h>\n#include <sb_queue_int8_t_5.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_int8_t_5_Recv_t sb_deq_recv_queue;\n\n\/************************************************************************\n * sb_deq_dequeue_poll:\n ************************************************************************\/\nbool sb_deq_dequeue_poll(sb_event_counter_t *numDropped, int8_t *data) {\n  return sb_queue_int8_t_5_dequeue(&sb_deq_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_deq_dequeue:\n ************************************************************************\/\nbool sb_deq_dequeue(int8_t *data) {\n  sb_event_counter_t numDropped;\n  return sb_deq_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_deq_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_deq_is_empty(){\n  return sb_queue_int8_t_5_is_empty(&sb_deq_recv_queue);\n}\n\n\/************************************************************************\n * sb_deq_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * sb_deq\n *\n ************************************************************************\/\nstatic void sb_deq_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_consumer_queue_5_impl_deq:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_5_impl_deq(const int8_t * in_arg) {\n  test_event_data_port_consumer_s_event_handler((int8_t *) in_arg);\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_5_impl_test_event_data_port_snk_5_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_5_impl_test_event_data_port_snk_5_initializer(const int64_t * in_arg) {\n  test_event_data_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise data structure for incoming event data port deq\n  sb_queue_int8_t_5_Recv_init(&sb_deq_recv_queue, sb_deq_queue);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventDataPort port deq\n  CALLBACKOP(sb_deq_notification_reg_callback(sb_deq_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_5_impl_test_event_data_port_snk_5_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    {\n      int8_t sb_deq;\n      while (sb_deq_dequeue((int8_t *) &sb_deq)) {\n        sb_entrypoint_consumer_queue_5_impl_deq(&sb_deq);\n      }\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/consumer_queue_5_impl_test_event_data_port_snk_5\/includes\/sb_consumer_queue_5_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CONSUMER_QUEUE_5_IMPL_H\n#define SB_CONSUMER_QUEUE_5_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_deq_dequeue(int8_t *);\n\nvoid test_event_data_port_consumer_s_event_handler(const int8_t *);\n\nvoid test_event_data_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_QUEUE_5_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c",
        {
          "type" : "ITestResource",
          "content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (2000 \/ aadl_tick_interval)) == 0) {\n    sb_test_event_data_port_src_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/includes\/sb_queue_int8_t_1.h",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_INT8_T_1_SIZE-1 elements.\n#define SB_QUEUE_INT8_T_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_int8_t_1 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type int8_t \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  int8_t elt[SB_QUEUE_INT8_T_1_SIZE];\n\n} sb_queue_int8_t_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_int8_t_1_init(sb_queue_int8_t_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_int8_t_1_enqueue(\n  sb_queue_int8_t_1_t *queue, \n  int8_t *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_int8_t_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_int8_t_1_t *queue;\n\n} sb_queue_int8_t_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_int8_t_1_Recv_init(\n  sb_queue_int8_t_1_Recv_t *recvQueue, \n  sb_queue_int8_t_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_int8_t_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_int8_t_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_int8_t_1_dequeue(\n  sb_queue_int8_t_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  int8_t *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_int8_t_1_is_empty(sb_queue_int8_t_1_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/src\/sb_queue_int8_t_1.c",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_int8_t_1.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_int8_t_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_1_init(sb_queue_int8_t_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_int8_t_1_enqueue(\n  sb_queue_int8_t_1_t *queue, \n  int8_t *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_INT8_T_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_INT8_T_1_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_int8_t_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_1_Recv_init(\n  sb_queue_int8_t_1_Recv_t *recvQueue, \n  sb_queue_int8_t_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_int8_t_1_dequeue(\n  sb_queue_int8_t_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  int8_t *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_int8_t_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_INT8_T_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_INT8_T_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_INT8_T_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_INT8_T_1_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_INT8_T_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_int8_t_1_is_empty(sb_queue_int8_t_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/includes\/sb_queue_int8_t_2.h",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_INT8_T_2_SIZE-1 elements.\n#define SB_QUEUE_INT8_T_2_SIZE 3\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_int8_t_2 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type int8_t \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  int8_t elt[SB_QUEUE_INT8_T_2_SIZE];\n\n} sb_queue_int8_t_2_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_int8_t_2_init(sb_queue_int8_t_2_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_int8_t_2_enqueue(\n  sb_queue_int8_t_2_t *queue, \n  int8_t *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_int8_t_2_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_int8_t_2_t *queue;\n\n} sb_queue_int8_t_2_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_int8_t_2_Recv_init(\n  sb_queue_int8_t_2_Recv_t *recvQueue, \n  sb_queue_int8_t_2_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_int8_t_2_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_int8_t_2_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_int8_t_2_dequeue(\n  sb_queue_int8_t_2_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  int8_t *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_int8_t_2_is_empty(sb_queue_int8_t_2_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/src\/sb_queue_int8_t_2.c",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_int8_t_2.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_int8_t_2.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_2_init(sb_queue_int8_t_2_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_int8_t_2_enqueue(\n  sb_queue_int8_t_2_t *queue, \n  int8_t *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_INT8_T_2_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_INT8_T_2_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_int8_t_2.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_2_Recv_init(\n  sb_queue_int8_t_2_Recv_t *recvQueue, \n  sb_queue_int8_t_2_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_int8_t_2_dequeue(\n  sb_queue_int8_t_2_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  int8_t *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_int8_t_2_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_INT8_T_2_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_INT8_T_2_SIZE - 1) ? 0 : numNew - SB_QUEUE_INT8_T_2_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_INT8_T_2_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_INT8_T_2_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_int8_t_2_is_empty(sb_queue_int8_t_2_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/includes\/sb_queue_int8_t_5.h",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_INT8_T_5_SIZE-1 elements.\n#define SB_QUEUE_INT8_T_5_SIZE 6\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_int8_t_5 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type int8_t \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  int8_t elt[SB_QUEUE_INT8_T_5_SIZE];\n\n} sb_queue_int8_t_5_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_int8_t_5_init(sb_queue_int8_t_5_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_int8_t_5_enqueue(\n  sb_queue_int8_t_5_t *queue, \n  int8_t *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_int8_t_5_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_int8_t_5_t *queue;\n\n} sb_queue_int8_t_5_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_int8_t_5_Recv_init(\n  sb_queue_int8_t_5_Recv_t *recvQueue, \n  sb_queue_int8_t_5_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_int8_t_5_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_int8_t_5_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_int8_t_5_dequeue(\n  sb_queue_int8_t_5_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  int8_t *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_int8_t_5_is_empty(sb_queue_int8_t_5_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/src\/sb_queue_int8_t_5.c",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_int8_t_5.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_int8_t_5.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_5_init(sb_queue_int8_t_5_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_int8_t_5_enqueue(\n  sb_queue_int8_t_5_t *queue, \n  int8_t *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_INT8_T_5_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_INT8_T_5_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_int8_t_5.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_5_Recv_init(\n  sb_queue_int8_t_5_Recv_t *recvQueue, \n  sb_queue_int8_t_5_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_int8_t_5_dequeue(\n  sb_queue_int8_t_5_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  int8_t *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_int8_t_5_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_INT8_T_5_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_INT8_T_5_SIZE - 1) ? 0 : numNew - SB_QUEUE_INT8_T_5_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_INT8_T_5_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_INT8_T_5_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_int8_t_5_is_empty(sb_queue_int8_t_5_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/includes\/sb_types.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/includes\/sb_event_counter.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t;\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/settings.cmake",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/types\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            src\/sb_queue_int8_t_1.c\n            src\/sb_queue_int8_t_2.c\n            src\/sb_queue_int8_t_5.c)\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           PUBLIC includes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "test_event_data_port_fan_out--SeL4_Only\/proof\/smt2_case.smt2",
        {
          "type" : "ITestResource",
          "content" : "(set-logic ALL)\n\n(declare-datatypes ((Mode 0)) ((\n  (SeL4)\n  (SeL4_Only)\n  (SeL4_TB))))\n\n(declare-datatypes ((ComponentType 0)) ((\n  (AadlComponent)\n  (AadlVMComponent)\n  (PacerComponent)\n  (PeriodicDispatcher))))\n\n(declare-datatypes ((DispatchProtocol 0)) ((\n  (Periodic)\n  (Sporadic)\n  (UNSPECIFIED_DISPATCH_PROTOCOL))))\n\n(declare-datatypes ((SchedulingType 0)) ((\n  (Pacing)\n  (SelfPacing)\n  (PeriodicDispatching)\n  (UNSPECIFIED_SCHEDULING_TYPE))))\n\n(declare-datatypes ((Direction 0)) ((\n  (In)\n  (Out))))\n\n(declare-datatypes ((PortType 0)) ((\n  (AadlDataPort)\n  (AadlEventPort)\n  (AadlEventDataPort))))\n\n\n(declare-const CodegenMode Mode)\n(assert (= CodegenMode SeL4_Only))\n\n(declare-const ModelSchedulingType SchedulingType)\n(assert (= ModelSchedulingType PeriodicDispatching))\n\n(declare-datatypes ((AADLComponent 0)) ((\n  (top_impl_Instance_test_event_data_port_src); Instance of test_event_data_port_fan_out::emitter.impl declared at \/test_event_data_port_fan_out\/test_event_data_port_fan_out.aadl (75, 4)\n  (top_impl_Instance_test_event_data_port_snk_default); Instance of test_event_data_port_fan_out::consumer_queue_default.impl declared at \/test_event_data_port_fan_out\/test_event_data_port_fan_out.aadl (76, 4)\n  (top_impl_Instance_test_event_data_port_snk_2_A); Instance of test_event_data_port_fan_out::consumer_queue_2.impl declared at \/test_event_data_port_fan_out\/test_event_data_port_fan_out.aadl (77, 4)\n  (top_impl_Instance_test_event_data_port_snk_2_B); Instance of test_event_data_port_fan_out::consumer_queue_2.impl declared at \/test_event_data_port_fan_out\/test_event_data_port_fan_out.aadl (78, 4)\n  (top_impl_Instance_test_event_data_port_snk_5); Instance of test_event_data_port_fan_out::consumer_queue_5.impl declared at \/test_event_data_port_fan_out\/test_event_data_port_fan_out.aadl (79, 4)\n)))\n(declare-const AADLComponent_count Int)\n(assert (= 5 AADLComponent_count))\n\n(declare-const AADLDispatchProtocol (Array AADLComponent DispatchProtocol))\n  (assert (= Periodic (select AADLDispatchProtocol top_impl_Instance_test_event_data_port_src)))\n  (assert (= Sporadic (select AADLDispatchProtocol top_impl_Instance_test_event_data_port_snk_default)))\n  (assert (= Sporadic (select AADLDispatchProtocol top_impl_Instance_test_event_data_port_snk_2_A)))\n  (assert (= Sporadic (select AADLDispatchProtocol top_impl_Instance_test_event_data_port_snk_2_B)))\n  (assert (= Sporadic (select AADLDispatchProtocol top_impl_Instance_test_event_data_port_snk_5)))\n(declare-const AADLDispatchProtocol_size Int)\n(assert (= 5 AADLDispatchProtocol_size))\n\n(define-fun altAADLDispatchProtocol ((_comp AADLComponent)) DispatchProtocol\n  (ite (= _comp top_impl_Instance_test_event_data_port_src) Periodic\n  (ite (= _comp top_impl_Instance_test_event_data_port_snk_default) Sporadic\n  (ite (= _comp top_impl_Instance_test_event_data_port_snk_2_A) Sporadic\n  (ite (= _comp top_impl_Instance_test_event_data_port_snk_2_B) Sporadic\n  (ite (= _comp top_impl_Instance_test_event_data_port_snk_5) Sporadic\n  UNSPECIFIED_DISPATCH_PROTOCOL))))))\n(declare-const AADLDispatchProtocol_count Int)\n(assert (= 5 AADLDispatchProtocol_count))\n\n(declare-datatypes ((AADLPort 0)) ((\n  (top_impl_Instance_test_event_data_port_src_enq)\n  (top_impl_Instance_test_event_data_port_snk_default_deq)\n  (top_impl_Instance_test_event_data_port_snk_2_A_deq)\n  (top_impl_Instance_test_event_data_port_snk_2_B_deq)\n  (top_impl_Instance_test_event_data_port_snk_5_deq))))\n(declare-const AADLPort_count Int)\n(assert (= 5 AADLPort_count))\n\n(declare-const AADLPortComponent (Array AADLPort AADLComponent))\n  (assert (= top_impl_Instance_test_event_data_port_src (select AADLPortComponent top_impl_Instance_test_event_data_port_src_enq)))\n  (assert (= top_impl_Instance_test_event_data_port_snk_default (select AADLPortComponent top_impl_Instance_test_event_data_port_snk_default_deq)))\n  (assert (= top_impl_Instance_test_event_data_port_snk_2_A (select AADLPortComponent top_impl_Instance_test_event_data_port_snk_2_A_deq)))\n  (assert (= top_impl_Instance_test_event_data_port_snk_2_B (select AADLPortComponent top_impl_Instance_test_event_data_port_snk_2_B_deq)))\n  (assert (= top_impl_Instance_test_event_data_port_snk_5 (select AADLPortComponent top_impl_Instance_test_event_data_port_snk_5_deq)))\n(declare-const AADLPortComponent_size Int)\n(assert (= 5 AADLPortComponent_size))\n\n(declare-const AADLPortType (Array AADLPort PortType))\n  (assert (= AadlEventDataPort (select AADLPortType top_impl_Instance_test_event_data_port_src_enq)))\n  (assert (= AadlEventDataPort (select AADLPortType top_impl_Instance_test_event_data_port_snk_default_deq)))\n  (assert (= AadlEventDataPort (select AADLPortType top_impl_Instance_test_event_data_port_snk_2_A_deq)))\n  (assert (= AadlEventDataPort (select AADLPortType top_impl_Instance_test_event_data_port_snk_2_B_deq)))\n  (assert (= AadlEventDataPort (select AADLPortType top_impl_Instance_test_event_data_port_snk_5_deq)))\n(declare-const AADLPortType_size Int)\n(assert (= 5 AADLPortType_size))\n\n(declare-const AADLPortDirection (Array AADLPort Direction))\n  (assert (= Out (select AADLPortDirection top_impl_Instance_test_event_data_port_src_enq)))\n  (assert (= In (select AADLPortDirection top_impl_Instance_test_event_data_port_snk_default_deq)))\n  (assert (= In (select AADLPortDirection top_impl_Instance_test_event_data_port_snk_2_A_deq)))\n  (assert (= In (select AADLPortDirection top_impl_Instance_test_event_data_port_snk_2_B_deq)))\n  (assert (= In (select AADLPortDirection top_impl_Instance_test_event_data_port_snk_5_deq)))\n(declare-const AADLPortDirection_size Int)\n(assert (= 5 AADLPortDirection_size))\n\n(define-fun AADLConnectionFlowTos ((p1 AADLPort) (p2 AADLPort)) Bool\n  (or\n    (and (= p1 top_impl_Instance_test_event_data_port_src_enq) (= p2 top_impl_Instance_test_event_data_port_snk_default_deq))\n    (and (= p1 top_impl_Instance_test_event_data_port_src_enq) (= p2 top_impl_Instance_test_event_data_port_snk_2_A_deq))\n    (and (= p1 top_impl_Instance_test_event_data_port_src_enq) (= p2 top_impl_Instance_test_event_data_port_snk_2_B_deq))\n    (and (= p1 top_impl_Instance_test_event_data_port_src_enq) (= p2 top_impl_Instance_test_event_data_port_snk_5_deq))\n    false))\n(declare-const AADLConnectionFlowsTos_count Int)\n(assert (= 4 AADLConnectionFlowsTos_count))\n\n\n(declare-datatypes ((AccessType 0)) ((\n  (R)\n  (W)\n  (RW))))\n\n(declare-datatypes ((seL4PortType 0)) ((\n  (seL4GlobalAsynch)\n  (seL4GlobalAsynchCallback)\n  (seL4Notification)\n  (seL4RPCCall)\n  (seL4SharedData)\n  (seL4SharedDataWithCaps)\n  (seL4TimeServer)\n  (seL4VMDTBPassthrough)\n  (CASE_AADL_EventDataport))))\n\n(declare-datatypes ((CAmkESComponent 0)) ((\n  (test_event_data_port_src)\n  (test_event_data_port_snk_default)\n  (test_event_data_port_snk_2_A)\n  (test_event_data_port_snk_2_B)\n  (test_event_data_port_snk_5)\n  (dispatch_periodic_inst)\n  (time_server))))\n(declare-const CAmkESComponent_count Int)\n(assert (= 7 CAmkESComponent_count))\n\n(define-fun isPeriodicDispatcher ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or (= _component dispatch_periodic_inst)\n           false)))\n\n(define-fun isPacer ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or \n           false)))\n\n(define-fun isTimeServer ((_component CAmkESComponent)) Bool\n  (and ; TODO - list scenarios where a time server is expected\n       (or (= _component time_server)\n           false)))\n\n(define-fun isMonitor ((_component CAmkESComponent)) Bool\n  (or \n      false))\n(declare-const Monitor_count Int)\n(assert (= 0 Monitor_count))\n\n(declare-datatypes ((CAmkESPort 0)) ((\n  (test_event_data_port_src_sb_enq_queue_1)\n  (test_event_data_port_src_sb_enq_queue_2)\n  (test_event_data_port_src_sb_enq_queue_5)\n  (test_event_data_port_src_sb_enq_1_notification)\n  (test_event_data_port_src_sb_enq_2_notification)\n  (test_event_data_port_src_sb_enq_5_notification)\n  (test_event_data_port_src_sb_periodic_dispatch_notification)\n  (test_event_data_port_snk_default_sb_deq_queue)\n  (test_event_data_port_snk_default_sb_deq_notification)\n  (test_event_data_port_snk_2_A_sb_deq_queue)\n  (test_event_data_port_snk_2_A_sb_deq_notification)\n  (test_event_data_port_snk_2_B_sb_deq_queue)\n  (test_event_data_port_snk_2_B_sb_deq_notification)\n  (test_event_data_port_snk_5_sb_deq_queue)\n  (test_event_data_port_snk_5_sb_deq_notification)\n  (dispatch_periodic_inst_sb_test_event_data_port_src_periodic_dispatch_notification)\n  (dispatch_periodic_inst_timer)\n  (dispatch_periodic_inst_timer_complete)\n  (time_server_timer_notification)\n  (time_server_the_timer))))\n(declare-const CAmkESPort_count Int)\n(assert (= 20 CAmkESPort_count))\n\n(declare-const CAmkESAccessRestrictions (Array CAmkESPort AccessType))\n  (assert (= W (select CAmkESAccessRestrictions test_event_data_port_src_sb_enq_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions test_event_data_port_snk_default_sb_deq_queue)))\n  (assert (= W (select CAmkESAccessRestrictions test_event_data_port_src_sb_enq_queue_2)))\n  (assert (= R (select CAmkESAccessRestrictions test_event_data_port_snk_2_A_sb_deq_queue)))\n  (assert (= R (select CAmkESAccessRestrictions test_event_data_port_snk_2_B_sb_deq_queue)))\n  (assert (= W (select CAmkESAccessRestrictions test_event_data_port_src_sb_enq_queue_5)))\n  (assert (= R (select CAmkESAccessRestrictions test_event_data_port_snk_5_sb_deq_queue)))\n(declare-const CAmkESAccessRestrictions_size Int)\n(assert (= 7 CAmkESAccessRestrictions_size))\n\n(declare-datatypes ((CAmkESConnection 0)) ((\n  (conn1)\n  (conn2)\n  (conn3)\n  (conn4)\n  (conn5)\n  (conn6)\n  (conn7)\n  (conn8)\n  (conn9))))\n(declare-const CAmkESConnection_count Int)\n(assert (= 9 CAmkESConnection_count))\n\n(define-fun isSelfPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType SelfPacing)\n       (or \n           false)))\n\n(define-fun isPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or \n           false)))\n\n(define-fun isPeriodicDispatchingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or (= _conn conn7)\n           (= _conn conn8)\n           (= _conn conn9)\n           false)))\n(declare-const PeriodicDispatchingConnection_count Int)\n(assert (= 3 PeriodicDispatchingConnection_count))\n\n(declare-const CAmkESConnectionType (Array CAmkESConnection seL4PortType))\n  (assert (= seL4Notification (select CAmkESConnectionType conn1)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn2)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn3)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn4)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn5)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn6)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn7)))\n  (assert (= seL4TimeServer (select CAmkESConnectionType conn8)))\n  (assert (= seL4GlobalAsynchCallback (select CAmkESConnectionType conn9)))\n(declare-const CAmkESConnectionType_count Int)\n(assert (= 9 CAmkESConnectionType_count))\n\n(declare-const CAmkESPortComponent (Array CAmkESPort CAmkESComponent))\n  (assert (= test_event_data_port_src (select CAmkESPortComponent test_event_data_port_src_sb_enq_queue_1)))\n  (assert (= test_event_data_port_src (select CAmkESPortComponent test_event_data_port_src_sb_enq_queue_2)))\n  (assert (= test_event_data_port_src (select CAmkESPortComponent test_event_data_port_src_sb_enq_queue_5)))\n  (assert (= test_event_data_port_src (select CAmkESPortComponent test_event_data_port_src_sb_enq_1_notification)))\n  (assert (= test_event_data_port_src (select CAmkESPortComponent test_event_data_port_src_sb_enq_2_notification)))\n  (assert (= test_event_data_port_src (select CAmkESPortComponent test_event_data_port_src_sb_enq_5_notification)))\n  (assert (= test_event_data_port_src (select CAmkESPortComponent test_event_data_port_src_sb_periodic_dispatch_notification)))\n  (assert (= test_event_data_port_snk_default (select CAmkESPortComponent test_event_data_port_snk_default_sb_deq_queue)))\n  (assert (= test_event_data_port_snk_default (select CAmkESPortComponent test_event_data_port_snk_default_sb_deq_notification)))\n  (assert (= test_event_data_port_snk_2_A (select CAmkESPortComponent test_event_data_port_snk_2_A_sb_deq_queue)))\n  (assert (= test_event_data_port_snk_2_A (select CAmkESPortComponent test_event_data_port_snk_2_A_sb_deq_notification)))\n  (assert (= test_event_data_port_snk_2_B (select CAmkESPortComponent test_event_data_port_snk_2_B_sb_deq_queue)))\n  (assert (= test_event_data_port_snk_2_B (select CAmkESPortComponent test_event_data_port_snk_2_B_sb_deq_notification)))\n  (assert (= test_event_data_port_snk_5 (select CAmkESPortComponent test_event_data_port_snk_5_sb_deq_queue)))\n  (assert (= test_event_data_port_snk_5 (select CAmkESPortComponent test_event_data_port_snk_5_sb_deq_notification)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_sb_test_event_data_port_src_periodic_dispatch_notification)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_timer)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_timer_complete)))\n  (assert (= time_server (select CAmkESPortComponent time_server_timer_notification)))\n  (assert (= time_server (select CAmkESPortComponent time_server_the_timer)))\n(declare-const CAmkESPortComponent_size Int)\n(assert (= 20 CAmkESPortComponent_size))\n\n(define-fun CAmkESConnectionFlowTos ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort)) Bool\n  (or\n    (and (= _conn conn1) (= _p1 test_event_data_port_src_sb_enq_1_notification) (= _p2 test_event_data_port_snk_default_sb_deq_notification))\n    (and (= _conn conn2) (= _p1 test_event_data_port_src_sb_enq_queue_1) (= _p2 test_event_data_port_snk_default_sb_deq_queue))\n    (and (= _conn conn3) (= _p1 test_event_data_port_src_sb_enq_2_notification) (= _p2 test_event_data_port_snk_2_A_sb_deq_notification))\n    (and (= _conn conn3) (= _p1 test_event_data_port_src_sb_enq_2_notification) (= _p2 test_event_data_port_snk_2_B_sb_deq_notification))\n    (and (= _conn conn4) (= _p1 test_event_data_port_src_sb_enq_queue_2) (= _p2 test_event_data_port_snk_2_A_sb_deq_queue))\n    (and (= _conn conn4) (= _p1 test_event_data_port_src_sb_enq_queue_2) (= _p2 test_event_data_port_snk_2_B_sb_deq_queue))\n    (and (= _conn conn5) (= _p1 test_event_data_port_src_sb_enq_5_notification) (= _p2 test_event_data_port_snk_5_sb_deq_notification))\n    (and (= _conn conn6) (= _p1 test_event_data_port_src_sb_enq_queue_5) (= _p2 test_event_data_port_snk_5_sb_deq_queue))\n    (and (= _conn conn7) (= _p1 dispatch_periodic_inst_sb_test_event_data_port_src_periodic_dispatch_notification) (= _p2 test_event_data_port_src_sb_periodic_dispatch_notification))\n    (and (= _conn conn8) (= _p1 dispatch_periodic_inst_timer) (= _p2 time_server_the_timer))\n    (and (= _conn conn9) (= _p1 time_server_timer_notification) (= _p2 dispatch_periodic_inst_timer_complete))\n    false))\n(declare-const CAmkESConnectionFlowTos_count Int)\n(assert (= 11 CAmkESConnectionFlowTos_count))\n\n(define-fun ComponentRefinement ((ac AADLComponent) (cc CAmkESComponent)) Bool\n  (or\n    (and (= ac top_impl_Instance_test_event_data_port_src) (= cc test_event_data_port_src))\n    (and (= ac top_impl_Instance_test_event_data_port_snk_default) (= cc test_event_data_port_snk_default))\n    (and (= ac top_impl_Instance_test_event_data_port_snk_2_A) (= cc test_event_data_port_snk_2_A))\n    (and (= ac top_impl_Instance_test_event_data_port_snk_2_B) (= cc test_event_data_port_snk_2_B))\n    (and (= ac top_impl_Instance_test_event_data_port_snk_5) (= cc test_event_data_port_snk_5))\n    false))\n(declare-const ComponentRefinement_count Int)\n(assert (= 5 ComponentRefinement_count))\n\n(define-fun PortRefinement ((ap AADLPort) (cp CAmkESPort)) Bool\n  (or\n    (and (= ap top_impl_Instance_test_event_data_port_src_enq) (= cp test_event_data_port_src_sb_enq_queue_1))\n    (and (= ap top_impl_Instance_test_event_data_port_src_enq) (= cp test_event_data_port_src_sb_enq_queue_2))\n    (and (= ap top_impl_Instance_test_event_data_port_src_enq) (= cp test_event_data_port_src_sb_enq_queue_5))\n    (and (= ap top_impl_Instance_test_event_data_port_src_enq) (= cp test_event_data_port_src_sb_enq_1_notification))\n    (and (= ap top_impl_Instance_test_event_data_port_src_enq) (= cp test_event_data_port_src_sb_enq_2_notification))\n    (and (= ap top_impl_Instance_test_event_data_port_src_enq) (= cp test_event_data_port_src_sb_enq_5_notification))\n    (and (= ap top_impl_Instance_test_event_data_port_snk_default_deq) (= cp test_event_data_port_snk_default_sb_deq_queue))\n    (and (= ap top_impl_Instance_test_event_data_port_snk_default_deq) (= cp test_event_data_port_snk_default_sb_deq_notification))\n    (and (= ap top_impl_Instance_test_event_data_port_snk_2_A_deq) (= cp test_event_data_port_snk_2_A_sb_deq_queue))\n    (and (= ap top_impl_Instance_test_event_data_port_snk_2_A_deq) (= cp test_event_data_port_snk_2_A_sb_deq_notification))\n    (and (= ap top_impl_Instance_test_event_data_port_snk_2_B_deq) (= cp test_event_data_port_snk_2_B_sb_deq_queue))\n    (and (= ap top_impl_Instance_test_event_data_port_snk_2_B_deq) (= cp test_event_data_port_snk_2_B_sb_deq_notification))\n    (and (= ap top_impl_Instance_test_event_data_port_snk_5_deq) (= cp test_event_data_port_snk_5_sb_deq_queue))\n    (and (= ap top_impl_Instance_test_event_data_port_snk_5_deq) (= cp test_event_data_port_snk_5_sb_deq_notification))\n    false))\n(declare-const PortRefinement_count Int)\n(assert (= 14 PortRefinement_count))\n\n\n(define-fun AADLFlowDirectionality () Bool\n  (forall ((p1 AADLPort) (p2 AADLPort))\n    (=> (AADLConnectionFlowTos p1 p2)\n        (and (= Out (select AADLPortDirection p1)) (= In (select AADLPortDirection p2))))))\n\n(define-fun AADLFlowNoSelfConnection () Bool\n  (forall ((p1 AADLPort) (p2 AADLPort))\n    (=> (AADLConnectionFlowTos p1 p2)\n        (not (= p1 p2)))))\n\n(define-fun AADLConnectedPortTypeMatch () Bool\n  (forall ((src AADLPort) (dst AADLPort))\n    (=> (AADLConnectionFlowTos src dst)\n        (or (and (= AadlDataPort (select AADLPortType src)) (= AadlDataPort (select AADLPortType dst)))\n            (and (= AadlEventPort (select AADLPortType src)) (= AadlEventPort (select AADLPortType dst)))\n            (and (= AadlEventDataPort (select AADLPortType src)) (= AadlEventDataPort (select AADLPortType dst)))\n             false))))\n(declare-const AADLConnectedPortTypeMatch_count Int)\n(assert (= 3 AADLConnectedPortTypeMatch_count))\n\n(define-fun AADLDispatchProtocolSpecified () Bool\n  (forall ((_comp AADLComponent))\n    (not (= UNSPECIFIED_DISPATCH_PROTOCOL (select AADLDispatchProtocol _comp)))))\n\n(define-fun altAADLDispatchProtocolSpecified () Bool\n  (forall ((_comp AADLComponent))\n    (not (= UNSPECIFIED_DISPATCH_PROTOCOL (altAADLDispatchProtocol _comp)))))\n\n(define-fun AADLWellFormedness () Bool\n  (and\n    (= AADLPort_count AADLPortComponent_size) ; all AADL ports belong to an AADL component\n    altAADLDispatchProtocolSpecified\n    AADLDispatchProtocolSpecified\n    AADLFlowDirectionality\n    AADLFlowNoSelfConnection\n    AADLConnectedPortTypeMatch))\n\n\n(define-fun CAmkESFlowNoSelfConnection () Bool\n  (forall ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _p1 _p2)\n        (not (= _p1 _p2)))))\n\n(define-fun CAmkESDataPortAccess () Bool\n  (forall ((_conn CAmkESConnection) (_src CAmkESPort) (_dst CAmkESPort))\n    (=> (and (CAmkESConnectionFlowTos _conn _src _dst) (= seL4SharedData (select CAmkESConnectionType _conn)))\n      (and (= W (select CAmkESAccessRestrictions _src))\n           (= R (select CAmkESAccessRestrictions _dst))))))\n\n(define-fun UniqueComponentRefinements () Bool\n  (forall ((aadlComponent1 AADLComponent) (camkesComponent CAmkESComponent))\n    (=> (ComponentRefinement aadlComponent1 camkesComponent)\n        (not (exists ((aadlComponent2 AADLComponent))\n               (and (not (= aadlComponent1 aadlComponent2))\n                    (ComponentRefinement aadlComponent2 camkesComponent)))))))\n\n(define-fun UniquePortRefinements () Bool\n  (forall ((aadlPort1 AADLPort) (camkesPort CAmkESPort))\n    (=> (PortRefinement aadlPort1 camkesPort)\n        (not (exists ((aadlPort2 AADLPort))\n               (and (not (= aadlPort1 aadlPort2))\n                    (PortRefinement aadlPort2 camkesPort)))))))\n\n(define-fun CAmkESWellFormedness () Bool\n  (and\n    (= CAmkESPort_count CAmkESPortComponent_size) ; all CAmkES ports belong to a CAmkES component\n    CAmkESDataPortAccess\n    CAmkESFlowNoSelfConnection))\n\n(define-fun SB_DataPortRefinement ((aadlSource AADLPort) (aadlDest AADLPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n      (and (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n           (= (select CAmkESConnectionType conn) seL4SharedData )\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest  camkesDest)\n           (ComponentRefinement (select AADLPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AADLPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_EventPortRefinement ((aadlSource AADLPort) (aadlDest AADLPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (and\n      (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (= (select CAmkESConnectionType conn) seL4Notification )\n      (PortRefinement aadlSource camkesSource)\n      (PortRefinement aadlDest camkesDest)\n      (ComponentRefinement (select AADLPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n      (ComponentRefinement (select AADLPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_Refinement ((aadlSource AADLPort) (aadlDest AADLPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (or\n         (and\n           (= AadlDataPort (select AADLPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)) ; payload\n         (and\n           (= AadlEventPort (select AADLPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; event counter\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         (and\n           (= AadlEventDataPort (select AADLPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; payload\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         false)))\n\n(define-fun TB_Refinement ((aadlSource AADLPort) (aadlDest AADLPort)) Bool\n  (and (= CodegenMode SeL4_TB)\n       false))\n\n(define-fun ConnectionPreservation () Bool\n  (forall ((aadlSource AADLPort) (aadlDest AADLPort))\n    (=> (AADLConnectionFlowTos aadlSource aadlDest)\n      (or (SB_Refinement aadlSource aadlDest)\n          (TB_Refinement aadlSource aadlDest)\n          false))))\n\n\n(define-fun isAADL_SB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (exists ((aadlSource AADLPort) (aadlDest AADLPort))\n         (and\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest camkesDest)\n           (ComponentRefinement (select AADLPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AADLPortComponent aadlDest) (select CAmkESPortComponent camkesDest))\n           (AADLConnectionFlowTos aadlSource aadlDest)))))\n\n(define-fun isAADL_TB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (= CodegenMode SeL4_TB)\n       false)\n)\n\n(define-fun isCAmkESSchedulingConnection ((_conn CAmkESConnection)) Bool\n  (or\n    (isSelfPacingConnection _conn)\n    (isPacingConnection _conn)\n    (isPeriodicDispatchingConnection _conn)\n    false))\n\n(define-fun NoNewConnections () Bool\n  (forall ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (=> (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (or\n        (isAADL_SB_ConnectionRefinement camkesSource camkesDest)\n        (isAADL_TB_ConnectionRefinement camkesSource camkesDest)\n        (isCAmkESSchedulingConnection conn)\n        false))))\n\n\n(echo \"RefinementProof: Shows that there is a model satisfying all the constraints (should be sat):\")\n(push)\n(assert (and\n  AADLWellFormedness\n  CAmkESWellFormedness\n  ConnectionPreservation\n  UniqueComponentRefinements\n  UniquePortRefinements\n  NoNewConnections\n))\n(check-sat)\n;(get-model)\n(pop)\n\n(echo \"AADLWellFormedness: Proves that the generated AADL evidence is well-formed (should be unsat):\")\n(push)\n(assert (not AADLWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"CAmkESWellFormedness: Proves that the generated CAmkES evidence is well-formed (should be unsat):\")\n(push)\n(assert (not CAmkESWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"ConnectionPreservation: Proves that the generated CAmkES connections preserve AADL's (should be unsat):\")\n(push)\n(assert (not ConnectionPreservation))\n(check-sat)\n(pop)\n\n(echo \"NoNewConnections: Proves that the generated CAmkES connections does not contain more than AADL's (should be unsat):\")\n(push)\n(assert (not NoNewConnections))\n(check-sat)\n(pop)\n\n\n(exit)",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ]
    ]
  }
}
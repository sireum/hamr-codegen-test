{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/data\/slang_embedded\/Base_Types.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded\n\nimport org.sireum._\nimport org.sireum.S8._\nimport org.sireum.S16._\nimport org.sireum.S32._\nimport org.sireum.S64._\nimport org.sireum.U8._\nimport org.sireum.U16._\nimport org.sireum.U32._\nimport org.sireum.U64._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Base_Types {\n\n  type Boolean = B\n\n  type Integer = Z\n\n  type Integer_8 = S8\n  type Integer_16 = S16\n  type Integer_32 = S32\n  type Integer_64 = S64\n\n  type Unsigned_8 = U8\n  type Unsigned_16 = U16\n  type Unsigned_32 = U32\n  type Unsigned_64 = U64\n\n  \/\/ TODO: Base_Types::Natural\n\n  type Float = R\n  type Float_32 = F32\n  type Float_64 = F64\n\n  type Character = C\n  type String = org.sireum.String\n\n  type Bits = org.sireum.ISZ[B]\n\n  @datatype class Boolean_Payload(value: B) extends art.DataContent\n\n  @datatype class Integer_Payload(value: Z) extends art.DataContent\n\n  @datatype class Integer_8_Payload(value: S8) extends art.DataContent\n  @datatype class Integer_16_Payload(value: S16) extends art.DataContent\n  @datatype class Integer_32_Payload(value: S32) extends art.DataContent\n  @datatype class Integer_64_Payload(value: S64) extends art.DataContent\n\n  @datatype class Unsigned_8_Payload(value: U8) extends art.DataContent\n  @datatype class Unsigned_16_Payload(value: U16) extends art.DataContent\n  @datatype class Unsigned_32_Payload(value: U32) extends art.DataContent\n  @datatype class Unsigned_64_Payload(value: U64) extends art.DataContent\n\n  @datatype class Float_Payload(value: R) extends art.DataContent\n  @datatype class Float_32_Payload(value: F32) extends art.DataContent\n  @datatype class Float_64_Payload(value: F64) extends art.DataContent\n\n  @datatype class Character_Payload(value: C) extends art.DataContent\n  @datatype class String_Payload(value: String) extends art.DataContent\n\n  @datatype class Bits_Payload(value: ISZ[B]) extends art.DataContent\n\n  def Boolean_example(): Boolean = { return F }\n\n  def Integer_example(): Integer = { return z\"0\" }\n\n  def Integer_8_example(): Integer_8 = { return s8\"0\" }\n  def Integer_16_example(): Integer_16 = { return s16\"0\" }\n  def Integer_32_example(): Integer_32 = { return s32\"0\" }\n  def Integer_64_example(): Integer_64 = { return s64\"0\" }\n\n  def Unsigned_8_example(): Unsigned_8 = { return u8\"0\" }\n  def Unsigned_16_example(): Unsigned_16 = { return u16\"0\" }\n  def Unsigned_32_example(): Unsigned_32 = { return u32\"0\" }\n  def Unsigned_64_example(): Unsigned_64 = { return u64\"0\" }\n\n  def Float_example(): Float = { return r\"0\" }\n  def Float_32_example(): Float_32 = { return f32\"0\" }\n  def Float_64_example(): Float_64 = { return f64\"0\" }\n\n  def Character_example(): Character = { return ' ' }\n  def String_example(): String = { return \"\" }\n\n  def Bits_example(): Bits = { return ISZ() }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/architecture\/slang_embedded\/Arch.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded\n\nimport org.sireum._\nimport art._\nimport art.PortMode._\nimport art.DispatchPropertyProtocol._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Arch {\n  val UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver : slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge = {\n    val recv_data = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_recv_data\", mode = EventIn)\n    val MissionCommand = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_MissionCommand\", mode = EventIn)\n    val send_data = Port[Base_Types.Bits] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_send_data\", mode = EventOut)\n    val AirVehicleState_WPM = Port[Base_Types.Bits] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_AirVehicleState_WPM\", mode = EventOut)\n    val AirVehicleState_UXAS = Port[Base_Types.Bits] (id = 4, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_AirVehicleState_UXAS\", mode = EventOut)\n\n    slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      recv_data = recv_data,\n      MissionCommand = MissionCommand,\n      send_data = send_data,\n      AirVehicleState_WPM = AirVehicleState_WPM,\n      AirVehicleState_UXAS = AirVehicleState_UXAS\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation : slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge = {\n    val recv_data = Port[Base_Types.Bits] (id = 5, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_recv_data\", mode = EventIn)\n    val send_data = Port[Base_Types.Bits] (id = 6, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_send_data\", mode = EventOut)\n    val trusted_ids = Port[Base_Types.Bits] (id = 7, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_trusted_ids\", mode = EventOut)\n    val AutomationRequest = Port[Base_Types.Bits] (id = 8, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_AutomationRequest\", mode = EventOut)\n    val OperatingRegion = Port[Base_Types.Bits] (id = 9, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_OperatingRegion\", mode = EventOut)\n    val LineSearchTask = Port[Base_Types.Bits] (id = 10, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_LineSearchTask\", mode = EventOut)\n\n    slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge(\n      id = 1,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      recv_data = recv_data,\n      send_data = send_data,\n      trusted_ids = trusted_ids,\n      AutomationRequest = AutomationRequest,\n      OperatingRegion = OperatingRegion,\n      LineSearchTask = LineSearchTask\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase : slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge = {\n    val keep_in_zones = Port[Base_Types.Bits] (id = 11, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_keep_in_zones\", mode = DataOut)\n    val keep_out_zones = Port[Base_Types.Bits] (id = 12, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_keep_out_zones\", mode = DataOut)\n\n    slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge(\n      id = 2,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      keep_in_zones = keep_in_zones,\n      keep_out_zones = keep_out_zones\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS : slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge = {\n    val AutomationRequest = Port[Base_Types.Bits] (id = 13, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_AutomationRequest\", mode = EventIn)\n    val AirVehicleState = Port[Base_Types.Bits] (id = 14, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_AirVehicleState\", mode = EventIn)\n    val OperatingRegion = Port[Base_Types.Bits] (id = 15, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_OperatingRegion\", mode = EventIn)\n    val LineSearchTask = Port[Base_Types.Bits] (id = 16, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_LineSearchTask\", mode = EventIn)\n    val AutomationResponse_MON_GEO = Port[Base_Types.Bits] (id = 17, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_AutomationResponse_MON_GEO\", mode = EventOut)\n    val AutomationResponse_MON_REQ = Port[Base_Types.Bits] (id = 18, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_AutomationResponse_MON_REQ\", mode = EventOut)\n\n    slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge(\n      id = 3,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      AutomationRequest = AutomationRequest,\n      AirVehicleState = AirVehicleState,\n      OperatingRegion = OperatingRegion,\n      LineSearchTask = LineSearchTask,\n      AutomationResponse_MON_GEO = AutomationResponse_MON_GEO,\n      AutomationResponse_MON_REQ = AutomationResponse_MON_REQ\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService : slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge = {\n    val AutomationResponse = Port[Base_Types.Bits] (id = 19, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService_AutomationResponse\", mode = EventIn)\n    val AirVehicleState = Port[Base_Types.Bits] (id = 20, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService_AirVehicleState\", mode = EventIn)\n    val MissionCommand = Port[Base_Types.Bits] (id = 21, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService_MissionCommand\", mode = EventOut)\n    val ReturnHome = Port[art.Empty] (id = 22, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService_ReturnHome\", mode = EventIn)\n\n    slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge(\n      id = 4,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      AutomationResponse = AutomationResponse,\n      AirVehicleState = AirVehicleState,\n      MissionCommand = MissionCommand,\n      ReturnHome = ReturnHome\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate : slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge = {\n    val trusted_ids = Port[Base_Types.Bits] (id = 23, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_trusted_ids\", mode = EventIn)\n    val AutomationRequest_in = Port[Base_Types.Bits] (id = 24, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_AutomationRequest_in\", mode = EventIn)\n    val AutomationRequest_out_UXAS = Port[Base_Types.Bits] (id = 25, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_AutomationRequest_out_UXAS\", mode = EventOut)\n    val AutomationRequest_out_MON_REQ = Port[Base_Types.Bits] (id = 26, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_AutomationRequest_out_MON_REQ\", mode = EventOut)\n    val OperatingRegion_in = Port[Base_Types.Bits] (id = 27, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_OperatingRegion_in\", mode = EventIn)\n    val OperatingRegion_out = Port[Base_Types.Bits] (id = 28, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_OperatingRegion_out\", mode = EventOut)\n    val LineSearchTask_in = Port[Base_Types.Bits] (id = 29, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_LineSearchTask_in\", mode = EventIn)\n    val LineSearchTask_out = Port[Base_Types.Bits] (id = 30, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_LineSearchTask_out\", mode = EventOut)\n\n    slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge(\n      id = 5,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      trusted_ids = trusted_ids,\n      AutomationRequest_in = AutomationRequest_in,\n      AutomationRequest_out_UXAS = AutomationRequest_out_UXAS,\n      AutomationRequest_out_MON_REQ = AutomationRequest_out_MON_REQ,\n      OperatingRegion_in = OperatingRegion_in,\n      OperatingRegion_out = OperatingRegion_out,\n      LineSearchTask_in = LineSearchTask_in,\n      LineSearchTask_out = LineSearchTask_out\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST : slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge = {\n    val filter_in = Port[Base_Types.Bits] (id = 31, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_filter_in\", mode = EventIn)\n    val filter_out = Port[Base_Types.Bits] (id = 32, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_filter_out\", mode = EventOut)\n\n    slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge(\n      id = 6,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      filter_in = filter_in,\n      filter_out = filter_out\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req : slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge = {\n    val observed = Port[Base_Types.Bits] (id = 33, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_observed\", mode = EventIn)\n    val reference_1 = Port[Base_Types.Bits] (id = 34, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_reference_1\", mode = EventIn)\n\n    slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge(\n      id = 7,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      observed = observed,\n      reference_1 = reference_1\n    )\n  }\n  val UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo : slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge = {\n    val keep_in_zones = Port[Base_Types.Bits] (id = 35, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_keep_in_zones\", mode = DataIn)\n    val keep_out_zones = Port[Base_Types.Bits] (id = 36, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_keep_out_zones\", mode = DataIn)\n    val observed = Port[Base_Types.Bits] (id = 37, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_observed\", mode = EventIn)\n    val output = Port[Base_Types.Bits] (id = 38, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_output\", mode = EventOut)\n    val alert = Port[art.Empty] (id = 39, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_alert\", mode = EventOut)\n\n    slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge(\n      id = 8,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      keep_in_zones = keep_in_zones,\n      keep_out_zones = keep_out_zones,\n      observed = observed,\n      output = output,\n      alert = alert\n    )\n  }\n\n  val ad : ArchitectureDescription = {\n\n    ArchitectureDescription(\n      components = ISZ (UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver, UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation, UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase, UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS, UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService, UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate, UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST, UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req, UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo),\n\n      connections = ISZ (Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver.AirVehicleState_WPM, to = UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService.AirVehicleState),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver.AirVehicleState_UXAS, to = UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS.AirVehicleState),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.trusted_ids, to = UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.trusted_ids),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.AutomationRequest, to = UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.AutomationRequest_in),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.OperatingRegion, to = UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.OperatingRegion_in),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.LineSearchTask, to = UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.LineSearchTask_in),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.keep_in_zones, to = UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.keep_in_zones),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.keep_out_zones, to = UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.keep_out_zones),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS.AutomationResponse_MON_GEO, to = UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.observed),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS.AutomationResponse_MON_REQ, to = UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.observed),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService.MissionCommand, to = UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver.MissionCommand),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.AutomationRequest_out_UXAS, to = UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS.AutomationRequest),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.AutomationRequest_out_MON_REQ, to = UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.reference_1),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.OperatingRegion_out, to = UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS.OperatingRegion),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.LineSearchTask_out, to = UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.filter_in),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.filter_out, to = UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS.LineSearchTask),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.output, to = UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService.AutomationResponse),\n                         Connection(from = UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.alert, to = UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService.ReturnHome))\n    )\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/architecture\/slang_embedded\/Demo.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file was auto-generated.  Do not edit\npackage slang_embedded\n\nobject Demo extends App {\n  art.Art.run(Arch.ad)\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/inspector\/slang_embedded\/InspectorDemo.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded\n\nimport art.{ArchitectureDescription, Bridge, DataContent, UPort}\nimport org.reactivestreams.Publisher\nimport org.sireum.hamr.inspector.common.{Filter, Injection, InspectionBlueprint, Msg, Rule}\nimport org.sireum.hamr.inspector.capabilities.InspectorCapabilitiesLauncher\nimport org.sireum.hamr.inspector.gui.InspectorGUILauncher\nimport org.sireum.hamr.inspector.stream.Flux\n\nobject InspectorDemo extends App {\n\n  {\n    InspectorCapabilitiesLauncher.run(Blueprint)\n\n    val filters: Set[Filter] = Set(NoFilter, EvensOnly)\n    val rules: Set[Rule] = Set(Require100OrMore)\n    val injections: Set[Injection] = Set()\n\n    InspectorGUILauncher.run(Blueprint, filters, rules, injections, args)\n  }\n\n  object Blueprint extends InspectionBlueprint {\n    override def ad(): ArchitectureDescription = Arch.ad\n    override def serializer(): DataContent => String = JSON.from_artDataContent(_, true).value\n    override def deserializer(): String => DataContent = JSON.to_artDataContent(_).left\n  }\n\n  object NoFilter extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in\n  }\n\n  object EvensOnly extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in.filter(_.sequence % 2 == 0)\n  }\n\n  object Require100OrMore extends Rule {\n    override def rule(in: Flux[Msg]): Publisher[_] = in.skip(99).next().single()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/data\/slang_embedded\/sergen.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\n# Creates serializers and deserializers for all types in the data folder of a HAMR project.\n#\n# This script should be placed in the \"<project name>\/src\/main\/data\/<your>\/<package>\/\" folder of a Sireum HAMR project.\n#\n# When run, it will create serializers and deserializers (JSON.scala and MsgPack.scala) for all user-defined types.\n# JSON.scala must exist for any HAMR-project jar that is pointed to by the Inspector-GUI.\n\n# check for conflicting files\nif [ -f 'JSON.scala' ]; then\n  echo 'Deleting stale JSON.scala'\n  rm JSON.scala\nfi\nif [ -f 'MsgPack.scala' ]; then\n  echo 'Deleting stale MsgPack.scala'\n  rm MsgPack.scala\nfi\n\n# determine OS\n# credit: https:\/\/stackoverflow.com\/questions\/394230\/how-to-detect-the-os-from-a-bash-script\/18434831\nif [[ $OSTYPE == 'linux-gnu' ]]; then\n        platform='linux'\nelif [[ $OSTYPE == 'darwin'* ]]; then\n        platform='mac'\nelif [[ $OSTYPE == 'msys' ]]; then\n        platform='win'\nelif [[ $OSTYPE == 'win32' ]]; then\n        platform='win'\nelse\n        echo 'ERROR: invalid OS'\n        exit 1\nfi\n\necho \"detected platform: '$platform' based on OS: '$OSTYPE'\"\n\ninitialDirectory=$PWD # allows script to get back to initial directory after crawling up\npathToData='' # a path to get to the data folder, which is made up of repeating '..\/'\npackage='' # the package name, which is from the child of 'data' to (and including) the initialDirectory\nuppermostDirectoryFound='' # name of the uppermost directory found, if it is not data then we cancel the script\n\n# determine package\nwhile [[ $PWD != '\/' && ${PWD##*\/} != 'data' ]]; do\n  # \"if\" check on package prevents trailing period character\n  if [[ $package == '' ]]; then package=${PWD##*\/}; else package=${PWD##*\/}.${package}; fi;\n  pathToData=..\/${pathToData};\n  cd ..;\n  uppermostDirectoryFound=${PWD##*\/}\ndone\n\n# check that data folder was found\nif [[ $uppermostDirectoryFound != 'data' ]]; then\n  echo 'ERROR: script directory is not a descendent of data\/<full_project_package>\/';\n  exit 1\nfi\n\n# check that src\/main\/data\/ path holds\ncd ..\nif [[ ${PWD##*\/} != 'main' ]]; then\n  echo \"ERROR: expected main\/ to be direct parent of data\/ but ${PWD##*\/} was found.\";\n  exit 1\nfi\n\ncd ..\nif [[ ${PWD##*\/} != 'src' ]]; then\n  echo \"ERROR: expected src\/ to be direct parent of main\/ but ${PWD##*\/} was found.\";\n  exit 1\nfi\n\n# check that main\/art\/DataContent.scala exists (from the current folder src)\n\nif [ ! -f 'main\/art\/DataContent.scala' ]; then\n  echo 'ERROR: project must contain art\/DataContent under src\/main\/ but it was not found.';\n  exit 1\nfi\n\ncd ${initialDirectory}\n\n# add -L option to find if symlinks need to be followed: files=$(find -L . -regex '.*\/[^\/]*.scala')\nfiles=$(find . -regex '.*\/[^\/]*.scala')\n\necho \"package: $package\"\necho \"files:\"\necho \"$files\"\n\nsergen=\"$SIREUM_HOME\/bin\/${platform}\/java\/bin\/java -jar $SIREUM_HOME\/bin\/sireum.jar tools sergen\"\n\neval $sergen -p $package -m \"json,msgpack\" $files ${pathToData}..\/art\/DataContent.scala",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/Drivers\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.Drivers\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_TestApi extends BridgeTestSuite[UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver) {\n\n  \/** helper function to set the values of all input ports.\n   * @param recv_data payloads for event data port recv_data.\n   *   ART currently supports single element event data queues so\n   *   only the last element of recv_data will be used\n   * @param MissionCommand payloads for event data port MissionCommand.\n   *   ART currently supports single element event data queues so\n   *   only the last element of MissionCommand will be used\n   *\/\n  def put_concrete_inputs(recv_data : ISZ[Base_Types.Bits],\n                          MissionCommand : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- recv_data){\n      put_recv_data(v)\n    }\n    for(v <- MissionCommand){\n      put_MissionCommand(v)\n    }\n  }\n\n\n  \/** helper function to check UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param send_data method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'send_data'.\n   * @param AirVehicleState_WPM method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AirVehicleState_WPM'.\n   * @param AirVehicleState_UXAS method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AirVehicleState_UXAS'.\n   *\/\n  def check_concrete_output(send_data: ISZ[Base_Types.Bits] => B = send_dataParam => {T},\n                            AirVehicleState_WPM: ISZ[Base_Types.Bits] => B = AirVehicleState_WPMParam => {T},\n                            AirVehicleState_UXAS: ISZ[Base_Types.Bits] => B = AirVehicleState_UXASParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var send_dataValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_send_data().nonEmpty) send_dataValue = send_dataValue :+ get_send_data().get\n    if(!send_data(send_dataValue)) {\n      testFailures = testFailures :+ st\"'send_data' did not match expected: received ${send_dataValue.size} events with the following payloads ${send_dataValue}\"\n    }\n    var AirVehicleState_WPMValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AirVehicleState_WPM().nonEmpty) AirVehicleState_WPMValue = AirVehicleState_WPMValue :+ get_AirVehicleState_WPM().get\n    if(!AirVehicleState_WPM(AirVehicleState_WPMValue)) {\n      testFailures = testFailures :+ st\"'AirVehicleState_WPM' did not match expected: received ${AirVehicleState_WPMValue.size} events with the following payloads ${AirVehicleState_WPMValue}\"\n    }\n    var AirVehicleState_UXASValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AirVehicleState_UXAS().nonEmpty) AirVehicleState_UXASValue = AirVehicleState_UXASValue :+ get_AirVehicleState_UXAS().get\n    if(!AirVehicleState_UXAS(AirVehicleState_UXASValue)) {\n      testFailures = testFailures :+ st\"'AirVehicleState_UXAS' did not match expected: received ${AirVehicleState_UXASValue.size} events with the following payloads ${AirVehicleState_UXASValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_recv_data(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.recv_data_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_MissionCommand(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.MissionCommand_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_send_data(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_send_data_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port send_data.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_send_data_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.send_data_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AirVehicleState_WPM(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AirVehicleState_WPM_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port AirVehicleState_WPM.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AirVehicleState_WPM_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.AirVehicleState_WPM_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AirVehicleState_UXAS(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AirVehicleState_UXAS_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port AirVehicleState_UXAS.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AirVehicleState_UXAS_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.AirVehicleState_UXAS_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/Drivers\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.Drivers\n\nimport org.sireum._\nimport slang_embedded.Drivers._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Test extends UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/Drivers\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.Drivers\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.Drivers.{UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  recv_data: Port[Base_Types.Bits],\n  MissionCommand: Port[Base_Types.Bits],\n  send_data: Port[Base_Types.Bits],\n  AirVehicleState_WPM: Port[Base_Types.Bits],\n  AirVehicleState_UXAS: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(recv_data,\n              MissionCommand,\n              send_data,\n              AirVehicleState_WPM,\n              AirVehicleState_UXAS),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(recv_data,\n                   MissionCommand),\n\n    eventOuts = ISZ(send_data,\n                    AirVehicleState_WPM,\n                    AirVehicleState_UXAS)\n  )\n\n  val initialization_api : UARTDriver_Impl_Initialization_Api = {\n    val api = UARTDriver_Impl_Initialization_Api(\n      id,\n      recv_data.id,\n      MissionCommand.id,\n      send_data.id,\n      AirVehicleState_WPM.id,\n      AirVehicleState_UXAS.id\n    )\n    UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : UARTDriver_Impl_Operational_Api = {\n    val api = UARTDriver_Impl_Operational_Api(\n      id,\n      recv_data.id,\n      MissionCommand.id,\n      send_data.id,\n      AirVehicleState_WPM.id,\n      AirVehicleState_UXAS.id\n    )\n    UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.EntryPoints(\n      id,\n\n      recv_data.id,\n      MissionCommand.id,\n      send_data.id,\n      AirVehicleState_WPM.id,\n      AirVehicleState_UXAS.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge {\n\n  var c_initialization_api: Option[UARTDriver_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[UARTDriver_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_BridgeId : Art.BridgeId,\n\n    recv_data_Id : Art.PortId,\n    MissionCommand_Id : Art.PortId,\n    send_data_Id : Art.PortId,\n    AirVehicleState_WPM_Id : Art.PortId,\n    AirVehicleState_UXAS_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: UARTDriver_Impl_Initialization_Api,\n    operational_api: UARTDriver_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(recv_data_Id,\n                                              MissionCommand_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(send_data_Id,\n                                               AirVehicleState_WPM_Id,\n                                               AirVehicleState_UXAS_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: UARTDriver_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: UARTDriver_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: UARTDriver_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: UARTDriver_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: UARTDriver_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: UARTDriver_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: UARTDriver_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/Drivers\/UARTDriver_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.Drivers\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait UARTDriver_Impl_Api {\n  def id: Art.BridgeId\n  def recv_data_Id : Art.PortId\n  def MissionCommand_Id : Art.PortId\n  def send_data_Id : Art.PortId\n  def AirVehicleState_WPM_Id : Art.PortId\n  def AirVehicleState_UXAS_Id : Art.PortId\n\n  def put_send_data(value : Base_Types.Bits) : Unit = {\n    Art.putValue(send_data_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_AirVehicleState_WPM(value : Base_Types.Bits) : Unit = {\n    Art.putValue(AirVehicleState_WPM_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_AirVehicleState_UXAS(value : Base_Types.Bits) : Unit = {\n    Art.putValue(AirVehicleState_UXAS_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class UARTDriver_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val recv_data_Id : Art.PortId,\n  val MissionCommand_Id : Art.PortId,\n  val send_data_Id : Art.PortId,\n  val AirVehicleState_WPM_Id : Art.PortId,\n  val AirVehicleState_UXAS_Id : Art.PortId) extends UARTDriver_Impl_Api\n\n@datatype class UARTDriver_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val recv_data_Id : Art.PortId,\n  val MissionCommand_Id : Art.PortId,\n  val send_data_Id : Art.PortId,\n  val AirVehicleState_WPM_Id : Art.PortId,\n  val AirVehicleState_UXAS_Id : Art.PortId) extends UARTDriver_Impl_Api {\n\n  def get_recv_data() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(recv_data_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port recv_data.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_MissionCommand() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(MissionCommand_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port MissionCommand.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/Drivers\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.Drivers\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver {\n\n  def initialise(api: UARTDriver_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: UARTDriver_Impl_Operational_Api): Unit = { }\n\n  def activate(api: UARTDriver_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: UARTDriver_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: UARTDriver_Impl_Operational_Api): Unit = { }\n\n  def recover(api: UARTDriver_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/BridgeTestSuite.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded\n\nimport art.{Art, Bridge}\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\n\n\/**\n * A test suite that provides the following functionality for unit tests:\n *  - Clears all registers bridges and ports before each test\n *  - Initializes the selected bridge and ports before each test\n *  - Finalizes the bridge after each test\n *  - Creates a new instance of the test suite class for each test\n *    -> NOTE: this is NOT the same as having a separate JVM per-test (or suite), but is useful for test-local variables\n *\n *  If automatic calls to initTest() or finalizeTest() are not desired, simply override beforeEach() or afterEach()\n *  methods to change the desired behavior.\n *\n * @param bridge the bridge being tested, see [[slang_embedded.Arch]] for potential values.\n * @tparam T the type of the bridge being tested\n *\/\n\n\/\/ This file was auto-generated.  Do no edit\n\nclass BridgeTestSuite[+T <: Bridge](val bridge: T) extends AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach {\n\n  \/**\n   * Automatically called before each test. Currently calls Art.initTest for the given bridge. Override as needed.\n   *\/\n  override protected def beforeEach(): Unit = {\n    Art.initTest(bridge)\n  }\n\n  \/**\n   * Automatically called after each test. Currently calls Art.finalizeTest for the given bridge. Override as needed.\n   *\/\n  override protected def afterEach(): Unit = {\n    Art.finalizeTest(bridge)\n  }\n\n  \/**\n   * Invokes testCompute() once per registered bridge.\n   *\n   * IMPORTANT: This method also clears all bridge output BEFORE each call. This will have no effect the first time it's\n   * invoked (because all output will be empty), but it does ensure that output doesn't \"leak\" across multiple\n   * invocations.\n   *\n   *\/\n  def executeTest(): Unit = {\n    Art.manuallyClearOutput()\n    Art.executeTest(bridge)\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SW\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_TestApi extends BridgeTestSuite[RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation) {\n\n  \/** helper function to set the values of all input ports.\n   * @param recv_data payloads for event data port recv_data.\n   *   ART currently supports single element event data queues so\n   *   only the last element of recv_data will be used\n   *\/\n  def put_concrete_inputs(recv_data : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- recv_data){\n      put_recv_data(v)\n    }\n  }\n\n\n  \/** helper function to check RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param send_data method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'send_data'.\n   * @param trusted_ids method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'trusted_ids'.\n   * @param AutomationRequest method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AutomationRequest'.\n   * @param OperatingRegion method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'OperatingRegion'.\n   * @param LineSearchTask method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'LineSearchTask'.\n   *\/\n  def check_concrete_output(send_data: ISZ[Base_Types.Bits] => B = send_dataParam => {T},\n                            trusted_ids: ISZ[Base_Types.Bits] => B = trusted_idsParam => {T},\n                            AutomationRequest: ISZ[Base_Types.Bits] => B = AutomationRequestParam => {T},\n                            OperatingRegion: ISZ[Base_Types.Bits] => B = OperatingRegionParam => {T},\n                            LineSearchTask: ISZ[Base_Types.Bits] => B = LineSearchTaskParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var send_dataValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_send_data().nonEmpty) send_dataValue = send_dataValue :+ get_send_data().get\n    if(!send_data(send_dataValue)) {\n      testFailures = testFailures :+ st\"'send_data' did not match expected: received ${send_dataValue.size} events with the following payloads ${send_dataValue}\"\n    }\n    var trusted_idsValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_trusted_ids().nonEmpty) trusted_idsValue = trusted_idsValue :+ get_trusted_ids().get\n    if(!trusted_ids(trusted_idsValue)) {\n      testFailures = testFailures :+ st\"'trusted_ids' did not match expected: received ${trusted_idsValue.size} events with the following payloads ${trusted_idsValue}\"\n    }\n    var AutomationRequestValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AutomationRequest().nonEmpty) AutomationRequestValue = AutomationRequestValue :+ get_AutomationRequest().get\n    if(!AutomationRequest(AutomationRequestValue)) {\n      testFailures = testFailures :+ st\"'AutomationRequest' did not match expected: received ${AutomationRequestValue.size} events with the following payloads ${AutomationRequestValue}\"\n    }\n    var OperatingRegionValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_OperatingRegion().nonEmpty) OperatingRegionValue = OperatingRegionValue :+ get_OperatingRegion().get\n    if(!OperatingRegion(OperatingRegionValue)) {\n      testFailures = testFailures :+ st\"'OperatingRegion' did not match expected: received ${OperatingRegionValue.size} events with the following payloads ${OperatingRegionValue}\"\n    }\n    var LineSearchTaskValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_LineSearchTask().nonEmpty) LineSearchTaskValue = LineSearchTaskValue :+ get_LineSearchTask().get\n    if(!LineSearchTask(LineSearchTaskValue)) {\n      testFailures = testFailures :+ st\"'LineSearchTask' did not match expected: received ${LineSearchTaskValue.size} events with the following payloads ${LineSearchTaskValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_recv_data(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.recv_data_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_send_data(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_send_data_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port send_data.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_send_data_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.send_data_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_trusted_ids(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_trusted_ids_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port trusted_ids.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_trusted_ids_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.trusted_ids_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AutomationRequest(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AutomationRequest_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port AutomationRequest.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AutomationRequest_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.AutomationRequest_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_OperatingRegion(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_OperatingRegion_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port OperatingRegion.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_OperatingRegion_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.OperatingRegion_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_LineSearchTask(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_LineSearchTask_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port LineSearchTask.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_LineSearchTask_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.LineSearchTask_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SW\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded.SW._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Test extends RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SW.{RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  recv_data: Port[Base_Types.Bits],\n  send_data: Port[Base_Types.Bits],\n  trusted_ids: Port[Base_Types.Bits],\n  AutomationRequest: Port[Base_Types.Bits],\n  OperatingRegion: Port[Base_Types.Bits],\n  LineSearchTask: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(recv_data,\n              send_data,\n              trusted_ids,\n              AutomationRequest,\n              OperatingRegion,\n              LineSearchTask),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(recv_data),\n\n    eventOuts = ISZ(send_data,\n                    trusted_ids,\n                    AutomationRequest,\n                    OperatingRegion,\n                    LineSearchTask)\n  )\n\n  val initialization_api : RadioDriver_Attestation_thr_Impl_Initialization_Api = {\n    val api = RadioDriver_Attestation_thr_Impl_Initialization_Api(\n      id,\n      recv_data.id,\n      send_data.id,\n      trusted_ids.id,\n      AutomationRequest.id,\n      OperatingRegion.id,\n      LineSearchTask.id\n    )\n    RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : RadioDriver_Attestation_thr_Impl_Operational_Api = {\n    val api = RadioDriver_Attestation_thr_Impl_Operational_Api(\n      id,\n      recv_data.id,\n      send_data.id,\n      trusted_ids.id,\n      AutomationRequest.id,\n      OperatingRegion.id,\n      LineSearchTask.id\n    )\n    RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.EntryPoints(\n      id,\n\n      recv_data.id,\n      send_data.id,\n      trusted_ids.id,\n      AutomationRequest.id,\n      OperatingRegion.id,\n      LineSearchTask.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge {\n\n  var c_initialization_api: Option[RadioDriver_Attestation_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[RadioDriver_Attestation_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_BridgeId : Art.BridgeId,\n\n    recv_data_Id : Art.PortId,\n    send_data_Id : Art.PortId,\n    trusted_ids_Id : Art.PortId,\n    AutomationRequest_Id : Art.PortId,\n    OperatingRegion_Id : Art.PortId,\n    LineSearchTask_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: RadioDriver_Attestation_thr_Impl_Initialization_Api,\n    operational_api: RadioDriver_Attestation_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(recv_data_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(send_data_Id,\n                                               trusted_ids_Id,\n                                               AutomationRequest_Id,\n                                               OperatingRegion_Id,\n                                               LineSearchTask_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: RadioDriver_Attestation_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/RadioDriver_Attestation_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait RadioDriver_Attestation_thr_Impl_Api {\n  def id: Art.BridgeId\n  def recv_data_Id : Art.PortId\n  def send_data_Id : Art.PortId\n  def trusted_ids_Id : Art.PortId\n  def AutomationRequest_Id : Art.PortId\n  def OperatingRegion_Id : Art.PortId\n  def LineSearchTask_Id : Art.PortId\n\n  def put_send_data(value : Base_Types.Bits) : Unit = {\n    Art.putValue(send_data_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_trusted_ids(value : Base_Types.Bits) : Unit = {\n    Art.putValue(trusted_ids_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_AutomationRequest(value : Base_Types.Bits) : Unit = {\n    Art.putValue(AutomationRequest_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_OperatingRegion(value : Base_Types.Bits) : Unit = {\n    Art.putValue(OperatingRegion_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_LineSearchTask(value : Base_Types.Bits) : Unit = {\n    Art.putValue(LineSearchTask_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class RadioDriver_Attestation_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val recv_data_Id : Art.PortId,\n  val send_data_Id : Art.PortId,\n  val trusted_ids_Id : Art.PortId,\n  val AutomationRequest_Id : Art.PortId,\n  val OperatingRegion_Id : Art.PortId,\n  val LineSearchTask_Id : Art.PortId) extends RadioDriver_Attestation_thr_Impl_Api\n\n@datatype class RadioDriver_Attestation_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val recv_data_Id : Art.PortId,\n  val send_data_Id : Art.PortId,\n  val trusted_ids_Id : Art.PortId,\n  val AutomationRequest_Id : Art.PortId,\n  val OperatingRegion_Id : Art.PortId,\n  val LineSearchTask_Id : Art.PortId) extends RadioDriver_Attestation_thr_Impl_Api {\n\n  def get_recv_data() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(recv_data_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port recv_data.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SW\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation {\n\n  def initialise(api: RadioDriver_Attestation_thr_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = { }\n\n  def activate(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: RadioDriver_Attestation_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SW\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_TestApi extends BridgeTestSuite[FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase) {\n\n  \/** helper function to check FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param keep_in_zones method that will be called with the value of the outgoing data\n   *        port 'keep_in_zones'.\n   * @param keep_out_zones method that will be called with the value of the outgoing data\n   *        port 'keep_out_zones'.\n   *\/\n  def check_concrete_output(keep_in_zones: Base_Types.Bits => B = keep_in_zonesParam => {T},\n                            keep_out_zones: Base_Types.Bits => B = keep_out_zonesParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    val keep_in_zonesValue: Base_Types.Bits = get_keep_in_zones().get\n    if(!keep_in_zones(keep_in_zonesValue)) {\n      testFailures = testFailures :+ st\"'keep_in_zones' did not match expected: value of the outgoing data port is ${keep_in_zonesValue}\"\n    }\n    val keep_out_zonesValue: Base_Types.Bits = get_keep_out_zones().get\n    if(!keep_out_zones(keep_out_zonesValue)) {\n      testFailures = testFailures :+ st\"'keep_out_zones' did not match expected: value of the outgoing data port is ${keep_out_zonesValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ getter for out DataPort\n  def get_keep_in_zones(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_keep_in_zones_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port keep_in_zones.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_keep_in_zones_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.keep_in_zones_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out DataPort\n  def get_keep_out_zones(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_keep_out_zones_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port keep_out_zones.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_keep_out_zones_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.keep_out_zones_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SW\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded.SW._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Test extends FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SW.{FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  keep_in_zones: Port[Base_Types.Bits],\n  keep_out_zones: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(keep_in_zones,\n              keep_out_zones),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(keep_in_zones,\n                   keep_out_zones),\n\n    eventIns = ISZ(),\n\n    eventOuts = ISZ()\n  )\n\n  val initialization_api : FlyZonesDatabase_thr_Impl_Initialization_Api = {\n    val api = FlyZonesDatabase_thr_Impl_Initialization_Api(\n      id,\n      keep_in_zones.id,\n      keep_out_zones.id\n    )\n    FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : FlyZonesDatabase_thr_Impl_Operational_Api = {\n    val api = FlyZonesDatabase_thr_Impl_Operational_Api(\n      id,\n      keep_in_zones.id,\n      keep_out_zones.id\n    )\n    FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.EntryPoints(\n      id,\n\n      keep_in_zones.id,\n      keep_out_zones.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge {\n\n  var c_initialization_api: Option[FlyZonesDatabase_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[FlyZonesDatabase_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_BridgeId : Art.BridgeId,\n\n    keep_in_zones_Id : Art.PortId,\n    keep_out_zones_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: FlyZonesDatabase_thr_Impl_Initialization_Api,\n    operational_api: FlyZonesDatabase_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ(keep_in_zones_Id,\n                                              keep_out_zones_Id)\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: FlyZonesDatabase_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/FlyZonesDatabase_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait FlyZonesDatabase_thr_Impl_Api {\n  def id: Art.BridgeId\n  def keep_in_zones_Id : Art.PortId\n  def keep_out_zones_Id : Art.PortId\n\n  def put_keep_in_zones(value : Base_Types.Bits) : Unit = {\n    Art.putValue(keep_in_zones_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_keep_out_zones(value : Base_Types.Bits) : Unit = {\n    Art.putValue(keep_out_zones_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class FlyZonesDatabase_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val keep_in_zones_Id : Art.PortId,\n  val keep_out_zones_Id : Art.PortId) extends FlyZonesDatabase_thr_Impl_Api\n\n@datatype class FlyZonesDatabase_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val keep_in_zones_Id : Art.PortId,\n  val keep_out_zones_Id : Art.PortId) extends FlyZonesDatabase_thr_Impl_Api {\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SW\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase {\n\n  def initialise(api: FlyZonesDatabase_thr_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = { }\n\n  def activate(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: FlyZonesDatabase_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SW\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_TestApi extends BridgeTestSuite[UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS) {\n\n  \/** helper function to set the values of all input ports.\n   * @param AutomationRequest payloads for event data port AutomationRequest.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AutomationRequest will be used\n   * @param AirVehicleState payloads for event data port AirVehicleState.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AirVehicleState will be used\n   * @param OperatingRegion payloads for event data port OperatingRegion.\n   *   ART currently supports single element event data queues so\n   *   only the last element of OperatingRegion will be used\n   * @param LineSearchTask payloads for event data port LineSearchTask.\n   *   ART currently supports single element event data queues so\n   *   only the last element of LineSearchTask will be used\n   *\/\n  def put_concrete_inputs(AutomationRequest : ISZ[Base_Types.Bits],\n                          AirVehicleState : ISZ[Base_Types.Bits],\n                          OperatingRegion : ISZ[Base_Types.Bits],\n                          LineSearchTask : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- AutomationRequest){\n      put_AutomationRequest(v)\n    }\n    for(v <- AirVehicleState){\n      put_AirVehicleState(v)\n    }\n    for(v <- OperatingRegion){\n      put_OperatingRegion(v)\n    }\n    for(v <- LineSearchTask){\n      put_LineSearchTask(v)\n    }\n  }\n\n\n  \/** helper function to check UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param AutomationResponse_MON_GEO method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AutomationResponse_MON_GEO'.\n   * @param AutomationResponse_MON_REQ method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AutomationResponse_MON_REQ'.\n   *\/\n  def check_concrete_output(AutomationResponse_MON_GEO: ISZ[Base_Types.Bits] => B = AutomationResponse_MON_GEOParam => {T},\n                            AutomationResponse_MON_REQ: ISZ[Base_Types.Bits] => B = AutomationResponse_MON_REQParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var AutomationResponse_MON_GEOValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AutomationResponse_MON_GEO().nonEmpty) AutomationResponse_MON_GEOValue = AutomationResponse_MON_GEOValue :+ get_AutomationResponse_MON_GEO().get\n    if(!AutomationResponse_MON_GEO(AutomationResponse_MON_GEOValue)) {\n      testFailures = testFailures :+ st\"'AutomationResponse_MON_GEO' did not match expected: received ${AutomationResponse_MON_GEOValue.size} events with the following payloads ${AutomationResponse_MON_GEOValue}\"\n    }\n    var AutomationResponse_MON_REQValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AutomationResponse_MON_REQ().nonEmpty) AutomationResponse_MON_REQValue = AutomationResponse_MON_REQValue :+ get_AutomationResponse_MON_REQ().get\n    if(!AutomationResponse_MON_REQ(AutomationResponse_MON_REQValue)) {\n      testFailures = testFailures :+ st\"'AutomationResponse_MON_REQ' did not match expected: received ${AutomationResponse_MON_REQValue.size} events with the following payloads ${AutomationResponse_MON_REQValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_AutomationRequest(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.AutomationRequest_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_AirVehicleState(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.AirVehicleState_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_OperatingRegion(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.OperatingRegion_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_LineSearchTask(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.LineSearchTask_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AutomationResponse_MON_GEO(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AutomationResponse_MON_GEO_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port AutomationResponse_MON_GEO.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AutomationResponse_MON_GEO_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.AutomationResponse_MON_GEO_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AutomationResponse_MON_REQ(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AutomationResponse_MON_REQ_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port AutomationResponse_MON_REQ.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AutomationResponse_MON_REQ_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.AutomationResponse_MON_REQ_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SW\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded.SW._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Test extends UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SW.{UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  AutomationRequest: Port[Base_Types.Bits],\n  AirVehicleState: Port[Base_Types.Bits],\n  OperatingRegion: Port[Base_Types.Bits],\n  LineSearchTask: Port[Base_Types.Bits],\n  AutomationResponse_MON_GEO: Port[Base_Types.Bits],\n  AutomationResponse_MON_REQ: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(AutomationRequest,\n              AirVehicleState,\n              OperatingRegion,\n              LineSearchTask,\n              AutomationResponse_MON_GEO,\n              AutomationResponse_MON_REQ),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(AutomationRequest,\n                   AirVehicleState,\n                   OperatingRegion,\n                   LineSearchTask),\n\n    eventOuts = ISZ(AutomationResponse_MON_GEO,\n                    AutomationResponse_MON_REQ)\n  )\n\n  val initialization_api : UxAS_thr_Impl_Initialization_Api = {\n    val api = UxAS_thr_Impl_Initialization_Api(\n      id,\n      AutomationRequest.id,\n      AirVehicleState.id,\n      OperatingRegion.id,\n      LineSearchTask.id,\n      AutomationResponse_MON_GEO.id,\n      AutomationResponse_MON_REQ.id\n    )\n    UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : UxAS_thr_Impl_Operational_Api = {\n    val api = UxAS_thr_Impl_Operational_Api(\n      id,\n      AutomationRequest.id,\n      AirVehicleState.id,\n      OperatingRegion.id,\n      LineSearchTask.id,\n      AutomationResponse_MON_GEO.id,\n      AutomationResponse_MON_REQ.id\n    )\n    UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.EntryPoints(\n      id,\n\n      AutomationRequest.id,\n      AirVehicleState.id,\n      OperatingRegion.id,\n      LineSearchTask.id,\n      AutomationResponse_MON_GEO.id,\n      AutomationResponse_MON_REQ.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge {\n\n  var c_initialization_api: Option[UxAS_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[UxAS_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_BridgeId : Art.BridgeId,\n\n    AutomationRequest_Id : Art.PortId,\n    AirVehicleState_Id : Art.PortId,\n    OperatingRegion_Id : Art.PortId,\n    LineSearchTask_Id : Art.PortId,\n    AutomationResponse_MON_GEO_Id : Art.PortId,\n    AutomationResponse_MON_REQ_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: UxAS_thr_Impl_Initialization_Api,\n    operational_api: UxAS_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(AutomationRequest_Id,\n                                              AirVehicleState_Id,\n                                              OperatingRegion_Id,\n                                              LineSearchTask_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(AutomationResponse_MON_GEO_Id,\n                                               AutomationResponse_MON_REQ_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: UxAS_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/UxAS_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait UxAS_thr_Impl_Api {\n  def id: Art.BridgeId\n  def AutomationRequest_Id : Art.PortId\n  def AirVehicleState_Id : Art.PortId\n  def OperatingRegion_Id : Art.PortId\n  def LineSearchTask_Id : Art.PortId\n  def AutomationResponse_MON_GEO_Id : Art.PortId\n  def AutomationResponse_MON_REQ_Id : Art.PortId\n\n  def put_AutomationResponse_MON_GEO(value : Base_Types.Bits) : Unit = {\n    Art.putValue(AutomationResponse_MON_GEO_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_AutomationResponse_MON_REQ(value : Base_Types.Bits) : Unit = {\n    Art.putValue(AutomationResponse_MON_REQ_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class UxAS_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val AutomationRequest_Id : Art.PortId,\n  val AirVehicleState_Id : Art.PortId,\n  val OperatingRegion_Id : Art.PortId,\n  val LineSearchTask_Id : Art.PortId,\n  val AutomationResponse_MON_GEO_Id : Art.PortId,\n  val AutomationResponse_MON_REQ_Id : Art.PortId) extends UxAS_thr_Impl_Api\n\n@datatype class UxAS_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val AutomationRequest_Id : Art.PortId,\n  val AirVehicleState_Id : Art.PortId,\n  val OperatingRegion_Id : Art.PortId,\n  val LineSearchTask_Id : Art.PortId,\n  val AutomationResponse_MON_GEO_Id : Art.PortId,\n  val AutomationResponse_MON_REQ_Id : Art.PortId) extends UxAS_thr_Impl_Api {\n\n  def get_AutomationRequest() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(AutomationRequest_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AutomationRequest.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_AirVehicleState() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(AirVehicleState_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AirVehicleState.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_OperatingRegion() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(OperatingRegion_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port OperatingRegion.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_LineSearchTask() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(LineSearchTask_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port LineSearchTask.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SW\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS {\n\n  def initialise(api: UxAS_thr_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n\n  def activate(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SW\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_TestApi extends BridgeTestSuite[WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService) {\n\n  \/** helper function to set the values of all input ports.\n   * @param AutomationResponse payloads for event data port AutomationResponse.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AutomationResponse will be used\n   * @param AirVehicleState payloads for event data port AirVehicleState.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AirVehicleState will be used\n   * @param ReturnHome the number of events to place in the ReturnHome event port queue.\n   *   ART currently supports single element event queues so at most\n   *   one event will be placed in the queue.\n   *\/\n  def put_concrete_inputs(AutomationResponse : ISZ[Base_Types.Bits],\n                          AirVehicleState : ISZ[Base_Types.Bits],\n                          ReturnHome : Z): Unit = {\n    for(v <- AutomationResponse){\n      put_AutomationResponse(v)\n    }\n    for(v <- AirVehicleState){\n      put_AirVehicleState(v)\n    }\n    for(i <- 0 until ReturnHome) {\n      put_ReturnHome()\n    }\n  }\n\n\n  \/** helper function to check WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param MissionCommand method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'MissionCommand'.\n   *\/\n  def check_concrete_output(MissionCommand: ISZ[Base_Types.Bits] => B = MissionCommandParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var MissionCommandValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_MissionCommand().nonEmpty) MissionCommandValue = MissionCommandValue :+ get_MissionCommand().get\n    if(!MissionCommand(MissionCommandValue)) {\n      testFailures = testFailures :+ st\"'MissionCommand' did not match expected: received ${MissionCommandValue.size} events with the following payloads ${MissionCommandValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_AutomationResponse(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.AutomationResponse_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_AirVehicleState(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.AirVehicleState_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventPort\n  def put_ReturnHome(): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.ReturnHome_Id, Empty())\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_MissionCommand(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_MissionCommand_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port MissionCommand.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_MissionCommand_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.MissionCommand_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SW\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded.SW._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Test extends WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SW.{WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  AutomationResponse: Port[Base_Types.Bits],\n  AirVehicleState: Port[Base_Types.Bits],\n  MissionCommand: Port[Base_Types.Bits],\n  ReturnHome: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(AutomationResponse,\n              AirVehicleState,\n              MissionCommand,\n              ReturnHome),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(AutomationResponse,\n                   AirVehicleState,\n                   ReturnHome),\n\n    eventOuts = ISZ(MissionCommand)\n  )\n\n  val initialization_api : WaypointPlanManagerService_thr_Impl_Initialization_Api = {\n    val api = WaypointPlanManagerService_thr_Impl_Initialization_Api(\n      id,\n      AutomationResponse.id,\n      AirVehicleState.id,\n      MissionCommand.id,\n      ReturnHome.id\n    )\n    WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : WaypointPlanManagerService_thr_Impl_Operational_Api = {\n    val api = WaypointPlanManagerService_thr_Impl_Operational_Api(\n      id,\n      AutomationResponse.id,\n      AirVehicleState.id,\n      MissionCommand.id,\n      ReturnHome.id\n    )\n    WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.EntryPoints(\n      id,\n\n      AutomationResponse.id,\n      AirVehicleState.id,\n      MissionCommand.id,\n      ReturnHome.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge {\n\n  var c_initialization_api: Option[WaypointPlanManagerService_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[WaypointPlanManagerService_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_BridgeId : Art.BridgeId,\n\n    AutomationResponse_Id : Art.PortId,\n    AirVehicleState_Id : Art.PortId,\n    MissionCommand_Id : Art.PortId,\n    ReturnHome_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: WaypointPlanManagerService_thr_Impl_Initialization_Api,\n    operational_api: WaypointPlanManagerService_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(AutomationResponse_Id,\n                                              AirVehicleState_Id,\n                                              ReturnHome_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(MissionCommand_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: WaypointPlanManagerService_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/WaypointPlanManagerService_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait WaypointPlanManagerService_thr_Impl_Api {\n  def id: Art.BridgeId\n  def AutomationResponse_Id : Art.PortId\n  def AirVehicleState_Id : Art.PortId\n  def MissionCommand_Id : Art.PortId\n  def ReturnHome_Id : Art.PortId\n\n  def put_MissionCommand(value : Base_Types.Bits) : Unit = {\n    Art.putValue(MissionCommand_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class WaypointPlanManagerService_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val AutomationResponse_Id : Art.PortId,\n  val AirVehicleState_Id : Art.PortId,\n  val MissionCommand_Id : Art.PortId,\n  val ReturnHome_Id : Art.PortId) extends WaypointPlanManagerService_thr_Impl_Api\n\n@datatype class WaypointPlanManagerService_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val AutomationResponse_Id : Art.PortId,\n  val AirVehicleState_Id : Art.PortId,\n  val MissionCommand_Id : Art.PortId,\n  val ReturnHome_Id : Art.PortId) extends WaypointPlanManagerService_thr_Impl_Api {\n\n  def get_AutomationResponse() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(AutomationResponse_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AutomationResponse.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_AirVehicleState() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(AirVehicleState_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AirVehicleState.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_ReturnHome() : Option[art.Empty] = {\n    val value : Option[art.Empty] = Art.getValue(ReturnHome_Id) match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port ReturnHome.  Expecting 'Empty' but received ${v}\")\n        None[art.Empty]()\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SW\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService {\n\n  def initialise(api: WaypointPlanManagerService_thr_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = { }\n\n  def activate(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: WaypointPlanManagerService_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SW\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_TestApi extends BridgeTestSuite[CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate) {\n\n  \/** helper function to set the values of all input ports.\n   * @param trusted_ids payloads for event data port trusted_ids.\n   *   ART currently supports single element event data queues so\n   *   only the last element of trusted_ids will be used\n   * @param AutomationRequest_in payloads for event data port AutomationRequest_in.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AutomationRequest_in will be used\n   * @param OperatingRegion_in payloads for event data port OperatingRegion_in.\n   *   ART currently supports single element event data queues so\n   *   only the last element of OperatingRegion_in will be used\n   * @param LineSearchTask_in payloads for event data port LineSearchTask_in.\n   *   ART currently supports single element event data queues so\n   *   only the last element of LineSearchTask_in will be used\n   *\/\n  def put_concrete_inputs(trusted_ids : ISZ[Base_Types.Bits],\n                          AutomationRequest_in : ISZ[Base_Types.Bits],\n                          OperatingRegion_in : ISZ[Base_Types.Bits],\n                          LineSearchTask_in : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- trusted_ids){\n      put_trusted_ids(v)\n    }\n    for(v <- AutomationRequest_in){\n      put_AutomationRequest_in(v)\n    }\n    for(v <- OperatingRegion_in){\n      put_OperatingRegion_in(v)\n    }\n    for(v <- LineSearchTask_in){\n      put_LineSearchTask_in(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param AutomationRequest_out_UXAS method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AutomationRequest_out_UXAS'.\n   * @param AutomationRequest_out_MON_REQ method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AutomationRequest_out_MON_REQ'.\n   * @param OperatingRegion_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'OperatingRegion_out'.\n   * @param LineSearchTask_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'LineSearchTask_out'.\n   *\/\n  def check_concrete_output(AutomationRequest_out_UXAS: ISZ[Base_Types.Bits] => B = AutomationRequest_out_UXASParam => {T},\n                            AutomationRequest_out_MON_REQ: ISZ[Base_Types.Bits] => B = AutomationRequest_out_MON_REQParam => {T},\n                            OperatingRegion_out: ISZ[Base_Types.Bits] => B = OperatingRegion_outParam => {T},\n                            LineSearchTask_out: ISZ[Base_Types.Bits] => B = LineSearchTask_outParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var AutomationRequest_out_UXASValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AutomationRequest_out_UXAS().nonEmpty) AutomationRequest_out_UXASValue = AutomationRequest_out_UXASValue :+ get_AutomationRequest_out_UXAS().get\n    if(!AutomationRequest_out_UXAS(AutomationRequest_out_UXASValue)) {\n      testFailures = testFailures :+ st\"'AutomationRequest_out_UXAS' did not match expected: received ${AutomationRequest_out_UXASValue.size} events with the following payloads ${AutomationRequest_out_UXASValue}\"\n    }\n    var AutomationRequest_out_MON_REQValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AutomationRequest_out_MON_REQ().nonEmpty) AutomationRequest_out_MON_REQValue = AutomationRequest_out_MON_REQValue :+ get_AutomationRequest_out_MON_REQ().get\n    if(!AutomationRequest_out_MON_REQ(AutomationRequest_out_MON_REQValue)) {\n      testFailures = testFailures :+ st\"'AutomationRequest_out_MON_REQ' did not match expected: received ${AutomationRequest_out_MON_REQValue.size} events with the following payloads ${AutomationRequest_out_MON_REQValue}\"\n    }\n    var OperatingRegion_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_OperatingRegion_out().nonEmpty) OperatingRegion_outValue = OperatingRegion_outValue :+ get_OperatingRegion_out().get\n    if(!OperatingRegion_out(OperatingRegion_outValue)) {\n      testFailures = testFailures :+ st\"'OperatingRegion_out' did not match expected: received ${OperatingRegion_outValue.size} events with the following payloads ${OperatingRegion_outValue}\"\n    }\n    var LineSearchTask_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_LineSearchTask_out().nonEmpty) LineSearchTask_outValue = LineSearchTask_outValue :+ get_LineSearchTask_out().get\n    if(!LineSearchTask_out(LineSearchTask_outValue)) {\n      testFailures = testFailures :+ st\"'LineSearchTask_out' did not match expected: received ${LineSearchTask_outValue.size} events with the following payloads ${LineSearchTask_outValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_trusted_ids(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.trusted_ids_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_AutomationRequest_in(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.AutomationRequest_in_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_OperatingRegion_in(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.OperatingRegion_in_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_LineSearchTask_in(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.LineSearchTask_in_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AutomationRequest_out_UXAS(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AutomationRequest_out_UXAS_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port AutomationRequest_out_UXAS.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AutomationRequest_out_UXAS_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.AutomationRequest_out_UXAS_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AutomationRequest_out_MON_REQ(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AutomationRequest_out_MON_REQ_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port AutomationRequest_out_MON_REQ.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AutomationRequest_out_MON_REQ_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.AutomationRequest_out_MON_REQ_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_OperatingRegion_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_OperatingRegion_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port OperatingRegion_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_OperatingRegion_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.OperatingRegion_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_LineSearchTask_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_LineSearchTask_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port LineSearchTask_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_LineSearchTask_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.LineSearchTask_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SW\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded.SW._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Test extends CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SW.{CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  trusted_ids: Port[Base_Types.Bits],\n  AutomationRequest_in: Port[Base_Types.Bits],\n  AutomationRequest_out_UXAS: Port[Base_Types.Bits],\n  AutomationRequest_out_MON_REQ: Port[Base_Types.Bits],\n  OperatingRegion_in: Port[Base_Types.Bits],\n  OperatingRegion_out: Port[Base_Types.Bits],\n  LineSearchTask_in: Port[Base_Types.Bits],\n  LineSearchTask_out: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(trusted_ids,\n              AutomationRequest_in,\n              AutomationRequest_out_UXAS,\n              AutomationRequest_out_MON_REQ,\n              OperatingRegion_in,\n              OperatingRegion_out,\n              LineSearchTask_in,\n              LineSearchTask_out),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(trusted_ids,\n                   AutomationRequest_in,\n                   OperatingRegion_in,\n                   LineSearchTask_in),\n\n    eventOuts = ISZ(AutomationRequest_out_UXAS,\n                    AutomationRequest_out_MON_REQ,\n                    OperatingRegion_out,\n                    LineSearchTask_out)\n  )\n\n  val initialization_api : CASE_AttestationGate_thr_Impl_Initialization_Api = {\n    val api = CASE_AttestationGate_thr_Impl_Initialization_Api(\n      id,\n      trusted_ids.id,\n      AutomationRequest_in.id,\n      AutomationRequest_out_UXAS.id,\n      AutomationRequest_out_MON_REQ.id,\n      OperatingRegion_in.id,\n      OperatingRegion_out.id,\n      LineSearchTask_in.id,\n      LineSearchTask_out.id\n    )\n    CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_AttestationGate_thr_Impl_Operational_Api = {\n    val api = CASE_AttestationGate_thr_Impl_Operational_Api(\n      id,\n      trusted_ids.id,\n      AutomationRequest_in.id,\n      AutomationRequest_out_UXAS.id,\n      AutomationRequest_out_MON_REQ.id,\n      OperatingRegion_in.id,\n      OperatingRegion_out.id,\n      LineSearchTask_in.id,\n      LineSearchTask_out.id\n    )\n    CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.EntryPoints(\n      id,\n\n      trusted_ids.id,\n      AutomationRequest_in.id,\n      AutomationRequest_out_UXAS.id,\n      AutomationRequest_out_MON_REQ.id,\n      OperatingRegion_in.id,\n      OperatingRegion_out.id,\n      LineSearchTask_in.id,\n      LineSearchTask_out.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge {\n\n  var c_initialization_api: Option[CASE_AttestationGate_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_AttestationGate_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_BridgeId : Art.BridgeId,\n\n    trusted_ids_Id : Art.PortId,\n    AutomationRequest_in_Id : Art.PortId,\n    AutomationRequest_out_UXAS_Id : Art.PortId,\n    AutomationRequest_out_MON_REQ_Id : Art.PortId,\n    OperatingRegion_in_Id : Art.PortId,\n    OperatingRegion_out_Id : Art.PortId,\n    LineSearchTask_in_Id : Art.PortId,\n    LineSearchTask_out_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: CASE_AttestationGate_thr_Impl_Initialization_Api,\n    operational_api: CASE_AttestationGate_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(trusted_ids_Id,\n                                              AutomationRequest_in_Id,\n                                              OperatingRegion_in_Id,\n                                              LineSearchTask_in_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(AutomationRequest_out_UXAS_Id,\n                                               AutomationRequest_out_MON_REQ_Id,\n                                               OperatingRegion_out_Id,\n                                               LineSearchTask_out_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_AttestationGate_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/CASE_AttestationGate_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait CASE_AttestationGate_thr_Impl_Api {\n  def id: Art.BridgeId\n  def trusted_ids_Id : Art.PortId\n  def AutomationRequest_in_Id : Art.PortId\n  def AutomationRequest_out_UXAS_Id : Art.PortId\n  def AutomationRequest_out_MON_REQ_Id : Art.PortId\n  def OperatingRegion_in_Id : Art.PortId\n  def OperatingRegion_out_Id : Art.PortId\n  def LineSearchTask_in_Id : Art.PortId\n  def LineSearchTask_out_Id : Art.PortId\n\n  def put_AutomationRequest_out_UXAS(value : Base_Types.Bits) : Unit = {\n    Art.putValue(AutomationRequest_out_UXAS_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_AutomationRequest_out_MON_REQ(value : Base_Types.Bits) : Unit = {\n    Art.putValue(AutomationRequest_out_MON_REQ_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_OperatingRegion_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(OperatingRegion_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_LineSearchTask_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(LineSearchTask_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_AttestationGate_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val trusted_ids_Id : Art.PortId,\n  val AutomationRequest_in_Id : Art.PortId,\n  val AutomationRequest_out_UXAS_Id : Art.PortId,\n  val AutomationRequest_out_MON_REQ_Id : Art.PortId,\n  val OperatingRegion_in_Id : Art.PortId,\n  val OperatingRegion_out_Id : Art.PortId,\n  val LineSearchTask_in_Id : Art.PortId,\n  val LineSearchTask_out_Id : Art.PortId) extends CASE_AttestationGate_thr_Impl_Api\n\n@datatype class CASE_AttestationGate_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val trusted_ids_Id : Art.PortId,\n  val AutomationRequest_in_Id : Art.PortId,\n  val AutomationRequest_out_UXAS_Id : Art.PortId,\n  val AutomationRequest_out_MON_REQ_Id : Art.PortId,\n  val OperatingRegion_in_Id : Art.PortId,\n  val OperatingRegion_out_Id : Art.PortId,\n  val LineSearchTask_in_Id : Art.PortId,\n  val LineSearchTask_out_Id : Art.PortId) extends CASE_AttestationGate_thr_Impl_Api {\n\n  def get_trusted_ids() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(trusted_ids_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port trusted_ids.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_AutomationRequest_in() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(AutomationRequest_in_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AutomationRequest_in.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_OperatingRegion_in() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(OperatingRegion_in_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port OperatingRegion_in.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_LineSearchTask_in() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(LineSearchTask_in_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port LineSearchTask_in.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SW\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate {\n\n  def initialise(api: CASE_AttestationGate_thr_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SW\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_TestApi extends BridgeTestSuite[CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST) {\n\n  \/** helper function to set the values of all input ports.\n   * @param filter_in payloads for event data port filter_in.\n   *   ART currently supports single element event data queues so\n   *   only the last element of filter_in will be used\n   *\/\n  def put_concrete_inputs(filter_in : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- filter_in){\n      put_filter_in(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param filter_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'filter_out'.\n   *\/\n  def check_concrete_output(filter_out: ISZ[Base_Types.Bits] => B = filter_outParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var filter_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_filter_out().nonEmpty) filter_outValue = filter_outValue :+ get_filter_out().get\n    if(!filter_out(filter_outValue)) {\n      testFailures = testFailures :+ st\"'filter_out' did not match expected: received ${filter_outValue.size} events with the following payloads ${filter_outValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_filter_in(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.filter_in_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_filter_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_filter_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port filter_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_filter_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.filter_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SW\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded.SW._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Test extends CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SW.{CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  filter_in: Port[Base_Types.Bits],\n  filter_out: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(filter_in,\n              filter_out),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(filter_in),\n\n    eventOuts = ISZ(filter_out)\n  )\n\n  val initialization_api : CASE_Filter_LST_thr_Impl_Initialization_Api = {\n    val api = CASE_Filter_LST_thr_Impl_Initialization_Api(\n      id,\n      filter_in.id,\n      filter_out.id\n    )\n    CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_Filter_LST_thr_Impl_Operational_Api = {\n    val api = CASE_Filter_LST_thr_Impl_Operational_Api(\n      id,\n      filter_in.id,\n      filter_out.id\n    )\n    CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.EntryPoints(\n      id,\n\n      filter_in.id,\n      filter_out.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge {\n\n  var c_initialization_api: Option[CASE_Filter_LST_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_Filter_LST_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_BridgeId : Art.BridgeId,\n\n    filter_in_Id : Art.PortId,\n    filter_out_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: CASE_Filter_LST_thr_Impl_Initialization_Api,\n    operational_api: CASE_Filter_LST_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(filter_in_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(filter_out_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Filter_LST_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/CASE_Filter_LST_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait CASE_Filter_LST_thr_Impl_Api {\n  def id: Art.BridgeId\n  def filter_in_Id : Art.PortId\n  def filter_out_Id : Art.PortId\n\n  def put_filter_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(filter_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_Filter_LST_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val filter_in_Id : Art.PortId,\n  val filter_out_Id : Art.PortId) extends CASE_Filter_LST_thr_Impl_Api\n\n@datatype class CASE_Filter_LST_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val filter_in_Id : Art.PortId,\n  val filter_out_Id : Art.PortId) extends CASE_Filter_LST_thr_Impl_Api {\n\n  def get_filter_in() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(filter_in_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port filter_in.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SW\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST {\n\n  def initialise(api: CASE_Filter_LST_thr_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_Filter_LST_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SW\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_TestApi extends BridgeTestSuite[CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req) {\n\n  \/** helper function to set the values of all input ports.\n   * @param observed payloads for event data port observed.\n   *   ART currently supports single element event data queues so\n   *   only the last element of observed will be used\n   * @param reference_1 payloads for event data port reference_1.\n   *   ART currently supports single element event data queues so\n   *   only the last element of reference_1 will be used\n   *\/\n  def put_concrete_inputs(observed : ISZ[Base_Types.Bits],\n                          reference_1 : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- observed){\n      put_observed(v)\n    }\n    for(v <- reference_1){\n      put_reference_1(v)\n    }\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_observed(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.observed_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_reference_1(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.reference_1_Id, Base_Types.Bits_Payload(value))\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SW\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded.SW._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Test extends CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SW.{CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  observed: Port[Base_Types.Bits],\n  reference_1: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(observed,\n              reference_1),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(observed,\n                   reference_1),\n\n    eventOuts = ISZ()\n  )\n\n  val initialization_api : CASE_Monitor_Req_thr_Impl_Initialization_Api = {\n    val api = CASE_Monitor_Req_thr_Impl_Initialization_Api(\n      id,\n      observed.id,\n      reference_1.id\n    )\n    CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_Monitor_Req_thr_Impl_Operational_Api = {\n    val api = CASE_Monitor_Req_thr_Impl_Operational_Api(\n      id,\n      observed.id,\n      reference_1.id\n    )\n    CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.EntryPoints(\n      id,\n\n      observed.id,\n      reference_1.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge {\n\n  var c_initialization_api: Option[CASE_Monitor_Req_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_Monitor_Req_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_BridgeId : Art.BridgeId,\n\n    observed_Id : Art.PortId,\n    reference_1_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: CASE_Monitor_Req_thr_Impl_Initialization_Api,\n    operational_api: CASE_Monitor_Req_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(observed_Id,\n                                              reference_1_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Monitor_Req_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/CASE_Monitor_Req_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait CASE_Monitor_Req_thr_Impl_Api {\n  def id: Art.BridgeId\n  def observed_Id : Art.PortId\n  def reference_1_Id : Art.PortId\n\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_Monitor_Req_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val observed_Id : Art.PortId,\n  val reference_1_Id : Art.PortId) extends CASE_Monitor_Req_thr_Impl_Api\n\n@datatype class CASE_Monitor_Req_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val observed_Id : Art.PortId,\n  val reference_1_Id : Art.PortId) extends CASE_Monitor_Req_thr_Impl_Api {\n\n  def get_observed() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(observed_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port observed.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_reference_1() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(reference_1_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port reference_1.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SW\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req {\n\n  def initialise(api: CASE_Monitor_Req_thr_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_Monitor_Req_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SW\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_TestApi extends BridgeTestSuite[CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge](Arch.UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo) {\n\n  \/** helper function to set the values of all input ports.\n   * @param keep_in_zones payload for data port keep_in_zones\n   * @param keep_out_zones payload for data port keep_out_zones\n   * @param observed payloads for event data port observed.\n   *   ART currently supports single element event data queues so\n   *   only the last element of observed will be used\n   *\/\n  def put_concrete_inputs(keep_in_zones : Base_Types.Bits,\n                          keep_out_zones : Base_Types.Bits,\n                          observed : ISZ[Base_Types.Bits]): Unit = {\n    put_keep_in_zones(keep_in_zones)\n    put_keep_out_zones(keep_out_zones)\n    for(v <- observed){\n      put_observed(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param output method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'output'.\n   * @param alert method that will be called with the number of events to be sent\n   *        on the outgoing event port 'alert'.\n   *\/\n  def check_concrete_output(output: ISZ[Base_Types.Bits] => B = outputParam => {T},\n                            alert: Z => B = alertParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var outputValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_output().nonEmpty) outputValue = outputValue :+ get_output().get\n    if(!output(outputValue)) {\n      testFailures = testFailures :+ st\"'output' did not match expected: received ${outputValue.size} events with the following payloads ${outputValue}\"\n    }\n    \/\/ TODO: event port getter should return the number of events in\n    \/\/       the output queue when queue sizes > 1 support is added to ART\n    val alertValue: Z = if(get_alert().nonEmpty) z\"1\" else z\"0\"\n    if(!alert(alertValue)) {\n      testFailures = testFailures :+ st\"'alert' did not match expected: ${alertValue} events were in the outgoing event queue\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in DataPort\n  def put_keep_in_zones(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.keep_in_zones_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in DataPort\n  def put_keep_out_zones(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.keep_out_zones_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_observed(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.observed_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_output(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_output_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port output.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_output_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.output_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventPort\n  def get_alert(): Option[art.Empty] = {\n    val value: Option[art.Empty] = get_alert_payload() match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) => fail(s\"Unexpected payload on port alert.  Expecting 'Empty' but received ${v}\")\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventPort\n  def get_alert_payload(): Option[Empty] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.alert_Id).asInstanceOf[Option[Empty]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SW\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded.SW._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Test extends CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SW.{CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  keep_in_zones: Port[Base_Types.Bits],\n  keep_out_zones: Port[Base_Types.Bits],\n  observed: Port[Base_Types.Bits],\n  output: Port[Base_Types.Bits],\n  alert: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(keep_in_zones,\n              keep_out_zones,\n              observed,\n              output,\n              alert),\n\n    dataIns = ISZ(keep_in_zones,\n                  keep_out_zones),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(observed),\n\n    eventOuts = ISZ(output,\n                    alert)\n  )\n\n  val initialization_api : CASE_Monitor_Geo_thr_Impl_Initialization_Api = {\n    val api = CASE_Monitor_Geo_thr_Impl_Initialization_Api(\n      id,\n      keep_in_zones.id,\n      keep_out_zones.id,\n      observed.id,\n      output.id,\n      alert.id\n    )\n    CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_Monitor_Geo_thr_Impl_Operational_Api = {\n    val api = CASE_Monitor_Geo_thr_Impl_Operational_Api(\n      id,\n      keep_in_zones.id,\n      keep_out_zones.id,\n      observed.id,\n      output.id,\n      alert.id\n    )\n    CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.EntryPoints(\n      id,\n\n      keep_in_zones.id,\n      keep_out_zones.id,\n      observed.id,\n      output.id,\n      alert.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge {\n\n  var c_initialization_api: Option[CASE_Monitor_Geo_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_Monitor_Geo_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_BridgeId : Art.BridgeId,\n\n    keep_in_zones_Id : Art.PortId,\n    keep_out_zones_Id : Art.PortId,\n    observed_Id : Art.PortId,\n    output_Id : Art.PortId,\n    alert_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: CASE_Monitor_Geo_thr_Impl_Initialization_Api,\n    operational_api: CASE_Monitor_Geo_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ(keep_in_zones_Id,\n                                             keep_out_zones_Id)\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(observed_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(output_Id,\n                                               alert_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Monitor_Geo_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SW\/CASE_Monitor_Geo_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait CASE_Monitor_Geo_thr_Impl_Api {\n  def id: Art.BridgeId\n  def keep_in_zones_Id : Art.PortId\n  def keep_out_zones_Id : Art.PortId\n  def observed_Id : Art.PortId\n  def output_Id : Art.PortId\n  def alert_Id : Art.PortId\n\n  def put_output(value : Base_Types.Bits) : Unit = {\n    Art.putValue(output_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_alert() : Unit = {\n    Art.putValue(alert_Id, art.Empty())\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_Monitor_Geo_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val keep_in_zones_Id : Art.PortId,\n  val keep_out_zones_Id : Art.PortId,\n  val observed_Id : Art.PortId,\n  val output_Id : Art.PortId,\n  val alert_Id : Art.PortId) extends CASE_Monitor_Geo_thr_Impl_Api\n\n@datatype class CASE_Monitor_Geo_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val keep_in_zones_Id : Art.PortId,\n  val keep_out_zones_Id : Art.PortId,\n  val observed_Id : Art.PortId,\n  val output_Id : Art.PortId,\n  val alert_Id : Art.PortId) extends CASE_Monitor_Geo_thr_Impl_Api {\n\n  def get_keep_in_zones() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(keep_in_zones_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port keep_in_zones.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_keep_out_zones() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(keep_out_zones_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port keep_out_zones.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_observed() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(observed_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port observed.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SW\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo {\n\n  def initialise(api: CASE_Monitor_Geo_thr_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_Monitor_Geo_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/TranspilerToucher.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded\n\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject TranspilerToucher {\n  def touch(): Unit = {\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix\n\nobject UARTDriver extends App {\n\n  val UARTDriverBridge : slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge = {\n    val recv_data = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_recv_data\", mode = EventIn)\n    val MissionCommand = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_MissionCommand\", mode = EventIn)\n    val send_data = Port[Base_Types.Bits] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_send_data\", mode = EventOut)\n    val AirVehicleState_WPM = Port[Base_Types.Bits] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_AirVehicleState_WPM\", mode = EventOut)\n    val AirVehicleState_UXAS = Port[Base_Types.Bits] (id = 4, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver_AirVehicleState_UXAS\", mode = EventOut)\n\n    slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_FC_UART_UARTDriver\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      recv_data = recv_data,\n      MissionCommand = MissionCommand,\n      send_data = send_data,\n      AirVehicleState_WPM = AirVehicleState_WPM,\n      AirVehicleState_UXAS = AirVehicleState_UXAS\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = UARTDriverBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ recv_data: In EventDataPort Base_Types.Bits\n  val recv_data_id: Art.PortId = UARTDriverBridge.recv_data.id\n  var recv_data_port: Option[DataContent] = noData\n\n  \/\/ MissionCommand: In EventDataPort Base_Types.Bits\n  val MissionCommand_id: Art.PortId = UARTDriverBridge.MissionCommand.id\n  var MissionCommand_port: Option[DataContent] = noData\n\n  \/\/ send_data: Out EventDataPort Base_Types.Bits\n  val send_data_id: Art.PortId = UARTDriverBridge.send_data.id\n  var send_data_port: Option[DataContent] = noData\n\n  \/\/ AirVehicleState_WPM: Out EventDataPort Base_Types.Bits\n  val AirVehicleState_WPM_id: Art.PortId = UARTDriverBridge.AirVehicleState_WPM.id\n  var AirVehicleState_WPM_port: Option[DataContent] = noData\n\n  \/\/ AirVehicleState_UXAS: Out EventDataPort Base_Types.Bits\n  val AirVehicleState_UXAS_id: Art.PortId = UARTDriverBridge.AirVehicleState_UXAS.id\n  var AirVehicleState_UXAS_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == recv_data_id) {\n      return recv_data_port\n    } else if(portId == MissionCommand_id) {\n      return MissionCommand_port\n    } else {\n      halt(s\"Unexpected: UARTDriver.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    recv_data_port = UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix.recv_data_Receive()\n\n    MissionCommand_port = UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix.MissionCommand_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == send_data_id) {\n      send_data_port = Some(data)\n    } else if(portId == AirVehicleState_WPM_id) {\n      AirVehicleState_WPM_port = Some(data)\n    } else if(portId == AirVehicleState_UXAS_id) {\n      AirVehicleState_UXAS_port = Some(data)\n    } else {\n      halt(s\"Unexpected: UARTDriver.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(send_data_port.nonEmpty) {\n      UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix.send_data_Send(send_data_port.get)\n      send_data_port = noData\n    }\n\n    if(AirVehicleState_WPM_port.nonEmpty) {\n      UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix.AirVehicleState_WPM_Send(AirVehicleState_WPM_port.get)\n      AirVehicleState_WPM_port = noData\n    }\n\n    if(AirVehicleState_UXAS_port.nonEmpty) {\n      UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix.AirVehicleState_UXAS_Send(AirVehicleState_UXAS_port.get)\n      AirVehicleState_UXAS_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (UARTDriverBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_recv_data: Option[Base_Types.Bits] = slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api.get.get_recv_data()\n      val apiUsage_MissionCommand: Option[Base_Types.Bits] = slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api.get.get_MissionCommand()\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_initialization_api.get.put_send_data(Base_Types.Bits_example())\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api.get.put_send_data(Base_Types.Bits_example())\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_initialization_api.get.put_AirVehicleState_WPM(Base_Types.Bits_example())\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api.get.put_AirVehicleState_WPM(Base_Types.Bits_example())\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_initialization_api.get.put_AirVehicleState_UXAS(Base_Types.Bits_example())\n      slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge.c_operational_api.get.put_AirVehicleState_UXAS(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/Drivers\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.Drivers\n\nimport org.sireum._\nimport art._\n\n@ext object UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix {\n  \/\/ returns T if seL4's recv_data port is empty, F otherwise \n  def recv_data_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's recv_data port \n  def recv_data_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's MissionCommand port is empty, F otherwise \n  def MissionCommand_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's MissionCommand port \n  def MissionCommand_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's send_data port\n  def send_data_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's AirVehicleState_WPM port\n  def AirVehicleState_WPM_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's AirVehicleState_UXAS port\n  def AirVehicleState_UXAS_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/Drivers\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.Drivers\n\nimport org.sireum._\nimport art._\n\nobject UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_Ext {\n  def recv_data_IsEmpty(): B = halt(\"stub\")\n\n  def recv_data_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def MissionCommand_IsEmpty(): B = halt(\"stub\")\n\n  def MissionCommand_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def send_data_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def AirVehicleState_WPM_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def AirVehicleState_UXAS_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef UARTDRIVER_IMPL_MCMP_PROC_SW_FC_UART_UARTDRIVER_H\n#define UARTDRIVER_IMPL_MCMP_PROC_SW_FC_UART_UARTDRIVER_H\n\n#include <all.h>\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.c",
        {
          "type" : "TestResource",
          "content" : "#include <UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.h>\n#include <UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl];\n  byte_array_default(SF t0, numBits_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl, numBytes_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl);\n  api_put_send_data__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF numBits_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl, t0);\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_AirVehicleState_i];\n  byte_array_default(SF t1, numBits_slang_embedded_CMASI_AirVehicleState_i, numBytes_slang_embedded_CMASI_AirVehicleState_i);\n  api_put_AirVehicleState_WPM__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF numBits_slang_embedded_CMASI_AirVehicleState_i, t1);\n\n  uint8_t t2[numBytes_slang_embedded_CMASI_AirVehicleState_i];\n  byte_array_default(SF t2, numBits_slang_embedded_CMASI_AirVehicleState_i, numBytes_slang_embedded_CMASI_AirVehicleState_i);\n  api_put_AirVehicleState_UXAS__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF numBits_slang_embedded_CMASI_AirVehicleState_i, t2);\n\n  api_logInfo__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_finalise_\", 0);\n}\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl];\n  size_t t0_numBits;\n  if(api_get_recv_data__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl, \"numBits received does not match expected\");\n\n    DeclNewString(recv_data_str);\n    String__append(SF (String) &recv_data_str, string(\"Received on recv_data: \"));\n    byte_array_string(SF (String) &recv_data_str, t0, numBytes_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl);\n    api_logInfo__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF (String) &recv_data_str);\n  }\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_MissionCommand_i];\n  size_t t1_numBits;\n  if(api_get_MissionCommand__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t1_numBits == numBits_slang_embedded_CMASI_MissionCommand_i, \"numBits received does not match expected\");\n\n    DeclNewString(MissionCommand_str);\n    String__append(SF (String) &MissionCommand_str, string(\"Received on MissionCommand: \"));\n    byte_array_string(SF (String) &MissionCommand_str, t1, numBytes_slang_embedded_CMASI_MissionCommand_i);\n    api_logInfo__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(SF (String) &MissionCommand_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef UARTDRIVER_IMPL_MCMP_PROC_SW_FC_UART_UARTDRIVER_API_H\n#define UARTDRIVER_IMPL_MCMP_PROC_SW_FC_UART_UARTDRIVER_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_recv_data__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_MissionCommand__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_send_data__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_AirVehicleState_WPM__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_AirVehicleState_UXAS__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.h>\n#include <UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_recv_data__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"api_get_recv_data__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_60131D = Option[slang_embedded.Drivers.UARTDriver_Impl_Operational_Api]\n  DeclNewslang_embedded_Drivers_UARTDriver_Impl_Operational_Api(api);\n  Option_60131D_get_(SF (slang_embedded_Drivers_UARTDriver_Impl_Operational_Api) &api, slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_Drivers_UARTDriver_Impl_Operational_Api_get_recv_data_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_MissionCommand__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"api_get_MissionCommand__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_60131D = Option[slang_embedded.Drivers.UARTDriver_Impl_Operational_Api]\n  DeclNewslang_embedded_Drivers_UARTDriver_Impl_Operational_Api(api);\n  Option_60131D_get_(SF (slang_embedded_Drivers_UARTDriver_Impl_Operational_Api) &api, slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_Drivers_UARTDriver_Impl_Operational_Api_get_MissionCommand_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_send_data__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"api_put_send_data__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_F78AC5 = Option[slang_embedded.Drivers.UARTDriver_Impl_Initialization_Api]\n  DeclNewslang_embedded_Drivers_UARTDriver_Impl_Initialization_Api(api);\n  Option_F78AC5_get_(SF (slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api) &api, slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api_put_send_data_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_AirVehicleState_WPM__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"api_put_AirVehicleState_WPM__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_F78AC5 = Option[slang_embedded.Drivers.UARTDriver_Impl_Initialization_Api]\n  DeclNewslang_embedded_Drivers_UARTDriver_Impl_Initialization_Api(api);\n  Option_F78AC5_get_(SF (slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api) &api, slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api_put_AirVehicleState_WPM_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_AirVehicleState_UXAS__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"api_put_AirVehicleState_UXAS__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_F78AC5 = Option[slang_embedded.Drivers.UARTDriver_Impl_Initialization_Api]\n  DeclNewslang_embedded_Drivers_UARTDriver_Impl_Initialization_Api(api);\n  Option_F78AC5_get_(SF (slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api) &api, slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api_put_AirVehicleState_UXAS_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_logInfo__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"api_logInfo__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\", 0);\n\n  \/\/ Option_F78AC5 = Option[slang_embedded.Drivers.UARTDriver_Impl_Initialization_Api]\n  DeclNewslang_embedded_Drivers_UARTDriver_Impl_Initialization_Api(api);\n  Option_F78AC5_get_(SF (slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api) &api, slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"api_logDebug__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\", 0);\n\n  \/\/ Option_F78AC5 = Option[slang_embedded.Drivers.UARTDriver_Impl_Initialization_Api]\n  DeclNewslang_embedded_Drivers_UARTDriver_Impl_Initialization_Api(api);\n  Option_F78AC5_get_(SF (slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api) &api, slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"api_logError__slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\", 0);\n\n  \/\/ Option_F78AC5 = Option[slang_embedded.Drivers.UARTDriver_Impl_Initialization_Api]\n  DeclNewslang_embedded_Drivers_UARTDriver_Impl_Initialization_Api(api);\n  Option_F78AC5_get_(SF (slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api) &api, slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_initialise(\n  STACK_FRAME\n  slang_embedded_Drivers_UARTDriver_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_initialise\", 0);\n\n  slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_finalise(\n  STACK_FRAME\n  slang_embedded_Drivers_UARTDriver_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_finalise\", 0);\n\n  slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_timeTriggered(\n  STACK_FRAME\n  slang_embedded_Drivers_UARTDriver_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_timeTriggered\", 0);\n\n  slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.h>\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_UARTDriver_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_UARTDriver_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_UARTDriver_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_entryPoints\", 0);\n\n  return slang_embedded_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_UARTDriver_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef UARTDRIVER_IMPL_MCMP_PROC_SW_FC_UART_UARTDRIVER_ADAPTER_H\n#define UARTDRIVER_IMPL_MCMP_PROC_SW_FC_UART_UARTDRIVER_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix\n\nobject RadioDriver_Attestation extends App {\n\n  val RadioDriver_AttestationBridge : slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge = {\n    val recv_data = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_recv_data\", mode = EventIn)\n    val send_data = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_send_data\", mode = EventOut)\n    val trusted_ids = Port[Base_Types.Bits] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_trusted_ids\", mode = EventOut)\n    val AutomationRequest = Port[Base_Types.Bits] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_AutomationRequest\", mode = EventOut)\n    val OperatingRegion = Port[Base_Types.Bits] (id = 4, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_OperatingRegion\", mode = EventOut)\n    val LineSearchTask = Port[Base_Types.Bits] (id = 5, name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_LineSearchTask\", mode = EventOut)\n\n    slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      recv_data = recv_data,\n      send_data = send_data,\n      trusted_ids = trusted_ids,\n      AutomationRequest = AutomationRequest,\n      OperatingRegion = OperatingRegion,\n      LineSearchTask = LineSearchTask\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = RadioDriver_AttestationBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ recv_data: In EventDataPort Base_Types.Bits\n  val recv_data_id: Art.PortId = RadioDriver_AttestationBridge.recv_data.id\n  var recv_data_port: Option[DataContent] = noData\n\n  \/\/ send_data: Out EventDataPort Base_Types.Bits\n  val send_data_id: Art.PortId = RadioDriver_AttestationBridge.send_data.id\n  var send_data_port: Option[DataContent] = noData\n\n  \/\/ trusted_ids: Out EventDataPort Base_Types.Bits\n  val trusted_ids_id: Art.PortId = RadioDriver_AttestationBridge.trusted_ids.id\n  var trusted_ids_port: Option[DataContent] = noData\n\n  \/\/ AutomationRequest: Out EventDataPort Base_Types.Bits\n  val AutomationRequest_id: Art.PortId = RadioDriver_AttestationBridge.AutomationRequest.id\n  var AutomationRequest_port: Option[DataContent] = noData\n\n  \/\/ OperatingRegion: Out EventDataPort Base_Types.Bits\n  val OperatingRegion_id: Art.PortId = RadioDriver_AttestationBridge.OperatingRegion.id\n  var OperatingRegion_port: Option[DataContent] = noData\n\n  \/\/ LineSearchTask: Out EventDataPort Base_Types.Bits\n  val LineSearchTask_id: Art.PortId = RadioDriver_AttestationBridge.LineSearchTask.id\n  var LineSearchTask_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == recv_data_id) {\n      return recv_data_port\n    } else {\n      halt(s\"Unexpected: RadioDriver_Attestation.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    recv_data_port = RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix.recv_data_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == send_data_id) {\n      send_data_port = Some(data)\n    } else if(portId == trusted_ids_id) {\n      trusted_ids_port = Some(data)\n    } else if(portId == AutomationRequest_id) {\n      AutomationRequest_port = Some(data)\n    } else if(portId == OperatingRegion_id) {\n      OperatingRegion_port = Some(data)\n    } else if(portId == LineSearchTask_id) {\n      LineSearchTask_port = Some(data)\n    } else {\n      halt(s\"Unexpected: RadioDriver_Attestation.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(send_data_port.nonEmpty) {\n      RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix.send_data_Send(send_data_port.get)\n      send_data_port = noData\n    }\n\n    if(trusted_ids_port.nonEmpty) {\n      RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix.trusted_ids_Send(trusted_ids_port.get)\n      trusted_ids_port = noData\n    }\n\n    if(AutomationRequest_port.nonEmpty) {\n      RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix.AutomationRequest_Send(AutomationRequest_port.get)\n      AutomationRequest_port = noData\n    }\n\n    if(OperatingRegion_port.nonEmpty) {\n      RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix.OperatingRegion_Send(OperatingRegion_port.get)\n      OperatingRegion_port = noData\n    }\n\n    if(LineSearchTask_port.nonEmpty) {\n      RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix.LineSearchTask_Send(LineSearchTask_port.get)\n      LineSearchTask_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (RadioDriver_AttestationBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_recv_data: Option[Base_Types.Bits] = slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.get_recv_data()\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api.get.put_send_data(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.put_send_data(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api.get.put_trusted_ids(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.put_trusted_ids(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api.get.put_AutomationRequest(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.put_AutomationRequest(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api.get.put_OperatingRegion(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.put_OperatingRegion(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_initialization_api.get.put_LineSearchTask(Base_Types.Bits_example())\n      slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge.c_operational_api.get.put_LineSearchTask(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\n@ext object RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix {\n  \/\/ returns T if seL4's recv_data port is empty, F otherwise \n  def recv_data_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's recv_data port \n  def recv_data_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's send_data port\n  def send_data_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's trusted_ids port\n  def trusted_ids_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's AutomationRequest port\n  def AutomationRequest_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's OperatingRegion port\n  def OperatingRegion_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's LineSearchTask port\n  def LineSearchTask_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\nobject RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_seL4Nix_Ext {\n  def recv_data_IsEmpty(): B = halt(\"stub\")\n\n  def recv_data_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def send_data_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def trusted_ids_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def AutomationRequest_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def OperatingRegion_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def LineSearchTask_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef RADIODRIVER_ATTESTATION_THR_IMPL_MCMP_PROC_SW_RADIO_RADIODRIVER_ATTESTATION_H\n#define RADIODRIVER_ATTESTATION_THR_IMPL_MCMP_PROC_SW_RADIO_RADIODRIVER_ATTESTATION_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.c",
        {
          "type" : "TestResource",
          "content" : "#include <RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.h>\n#include <RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl];\n  byte_array_default(SF t0, numBits_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl, numBytes_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl);\n  api_put_send_data__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF numBits_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl, t0);\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_AddressArray_i];\n  byte_array_default(SF t1, numBits_slang_embedded_CMASI_AddressArray_i, numBytes_slang_embedded_CMASI_AddressArray_i);\n  api_put_trusted_ids__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF numBits_slang_embedded_CMASI_AddressArray_i, t1);\n\n  uint8_t t2[numBytes_slang_embedded_CMASI_AddressAttributedMessage_i];\n  byte_array_default(SF t2, numBits_slang_embedded_CMASI_AddressAttributedMessage_i, numBytes_slang_embedded_CMASI_AddressAttributedMessage_i);\n  api_put_AutomationRequest__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF numBits_slang_embedded_CMASI_AddressAttributedMessage_i, t2);\n\n  uint8_t t3[numBytes_slang_embedded_CMASI_AddressAttributedMessage_i];\n  byte_array_default(SF t3, numBits_slang_embedded_CMASI_AddressAttributedMessage_i, numBytes_slang_embedded_CMASI_AddressAttributedMessage_i);\n  api_put_OperatingRegion__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF numBits_slang_embedded_CMASI_AddressAttributedMessage_i, t3);\n\n  uint8_t t4[numBytes_slang_embedded_CMASI_AddressAttributedMessage_i];\n  byte_array_default(SF t4, numBits_slang_embedded_CMASI_AddressAttributedMessage_i, numBytes_slang_embedded_CMASI_AddressAttributedMessage_i);\n  api_put_LineSearchTask__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF numBits_slang_embedded_CMASI_AddressAttributedMessage_i, t4);\n\n  api_logInfo__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_finalise_\", 0);\n}\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl];\n  size_t t0_numBits;\n  if(api_get_recv_data__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl, \"numBits received does not match expected\");\n\n    DeclNewString(recv_data_str);\n    String__append(SF (String) &recv_data_str, string(\"Received on recv_data: \"));\n    byte_array_string(SF (String) &recv_data_str, t0, numBytes_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl);\n    api_logInfo__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(SF (String) &recv_data_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef RADIODRIVER_ATTESTATION_THR_IMPL_MCMP_PROC_SW_RADIO_RADIODRIVER_ATTESTATION_API_H\n#define RADIODRIVER_ATTESTATION_THR_IMPL_MCMP_PROC_SW_RADIO_RADIODRIVER_ATTESTATION_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_recv_data__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_send_data__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_trusted_ids__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_AutomationRequest__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_OperatingRegion__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_LineSearchTask__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.h>\n#include <RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_recv_data__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_get_recv_data__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_D79BDC = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Operational_Api(api);\n  Option_D79BDC_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Operational_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Operational_Api_get_recv_data_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_send_data__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_put_send_data__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_ECEC5E = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api(api);\n  Option_ECEC5E_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api_put_send_data_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_trusted_ids__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_put_trusted_ids__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_ECEC5E = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api(api);\n  Option_ECEC5E_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api_put_trusted_ids_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_AutomationRequest__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_put_AutomationRequest__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_ECEC5E = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api(api);\n  Option_ECEC5E_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api_put_AutomationRequest_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_OperatingRegion__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_put_OperatingRegion__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_ECEC5E = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api(api);\n  Option_ECEC5E_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api_put_OperatingRegion_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_LineSearchTask__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_put_LineSearchTask__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_ECEC5E = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api(api);\n  Option_ECEC5E_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api_put_LineSearchTask_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_logInfo__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_logInfo__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  \/\/ Option_ECEC5E = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api(api);\n  Option_ECEC5E_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_logDebug__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  \/\/ Option_ECEC5E = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api(api);\n  Option_ECEC5E_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"api_logError__slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\", 0);\n\n  \/\/ Option_ECEC5E = Option[slang_embedded.SW.RadioDriver_Attestation_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api(api);\n  Option_ECEC5E_get_(SF (slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api) &api, slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_initialise(\n  STACK_FRAME\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_initialise\", 0);\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_finalise(\n  STACK_FRAME\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_finalise\", 0);\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_timeTriggered(\n  STACK_FRAME\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_timeTriggered\", 0);\n\n  slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.h>\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_RadioDriver_Attestation_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_RadioDriver_Attestation_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_RadioDriver_Attestation_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.c\", \"\", \"slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_entryPoints\", 0);\n\n  return slang_embedded_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_RadioDriver_Attestation_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef RADIODRIVER_ATTESTATION_THR_IMPL_MCMP_PROC_SW_RADIO_RADIODRIVER_ATTESTATION_ADAPTER_H\n#define RADIODRIVER_ATTESTATION_THR_IMPL_MCMP_PROC_SW_RADIO_RADIODRIVER_ATTESTATION_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SW_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix\n\nobject FlyZonesDatabase extends App {\n\n  val FlyZonesDatabaseBridge : slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge = {\n    val keep_in_zones = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_keep_in_zones\", mode = DataOut)\n    val keep_out_zones = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_keep_out_zones\", mode = DataOut)\n\n    slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      keep_in_zones = keep_in_zones,\n      keep_out_zones = keep_out_zones\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = FlyZonesDatabaseBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ keep_in_zones: Out DataPort Base_Types.Bits\n  val keep_in_zones_id: Art.PortId = FlyZonesDatabaseBridge.keep_in_zones.id\n  var keep_in_zones_port: Option[DataContent] = noData\n\n  \/\/ keep_out_zones: Out DataPort Base_Types.Bits\n  val keep_out_zones_id: Art.PortId = FlyZonesDatabaseBridge.keep_out_zones.id\n  var keep_out_zones_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    halt(s\"Unexpected: FlyZonesDatabase.getValue called with: ${portId}\")\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == keep_in_zones_id) {\n      keep_in_zones_port = Some(data)\n    } else if(portId == keep_out_zones_id) {\n      keep_out_zones_port = Some(data)\n    } else {\n      halt(s\"Unexpected: FlyZonesDatabase.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(keep_in_zones_port.nonEmpty) {\n      FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix.keep_in_zones_Send(keep_in_zones_port.get)\n      keep_in_zones_port = noData\n    }\n\n    if(keep_out_zones_port.nonEmpty) {\n      FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix.keep_out_zones_Send(keep_out_zones_port.get)\n      keep_out_zones_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (FlyZonesDatabaseBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_operational_api.get.logError(\"\")\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_initialization_api.get.put_keep_in_zones(Base_Types.Bits_example())\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_operational_api.get.put_keep_in_zones(Base_Types.Bits_example())\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_initialization_api.get.put_keep_out_zones(Base_Types.Bits_example())\n      slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge.c_operational_api.get.put_keep_out_zones(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\n@ext object FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix {\n  \/\/ send payload 'd' to components connected to seL4's keep_in_zones port\n  def keep_in_zones_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's keep_out_zones port\n  def keep_out_zones_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\nobject FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix_Ext {\n  def keep_in_zones_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def keep_out_zones_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef FLYZONESDATABASE_THR_IMPL_MCMP_PROC_SW_FLYZONES_FLYZONESDATABASE_H\n#define FLYZONESDATABASE_THR_IMPL_MCMP_PROC_SW_FLYZONES_FLYZONESDATABASE_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.c",
        {
          "type" : "TestResource",
          "content" : "#include <FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.h>\n#include <FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_Polygon_i];\n  byte_array_default(SF t0, numBits_slang_embedded_CMASI_Polygon_i, numBytes_slang_embedded_CMASI_Polygon_i);\n  api_put_keep_in_zones__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(SF numBits_slang_embedded_CMASI_Polygon_i, t0);\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_Polygon_i];\n  byte_array_default(SF t1, numBits_slang_embedded_CMASI_Polygon_i, numBytes_slang_embedded_CMASI_Polygon_i);\n  api_put_keep_out_zones__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(SF numBits_slang_embedded_CMASI_Polygon_i, t1);\n\n  api_logInfo__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_finalise_\", 0);\n}\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_timeTriggered_\", 0);\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef FLYZONESDATABASE_THR_IMPL_MCMP_PROC_SW_FLYZONES_FLYZONESDATABASE_API_H\n#define FLYZONESDATABASE_THR_IMPL_MCMP_PROC_SW_FLYZONES_FLYZONESDATABASE_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nvoid api_put_keep_in_zones__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_keep_out_zones__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.h>\n#include <FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nvoid api_put_keep_in_zones__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c\", \"\", \"api_put_keep_in_zones__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_C361AD = Option[slang_embedded.SW.FlyZonesDatabase_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api(api);\n  Option_C361AD_get_(SF (slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api) &api, slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api_put_keep_in_zones_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_keep_out_zones__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c\", \"\", \"api_put_keep_out_zones__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_C361AD = Option[slang_embedded.SW.FlyZonesDatabase_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api(api);\n  Option_C361AD_get_(SF (slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api) &api, slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api_put_keep_out_zones_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_logInfo__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c\", \"\", \"api_logInfo__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\", 0);\n\n  \/\/ Option_C361AD = Option[slang_embedded.SW.FlyZonesDatabase_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api(api);\n  Option_C361AD_get_(SF (slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api) &api, slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c\", \"\", \"api_logDebug__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\", 0);\n\n  \/\/ Option_C361AD = Option[slang_embedded.SW.FlyZonesDatabase_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api(api);\n  Option_C361AD_get_(SF (slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api) &api, slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c\", \"\", \"api_logError__slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\", 0);\n\n  \/\/ Option_C361AD = Option[slang_embedded.SW.FlyZonesDatabase_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api(api);\n  Option_C361AD_get_(SF (slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api) &api, slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_initialise(\n  STACK_FRAME\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_initialise\", 0);\n\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_finalise(\n  STACK_FRAME\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_finalise\", 0);\n\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_timeTriggered(\n  STACK_FRAME\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_timeTriggered\", 0);\n\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.h>\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_FlyZonesDatabase_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_FlyZonesDatabase_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_FlyZonesDatabase_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_entryPoints\", 0);\n\n  return slang_embedded_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_FlyZonesDatabase_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef FLYZONESDATABASE_THR_IMPL_MCMP_PROC_SW_FLYZONES_FLYZONESDATABASE_ADAPTER_H\n#define FLYZONESDATABASE_THR_IMPL_MCMP_PROC_SW_FLYZONES_FLYZONESDATABASE_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix\n\nobject UxAS extends App {\n\n  val UxASBridge : slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge = {\n    val AutomationRequest = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_AutomationRequest\", mode = EventIn)\n    val AirVehicleState = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_AirVehicleState\", mode = EventIn)\n    val OperatingRegion = Port[Base_Types.Bits] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_OperatingRegion\", mode = EventIn)\n    val LineSearchTask = Port[Base_Types.Bits] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_LineSearchTask\", mode = EventIn)\n    val AutomationResponse_MON_GEO = Port[Base_Types.Bits] (id = 4, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_AutomationResponse_MON_GEO\", mode = EventOut)\n    val AutomationResponse_MON_REQ = Port[Base_Types.Bits] (id = 5, name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS_AutomationResponse_MON_REQ\", mode = EventOut)\n\n    slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_UXAS_UxAS\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      AutomationRequest = AutomationRequest,\n      AirVehicleState = AirVehicleState,\n      OperatingRegion = OperatingRegion,\n      LineSearchTask = LineSearchTask,\n      AutomationResponse_MON_GEO = AutomationResponse_MON_GEO,\n      AutomationResponse_MON_REQ = AutomationResponse_MON_REQ\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = UxASBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ AutomationRequest: In EventDataPort Base_Types.Bits\n  val AutomationRequest_id: Art.PortId = UxASBridge.AutomationRequest.id\n  var AutomationRequest_port: Option[DataContent] = noData\n\n  \/\/ AirVehicleState: In EventDataPort Base_Types.Bits\n  val AirVehicleState_id: Art.PortId = UxASBridge.AirVehicleState.id\n  var AirVehicleState_port: Option[DataContent] = noData\n\n  \/\/ OperatingRegion: In EventDataPort Base_Types.Bits\n  val OperatingRegion_id: Art.PortId = UxASBridge.OperatingRegion.id\n  var OperatingRegion_port: Option[DataContent] = noData\n\n  \/\/ LineSearchTask: In EventDataPort Base_Types.Bits\n  val LineSearchTask_id: Art.PortId = UxASBridge.LineSearchTask.id\n  var LineSearchTask_port: Option[DataContent] = noData\n\n  \/\/ AutomationResponse_MON_GEO: Out EventDataPort Base_Types.Bits\n  val AutomationResponse_MON_GEO_id: Art.PortId = UxASBridge.AutomationResponse_MON_GEO.id\n  var AutomationResponse_MON_GEO_port: Option[DataContent] = noData\n\n  \/\/ AutomationResponse_MON_REQ: Out EventDataPort Base_Types.Bits\n  val AutomationResponse_MON_REQ_id: Art.PortId = UxASBridge.AutomationResponse_MON_REQ.id\n  var AutomationResponse_MON_REQ_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == AutomationRequest_id) {\n      return AutomationRequest_port\n    } else if(portId == AirVehicleState_id) {\n      return AirVehicleState_port\n    } else if(portId == OperatingRegion_id) {\n      return OperatingRegion_port\n    } else if(portId == LineSearchTask_id) {\n      return LineSearchTask_port\n    } else {\n      halt(s\"Unexpected: UxAS.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    AutomationRequest_port = UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix.AutomationRequest_Receive()\n\n    AirVehicleState_port = UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix.AirVehicleState_Receive()\n\n    OperatingRegion_port = UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix.OperatingRegion_Receive()\n\n    LineSearchTask_port = UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix.LineSearchTask_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == AutomationResponse_MON_GEO_id) {\n      AutomationResponse_MON_GEO_port = Some(data)\n    } else if(portId == AutomationResponse_MON_REQ_id) {\n      AutomationResponse_MON_REQ_port = Some(data)\n    } else {\n      halt(s\"Unexpected: UxAS.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(AutomationResponse_MON_GEO_port.nonEmpty) {\n      UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix.AutomationResponse_MON_GEO_Send(AutomationResponse_MON_GEO_port.get)\n      AutomationResponse_MON_GEO_port = noData\n    }\n\n    if(AutomationResponse_MON_REQ_port.nonEmpty) {\n      UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix.AutomationResponse_MON_REQ_Send(AutomationResponse_MON_REQ_port.get)\n      AutomationResponse_MON_REQ_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (UxASBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_AutomationRequest: Option[Base_Types.Bits] = slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.get_AutomationRequest()\n      val apiUsage_AirVehicleState: Option[Base_Types.Bits] = slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.get_AirVehicleState()\n      val apiUsage_OperatingRegion: Option[Base_Types.Bits] = slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.get_OperatingRegion()\n      val apiUsage_LineSearchTask: Option[Base_Types.Bits] = slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.get_LineSearchTask()\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_initialization_api.get.put_AutomationResponse_MON_GEO(Base_Types.Bits_example())\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.put_AutomationResponse_MON_GEO(Base_Types.Bits_example())\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_initialization_api.get.put_AutomationResponse_MON_REQ(Base_Types.Bits_example())\n      slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge.c_operational_api.get.put_AutomationResponse_MON_REQ(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\n@ext object UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix {\n  \/\/ returns T if seL4's AutomationRequest port is empty, F otherwise \n  def AutomationRequest_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AutomationRequest port \n  def AutomationRequest_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's AirVehicleState port is empty, F otherwise \n  def AirVehicleState_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AirVehicleState port \n  def AirVehicleState_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's OperatingRegion port is empty, F otherwise \n  def OperatingRegion_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's OperatingRegion port \n  def OperatingRegion_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's LineSearchTask port is empty, F otherwise \n  def LineSearchTask_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's LineSearchTask port \n  def LineSearchTask_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's AutomationResponse_MON_GEO port\n  def AutomationResponse_MON_GEO_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's AutomationResponse_MON_REQ port\n  def AutomationResponse_MON_REQ_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\nobject UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_seL4Nix_Ext {\n  def AutomationRequest_IsEmpty(): B = halt(\"stub\")\n\n  def AutomationRequest_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def AirVehicleState_IsEmpty(): B = halt(\"stub\")\n\n  def AirVehicleState_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def OperatingRegion_IsEmpty(): B = halt(\"stub\")\n\n  def OperatingRegion_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def LineSearchTask_IsEmpty(): B = halt(\"stub\")\n\n  def LineSearchTask_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def AutomationResponse_MON_GEO_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def AutomationResponse_MON_REQ_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef UXAS_THR_IMPL_MCMP_PROC_SW_UXAS_UXAS_H\n#define UXAS_THR_IMPL_MCMP_PROC_SW_UXAS_UXAS_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.c",
        {
          "type" : "TestResource",
          "content" : "#include <UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.h>\n#include <UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_AutomationResponse_i];\n  byte_array_default(SF t0, numBits_slang_embedded_CMASI_AutomationResponse_i, numBytes_slang_embedded_CMASI_AutomationResponse_i);\n  api_put_AutomationResponse_MON_GEO__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF numBits_slang_embedded_CMASI_AutomationResponse_i, t0);\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_AutomationResponse_i];\n  byte_array_default(SF t1, numBits_slang_embedded_CMASI_AutomationResponse_i, numBytes_slang_embedded_CMASI_AutomationResponse_i);\n  api_put_AutomationResponse_MON_REQ__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF numBits_slang_embedded_CMASI_AutomationResponse_i, t1);\n\n  api_logInfo__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_finalise_\", 0);\n}\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_AutomationRequest_i];\n  size_t t0_numBits;\n  if(api_get_AutomationRequest__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_slang_embedded_CMASI_AutomationRequest_i, \"numBits received does not match expected\");\n\n    DeclNewString(AutomationRequest_str);\n    String__append(SF (String) &AutomationRequest_str, string(\"Received on AutomationRequest: \"));\n    byte_array_string(SF (String) &AutomationRequest_str, t0, numBytes_slang_embedded_CMASI_AutomationRequest_i);\n    api_logInfo__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF (String) &AutomationRequest_str);\n  }\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_AirVehicleState_i];\n  size_t t1_numBits;\n  if(api_get_AirVehicleState__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t1_numBits == numBits_slang_embedded_CMASI_AirVehicleState_i, \"numBits received does not match expected\");\n\n    DeclNewString(AirVehicleState_str);\n    String__append(SF (String) &AirVehicleState_str, string(\"Received on AirVehicleState: \"));\n    byte_array_string(SF (String) &AirVehicleState_str, t1, numBytes_slang_embedded_CMASI_AirVehicleState_i);\n    api_logInfo__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF (String) &AirVehicleState_str);\n  }\n\n  uint8_t t2[numBytes_slang_embedded_CMASI_OperatingRegion_i];\n  size_t t2_numBits;\n  if(api_get_OperatingRegion__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF &t2_numBits, t2)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t2_numBits == numBits_slang_embedded_CMASI_OperatingRegion_i, \"numBits received does not match expected\");\n\n    DeclNewString(OperatingRegion_str);\n    String__append(SF (String) &OperatingRegion_str, string(\"Received on OperatingRegion: \"));\n    byte_array_string(SF (String) &OperatingRegion_str, t2, numBytes_slang_embedded_CMASI_OperatingRegion_i);\n    api_logInfo__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF (String) &OperatingRegion_str);\n  }\n\n  uint8_t t3[numBytes_slang_embedded_CMASI_LineSearchTask_i];\n  size_t t3_numBits;\n  if(api_get_LineSearchTask__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF &t3_numBits, t3)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t3_numBits == numBits_slang_embedded_CMASI_LineSearchTask_i, \"numBits received does not match expected\");\n\n    DeclNewString(LineSearchTask_str);\n    String__append(SF (String) &LineSearchTask_str, string(\"Received on LineSearchTask: \"));\n    byte_array_string(SF (String) &LineSearchTask_str, t3, numBytes_slang_embedded_CMASI_LineSearchTask_i);\n    api_logInfo__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(SF (String) &LineSearchTask_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef UXAS_THR_IMPL_MCMP_PROC_SW_UXAS_UXAS_API_H\n#define UXAS_THR_IMPL_MCMP_PROC_SW_UXAS_UXAS_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_AutomationRequest__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_AirVehicleState__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_OperatingRegion__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_LineSearchTask__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_AutomationResponse_MON_GEO__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_AutomationResponse_MON_REQ__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.h>\n#include <UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_AutomationRequest__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_get_AutomationRequest__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_D0D884 = Option[slang_embedded.SW.UxAS_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Operational_Api(api);\n  Option_D0D884_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Operational_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Operational_Api_get_AutomationRequest_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_AirVehicleState__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_get_AirVehicleState__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_D0D884 = Option[slang_embedded.SW.UxAS_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Operational_Api(api);\n  Option_D0D884_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Operational_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Operational_Api_get_AirVehicleState_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_OperatingRegion__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_get_OperatingRegion__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_D0D884 = Option[slang_embedded.SW.UxAS_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Operational_Api(api);\n  Option_D0D884_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Operational_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Operational_Api_get_OperatingRegion_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_LineSearchTask__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_get_LineSearchTask__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_D0D884 = Option[slang_embedded.SW.UxAS_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Operational_Api(api);\n  Option_D0D884_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Operational_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Operational_Api_get_LineSearchTask_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_AutomationResponse_MON_GEO__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_put_AutomationResponse_MON_GEO__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_3DF22F = Option[slang_embedded.SW.UxAS_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Initialization_Api(api);\n  Option_3DF22F_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Initialization_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Initialization_Api_put_AutomationResponse_MON_GEO_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_AutomationResponse_MON_REQ__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_put_AutomationResponse_MON_REQ__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_3DF22F = Option[slang_embedded.SW.UxAS_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Initialization_Api(api);\n  Option_3DF22F_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Initialization_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Initialization_Api_put_AutomationResponse_MON_REQ_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_logInfo__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_logInfo__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  \/\/ Option_3DF22F = Option[slang_embedded.SW.UxAS_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Initialization_Api(api);\n  Option_3DF22F_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Initialization_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_logDebug__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  \/\/ Option_3DF22F = Option[slang_embedded.SW.UxAS_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Initialization_Api(api);\n  Option_3DF22F_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Initialization_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"api_logError__slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\", 0);\n\n  \/\/ Option_3DF22F = Option[slang_embedded.SW.UxAS_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_UxAS_thr_Impl_Initialization_Api(api);\n  Option_3DF22F_get_(SF (slang_embedded_SW_UxAS_thr_Impl_Initialization_Api) &api, slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_UxAS_thr_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_initialise(\n  STACK_FRAME\n  slang_embedded_SW_UxAS_thr_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_initialise\", 0);\n\n  slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_finalise(\n  STACK_FRAME\n  slang_embedded_SW_UxAS_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_finalise\", 0);\n\n  slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_timeTriggered(\n  STACK_FRAME\n  slang_embedded_SW_UxAS_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_timeTriggered\", 0);\n\n  slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.h>\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_UxAS_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_UxAS_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_UxAS_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.c\", \"\", \"slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_entryPoints\", 0);\n\n  return slang_embedded_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_UxAS_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef UXAS_THR_IMPL_MCMP_PROC_SW_UXAS_UXAS_ADAPTER_H\n#define UXAS_THR_IMPL_MCMP_PROC_SW_UXAS_UXAS_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SW_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix\n\nobject WaypointPlanManagerService extends App {\n\n  val WaypointPlanManagerServiceBridge : slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge = {\n    val AutomationResponse = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService_AutomationResponse\", mode = EventIn)\n    val AirVehicleState = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService_AirVehicleState\", mode = EventIn)\n    val MissionCommand = Port[Base_Types.Bits] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService_MissionCommand\", mode = EventOut)\n    val ReturnHome = Port[art.Empty] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService_ReturnHome\", mode = EventIn)\n\n    slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_WPM_WaypointPlanManagerService\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      AutomationResponse = AutomationResponse,\n      AirVehicleState = AirVehicleState,\n      MissionCommand = MissionCommand,\n      ReturnHome = ReturnHome\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = WaypointPlanManagerServiceBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ AutomationResponse: In EventDataPort Base_Types.Bits\n  val AutomationResponse_id: Art.PortId = WaypointPlanManagerServiceBridge.AutomationResponse.id\n  var AutomationResponse_port: Option[DataContent] = noData\n\n  \/\/ AirVehicleState: In EventDataPort Base_Types.Bits\n  val AirVehicleState_id: Art.PortId = WaypointPlanManagerServiceBridge.AirVehicleState.id\n  var AirVehicleState_port: Option[DataContent] = noData\n\n  \/\/ MissionCommand: Out EventDataPort Base_Types.Bits\n  val MissionCommand_id: Art.PortId = WaypointPlanManagerServiceBridge.MissionCommand.id\n  var MissionCommand_port: Option[DataContent] = noData\n\n  \/\/ ReturnHome: In EventPort art.Empty\n  val ReturnHome_id: Art.PortId = WaypointPlanManagerServiceBridge.ReturnHome.id\n  var ReturnHome_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == AutomationResponse_id) {\n      return AutomationResponse_port\n    } else if(portId == AirVehicleState_id) {\n      return AirVehicleState_port\n    } else if(portId == ReturnHome_id) {\n      return ReturnHome_port\n    } else {\n      halt(s\"Unexpected: WaypointPlanManagerService.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    AutomationResponse_port = WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix.AutomationResponse_Receive()\n\n    AirVehicleState_port = WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix.AirVehicleState_Receive()\n\n    ReturnHome_port = WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix.ReturnHome_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == MissionCommand_id) {\n      MissionCommand_port = Some(data)\n    } else {\n      halt(s\"Unexpected: WaypointPlanManagerService.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(MissionCommand_port.nonEmpty) {\n      WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix.MissionCommand_Send(MissionCommand_port.get)\n      MissionCommand_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (WaypointPlanManagerServiceBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_AutomationResponse: Option[Base_Types.Bits] = slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_operational_api.get.get_AutomationResponse()\n      val apiUsage_AirVehicleState: Option[Base_Types.Bits] = slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_operational_api.get.get_AirVehicleState()\n      slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_initialization_api.get.put_MissionCommand(Base_Types.Bits_example())\n      slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_operational_api.get.put_MissionCommand(Base_Types.Bits_example())\n      val apiUsage_ReturnHome: Option[art.Empty] = slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge.c_operational_api.get.get_ReturnHome()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\n@ext object WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix {\n  \/\/ returns T if seL4's AutomationResponse port is empty, F otherwise \n  def AutomationResponse_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AutomationResponse port \n  def AutomationResponse_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's AirVehicleState port is empty, F otherwise \n  def AirVehicleState_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AirVehicleState port \n  def AirVehicleState_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's MissionCommand port\n  def MissionCommand_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's ReturnHome port is empty, F otherwise \n  def ReturnHome_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's ReturnHome port \n  def ReturnHome_Receive(): Option[DataContent] = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\nobject WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_Ext {\n  def AutomationResponse_IsEmpty(): B = halt(\"stub\")\n\n  def AutomationResponse_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def AirVehicleState_IsEmpty(): B = halt(\"stub\")\n\n  def AirVehicleState_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def MissionCommand_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def ReturnHome_IsEmpty(): B = halt(\"stub\")\n\n  def ReturnHome_Receive(): Option[DataContent] = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef WAYPOINTPLANMANAGERSERVICE_THR_IMPL_MCMP_PROC_SW_WPM_WAYPOINTPLANMANAGERSERVICE_H\n#define WAYPOINTPLANMANAGERSERVICE_THR_IMPL_MCMP_PROC_SW_WPM_WAYPOINTPLANMANAGERSERVICE_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.c",
        {
          "type" : "TestResource",
          "content" : "#include <WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.h>\n#include <WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_MissionCommand_i];\n  byte_array_default(SF t0, numBits_slang_embedded_CMASI_MissionCommand_i, numBytes_slang_embedded_CMASI_MissionCommand_i);\n  api_put_MissionCommand__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF numBits_slang_embedded_CMASI_MissionCommand_i, t0);\n\n  api_logInfo__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_finalise_\", 0);\n}\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_AutomationResponse_i];\n  size_t t0_numBits;\n  if(api_get_AutomationResponse__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_slang_embedded_CMASI_AutomationResponse_i, \"numBits received does not match expected\");\n\n    DeclNewString(AutomationResponse_str);\n    String__append(SF (String) &AutomationResponse_str, string(\"Received on AutomationResponse: \"));\n    byte_array_string(SF (String) &AutomationResponse_str, t0, numBytes_slang_embedded_CMASI_AutomationResponse_i);\n    api_logInfo__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF (String) &AutomationResponse_str);\n  }\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_AirVehicleState_i];\n  size_t t1_numBits;\n  if(api_get_AirVehicleState__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t1_numBits == numBits_slang_embedded_CMASI_AirVehicleState_i, \"numBits received does not match expected\");\n\n    DeclNewString(AirVehicleState_str);\n    String__append(SF (String) &AirVehicleState_str, string(\"Received on AirVehicleState: \"));\n    byte_array_string(SF (String) &AirVehicleState_str, t1, numBytes_slang_embedded_CMASI_AirVehicleState_i);\n    api_logInfo__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF (String) &AirVehicleState_str);\n  }\n\n  if(api_get_ReturnHome__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF_LAST )){\n    String ReturnHome_str = string(\"Received event on ReturnHome\");\n    api_logInfo__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(SF ReturnHome_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef WAYPOINTPLANMANAGERSERVICE_THR_IMPL_MCMP_PROC_SW_WPM_WAYPOINTPLANMANAGERSERVICE_API_H\n#define WAYPOINTPLANMANAGERSERVICE_THR_IMPL_MCMP_PROC_SW_WPM_WAYPOINTPLANMANAGERSERVICE_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_AutomationResponse__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_AirVehicleState__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_MissionCommand__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_ReturnHome__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(STACK_FRAME_ONLY);\n\nvoid api_logInfo__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.h>\n#include <WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_AutomationResponse__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"api_get_AutomationResponse__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_5E8A0F = Option[slang_embedded.SW.WaypointPlanManagerService_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api(api);\n  Option_5E8A0F_get_(SF (slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api) &api, slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api_get_AutomationResponse_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_AirVehicleState__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"api_get_AirVehicleState__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_5E8A0F = Option[slang_embedded.SW.WaypointPlanManagerService_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api(api);\n  Option_5E8A0F_get_(SF (slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api) &api, slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api_get_AirVehicleState_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_MissionCommand__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"api_put_MissionCommand__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_14DE95 = Option[slang_embedded.SW.WaypointPlanManagerService_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api(api);\n  Option_14DE95_get_(SF (slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api) &api, slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api_put_MissionCommand_(\n    SF\n    &api,\n    &t_0);\n}\n\nbool api_get_ReturnHome__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(STACK_FRAME_ONLY){\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"api_get_ReturnHome__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\", 0);\n\n  \/\/ Option_5E8A0F = Option[slang_embedded.SW.WaypointPlanManagerService_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api(api);\n  Option_5E8A0F_get_(SF (slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api) &api, slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge_c_operational_api(SF_LAST));\n\n  \/\/ Option_C622DB = Option[art.Empty]\n  \/\/ Some_4782C6 = Some[art.Empty]\n  DeclNewOption_C622DB(t_0);\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api_get_ReturnHome_(\n    SF\n    (Option_C622DB) &t_0,\n    &api);\n\n  if(t_0.type == TSome_4782C6){\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_logInfo__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"api_logInfo__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\", 0);\n\n  \/\/ Option_14DE95 = Option[slang_embedded.SW.WaypointPlanManagerService_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api(api);\n  Option_14DE95_get_(SF (slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api) &api, slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"api_logDebug__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\", 0);\n\n  \/\/ Option_14DE95 = Option[slang_embedded.SW.WaypointPlanManagerService_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api(api);\n  Option_14DE95_get_(SF (slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api) &api, slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"api_logError__slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\", 0);\n\n  \/\/ Option_14DE95 = Option[slang_embedded.SW.WaypointPlanManagerService_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api(api);\n  Option_14DE95_get_(SF (slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api) &api, slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_initialise(\n  STACK_FRAME\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_initialise\", 0);\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_finalise(\n  STACK_FRAME\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_finalise\", 0);\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_timeTriggered(\n  STACK_FRAME\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_timeTriggered\", 0);\n\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.h>\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_WaypointPlanManagerService_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_WaypointPlanManagerService_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_WaypointPlanManagerService_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_entryPoints\", 0);\n\n  return slang_embedded_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_WaypointPlanManagerService_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef WAYPOINTPLANMANAGERSERVICE_THR_IMPL_MCMP_PROC_SW_WPM_WAYPOINTPLANMANAGERSERVICE_ADAPTER_H\n#define WAYPOINTPLANMANAGERSERVICE_THR_IMPL_MCMP_PROC_SW_WPM_WAYPOINTPLANMANAGERSERVICE_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix\n\nobject CASE_AttestationGate extends App {\n\n  val CASE_AttestationGateBridge : slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge = {\n    val trusted_ids = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_trusted_ids\", mode = EventIn)\n    val AutomationRequest_in = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_AutomationRequest_in\", mode = EventIn)\n    val AutomationRequest_out_UXAS = Port[Base_Types.Bits] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_AutomationRequest_out_UXAS\", mode = EventOut)\n    val AutomationRequest_out_MON_REQ = Port[Base_Types.Bits] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_AutomationRequest_out_MON_REQ\", mode = EventOut)\n    val OperatingRegion_in = Port[Base_Types.Bits] (id = 4, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_OperatingRegion_in\", mode = EventIn)\n    val OperatingRegion_out = Port[Base_Types.Bits] (id = 5, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_OperatingRegion_out\", mode = EventOut)\n    val LineSearchTask_in = Port[Base_Types.Bits] (id = 6, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_LineSearchTask_in\", mode = EventIn)\n    val LineSearchTask_out = Port[Base_Types.Bits] (id = 7, name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_LineSearchTask_out\", mode = EventOut)\n\n    slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      trusted_ids = trusted_ids,\n      AutomationRequest_in = AutomationRequest_in,\n      AutomationRequest_out_UXAS = AutomationRequest_out_UXAS,\n      AutomationRequest_out_MON_REQ = AutomationRequest_out_MON_REQ,\n      OperatingRegion_in = OperatingRegion_in,\n      OperatingRegion_out = OperatingRegion_out,\n      LineSearchTask_in = LineSearchTask_in,\n      LineSearchTask_out = LineSearchTask_out\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_AttestationGateBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ trusted_ids: In EventDataPort Base_Types.Bits\n  val trusted_ids_id: Art.PortId = CASE_AttestationGateBridge.trusted_ids.id\n  var trusted_ids_port: Option[DataContent] = noData\n\n  \/\/ AutomationRequest_in: In EventDataPort Base_Types.Bits\n  val AutomationRequest_in_id: Art.PortId = CASE_AttestationGateBridge.AutomationRequest_in.id\n  var AutomationRequest_in_port: Option[DataContent] = noData\n\n  \/\/ AutomationRequest_out_UXAS: Out EventDataPort Base_Types.Bits\n  val AutomationRequest_out_UXAS_id: Art.PortId = CASE_AttestationGateBridge.AutomationRequest_out_UXAS.id\n  var AutomationRequest_out_UXAS_port: Option[DataContent] = noData\n\n  \/\/ AutomationRequest_out_MON_REQ: Out EventDataPort Base_Types.Bits\n  val AutomationRequest_out_MON_REQ_id: Art.PortId = CASE_AttestationGateBridge.AutomationRequest_out_MON_REQ.id\n  var AutomationRequest_out_MON_REQ_port: Option[DataContent] = noData\n\n  \/\/ OperatingRegion_in: In EventDataPort Base_Types.Bits\n  val OperatingRegion_in_id: Art.PortId = CASE_AttestationGateBridge.OperatingRegion_in.id\n  var OperatingRegion_in_port: Option[DataContent] = noData\n\n  \/\/ OperatingRegion_out: Out EventDataPort Base_Types.Bits\n  val OperatingRegion_out_id: Art.PortId = CASE_AttestationGateBridge.OperatingRegion_out.id\n  var OperatingRegion_out_port: Option[DataContent] = noData\n\n  \/\/ LineSearchTask_in: In EventDataPort Base_Types.Bits\n  val LineSearchTask_in_id: Art.PortId = CASE_AttestationGateBridge.LineSearchTask_in.id\n  var LineSearchTask_in_port: Option[DataContent] = noData\n\n  \/\/ LineSearchTask_out: Out EventDataPort Base_Types.Bits\n  val LineSearchTask_out_id: Art.PortId = CASE_AttestationGateBridge.LineSearchTask_out.id\n  var LineSearchTask_out_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == trusted_ids_id) {\n      return trusted_ids_port\n    } else if(portId == AutomationRequest_in_id) {\n      return AutomationRequest_in_port\n    } else if(portId == OperatingRegion_in_id) {\n      return OperatingRegion_in_port\n    } else if(portId == LineSearchTask_in_id) {\n      return LineSearchTask_in_port\n    } else {\n      halt(s\"Unexpected: CASE_AttestationGate.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    trusted_ids_port = CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.trusted_ids_Receive()\n\n    AutomationRequest_in_port = CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.AutomationRequest_in_Receive()\n\n    OperatingRegion_in_port = CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.OperatingRegion_in_Receive()\n\n    LineSearchTask_in_port = CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.LineSearchTask_in_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == AutomationRequest_out_UXAS_id) {\n      AutomationRequest_out_UXAS_port = Some(data)\n    } else if(portId == AutomationRequest_out_MON_REQ_id) {\n      AutomationRequest_out_MON_REQ_port = Some(data)\n    } else if(portId == OperatingRegion_out_id) {\n      OperatingRegion_out_port = Some(data)\n    } else if(portId == LineSearchTask_out_id) {\n      LineSearchTask_out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_AttestationGate.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(AutomationRequest_out_UXAS_port.nonEmpty) {\n      CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.AutomationRequest_out_UXAS_Send(AutomationRequest_out_UXAS_port.get)\n      AutomationRequest_out_UXAS_port = noData\n    }\n\n    if(AutomationRequest_out_MON_REQ_port.nonEmpty) {\n      CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.AutomationRequest_out_MON_REQ_Send(AutomationRequest_out_MON_REQ_port.get)\n      AutomationRequest_out_MON_REQ_port = noData\n    }\n\n    if(OperatingRegion_out_port.nonEmpty) {\n      CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.OperatingRegion_out_Send(OperatingRegion_out_port.get)\n      OperatingRegion_out_port = noData\n    }\n\n    if(LineSearchTask_out_port.nonEmpty) {\n      CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.LineSearchTask_out_Send(LineSearchTask_out_port.get)\n      LineSearchTask_out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (CASE_AttestationGateBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_trusted_ids: Option[Base_Types.Bits] = slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_trusted_ids()\n      val apiUsage_AutomationRequest_in: Option[Base_Types.Bits] = slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_AutomationRequest_in()\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_AutomationRequest_out_UXAS(Base_Types.Bits_example())\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_AutomationRequest_out_UXAS(Base_Types.Bits_example())\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_AutomationRequest_out_MON_REQ(Base_Types.Bits_example())\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_AutomationRequest_out_MON_REQ(Base_Types.Bits_example())\n      val apiUsage_OperatingRegion_in: Option[Base_Types.Bits] = slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_OperatingRegion_in()\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_OperatingRegion_out(Base_Types.Bits_example())\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_OperatingRegion_out(Base_Types.Bits_example())\n      val apiUsage_LineSearchTask_in: Option[Base_Types.Bits] = slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_LineSearchTask_in()\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_LineSearchTask_out(Base_Types.Bits_example())\n      slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_LineSearchTask_out(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix {\n  \/\/ returns T if seL4's trusted_ids port is empty, F otherwise \n  def trusted_ids_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's trusted_ids port \n  def trusted_ids_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's AutomationRequest_in port is empty, F otherwise \n  def AutomationRequest_in_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AutomationRequest_in port \n  def AutomationRequest_in_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's AutomationRequest_out_UXAS port\n  def AutomationRequest_out_UXAS_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's AutomationRequest_out_MON_REQ port\n  def AutomationRequest_out_MON_REQ_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's OperatingRegion_in port is empty, F otherwise \n  def OperatingRegion_in_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's OperatingRegion_in port \n  def OperatingRegion_in_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's OperatingRegion_out port\n  def OperatingRegion_out_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's LineSearchTask_in port is empty, F otherwise \n  def LineSearchTask_in_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's LineSearchTask_in port \n  def LineSearchTask_in_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's LineSearchTask_out port\n  def LineSearchTask_out_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\nobject CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_Ext {\n  def trusted_ids_IsEmpty(): B = halt(\"stub\")\n\n  def trusted_ids_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def AutomationRequest_in_IsEmpty(): B = halt(\"stub\")\n\n  def AutomationRequest_in_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def AutomationRequest_out_UXAS_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def AutomationRequest_out_MON_REQ_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def OperatingRegion_in_IsEmpty(): B = halt(\"stub\")\n\n  def OperatingRegion_in_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def OperatingRegion_out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def LineSearchTask_in_IsEmpty(): B = halt(\"stub\")\n\n  def LineSearchTask_in_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def LineSearchTask_out_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_ATTESTATIONGATE_THR_IMPL_MCMP_PROC_SW_AM_GATE_CASE_ATTESTATIONGATE_H\n#define CASE_ATTESTATIONGATE_THR_IMPL_MCMP_PROC_SW_AM_GATE_CASE_ATTESTATIONGATE_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.h>\n#include <CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_AutomationRequest_i];\n  byte_array_default(SF t0, numBits_slang_embedded_CMASI_AutomationRequest_i, numBytes_slang_embedded_CMASI_AutomationRequest_i);\n  api_put_AutomationRequest_out_UXAS__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF numBits_slang_embedded_CMASI_AutomationRequest_i, t0);\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_AutomationRequest_i];\n  byte_array_default(SF t1, numBits_slang_embedded_CMASI_AutomationRequest_i, numBytes_slang_embedded_CMASI_AutomationRequest_i);\n  api_put_AutomationRequest_out_MON_REQ__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF numBits_slang_embedded_CMASI_AutomationRequest_i, t1);\n\n  uint8_t t2[numBytes_slang_embedded_CMASI_OperatingRegion_i];\n  byte_array_default(SF t2, numBits_slang_embedded_CMASI_OperatingRegion_i, numBytes_slang_embedded_CMASI_OperatingRegion_i);\n  api_put_OperatingRegion_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF numBits_slang_embedded_CMASI_OperatingRegion_i, t2);\n\n  uint8_t t3[numBytes_slang_embedded_CMASI_LineSearchTask_i];\n  byte_array_default(SF t3, numBits_slang_embedded_CMASI_LineSearchTask_i, numBytes_slang_embedded_CMASI_LineSearchTask_i);\n  api_put_LineSearchTask_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF numBits_slang_embedded_CMASI_LineSearchTask_i, t3);\n\n  api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_finalise_\", 0);\n}\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_AddressArray_i];\n  size_t t0_numBits;\n  if(api_get_trusted_ids__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_slang_embedded_CMASI_AddressArray_i, \"numBits received does not match expected\");\n\n    DeclNewString(trusted_ids_str);\n    String__append(SF (String) &trusted_ids_str, string(\"Received on trusted_ids: \"));\n    byte_array_string(SF (String) &trusted_ids_str, t0, numBytes_slang_embedded_CMASI_AddressArray_i);\n    api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF (String) &trusted_ids_str);\n  }\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_AddressAttributedMessage_i];\n  size_t t1_numBits;\n  if(api_get_AutomationRequest_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t1_numBits == numBits_slang_embedded_CMASI_AddressAttributedMessage_i, \"numBits received does not match expected\");\n\n    DeclNewString(AutomationRequest_in_str);\n    String__append(SF (String) &AutomationRequest_in_str, string(\"Received on AutomationRequest_in: \"));\n    byte_array_string(SF (String) &AutomationRequest_in_str, t1, numBytes_slang_embedded_CMASI_AddressAttributedMessage_i);\n    api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF (String) &AutomationRequest_in_str);\n  }\n\n  uint8_t t2[numBytes_slang_embedded_CMASI_AddressAttributedMessage_i];\n  size_t t2_numBits;\n  if(api_get_OperatingRegion_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF &t2_numBits, t2)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t2_numBits == numBits_slang_embedded_CMASI_AddressAttributedMessage_i, \"numBits received does not match expected\");\n\n    DeclNewString(OperatingRegion_in_str);\n    String__append(SF (String) &OperatingRegion_in_str, string(\"Received on OperatingRegion_in: \"));\n    byte_array_string(SF (String) &OperatingRegion_in_str, t2, numBytes_slang_embedded_CMASI_AddressAttributedMessage_i);\n    api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF (String) &OperatingRegion_in_str);\n  }\n\n  uint8_t t3[numBytes_slang_embedded_CMASI_AddressAttributedMessage_i];\n  size_t t3_numBits;\n  if(api_get_LineSearchTask_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF &t3_numBits, t3)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t3_numBits == numBits_slang_embedded_CMASI_AddressAttributedMessage_i, \"numBits received does not match expected\");\n\n    DeclNewString(LineSearchTask_in_str);\n    String__append(SF (String) &LineSearchTask_in_str, string(\"Received on LineSearchTask_in: \"));\n    byte_array_string(SF (String) &LineSearchTask_in_str, t3, numBytes_slang_embedded_CMASI_AddressAttributedMessage_i);\n    api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF (String) &LineSearchTask_in_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_ATTESTATIONGATE_THR_IMPL_MCMP_PROC_SW_AM_GATE_CASE_ATTESTATIONGATE_API_H\n#define CASE_ATTESTATIONGATE_THR_IMPL_MCMP_PROC_SW_AM_GATE_CASE_ATTESTATIONGATE_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_trusted_ids__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_AutomationRequest_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_AutomationRequest_out_UXAS__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_AutomationRequest_out_MON_REQ__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_OperatingRegion_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_OperatingRegion_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_LineSearchTask_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_LineSearchTask_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.h>\n#include <CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_trusted_ids__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_get_trusted_ids__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_EA36F6 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api(api);\n  Option_EA36F6_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api_get_trusted_ids_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_AutomationRequest_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_get_AutomationRequest_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_EA36F6 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api(api);\n  Option_EA36F6_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api_get_AutomationRequest_in_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_AutomationRequest_out_UXAS__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_put_AutomationRequest_out_UXAS__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_D4F165 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api(api);\n  Option_D4F165_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api_put_AutomationRequest_out_UXAS_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_AutomationRequest_out_MON_REQ__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_put_AutomationRequest_out_MON_REQ__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_D4F165 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api(api);\n  Option_D4F165_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api_put_AutomationRequest_out_MON_REQ_(\n    SF\n    &api,\n    &t_0);\n}\n\nbool api_get_OperatingRegion_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_get_OperatingRegion_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_EA36F6 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api(api);\n  Option_EA36F6_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api_get_OperatingRegion_in_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_OperatingRegion_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_put_OperatingRegion_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_D4F165 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api(api);\n  Option_D4F165_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api_put_OperatingRegion_out_(\n    SF\n    &api,\n    &t_0);\n}\n\nbool api_get_LineSearchTask_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_get_LineSearchTask_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_EA36F6 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api(api);\n  Option_EA36F6_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api_get_LineSearchTask_in_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_LineSearchTask_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_put_LineSearchTask_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_D4F165 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api(api);\n  Option_D4F165_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api_put_LineSearchTask_out_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  \/\/ Option_D4F165 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api(api);\n  Option_D4F165_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_logDebug__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  \/\/ Option_D4F165 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api(api);\n  Option_D4F165_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"api_logError__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\", 0);\n\n  \/\/ Option_D4F165 = Option[slang_embedded.SW.CASE_AttestationGate_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api(api);\n  Option_D4F165_get_(SF (slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_initialise(\n  STACK_FRAME\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_initialise\", 0);\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_finalise(\n  STACK_FRAME\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_finalise\", 0);\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_timeTriggered(\n  STACK_FRAME\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_timeTriggered\", 0);\n\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.h>\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_CASE_AttestationGate_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_CASE_AttestationGate_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_CASE_AttestationGate_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_entryPoints\", 0);\n\n  return slang_embedded_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_CASE_AttestationGate_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_ATTESTATIONGATE_THR_IMPL_MCMP_PROC_SW_AM_GATE_CASE_ATTESTATIONGATE_ADAPTER_H\n#define CASE_ATTESTATIONGATE_THR_IMPL_MCMP_PROC_SW_AM_GATE_CASE_ATTESTATIONGATE_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix\n\nobject CASE_Filter_LST extends App {\n\n  val CASE_Filter_LSTBridge : slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge = {\n    val filter_in = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_filter_in\", mode = EventIn)\n    val filter_out = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_filter_out\", mode = EventOut)\n\n    slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      filter_in = filter_in,\n      filter_out = filter_out\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_Filter_LSTBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ filter_in: In EventDataPort Base_Types.Bits\n  val filter_in_id: Art.PortId = CASE_Filter_LSTBridge.filter_in.id\n  var filter_in_port: Option[DataContent] = noData\n\n  \/\/ filter_out: Out EventDataPort Base_Types.Bits\n  val filter_out_id: Art.PortId = CASE_Filter_LSTBridge.filter_out.id\n  var filter_out_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == filter_in_id) {\n      return filter_in_port\n    } else {\n      halt(s\"Unexpected: CASE_Filter_LST.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    filter_in_port = CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix.filter_in_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == filter_out_id) {\n      filter_out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_Filter_LST.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(filter_out_port.nonEmpty) {\n      CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix.filter_out_Send(filter_out_port.get)\n      filter_out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (CASE_Filter_LSTBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_filter_in: Option[Base_Types.Bits] = slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_operational_api.get.get_filter_in()\n      slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_initialization_api.get.put_filter_out(Base_Types.Bits_example())\n      slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge.c_operational_api.get.put_filter_out(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix {\n  \/\/ returns T if seL4's filter_in port is empty, F otherwise \n  def filter_in_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's filter_in port \n  def filter_in_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's filter_out port\n  def filter_out_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\nobject CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix_Ext {\n  def filter_in_IsEmpty(): B = halt(\"stub\")\n\n  def filter_in_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def filter_out_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_FILTER_LST_THR_IMPL_MCMP_PROC_SW_FLT_LST_CASE_FILTER_LST_H\n#define CASE_FILTER_LST_THR_IMPL_MCMP_PROC_SW_FLT_LST_CASE_FILTER_LST_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.h>\n#include <CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_LineSearchTask_i];\n  byte_array_default(SF t0, numBits_slang_embedded_CMASI_LineSearchTask_i, numBytes_slang_embedded_CMASI_LineSearchTask_i);\n  api_put_filter_out__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF numBits_slang_embedded_CMASI_LineSearchTask_i, t0);\n\n  api_logInfo__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_finalise_\", 0);\n}\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_LineSearchTask_i];\n  size_t t0_numBits;\n  if(api_get_filter_in__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_slang_embedded_CMASI_LineSearchTask_i, \"numBits received does not match expected\");\n\n    DeclNewString(filter_in_str);\n    String__append(SF (String) &filter_in_str, string(\"Received on filter_in: \"));\n    byte_array_string(SF (String) &filter_in_str, t0, numBytes_slang_embedded_CMASI_LineSearchTask_i);\n    api_logInfo__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF (String) &filter_in_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_FILTER_LST_THR_IMPL_MCMP_PROC_SW_FLT_LST_CASE_FILTER_LST_API_H\n#define CASE_FILTER_LST_THR_IMPL_MCMP_PROC_SW_FLT_LST_CASE_FILTER_LST_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_filter_in__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_filter_out__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.h>\n#include <CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_filter_in__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c\", \"\", \"api_get_filter_in__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_B186FA = Option[slang_embedded.SW.CASE_Filter_LST_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_Filter_LST_thr_Impl_Operational_Api(api);\n  Option_B186FA_get_(SF (slang_embedded_SW_CASE_Filter_LST_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_Operational_Api_get_filter_in_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_filter_out__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c\", \"\", \"api_put_filter_out__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_D3D701 = Option[slang_embedded.SW.CASE_Filter_LST_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api(api);\n  Option_D3D701_get_(SF (slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api_put_filter_out_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_logInfo__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c\", \"\", \"api_logInfo__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\", 0);\n\n  \/\/ Option_D3D701 = Option[slang_embedded.SW.CASE_Filter_LST_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api(api);\n  Option_D3D701_get_(SF (slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c\", \"\", \"api_logDebug__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\", 0);\n\n  \/\/ Option_D3D701 = Option[slang_embedded.SW.CASE_Filter_LST_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api(api);\n  Option_D3D701_get_(SF (slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c\", \"\", \"api_logError__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\", 0);\n\n  \/\/ Option_D3D701 = Option[slang_embedded.SW.CASE_Filter_LST_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api(api);\n  Option_D3D701_get_(SF (slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_initialise(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_initialise\", 0);\n\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_finalise(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_finalise\", 0);\n\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_timeTriggered(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_timeTriggered\", 0);\n\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.h>\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_CASE_Filter_LST_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_CASE_Filter_LST_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_CASE_Filter_LST_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_entryPoints\", 0);\n\n  return slang_embedded_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_CASE_Filter_LST_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_FILTER_LST_THR_IMPL_MCMP_PROC_SW_FLT_LST_CASE_FILTER_LST_ADAPTER_H\n#define CASE_FILTER_LST_THR_IMPL_MCMP_PROC_SW_FLT_LST_CASE_FILTER_LST_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix\n\nobject CASE_Monitor_Req extends App {\n\n  val CASE_Monitor_ReqBridge : slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge = {\n    val observed = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_observed\", mode = EventIn)\n    val reference_1 = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_reference_1\", mode = EventIn)\n\n    slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      observed = observed,\n      reference_1 = reference_1\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_Monitor_ReqBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ observed: In EventDataPort Base_Types.Bits\n  val observed_id: Art.PortId = CASE_Monitor_ReqBridge.observed.id\n  var observed_port: Option[DataContent] = noData\n\n  \/\/ reference_1: In EventDataPort Base_Types.Bits\n  val reference_1_id: Art.PortId = CASE_Monitor_ReqBridge.reference_1.id\n  var reference_1_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == observed_id) {\n      return observed_port\n    } else if(portId == reference_1_id) {\n      return reference_1_port\n    } else {\n      halt(s\"Unexpected: CASE_Monitor_Req.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    observed_port = CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix.observed_Receive()\n\n    reference_1_port = CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix.reference_1_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    halt(s\"Unexpected: CASE_Monitor_Req.putValue called with: ${portId}\")\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (CASE_Monitor_ReqBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_observed: Option[Base_Types.Bits] = slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_operational_api.get.get_observed()\n      val apiUsage_reference_1: Option[Base_Types.Bits] = slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge.c_operational_api.get.get_reference_1()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix {\n  \/\/ returns T if seL4's observed port is empty, F otherwise \n  def observed_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's observed port \n  def observed_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's reference_1 port is empty, F otherwise \n  def reference_1_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's reference_1 port \n  def reference_1_Receive(): Option[DataContent] = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\nobject CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix_Ext {\n  def observed_IsEmpty(): B = halt(\"stub\")\n\n  def observed_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def reference_1_IsEmpty(): B = halt(\"stub\")\n\n  def reference_1_Receive(): Option[DataContent] = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_MONITOR_REQ_THR_IMPL_MCMP_PROC_SW_MON_REQ_CASE_MONITOR_REQ_H\n#define CASE_MONITOR_REQ_THR_IMPL_MCMP_PROC_SW_MON_REQ_CASE_MONITOR_REQ_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.h>\n#include <CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  api_logInfo__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_finalise_\", 0);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_AutomationResponse_i];\n  size_t t0_numBits;\n  if(api_get_observed__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_slang_embedded_CMASI_AutomationResponse_i, \"numBits received does not match expected\");\n\n    DeclNewString(observed_str);\n    String__append(SF (String) &observed_str, string(\"Received on observed: \"));\n    byte_array_string(SF (String) &observed_str, t0, numBytes_slang_embedded_CMASI_AutomationResponse_i);\n    api_logInfo__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(SF (String) &observed_str);\n  }\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_AutomationRequest_i];\n  size_t t1_numBits;\n  if(api_get_reference_1__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t1_numBits == numBits_slang_embedded_CMASI_AutomationRequest_i, \"numBits received does not match expected\");\n\n    DeclNewString(reference_1_str);\n    String__append(SF (String) &reference_1_str, string(\"Received on reference_1: \"));\n    byte_array_string(SF (String) &reference_1_str, t1, numBytes_slang_embedded_CMASI_AutomationRequest_i);\n    api_logInfo__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(SF (String) &reference_1_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_MONITOR_REQ_THR_IMPL_MCMP_PROC_SW_MON_REQ_CASE_MONITOR_REQ_API_H\n#define CASE_MONITOR_REQ_THR_IMPL_MCMP_PROC_SW_MON_REQ_CASE_MONITOR_REQ_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_observed__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_reference_1__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.h>\n#include <CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_observed__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c\", \"\", \"api_get_observed__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_77E64D = Option[slang_embedded.SW.CASE_Monitor_Req_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Req_thr_Impl_Operational_Api(api);\n  Option_77E64D_get_(SF (slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Operational_Api_get_observed_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_reference_1__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c\", \"\", \"api_get_reference_1__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_77E64D = Option[slang_embedded.SW.CASE_Monitor_Req_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Req_thr_Impl_Operational_Api(api);\n  Option_77E64D_get_(SF (slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Operational_Api_get_reference_1_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_logInfo__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c\", \"\", \"api_logInfo__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\", 0);\n\n  \/\/ Option_941F70 = Option[slang_embedded.SW.CASE_Monitor_Req_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api(api);\n  Option_941F70_get_(SF (slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c\", \"\", \"api_logDebug__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\", 0);\n\n  \/\/ Option_941F70 = Option[slang_embedded.SW.CASE_Monitor_Req_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api(api);\n  Option_941F70_get_(SF (slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c\", \"\", \"api_logError__slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\", 0);\n\n  \/\/ Option_941F70 = Option[slang_embedded.SW.CASE_Monitor_Req_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api(api);\n  Option_941F70_get_(SF (slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_initialise(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_initialise\", 0);\n\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_finalise(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_finalise\", 0);\n\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_timeTriggered(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_timeTriggered\", 0);\n\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.h>\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_CASE_Monitor_Req_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_CASE_Monitor_Req_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_CASE_Monitor_Req_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_entryPoints\", 0);\n\n  return slang_embedded_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_CASE_Monitor_Req_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_MONITOR_REQ_THR_IMPL_MCMP_PROC_SW_MON_REQ_CASE_MONITOR_REQ_ADAPTER_H\n#define CASE_MONITOR_REQ_THR_IMPL_MCMP_PROC_SW_MON_REQ_CASE_MONITOR_REQ_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix\n\nobject CASE_Monitor_Geo extends App {\n\n  val CASE_Monitor_GeoBridge : slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge = {\n    val keep_in_zones = Port[Base_Types.Bits] (id = 0, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_keep_in_zones\", mode = DataIn)\n    val keep_out_zones = Port[Base_Types.Bits] (id = 1, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_keep_out_zones\", mode = DataIn)\n    val observed = Port[Base_Types.Bits] (id = 2, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_observed\", mode = EventIn)\n    val output = Port[Base_Types.Bits] (id = 3, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_output\", mode = EventOut)\n    val alert = Port[art.Empty] (id = 4, name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_alert\", mode = EventOut)\n\n    slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge(\n      id = 0,\n      name = \"UAV_Impl_Instance_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      keep_in_zones = keep_in_zones,\n      keep_out_zones = keep_out_zones,\n      observed = observed,\n      output = output,\n      alert = alert\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_Monitor_GeoBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ keep_in_zones: In DataPort Base_Types.Bits\n  val keep_in_zones_id: Art.PortId = CASE_Monitor_GeoBridge.keep_in_zones.id\n  var keep_in_zones_port: Option[DataContent] = noData\n\n  \/\/ keep_out_zones: In DataPort Base_Types.Bits\n  val keep_out_zones_id: Art.PortId = CASE_Monitor_GeoBridge.keep_out_zones.id\n  var keep_out_zones_port: Option[DataContent] = noData\n\n  \/\/ observed: In EventDataPort Base_Types.Bits\n  val observed_id: Art.PortId = CASE_Monitor_GeoBridge.observed.id\n  var observed_port: Option[DataContent] = noData\n\n  \/\/ output: Out EventDataPort Base_Types.Bits\n  val output_id: Art.PortId = CASE_Monitor_GeoBridge.output.id\n  var output_port: Option[DataContent] = noData\n\n  \/\/ alert: Out EventPort art.Empty\n  val alert_id: Art.PortId = CASE_Monitor_GeoBridge.alert.id\n  var alert_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == keep_in_zones_id) {\n      return keep_in_zones_port\n    } else if(portId == keep_out_zones_id) {\n      return keep_out_zones_port\n    } else if(portId == observed_id) {\n      return observed_port\n    } else {\n      halt(s\"Unexpected: CASE_Monitor_Geo.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    keep_in_zones_port = CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix.keep_in_zones_Receive()\n\n    keep_out_zones_port = CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix.keep_out_zones_Receive()\n\n    observed_port = CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix.observed_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == output_id) {\n      output_port = Some(data)\n    } else if(portId == alert_id) {\n      alert_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_Monitor_Geo.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(output_port.nonEmpty) {\n      CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix.output_Send(output_port.get)\n      output_port = noData\n    }\n\n    if(alert_port.nonEmpty) {\n      CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix.alert_Send(alert_port.get)\n      alert_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (CASE_Monitor_GeoBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_keep_in_zones: Option[Base_Types.Bits] = slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api.get.get_keep_in_zones()\n      val apiUsage_keep_out_zones: Option[Base_Types.Bits] = slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api.get.get_keep_out_zones()\n      val apiUsage_observed: Option[Base_Types.Bits] = slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api.get.get_observed()\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_initialization_api.get.put_output(Base_Types.Bits_example())\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api.get.put_output(Base_Types.Bits_example())\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_initialization_api.get.put_alert()\n      slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge.c_operational_api.get.put_alert()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix {\n  \/\/ returns T if seL4's keep_in_zones port is empty, F otherwise \n  def keep_in_zones_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's keep_in_zones port \n  def keep_in_zones_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's keep_out_zones port is empty, F otherwise \n  def keep_out_zones_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's keep_out_zones port \n  def keep_out_zones_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's observed port is empty, F otherwise \n  def observed_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's observed port \n  def observed_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's output port\n  def output_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's alert port\n  def alert_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SW\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SW\n\nimport org.sireum._\nimport art._\n\nobject CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_Ext {\n  def keep_in_zones_IsEmpty(): B = halt(\"stub\")\n\n  def keep_in_zones_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def keep_out_zones_IsEmpty(): B = halt(\"stub\")\n\n  def keep_out_zones_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def observed_IsEmpty(): B = halt(\"stub\")\n\n  def observed_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def output_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def alert_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_MONITOR_GEO_THR_IMPL_MCMP_PROC_SW_MON_GEO_CASE_MONITOR_GEO_H\n#define CASE_MONITOR_GEO_THR_IMPL_MCMP_PROC_SW_MON_GEO_CASE_MONITOR_GEO_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_initialise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_finalise_(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.h>\n#include <CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_AutomationResponse_i];\n  byte_array_default(SF t0, numBits_slang_embedded_CMASI_AutomationResponse_i, numBytes_slang_embedded_CMASI_AutomationResponse_i);\n  api_put_output__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF numBits_slang_embedded_CMASI_AutomationResponse_i, t0);\n\n  api_put_alert__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF_LAST);\n\n  api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF string(\"Example logInfo\"));\n\n  api_logDebug__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF string(\"Example logDebug\"));\n\n  api_logError__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF string(\"Example logError\"));\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_finalise_\", 0);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_slang_embedded_CMASI_Polygon_i];\n  size_t t0_numBits;\n  if(api_get_keep_in_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_slang_embedded_CMASI_Polygon_i, \"numBits received does not match expected\");\n\n    DeclNewString(keep_in_zones_str);\n    String__append(SF (String) &keep_in_zones_str, string(\"Received on keep_in_zones: \"));\n    byte_array_string(SF (String) &keep_in_zones_str, t0, numBytes_slang_embedded_CMASI_Polygon_i);\n    api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF (String) &keep_in_zones_str);\n  }\n\n  uint8_t t1[numBytes_slang_embedded_CMASI_Polygon_i];\n  size_t t1_numBits;\n  if(api_get_keep_out_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t1_numBits == numBits_slang_embedded_CMASI_Polygon_i, \"numBits received does not match expected\");\n\n    DeclNewString(keep_out_zones_str);\n    String__append(SF (String) &keep_out_zones_str, string(\"Received on keep_out_zones: \"));\n    byte_array_string(SF (String) &keep_out_zones_str, t1, numBytes_slang_embedded_CMASI_Polygon_i);\n    api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF (String) &keep_out_zones_str);\n  }\n\n  uint8_t t2[numBytes_slang_embedded_CMASI_AutomationResponse_i];\n  size_t t2_numBits;\n  if(api_get_observed__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF &t2_numBits, t2)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t2_numBits == numBits_slang_embedded_CMASI_AutomationResponse_i, \"numBits received does not match expected\");\n\n    DeclNewString(observed_str);\n    String__append(SF (String) &observed_str, string(\"Received on observed: \"));\n    byte_array_string(SF (String) &observed_str, t2, numBytes_slang_embedded_CMASI_AutomationResponse_i);\n    api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF (String) &observed_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_MONITOR_GEO_THR_IMPL_MCMP_PROC_SW_MON_GEO_CASE_MONITOR_GEO_API_H\n#define CASE_MONITOR_GEO_THR_IMPL_MCMP_PROC_SW_MON_GEO_CASE_MONITOR_GEO_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_keep_in_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_keep_out_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_observed__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_output__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_alert__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(STACK_FRAME_ONLY);\n\nvoid api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.h>\n#include <CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_keep_in_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"api_get_keep_in_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_952F34 = Option[slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api(api);\n  Option_952F34_get_(SF (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api_get_keep_in_zones_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_keep_out_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"api_get_keep_out_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_952F34 = Option[slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api(api);\n  Option_952F34_get_(SF (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api_get_keep_out_zones_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_observed__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"api_get_observed__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_952F34 = Option[slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_Operational_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api(api);\n  Option_952F34_get_(SF (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api) &api, slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_c_operational_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api_get_observed_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_output__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"api_put_output__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_EDA147 = Option[slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api(api);\n  Option_EDA147_get_(SF (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api_put_output_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_alert__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"api_put_alert__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\", 0);\n\n  \/\/ Option_EDA147 = Option[slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api(api);\n  Option_EDA147_get_(SF (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api_put_alert_(\n    SF\n    &api);\n}\n\nvoid api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\", 0);\n\n  \/\/ Option_EDA147 = Option[slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api(api);\n  Option_EDA147_get_(SF (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"api_logDebug__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\", 0);\n\n  \/\/ Option_EDA147 = Option[slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api(api);\n  Option_EDA147_get_(SF (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"api_logError__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\", 0);\n\n  \/\/ Option_EDA147 = Option[slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_Initialization_Api]\n  DeclNewslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api(api);\n  Option_EDA147_get_(SF (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api) &api, slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_c_initialization_api(SF_LAST));\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_initialise(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_initialise\", 0);\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_initialise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_finalise(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_finalise\", 0);\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_finalise_(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_timeTriggered(\n  STACK_FRAME\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_timeTriggered\", 0);\n\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.h>\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_CASE_Monitor_Geo_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_CASE_Monitor_Geo_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_CASE_Monitor_Geo_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_entryPoints\", 0);\n\n  return slang_embedded_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_CASE_Monitor_Geo_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_MONITOR_GEO_THR_IMPL_MCMP_PROC_SW_MON_GEO_CASE_MONITOR_GEO_ADAPTER_H\n#define CASE_MONITOR_GEO_THR_IMPL_MCMP_PROC_SW_MON_GEO_CASE_MONITOR_GEO_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/ext.c",
        {
          "type" : "TestResource",
          "content" : "#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ add c extension code here\n\n\/\/ example method that sets the first numBits bits of byteArray to 1\nvoid byte_array_default(STACK_FRAME uint8_t* byteArray, size_t numBits, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"byte_array_default\", 0);\n\n  sfAssert(SF (numBits - 1) \/ 8  + 1 <= numBytes, \"byte_array_default: numBytes * 8 must be at least numBits\");\n\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    uint8_t v = 0;\n    for(uint8_t bit = 0; bit < 8; bit++) {\n      if(byte * 8 + bit < numBits) {\n        v |= 1UL << bit;\n      }\n    }\n    byteArray[byte] = v;\n  }\n}\n\n\/\/ example method that places the hex value of the bytes in byteArray into str\nvoid byte_array_string(STACK_FRAME String str, uint8_t* byteArray, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"byte_array_string\", 0);\n\n  sfAssert(SF (str->size + numBytes) <= MaxString, \"byte_array_string: Insufficient maximum for String characters, consider increasing the --max-string-size option\");\n\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    U8_string_(SF str, byteArray[byte]);\n    String__append(SF str, string(\" \"));\n  }\n}\n\n\/\/ example method that directly prints the hex values of the bytes in byte_array\nvoid hex_dump(STACK_FRAME uint8_t* byte_array, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"hex_dump\", 0);\n\n  printf(\"[ \");\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    if(byte != 0 && byte % 16 == 0) { printf(\"\\n  \"); }\n    printf(\"%02X \", byte_array[byte]);\n  }\n  printf(\"]\\n\");\n}",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/c\/ext-c\/ext.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef EXT_H\n#define EXT_H\n\n\/\/ This file will not be overwritten so is safe to edit\n\n#include <all.h>\n\n\/\/ bit-codec size for slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl\n#define numBits_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl 1024\n#define numBytes_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl ((numBits_slang_embedded_CASE_Model_Transformations_CASE_UART_Msg_Impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_MissionCommand_i\n#define numBits_slang_embedded_CMASI_MissionCommand_i 16384\n#define numBytes_slang_embedded_CMASI_MissionCommand_i ((numBits_slang_embedded_CMASI_MissionCommand_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_AirVehicleState_i\n#define numBits_slang_embedded_CMASI_AirVehicleState_i 4096\n#define numBytes_slang_embedded_CMASI_AirVehicleState_i ((numBits_slang_embedded_CMASI_AirVehicleState_i - 1) \/ 8 + 1)\n\nvoid byte_array_default(STACK_FRAME uint8_t* byteArray, size_t numBits, size_t numBytes);\n\nvoid byte_array_string(STACK_FRAME String str, uint8_t* byteArray, size_t numBytes);\n\nvoid hex_dump(STACK_FRAME uint8_t* byte_array, size_t numBytes);\n\n\/\/ bit-codec size for slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl\n#define numBits_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl 1024\n#define numBytes_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl ((numBits_slang_embedded_CASE_Model_Transformations_CASE_RF_Msg_Impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_AddressArray_i\n#define numBits_slang_embedded_CMASI_AddressArray_i 96\n#define numBytes_slang_embedded_CMASI_AddressArray_i ((numBits_slang_embedded_CMASI_AddressArray_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_AddressAttributedMessage_i\n#define numBits_slang_embedded_CMASI_AddressAttributedMessage_i 131072\n#define numBytes_slang_embedded_CMASI_AddressAttributedMessage_i ((numBits_slang_embedded_CMASI_AddressAttributedMessage_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_Polygon_i\n#define numBits_slang_embedded_CMASI_Polygon_i 1024\n#define numBytes_slang_embedded_CMASI_Polygon_i ((numBits_slang_embedded_CMASI_Polygon_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_AutomationRequest_i\n#define numBits_slang_embedded_CMASI_AutomationRequest_i 2048\n#define numBytes_slang_embedded_CMASI_AutomationRequest_i ((numBits_slang_embedded_CMASI_AutomationRequest_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_OperatingRegion_i\n#define numBits_slang_embedded_CMASI_OperatingRegion_i 2048\n#define numBytes_slang_embedded_CMASI_OperatingRegion_i ((numBits_slang_embedded_CMASI_OperatingRegion_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_LineSearchTask_i\n#define numBits_slang_embedded_CMASI_LineSearchTask_i 65536\n#define numBytes_slang_embedded_CMASI_LineSearchTask_i ((numBits_slang_embedded_CMASI_LineSearchTask_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_AutomationResponse_i\n#define numBits_slang_embedded_CMASI_AutomationResponse_i 262144\n#define numBytes_slang_embedded_CMASI_AutomationResponse_i ((numBits_slang_embedded_CMASI_AutomationResponse_i - 1) \/ 8 + 1)\n#endif",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SlangTypeLibrary\/SlangTypeLibrary.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SlangTypeLibrary\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\nobject SlangTypeLibrary extends App {\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/settings_SlangTypeLibrary.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(SlangTypeLibrary\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/transpile-sel4.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\n\nif [ -z \"${SIREUM_HOME}\" ]; then\n  echo \"SIREUM_HOME not set. Refer to https:\/\/github.com\/sireum\/kekinian\/#installing\"\n  exit 1\nfi\n\nSCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\n\nPATH_SEP=\":\"\nif [ -n \"$COMSPEC\" -a -x \"$COMSPEC\" ]; then\n  PATH_SEP=\";\"\nfi\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/Drivers${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\" \\\n  --apps \"slang_embedded.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.UARTDriver\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 5 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=5;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=5\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.UARTDriver\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\" \\\n  --apps \"slang_embedded.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.RadioDriver_Attestation\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 6 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=6;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=6\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.RadioDriver_Attestation\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\" \\\n  --apps \"slang_embedded.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.FlyZonesDatabase\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 2 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=2;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=2\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.FlyZonesDatabase\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\" \\\n  --apps \"slang_embedded.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.UxAS\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 6 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=6;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=6\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.UxAS\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\" \\\n  --apps \"slang_embedded.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.WaypointPlanManagerService\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 4 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=4;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=4\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.WaypointPlanManagerService\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\" \\\n  --apps \"slang_embedded.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.CASE_AttestationGate\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 8 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=8;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=8\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.CASE_AttestationGate\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\" \\\n  --apps \"slang_embedded.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.CASE_Filter_LST\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 2 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=2;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=2\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.CASE_Filter_LST\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\" \\\n  --apps \"slang_embedded.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.CASE_Monitor_Req\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 2 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=2;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=2\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.CASE_Monitor_Req\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SW${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --apps \"slang_embedded.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.CASE_Monitor_Geo\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 5 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=5;IS[Z,art.UConnection]=1;IS[Z,B]=262144\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=5\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.CASE_Monitor_Geo\" \\\n  --stack-size \"524288\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.c\" \\\n  --exclude-build \"slang_embedded.Drivers.UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver,slang_embedded.SW.RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation,slang_embedded.SW.FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase,slang_embedded.SW.UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS,slang_embedded.SW.WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService,slang_embedded.SW.CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate,slang_embedded.SW.CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST,slang_embedded.SW.CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req,slang_embedded.SW.CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/SlangTypeLibrary\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SlangTypeLibrary\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"SlangTypeLibrary\" \\\n  --apps \"slang_embedded.SlangTypeLibrary.SlangTypeLibrary\" \\\n  --fingerprint 3 \\\n  --bits 32 \\\n  --string-size 256 \\\n  --sequence-size 1 \\\n  --sequence \"IS[Z,B]=262144\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_SlangTypeLibrary.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.SlangTypeLibrary.SlangTypeLibrary\" \\\n  --stack-size \"16777216\" \\\n  --stable-type-id \\\n  --lib-only",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/DataContent.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait DataContent\n\n@datatype class Empty extends art.DataContent",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/ArtNative_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\n\nimport java.util.concurrent.CountDownLatch\nimport java.util.concurrent.atomic.AtomicBoolean\n\n\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtMessage {\n  val UNSET: Z = -1\n}\n\ncase class ArtMessage (data: DataContent,\n\n                       var srcPortId: Art.PortId = ArtMessage.UNSET,\n                       var dstPortId: Art.PortId = ArtMessage.UNSET,\n\n                       \/\/ when putValue was called by producer\n                       var putValueTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when sendOutput transferred message from out port var of producer \n                       var sendOutputTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when message arrived via transport layer\n                       var dstArrivalTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when receiveInput transferred message to in port vars of consumer\n                       var receiveInputTimestamp: Z = ArtMessage.UNSET\n                      )\n\nobject ArtNative_Ext {\n  val noTime: Art.Time = 0\n\n  val slowdown: Z = 1\n\n  val lastSporadic: MMap[Art.BridgeId, Art.Time] = concMap()\n  val eventPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val dataPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val receivedPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n  val sentPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val portIds = ISZ[Art.PortId](Art.bridge(bridgeId).ports.eventIns.elements.map(_.id).filter(eventPortVariables.get(_).nonEmpty): _*)\n    if (portIds.isEmpty) {\n      TimeTriggered()\n    } else {\n      val urgentFifo = ops.ISZOps(portIds.map(Art.port(_))).sortWith { \/\/ reverse sort\n        case (p1: UrgentPort[_], p2: UrgentPort[_]) =>\n          if(p1.urgency < p2.urgency) F\n          else if(p1.urgency > p2.urgency) T\n          else eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n        case (_: UrgentPort[_], _: Port[_]) => T \/\/ urgent ports take precedence\n        case (_: Port[_], _: UrgentPort[_]) => F \/\/ urgent ports take precedence\n        case (p1: Port[_], p2: Port[_]) =>\n          eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n      }.map(_.id)\n      EventTriggered(urgentFifo)\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (portId <- eventPortIds) {\n      receivedPortValues -= portId \/\/ remove stale events from previous dispatch\n      eventPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          eventPortVariables -= portId\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      dataPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    sentPortValues(portId) = ArtMessage(data = data, srcPortId = portId, putValueTimestamp = Art.time())\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    val data = receivedPortValues.get(portId) match {\n      case scala.Some(v) => org.sireum.Some(v.data)\n      case _ => org.sireum.None[DataContent]()\n    }\n    return data\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      sentPortValues.get(srcPortId) match {\n        case scala.Some(msg) =>\n          \/\/ todo send on emission as well as receive\n          for(dstPortId <- Art.connections(srcPortId).elements) {\n\n            \/\/ simulate sending msg via transport middleware\n\n            val _msg = msg.copy(dstPortId = dstPortId, sendOutputTimestamp = Art.time())\n\n            Art.port(dstPortId).mode match {\n              case PortMode.DataIn | PortMode.DataOut =>\n                dataPortVariables(dstPortId) = _msg\n              case PortMode.EventIn | PortMode.EventOut =>\n                eventPortVariables(dstPortId) = _msg\n            }\n\n            _msg.dstArrivalTimestamp = Art.time()\n\n            ArtDebug_Ext.outputCallback(srcPortId, dstPortId, _msg.data, _msg.dstArrivalTimestamp)\n          }\n          sentPortValues -= srcPortId\n        case _ =>\n      }\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = log(\"info\", title, msg)\n\n  def logError(title: String, msg: String): Unit = log(\"error\", title, msg)\n\n  def logDebug(title: String, msg: String): Unit = log(\"debug\", title, msg)\n\n  def time(): Art.Time = toZ(System.currentTimeMillis())\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    val b = Art.bridge(bridgeId)\n    b.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        val ls = lastSporadic.getOrElse(bridgeId, noTime)\n        if (time() - ls < minRate) {\n          return F\n        } else {\n          return b.ports.eventIns.elements.exists(port => eventPortVariables.contains(port.id))\n        }\n    }\n  }\n\n  def run(): Unit = {\n    \/\/require(Art.bridges.elements.forall(_.nonEmpty))\n\n    ArtDebug_Ext.start()\n\n    val bridges = {\n      var r = Vector[Bridge]()\n      for (e <- Art.bridges.elements) e match {\n        case Some(b) => r :+= b\n        case _ =>\n      }\n      r\n    }\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n    }\n\n    val terminated = new AtomicBoolean()\n    val numTerminated = new CountDownLatch(bridges.size)\n\n    for (bridge <- bridges) {\n      val rate = bridge.dispatchProtocol match {\n        case DispatchPropertyProtocol.Periodic(period) => period\n        case DispatchPropertyProtocol.Sporadic(min) => min\n      }\n\n      new Thread(() => {\n        logInfo(Art.logTitle, s\"Thread for ${bridge.name} instantiated.\")\n        ArtNative_Ext.synchronized {\n          ArtNative_Ext.wait()\n        }\n        while (!terminated.get()) {\n          Thread.sleep((rate * slowdown).toMP.toLong)\n          if (shouldDispatch(bridge.id))\n            try {\n              bridge.synchronized {\n                bridge.entryPoints.compute()\n              }\n            }\n            catch {\n              case x : Throwable =>\n                x.printStackTrace()\n                terminated.set(true)\n            }\n        }\n        numTerminated.countDown()\n      }).start()\n    }\n\n    Thread.sleep(1000)\n\n    logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    ArtNative_Ext.synchronized {\n      ArtNative_Ext.notifyAll()\n    }\n\n    Console.in.readLine()\n    terminated.set(true)\n    numTerminated.await()\n    logInfo(Art.logTitle, s\"End execution...\")\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n    }\n\n    ArtTimer_Ext.finalise()\n    ArtDebug_Ext.stop()\n  }\n\n  def log(kind: String, title: String, msg: String): Unit = {\n    Console.out.println(st\"\"\"{ \"log\" : \"$kind\", \"title\" : ${Json.Printer.printString(title)}, \"msg\" : ${Json.Printer.printString(msg)}, \"time\" : \"${time()}\" }\"\"\".render)\n    Console.out.flush()\n  }\n\n  def toZ(value: Long): Z = Z(value)\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n\n\n\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges AND resets all inputs and outputs for all ports.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ note that all ports and bridges were deleted by Art's initTest\n\n    \/\/ delete ALL port values as well as lastSporadic tracker\n    lastSporadic.clear()\n    eventPortVariables.clear()\n    dataPortVariables.clear()\n    receivedPortValues.clear()\n    sentPortValues.clear()\n\n    \/\/ clear pending ArtTimer events (also done after a test completes)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n\n    bridge.entryPoints.initialise()\n    logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n  }\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.testCompute()\n  }\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.finalise()\n    logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n\n    \/\/ clear pending ArtTimer events (also done before a test begins)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n  }\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ testing SEND_OUTPUT\n    \/\/ note: sendOutput is usually accessed via: Art.sendOutput -> ArtNative.sendOutput -> ArtNative_Ext.sendOutput\n    \/\/ NO OP\n  }\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = {\n    sentPortValues.clear()\n  }\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    val artMessage = ArtMessage(data = data, dstPortId = dstPortId, dstArrivalTimestamp = Art.time())\n    Art.port(dstPortId).mode match {\n      case PortMode.DataIn | PortMode.DataOut =>\n        dataPortVariables(dstPortId) = artMessage\n      case PortMode.EventIn | PortMode.EventOut =>\n        eventPortVariables(dstPortId) = artMessage\n    }\n  }\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    sentPortValues.get(portId) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/ArtDebug_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.Art.Time\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtDebug_Ext {\n  private val debugObjects: MMap[String, Any] = ArtNative_Ext.concMap()\n  private val listeners: MSet[ArtListener] = concSet()\n\n  protected[art] def start(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.start(time))\n  }\n\n  protected[art] def stop(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.stop(time))\n  }\n\n  protected[art] def outputCallback(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Time): Unit = {\n    listeners.foreach((listener: ArtListener) => listener.output(src, dst, data, time))\n  }\n\n  def setDebugObject[T](key: String, o: T): Unit = {\n    ArtNative.logDebug(Art.logTitle, s\"Set debug object for $key\")\n    debugObjects(key) = o\n  }\n\n  def getDebugObject[T](key: String): Option[T] = {\n    debugObjects.get(key) match {\n      case scala.Some(o) => Some(o.asInstanceOf[T])\n      case _ => None[T]()\n    }\n  }\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = {\n    assert(z\"0\" <= bridgeId && bridgeId < Art.maxComponents && Art.bridges(bridgeId).nonEmpty)\n\n    val bridge = Art.bridges(bridgeId).get\n    assert(bridge.ports.all.elements.map(_.id).contains(port))\n\n    if(bridge.ports.dataOuts.elements.map(_.id).contains(port) ||\n      bridge.ports.eventOuts.elements.map(_.id).contains(port)) {\n\n      ArtNative.logDebug(Art.logTitle, s\"Injecting from port ${Art.ports(port).get.name}\")\n\n      ArtNative.putValue(port, data)\n      ArtNative.sendOutput(bridge.ports.eventOuts.map(_.id), bridge.ports.dataOuts.map(_.id))\n    } else {\n      ArtNative.logDebug(Art.logTitle, s\"Injecting to port ${Art.ports(port).get.name}\")\n\n      if(bridge.ports.dataIns.elements.map(_.id).contains(port)) {\n        ArtNative_Ext.dataPortVariables(port) = ArtMessage(data)\n      } else {\n        ArtNative_Ext.eventPortVariables(port) = ArtMessage(data)\n      }\n    }\n  }\n\n  def registerListener(listener: ArtListener): Unit = {\n    listeners.add(listener)\n  }\n\n  def concSet[K](): MSet[K] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    val m: java.util.Set[K] = java.util.concurrent.ConcurrentHashMap.newKeySet()\n    m.asScala\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/ArtDebug.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtDebug {\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = $\n\n  def registerListener(listener: ArtListener): Unit = $\n\n  def setDebugObject[T](key: String, o: T): Unit = $\n\n  def getDebugObject[T](key: String): Option[T] = $\n}\n\n@msig trait ArtListener {\n\n  \/\/ lifecycle information\n  def start(time: Art.Time): Unit\n  def stop(time: Art.Time): Unit\n\n  \/\/ communication information\n  def output(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Art.Time): Unit\n\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/ArtTimer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.Art.BridgeId\n\n@ext object ArtTimer {\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = $\n\n  def clearTimeout(eventId: String): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/ArtNative.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtNative {\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = $\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = $\n\n  def getValue(portId: Art.PortId): Option[DataContent] = $\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def logInfo(title: String, msg: String): Unit = $\n\n  def logError(title: String, msg: String): Unit = $\n\n  def logDebug(title: String, msg: String): Unit = $\n\n  def run(): Unit = $\n\n  def time(): Art.Time = $\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = $\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = $\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = $\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/Art.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\nobject Art {\n  type PortId = Z\n  type BridgeId = Z\n  type Time = Z\n\n  val z16max: PortId = org.sireum.conversions.Z16.toZ(Z16.Max) \/\/ 32,767\n\n  val maxComponents: BridgeId = 9\n  val maxPorts: PortId = 40\n\n  val logTitle: String = \"Art\"\n  val bridges: MS[BridgeId, Option[Bridge]] = MS.create[BridgeId, Option[Bridge]](maxComponents, None[Bridge]())\n  val connections: MS[PortId, ISZ[PortId]] = MS.create[PortId, ISZ[PortId]](maxPorts, ISZ())\n  val ports: MS[PortId, Option[UPort]] = MS.create[PortId, Option[UPort]](maxPorts, None[UPort]())\n\n  def bridge(bridgeId: BridgeId): Bridge = {\n    val Some(r) = bridges(bridgeId)\n    return r\n  }\n\n  def port(p: PortId) : UPort = {\n    val Some(r) = ports(p)\n    return r\n  }\n\n  def register(bridge: Bridge): Unit = {\n    bridges(bridge.id) = Some(bridge)\n    bridge.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (periodic: $period)\")\n      case DispatchPropertyProtocol.Sporadic(min) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (sporadic: $min)\")\n    }\n    for (port <- bridge.ports.all) {\n      ports(port.id) = Some(port)\n      port.mode match {\n        case PortMode.DataIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data in)\")\n        case PortMode.DataOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data out)\")\n        case PortMode.EventIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event in)\")\n        case PortMode.EventOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event out)\")\n      }\n    }\n  }\n\n  \/\/ can't find definition in the standard ??\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = { \/\/ DISPATCH_STATUS\n    return ArtNative.dispatchStatus(bridgeId)\n  }\n\n  def receiveInput(eventPortIds: ISZ[PortId], dataPortIds: ISZ[PortId]): Unit = { \/\/ RECEIVE_INPUT\n    ArtNative.receiveInput(eventPortIds, dataPortIds)\n  }\n\n  def putValue(portId: PortId, data: DataContent): Unit = { \/\/ PUT_VALUE\n    ArtNative.putValue(portId, data)\n  }\n\n  def getValue(portId: PortId): Option[DataContent] = { \/\/ GET_VALUE\n    return ArtNative.getValue(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    ArtNative.sendOutput(eventPortIds, dataPortIds)\n  }\n\n  def logInfo(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logInfo(bridge(bridgeId).name, msg)\n  }\n\n  def logError(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logError(bridge(bridgeId).name, msg)\n  }\n\n  def logDebug(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logDebug(bridge(bridgeId).name, msg)\n  }\n\n  def connect(from: UPort, to: UPort): Unit = {\n    connections(from.id) = connections(from.id) :+ to.id\n    ArtNative.logInfo(logTitle, s\"Connected ports: ${from.name} -> ${to.name}\")\n  }\n\n  def run(system: ArchitectureDescription): Unit = {\n\n    for (component <- system.components) {\n      register(component)\n    }\n\n    for (connection <- system.connections) {\n      connect(connection.from, connection.to)\n    }\n\n    ArtNative.run()\n  }\n\n  def time(): Time = {\n    return ArtNative.time()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Clears any existing ports and bridges, then sets up ports\/bridges for the next test.\n   *\n   * Automatically called by BridgeTestSuite before each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = None()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n\n    \/\/ register bridge passed to this method\n    register(bridge)\n\n    \/\/ let ArtNative reset itself as well\n    ArtNative.initTest(bridge)\n  }\n\n  def executeTest(bridge: Bridge): Unit = {\n    ArtNative.executeTest(bridge)\n  }\n\n  def finalizeTest(bridge: Bridge): Unit = {\n    ArtNative.finalizeTest(bridge)\n  }\n\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    ArtNative.releaseOutput(eventPortIds, dataPortIds)\n  }\n\n  def manuallyClearOutput(): Unit = {\n    ArtNative.manuallyClearOutput()\n  }\n\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    ArtNative.insertInPortValue(dstPortId, data)\n  }\n\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    ArtNative.observeOutPortValue(portId)\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/ArtTimer_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum.{B, F, ISZ, String, T}\nimport art.Art.{BridgeId, Time}\n\nimport scala.collection.mutable.{Map => MMap}\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.util.concurrent.Executors\nimport java.util.concurrent.TimeUnit\n\nobject ArtTimer_Ext {\n\n  val m: MMap[String, AtomicBoolean] = ArtNative_Ext.concMap()\n  val executor = Executors.newSingleThreadScheduledExecutor()\n\n  def finalise(): Unit = {\n    executor.shutdownNow()\n    ArtNative.logInfo(Art.logTitle, \"Finalized ArtTimer\")\n  }\n\n  def clearTimeout(eventId: String): Unit = {\n    m.get(eventId) match {\n      case Some(b) =>\n        b.set(false)\n        m.remove(eventId)\n        ArtNative.logInfo(Art.logTitle, s\"timeout cleared for $eventId\")\n      case _ =>\n    }\n  }\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = {\n    if(m.get(eventId).nonEmpty) {\n      art.Art.logError(bridgeId, s\"callback already set for $eventId\")\n      return\n    }\n\n    if(wait < 0) {\n      art.Art.logError(bridgeId, s\"Invalid wait time: ${wait}.  Value must be non-negative.\")\n      return\n    }\n\n    var b = new AtomicBoolean(true)\n\n    val bridge = Art.bridge(bridgeId)\n    val eventOuts = bridge.ports.eventOuts.map(_.id)\n    val dataOuts = bridge.ports.dataOuts.map(_.id)\n\n    val task = new Runnable {\n      override def run(): Unit = {\n        if (b.get()) {\n          bridge.synchronized {\n            callback()\n            Art.sendOutput(eventOuts, dataOuts)\n            if(autoClear) {\n              clearTimeout(eventId)\n            }\n          }\n        }\n      }\n    }\n\n    m.put(eventId, b)\n\n    val adjusted = wait.toMP.toLong * ArtNative_Ext.slowdown.toMP.toLong\n    executor.schedule(task, adjusted, TimeUnit.MILLISECONDS)\n\n    art.Art.logInfo(bridgeId, s\"callback set for $eventId\")\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/src\/main\/art\/ArchitectureDescription.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n\n@datatype class ArchitectureDescription(components: ISZ[Bridge],\n                                        connections: ISZ[UConnection]) {\n  @spec val allPorts: ISZ[UPort] = $\n\n  @spec def allPortsSpec(i: Z): ISZ[UPort] = $\n  \/*\n    l\"\"\"\n    = base:  ISZ[UPort](), if i == 0\n    = rec:   components(i).ports.all ++ allPorts(i - 1), if 0 < i \u2227 i < components.size\n  \"\"\"\n\n  l\"\"\" invariant\n\n         AllPorts:\n           allPorts \u2261 allPortsSpec(components.size - 1)\n\n         ComponentIdUnique:\n           \u2200i: [0, components.size)\n             \u2200j: [0, components.size)\n               i \u2260 j \u2192 components(i).id \u2260 components(j).id\n\n         PortIdUnique:\n           \u2200i: [0, allPorts.size)\n             \u2200j: [0, allPorts.size)\n               i \u2260 j \u2192 allPorts(i).id \u2260 allPorts(j).id\n   \"\"\"\n  *\/\n}\n\n@datatype trait UConnection {\n  \/*\n  l\"\"\" invariant\n         FromPortOut:   from.mode \u2261 PortMode.DataOut \u2228 from.mode \u2261 PortMode.EventOut\n         DataPort:    (from.mode \u2261 PortMode.DataOut) \u2261 (to.mode \u2261 PortMode.DataIn)\n         EventPort:  (from.mode \u2261 PortMode.EventOut) \u2261 (to.mode \u2261 PortMode.EventIn)  \"\"\"\n  *\/\n\n  def from: UPort\n\n  def to: UPort\n}\n\n@datatype class Connection(val from: UPort, val to: UPort)\n  extends UConnection\n\n\n@enum object PortMode {\n  'DataIn\n  'DataOut\n  'EventIn\n  'EventOut\n}\n\n@datatype trait UPort {\n  def id: Art.PortId\n\n  def name: String\n\n  def mode: PortMode.Type\n}\n\n@datatype class Port[T](val id: Art.PortId,\n                        val name: String,\n                        val mode: PortMode.Type)\n  extends UPort\n\n@datatype class UrgentPort[T](val id: Art.PortId,\n                              val name: String,\n                              val mode: PortMode.Type,\n                              val urgency: Z)\n  extends UPort\n\n@sig trait Bridge {\n  def id: Art.BridgeId\n\n  def name: String\n\n  def ports: Bridge.Ports\n\n  def entryPoints: Bridge.EntryPoints\n\n  def dispatchProtocol: DispatchPropertyProtocol\n}\n\n\nobject Bridge {\n\n  \/\/ initialise()  ( compute() | activate() deactivate() | recover() )* finalise()\n  @sig trait EntryPoints {\n\n    def initialise(): Unit\n\n    def activate(): Unit\n\n    def deactivate(): Unit\n\n    def compute(): Unit\n\n    def recover(): Unit\n\n    def finalise(): Unit\n\n    def testCompute(): Unit = { println(\"Default testCompute\") }\n  }\n\n  @datatype class Ports(all: ISZ[UPort],\n                        dataIns: ISZ[UPort],\n                        dataOuts: ISZ[UPort],\n                        eventIns: ISZ[UPort],\n                        eventOuts: ISZ[UPort])\n\n}\n\n\n@datatype trait DispatchPropertyProtocol\n\nobject DispatchPropertyProtocol {\n\n  @datatype class Periodic(period: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Aperiodic() extends DispatchPropertyProtocol\n\n  @datatype class Sporadic(min: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Timed() extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Hybrid() extends DispatchPropertyProtocol\n}\n\n@datatype trait DispatchStatus\n\n@datatype class TimeTriggered() extends DispatchStatus\n\n@datatype class EventTriggered(portIds: ISZ[Art.PortId]) extends DispatchStatus",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/bin\/project.cmd",
        {
          "type" : "TestResource",
          "content" : "::#! 2> \/dev\/null                                   #\n@ 2>\/dev\/null # 2>nul & echo off & goto BOF         #\nif [ -z ${SIREUM_HOME} ]; then                      #\n  echo \"Please set SIREUM_HOME env var\"             #\n  exit -1                                           #\nfi                                                  #\nexec ${SIREUM_HOME}\/bin\/sireum slang run \"$0\" \"$@\"  #\n:BOF\nsetlocal\nif not defined SIREUM_HOME (\n  echo Please set SIREUM_HOME env var\n  exit \/B -1\n)\n%SIREUM_HOME%\\\\bin\\\\sireum.bat slang run \"%0\" %*\nexit \/B %errorlevel%\n::!#\n\/\/ #Sireum\n\n\/\/ Example Sireum Proyek build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ To install Sireum (Proyek and IVE) see https:\/\/github.com\/sireum\/kekinian#installing\n\/\/\n\/\/ The following commands should be executed in the parent of the 'bin' directory.\n\/\/\n\/\/ Command Line:\n\/\/   To run the demo from the command line:\n\/\/     sireum proyek run . slang_embedded.Demo\n\/\/\n\/\/   To run the example unit tests from the command line:\n\/\/     sireum proyek test .\n\/\/\n\/\/   To build an executable jar:\n\/\/     sireum proyek assemble --uber --main slang_embedded.Demo .\n\/\/\n\/\/ Sireum IVE:\n\/\/\n\/\/   If you prevented HAMR from running Proyek IVE then first generate the IVE project:\n\/\/     sireum proyek ive .\n\/\/\n\/\/   Then in IVE select 'File > Open ...' and navigate to the parent of the\n\/\/   'bin' directory and click 'OK'.\n\/\/\n\/\/   To run the demo from within Sireum IVE:\n\/\/     Right click src\/main\/architecture\/slang_embedded\/Demo.scala and choose \"Run 'Demo'\"\n\/\/\n\/\/   To run the unit test cases from within Sireum IVE:\n\/\/     Right click the src\/test\/bridge and choose \"Run ScalaTests in bridge\"\n\/\/\n\/\/   NOTE: A ClassNotFoundException may be raised the first time you try to\n\/\/         run the demo or unit tests.  If this occurs simply delete the directory\n\/\/         named 'target' and retry\n\nimport org.sireum._\nimport org.sireum.project.{Module, Project, Target}\n\nval home: Os.Path = Os.slashDir.up.canon\n\nval slangModule: Module = Module(\n  id = \"UAV_Impl_Instance\",\n  basePath = (home \/ \"src\").string,\n  subPathOpt = None(),\n  deps = ISZ(),\n  targets = ISZ(Target.Jvm),\n  ivyDeps = ISZ(\"org.sireum.kekinian::library:\", \"com.intellij:forms_rt:\"),\n  sources = for(m <- ISZ(\"art\", \"architecture\", \"bridge\", \"component\", \"data\", \"nix\", \"seL4Nix\")) yield (Os.path(\"main\") \/ m).string,\n  resources = ISZ(),\n  testSources = for (m <- ISZ(\"bridge\", \"util\")) yield (Os.path(\"test\") \/ m).string,\n  testResources = ISZ(),\n  publishInfoOpt = None()\n)\n\nval inspectorModule: Module = slangModule(\n  sources = slangModule.sources :+ (Os.path(\"main\") \/ \"inspector\").string,\n  ivyDeps = slangModule.ivyDeps ++ ISZ(\"org.sireum:inspector-capabilities:\", \"org.sireum:inspector-gui:\", \"org.sireum:inspector-services-jvm:\")\n)\n\nval slangProject: Project = Project.empty + slangModule\nval inspectorProject: Project = Project.empty + inspectorModule\n\nval prj: Project = slangProject\n\/\/val prj: Project = inspectorProject()\n\nprintln(project.JSON.fromProject(prj, T))\n",
          "overwrite" : false,
          "makeExecutable" : true
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/versions.properties",
        {
          "type" : "TestResource",
          "content" : "org.sireum.slang-embedded-art%%slang-embedded-art%=a067cfb\n\norg.sireum%inspector-capabilities%=0.6-SNAPSHOT\norg.sireum%inspector-gui%=0.6-SNAPSHOT\norg.sireum%inspector-services-jvm%=0.6-SNAPSHOT\n\ncom.intellij%forms_rt%=7.0.3\n\n\n# remove the following entries if you want to use the versions\n# that ship with sireum (i.e. $SIREUM_HOME\/bin\/sireum --version)\n\n# Scala compiler plugin for Slang\norg.sireum%%scalac-plugin%=4.20210628.32781ff\n\norg.sireum.kekinian%%library%kekinianVersion%=4.20210617.8a885a8\n\norg.scala-lang%scala-library%=2.13.6\norg.scalatest%%scalatest%%=3.2.9\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/build.sc",
        {
          "type" : "TestResource",
          "content" : "import mill._\nimport scalalib._\nimport ammonite.ops._\n\n\/\/ Example mill build -- the contents of this file will not be overwritten.\n\/\/\n\/\/ mill can be obtained following instructions at https:\/\/github.com\/sireum\/kekinian#slang-app-example-mill-project\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   $SIREUM_HOME\/bin\/mill slang_embedded.run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   $SIREUM_HOME\/bin\/mill slang_embedded.tests\n\/\/\n\/\/ Sireum IVE:\n\/\/   First cd to the directory containing this file and execute the following:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/sireum tools ivegen -f -m mill -n slang-embedded ..\/\n\/\/\n\/\/   Then in IVE select 'File > Open ...' and navigate to the directory\n\/\/   containing this file then click 'OK'.  To have the codebase and its\n\/\/   test suites recompiled upon changes, run:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/mill -w slang_embedded.tests.compile\n\/\/\n\/\/ Visual Studio Code:\n\/\/   Follow Sireum Kekinian's instructions for setting up a development\n\/\/   environment using Scala Metals: https:\/\/github.com\/sireum\/kekinian#scala-metals\n\/\/   Then open the folder containing this file in VS Code and import the\n\/\/   mill build when asked.\n\n\nobject `slang_embedded` extends slangEmbeddedProject\n\ntrait SlangEmbeddedModule extends ScalaModule {\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n  \/\/ to get the most recent versions of the following dependencies\n\n  \/\/ versions.properties key: org.scala-lang%scala-library%\n  val scalaVer = \"2.13.6\"\n\n  \/\/ versions.properties key: org.scalatest%%scalatest%%\n  val scalaTestVersion = \"3.2.9\"\n\n  \/\/ versions.properties key: org.sireum%%scalac-plugin%\n  \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20210628.32781ff\n  val sireumScalacVersion = \"4.20210628.32781ff\"\n\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n  \/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/4.20210617.8a885a8\n  val kekinianVersion = \"4.20210617.8a885a8\"\n\n\n  val inspectorVersion = \"0.6-SNAPSHOT\"\n\n  val formsRtVersion = \"7.0.3\"\n\n\n  def scalaVersion = scalaVer\n\n  override def javacOptions = T { Seq(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"utf8\") }\n\n  override def scalacOptions = T { Seq(\n    \"-target:jvm-1.8\",\n    \"-deprecation\",\n    \"-Yrangepos\",\n    \"-Ydelambdafy:method\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Xfatal-warnings\",\n    \"-language:postfixOps\"\n  ) }\n\n  override def ivyDeps = Agg(\n    ivy\"org.sireum.kekinian::library::${kekinianVersion}\",\n\n    \/\/ Jetbrains UI Designer\n    ivy\"com.intellij:forms_rt:${formsRtVersion}\"\n  )\n\n  override def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin::${sireumScalacVersion}\")\n\n  override def repositories = super.repositories :+ coursier.Repositories.jitpack\n\n  override def mainClass = T { Some(\"slang_embedded.Demo\") }\n\n  implicit def osPath2PathRef(p: os.Path): PathRef = PathRef(p)\n}\n\ntrait slangEmbeddedProject extends SlangEmbeddedModule {\n\n  def contributedSources: Seq[PathRef] = Seq(\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"architecture\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"art\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"bridge\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"component\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"data\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"nix\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"seL4Nix\"\n  )\n\n  override def sources = T.sources(contributedSources)\n\n  object tests extends Tests {\n\n    final override def millSourcePath = super.millSourcePath \/ os.up \/ os.up \/ \"src\" \/ \"test\"\n\n    override def sources = T.sources( millSourcePath \/ \"bridge\",\n                                      millSourcePath \/ \"util\" )\n\n    override def ivyDeps = Agg(ivy\"org.scalatest::scalatest::${scalaTestVersion}\")\n\n    override def testFrameworks = T { Seq(\"org.scalatest.tools.Framework\") }\n  }\n}\n\ntrait slangEmbeddedInspectorProject extends slangEmbeddedProject {\n\n  override def mainClass = T { Some(\"slang_embedded.InspectorDemo\") }\n\n  override def contributedSources =\n    super.contributedSources :+ millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"inspector\"\n\n  \/\/ FIXME: 2021.01.04 - the following doesn't work due to javafx\/mill resolution issue\n  \/\/        -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767\n  \/\/ override def ivyDeps = Agg(\n  \/\/   ivy\"org.sireum::inspector-capabilities::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-gui::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-services-jvm::${inspectorVersion}\"\n\n  \/\/ workaround to #767 -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767#issuecomment-652799588\n  override def unmanagedClasspath = T {\n    import coursier._\n\n    val files = Fetch().addDependencies(\n      dep\"org.sireum:inspector-capabilities:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-gui:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-services-jvm:0.6-SNAPSHOT\"\n    ).addRepositories(\n      Repositories.sonatype(\"releases\"),\n      Repositories.jitpack\n    ).run()\n    val pathRefs = files.map(f => PathRef(Path(f)))\n    Agg(pathRefs : _*)\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/build.sbt",
        {
          "type" : "TestResource",
          "content" : "\/\/ Example sbt build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ sbt can be obtained from https:\/\/www.scala-sbt.org\/download.html\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   sbt run\n\/\/\n\/\/ To run the example unit tests from the command line:\n\/\/   sbt test\n\/\/\n\/\/ To build a runnable\/executable jar:\n\/\/   sbt assembly\n\/\/\n\/\/ To skip running the unit tests while building the executable jar:\n\/\/   sbt 'set test in assembly := {}' assembly\n\/\/ on Linux\/Mac, or\n\/\/   sbt \"set test in assembly := {}\" assembly\n\/\/ on Windows\n\/\/\n\/\/ Sireum IVE:\n\/\/   In IVE select 'File > Open ...' and navigate to the directory containing\n\/\/   this file then click 'OK'.  To install Sireum IVE see https:\/\/github.com\/sireum\/kekinian#installing\n\/\/\n\/\/   To run the demo from within Sireum IVE:\n\/\/     Right click src\/main\/architecture\/slang_embedded\/Demo.scala and choose \"Run 'Demo'\"\n\/\/\n\/\/   To run the unit test cases from within Sireum IVE:\n\/\/     Right click the src\/test\/bridge directory and choose \"Run ScalaTests in bridge\"\n\/\/\n\/\/   NOTE: A ClassNotFoundException may be raised the first time you try to\n\/\/         run the demo or unit tests.  If this occurs simply delete the directory\n\/\/         named 'target' and retry\n\n\nlazy val UAV_Impl_Instance = slangEmbeddedProject(\"UAV_Impl_Instance\", \".\")\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n\/\/ to get the most recent versions of the following dependencies\n\n\/\/ versions.properties key: org.scala-lang%scala-library%\nval scalaVer = \"2.13.6\"\n\n\/\/ versions.properties key: org.scalatest%%scalatest%%\nval scalaTestVersion = \"3.2.9\"\n\n\/\/ versions.properties key: org.sireum%%scalac-plugin%\n\/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20210628.32781ff\nval sireumScalacVersion = \"4.20210628.32781ff\"\n\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n\/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/4.20210617.8a885a8\nval kekinianVersion = \"4.20210617.8a885a8\"\n\n\nval inspectorVersion = \"0.6-SNAPSHOT\"\n\nval formsRtVersion = \"7.0.3\"\n\n\n\nval commonSettings = Seq(\n  organization := \"org.sireum\",\n  incOptions := incOptions.value.withLogRecompileOnMacro(false),\n  scalaVersion := scalaVer,\n  scalacOptions := Seq(\"-target:jvm-1.8\", \"-deprecation\",\n    \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-Xfatal-warnings\"),\n  Test \/ parallelExecution := true,\n  resolvers ++= Seq(Resolver.sonatypeRepo(\"public\"), \"jitpack\" at \"https:\/\/jitpack.io\"),\n  addCompilerPlugin(\"org.sireum\" %% \"scalac-plugin\" % sireumScalacVersion),\n  libraryDependencies ++= Seq(\n    \"org.sireum.kekinian\" %% \"library\" % kekinianVersion withSources() withJavadoc()\n  )\n)\n\nimport sbtassembly.AssemblyPlugin.defaultUniversalScript\nval slangEmbeddedSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/art\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/architecture\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/bridge\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/component\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/data\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/seL4Nix\",\n\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/bridge\",\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/util\",\n\n  libraryDependencies += \"org.scalatest\" %% \"scalatest\" % scalaTestVersion % \"test\",\n\n  \/\/ Jetbrains UI Designer\n  libraryDependencies += \"com.intellij\" % \"forms_rt\" % formsRtVersion,\n\n  mainClass in (Compile, run) := Some(\"slang_embedded.Demo\"),\n\n  mainClass in assembly := Some(\"slang_embedded.Demo\"),\n  assemblyJarName in assembly := \"UAV_Impl_Instance.jar\",\n  assemblyOption in assembly := (assemblyOption in assembly).value.copy(prependShellScript = Some(defaultUniversalScript(shebang = false))),\n\n  assemblyMergeStrategy in assembly := {\n    case PathList(\"META-INF\", xs @ _*) => MergeStrategy.discard\n    case x => MergeStrategy.first\n  }\n)\n\nval slangEmbeddedInspectorSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/inspector\",\n\n  libraryDependencies += \"org.sireum\" % \"inspector-capabilities\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-gui\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-services-jvm\" % inspectorVersion withSources(),\n\n  mainClass in (Compile, run) := Some(\"slang_embedded.InspectorDemo\"),\n)\n\ndef slangEmbeddedProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings)\n\ndef slangEmbeddedInspectorProject(projId: String, projectDirectory: String) = {\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings ++ slangEmbeddedInspectorSettings)\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/project\/build.properties",
        {
          "type" : "TestResource",
          "content" : "sbt.version=1.3.3\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/slang-embedded\/project\/plugins.sbt",
        {
          "type" : "TestResource",
          "content" : "addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.15.0\")\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.camkes",
        {
          "type" : "TestResource",
          "content" : "component UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_AirVehicleState_WPM_1_notification;\n  emits ReceiveEvent sb_AirVehicleState_UXAS_1_notification;\n  consumes ReceiveEvent sb_MissionCommand_notification;\n  consumes Period sb_pacer_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_MissionCommand_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_AirVehicleState_WPM_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_AirVehicleState_UXAS_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/VM_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.camkes",
        {
          "type" : "TestResource",
          "content" : "component VM_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  include <sb_queue_int8_t_1.h>;\n  control;\n  provides VMDTBPassthrough dtb;\n  uses FileServerInterface fs;\n  maybe uses Batch batch;\n  maybe uses PutChar guest_putchar;\n  maybe uses GetChar serial_getchar;\n  maybe uses VirtQueueDev recv;\n  maybe uses VirtQueueDrv send;\n  maybe uses VMDTBPassthrough dtb_self;\n  emits HaveNotification notification_ready_connector;\n  emits ReceiveEvent sb_trusted_ids_1_notification;\n  emits ReceiveEvent sb_AutomationRequest_1_notification;\n  emits ReceiveEvent sb_OperatingRegion_1_notification;\n  emits ReceiveEvent sb_LineSearchTask_1_notification;\n  maybe consumes restart restart_event;\n  consumes HaveNotification notification_ready;\n  consumes Period_VM sb_pacer_period_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_trusted_ids_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationRequest_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_OperatingRegion_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_LineSearchTask_queue_1;\n  dataport sb_queue_int8_t_1_t sb_pacer_period_queue;\n  has semaphore vm_sem;\n  \/\/ expanding: VM_INIT_DEF()\n  attribute int base_prio;\n  attribute int num_vcpus = 1;\n  attribute int num_extra_frame_caps;\n  attribute int extra_frame_map_address;\n  attribute {\n    string linux_ram_base;\n    string linux_ram_paddr_base;\n    string linux_ram_size;\n    string linux_ram_offset;\n    string dtb_addr;\n    string initrd_max_size;\n    string initrd_addr;\n  } linux_address_config;\n  attribute {\n    string linux_name = \"linux\";\n    string dtb_name = \"linux-dtb\";\n    string initrd_name = \"linux-initrd\";\n    string linux_bootcmdline = \"\";\n    string linux_stdout = \"\";\n  } linux_image_config;\n  \/\/ end of expansion: VM_INIT_DEF()\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.camkes",
        {
          "type" : "TestResource",
          "content" : "component FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase {\n  include <sb_types.h>;\n  include <sp_union_art_DataContent.h>;\n  control;\n  consumes Period sb_pacer_notification;\n  dataport sp_union_art_DataContent_t sb_keep_in_zones;\n  dataport sp_union_art_DataContent_t sb_keep_out_zones;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/VM_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.camkes",
        {
          "type" : "TestResource",
          "content" : "component VM_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  include <sb_queue_int8_t_1.h>;\n  control;\n  provides VMDTBPassthrough dtb;\n  uses FileServerInterface fs;\n  maybe uses Batch batch;\n  maybe uses PutChar guest_putchar;\n  maybe uses GetChar serial_getchar;\n  maybe uses VirtQueueDev recv;\n  maybe uses VirtQueueDrv send;\n  maybe uses VMDTBPassthrough dtb_self;\n  emits HaveNotification notification_ready_connector;\n  emits ReceiveEvent sb_AutomationResponse_MON_GEO_1_notification;\n  emits ReceiveEvent sb_AutomationResponse_MON_REQ_1_notification;\n  maybe consumes restart restart_event;\n  consumes HaveNotification notification_ready;\n  consumes ReceiveEvent sb_AutomationRequest_notification;\n  consumes ReceiveEvent sb_AirVehicleState_notification;\n  consumes ReceiveEvent sb_OperatingRegion_notification;\n  consumes ReceiveEvent sb_LineSearchTask_notification;\n  consumes Period_VM sb_pacer_period_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationRequest_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_AirVehicleState_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_OperatingRegion_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_LineSearchTask_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationResponse_MON_GEO_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationResponse_MON_REQ_queue_1;\n  dataport sb_queue_int8_t_1_t sb_pacer_period_queue;\n  has semaphore vm_sem;\n  \/\/ expanding: VM_INIT_DEF()\n  attribute int base_prio;\n  attribute int num_vcpus = 1;\n  attribute int num_extra_frame_caps;\n  attribute int extra_frame_map_address;\n  attribute {\n    string linux_ram_base;\n    string linux_ram_paddr_base;\n    string linux_ram_size;\n    string linux_ram_offset;\n    string dtb_addr;\n    string initrd_max_size;\n    string initrd_addr;\n  } linux_address_config;\n  attribute {\n    string linux_name = \"linux\";\n    string dtb_name = \"linux-dtb\";\n    string initrd_name = \"linux-initrd\";\n    string linux_bootcmdline = \"\";\n    string linux_stdout = \"\";\n  } linux_image_config;\n  \/\/ end of expansion: VM_INIT_DEF()\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.camkes",
        {
          "type" : "TestResource",
          "content" : "component WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  include <sb_event_counter.h>;\n  control;\n  emits ReceiveEvent sb_MissionCommand_1_notification;\n  consumes ReceiveEvent sb_AutomationResponse_notification;\n  consumes ReceiveEvent sb_AirVehicleState_notification;\n  consumes ReceiveEvent sb_ReturnHome;\n  consumes Period sb_pacer_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationResponse_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_AirVehicleState_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_MissionCommand_queue_1;\n  dataport sb_event_counter_t sb_ReturnHome_counter;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.camkes",
        {
          "type" : "TestResource",
          "content" : "component CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_AutomationRequest_out_UXAS_1_notification;\n  emits ReceiveEvent sb_AutomationRequest_out_MON_REQ_1_notification;\n  emits ReceiveEvent sb_OperatingRegion_out_1_notification;\n  emits ReceiveEvent sb_LineSearchTask_out_1_notification;\n  consumes ReceiveEvent sb_trusted_ids_notification;\n  consumes ReceiveEvent sb_AutomationRequest_in_notification;\n  consumes ReceiveEvent sb_OperatingRegion_in_notification;\n  consumes ReceiveEvent sb_LineSearchTask_in_notification;\n  consumes Period sb_pacer_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_trusted_ids_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationRequest_in_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationRequest_out_UXAS_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationRequest_out_MON_REQ_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_OperatingRegion_in_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_OperatingRegion_out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_LineSearchTask_in_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_LineSearchTask_out_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.camkes",
        {
          "type" : "TestResource",
          "content" : "component CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_filter_out_1_notification;\n  consumes ReceiveEvent sb_filter_in_notification;\n  consumes Period sb_pacer_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_filter_in_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_filter_out_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.camkes",
        {
          "type" : "TestResource",
          "content" : "component CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  consumes ReceiveEvent sb_observed_notification;\n  consumes ReceiveEvent sb_reference_1_notification;\n  consumes Period sb_pacer_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_observed_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_reference_1_queue;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.camkes",
        {
          "type" : "TestResource",
          "content" : "component CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo {\n  include <sb_types.h>;\n  include <sp_union_art_DataContent.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  include <sb_event_counter.h>;\n  control;\n  emits ReceiveEvent sb_output_1_notification;\n  emits ReceiveEvent sb_alert;\n  consumes ReceiveEvent sb_observed_notification;\n  consumes Period sb_pacer_notification;\n  dataport sp_union_art_DataContent_t sb_keep_in_zones;\n  dataport sp_union_art_DataContent_t sb_keep_out_zones;\n  dataport sb_queue_union_art_DataContent_1_t sb_observed_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_output_queue_1;\n  dataport sb_event_counter_t sb_alert_counter;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/Pacer\/Pacer.camkes",
        {
          "type" : "TestResource",
          "content" : "component Pacer {\n  include <sb_queue_int8_t_1.h>;\n  control;\n  emits Period_VM period_to_vmRADIO_notification;\n  emits Period_VM period_to_vmUXAS_notification;\n  emits Period period;\n  emits TickTock tick;\n  consumes TickTock tock;\n  dataport sb_queue_int8_t_1_t period_to_vmRADIO_queue;\n  dataport sb_queue_int8_t_1_t period_to_vmUXAS_queue;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/UAV_Impl_Instance.camkes",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <seL4VMDTBPassthrough.idl4>;\nimport <FileServerInterface.camkes>;\nimport <FileServer\/FileServer.camkes>;\nimport <SerialServer\/SerialServer.camkes>;\nimport <TimeServer\/TimeServer.camkes>;\nimport <vm-connectors.camkes>;\nimport <devices.camkes>;\nimport \"components\/Pacer\/Pacer.camkes\";\nimport \"components\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver.camkes\";\nimport \"components\/VM_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\/VM_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation.camkes\";\nimport \"components\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase.camkes\";\nimport \"components\/VM_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\/VM_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS.camkes\";\nimport \"components\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService.camkes\";\nimport \"components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.camkes\";\nimport \"components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.camkes\";\nimport \"components\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.camkes\";\nimport \"components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.camkes\";\n\nassembly {\n  composition {\n    component UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver MCMP_PROC_SW_FC_UART_UARTDriver;\n    component VM_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation vmRADIO;\n    component FileServer fserv;\n    component SerialServer serial;\n    component TimeServer time_server;\n    component FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase MCMP_PROC_SW_FlyZones_FlyZonesDatabase;\n    component VM_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS vmUXAS;\n    component WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService MCMP_PROC_SW_WPM_WaypointPlanManagerService;\n    component CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate MCMP_PROC_SW_AM_Gate_CASE_AttestationGate;\n    component CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST MCMP_PROC_SW_FLT_LST_CASE_Filter_LST;\n    component CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req;\n    component CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo;\n    component Pacer pacer;\n\n    connection seL4VMDTBPassthrough conn1(from vmRADIO.dtb_self, to vmRADIO.dtb);\n    connection seL4RPCDataport fsvmRADIO(from vmRADIO.fs, to fserv.fs_ctrl);\n    connection seL4GlobalAsynch notify_ready_vmRADIO(from vmRADIO.notification_ready_connector, to vmRADIO.notification_ready);\n    connection seL4TimeServer serialserver_timer(from serial.timeout, to time_server.the_timer);\n    connection seL4SerialServer serial_vmRADIO(from vmRADIO.batch, to serial.processed_batch);\n    connection seL4SerialServer serial_input_vmRADIO(from vmRADIO.serial_getchar, to serial.getchar);\n    connection seL4VMDTBPassthrough conn2(from vmUXAS.dtb_self, to vmUXAS.dtb);\n    connection seL4RPCDataport fsvmUXAS(from vmUXAS.fs, to fserv.fs_ctrl);\n    connection seL4GlobalAsynch notify_ready_vmUXAS(from vmUXAS.notification_ready_connector, to vmUXAS.notification_ready);\n    connection seL4SerialServer serial_vmUXAS(from vmUXAS.batch, to serial.processed_batch);\n    connection seL4SerialServer serial_input_vmUXAS(from vmUXAS.serial_getchar, to serial.getchar);\n    connection seL4Notification conn3(from MCMP_PROC_SW_FC_UART_UARTDriver.sb_AirVehicleState_WPM_1_notification, to MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_AirVehicleState_notification);\n    connection seL4SharedData conn4(from MCMP_PROC_SW_FC_UART_UARTDriver.sb_AirVehicleState_WPM_queue_1, to MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_AirVehicleState_queue);\n    connection seL4GlobalAsynch conn5(from MCMP_PROC_SW_FC_UART_UARTDriver.sb_AirVehicleState_UXAS_1_notification, to vmUXAS.sb_AirVehicleState_notification);\n    connection seL4SharedDataWithCaps conn6(from MCMP_PROC_SW_FC_UART_UARTDriver.sb_AirVehicleState_UXAS_queue_1, to vmUXAS.sb_AirVehicleState_queue);\n    connection seL4Notification conn7(from vmRADIO.sb_trusted_ids_1_notification, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_trusted_ids_notification);\n    connection seL4SharedDataWithCaps conn8(from vmRADIO.sb_trusted_ids_queue_1, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_trusted_ids_queue);\n    connection seL4Notification conn9(from vmRADIO.sb_AutomationRequest_1_notification, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_in_notification);\n    connection seL4SharedDataWithCaps conn10(from vmRADIO.sb_AutomationRequest_queue_1, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_in_queue);\n    connection seL4Notification conn11(from vmRADIO.sb_OperatingRegion_1_notification, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_OperatingRegion_in_notification);\n    connection seL4SharedDataWithCaps conn12(from vmRADIO.sb_OperatingRegion_queue_1, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_OperatingRegion_in_queue);\n    connection seL4Notification conn13(from vmRADIO.sb_LineSearchTask_1_notification, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_LineSearchTask_in_notification);\n    connection seL4SharedDataWithCaps conn14(from vmRADIO.sb_LineSearchTask_queue_1, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_LineSearchTask_in_queue);\n    connection seL4SharedData conn15(from MCMP_PROC_SW_FlyZones_FlyZonesDatabase.sb_keep_in_zones, to MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_keep_in_zones);\n    connection seL4SharedData conn16(from MCMP_PROC_SW_FlyZones_FlyZonesDatabase.sb_keep_out_zones, to MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_keep_out_zones);\n    connection seL4Notification conn17(from vmUXAS.sb_AutomationResponse_MON_GEO_1_notification, to MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_observed_notification);\n    connection seL4SharedDataWithCaps conn18(from vmUXAS.sb_AutomationResponse_MON_GEO_queue_1, to MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_observed_queue);\n    connection seL4Notification conn19(from vmUXAS.sb_AutomationResponse_MON_REQ_1_notification, to MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.sb_observed_notification);\n    connection seL4SharedDataWithCaps conn20(from vmUXAS.sb_AutomationResponse_MON_REQ_queue_1, to MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.sb_observed_queue);\n    connection seL4Notification conn21(from MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_MissionCommand_1_notification, to MCMP_PROC_SW_FC_UART_UARTDriver.sb_MissionCommand_notification);\n    connection seL4SharedData conn22(from MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_MissionCommand_queue_1, to MCMP_PROC_SW_FC_UART_UARTDriver.sb_MissionCommand_queue);\n    connection seL4GlobalAsynch conn23(from MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_out_UXAS_1_notification, to vmUXAS.sb_AutomationRequest_notification);\n    connection seL4SharedDataWithCaps conn24(from MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_out_UXAS_queue_1, to vmUXAS.sb_AutomationRequest_queue);\n    connection seL4Notification conn25(from MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_out_MON_REQ_1_notification, to MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.sb_reference_1_notification);\n    connection seL4SharedData conn26(from MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_out_MON_REQ_queue_1, to MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.sb_reference_1_queue);\n    connection seL4GlobalAsynch conn27(from MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_OperatingRegion_out_1_notification, to vmUXAS.sb_OperatingRegion_notification);\n    connection seL4SharedDataWithCaps conn28(from MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_OperatingRegion_out_queue_1, to vmUXAS.sb_OperatingRegion_queue);\n    connection seL4Notification conn29(from MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_LineSearchTask_out_1_notification, to MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.sb_filter_in_notification);\n    connection seL4SharedData conn30(from MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_LineSearchTask_out_queue_1, to MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.sb_filter_in_queue);\n    connection seL4GlobalAsynch conn31(from MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.sb_filter_out_1_notification, to vmUXAS.sb_LineSearchTask_notification);\n    connection seL4SharedDataWithCaps conn32(from MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.sb_filter_out_queue_1, to vmUXAS.sb_LineSearchTask_queue);\n    connection seL4Notification conn33(from MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_output_1_notification, to MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_AutomationResponse_notification);\n    connection seL4SharedData conn34(from MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_output_queue_1, to MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_AutomationResponse_queue);\n    connection seL4Notification conn35(from MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_alert, to MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_ReturnHome);\n    connection seL4SharedData conn36(from MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_alert_counter, to MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_ReturnHome_counter);\n    connection seL4Notification conn37(from pacer.tick, to pacer.tock);\n    connection seL4Notification conn38(from pacer.period, to MCMP_PROC_SW_FC_UART_UARTDriver.sb_pacer_notification);\n    connection seL4GlobalAsynch conn39(from pacer.period_to_vmRADIO_notification, to vmRADIO.sb_pacer_period_notification);\n    connection seL4SharedDataWithCaps conn40(from pacer.period_to_vmRADIO_queue, to vmRADIO.sb_pacer_period_queue);\n    connection seL4Notification conn41(from pacer.period, to MCMP_PROC_SW_FlyZones_FlyZonesDatabase.sb_pacer_notification);\n    connection seL4GlobalAsynch conn42(from pacer.period_to_vmUXAS_notification, to vmUXAS.sb_pacer_period_notification);\n    connection seL4SharedDataWithCaps conn43(from pacer.period_to_vmUXAS_queue, to vmUXAS.sb_pacer_period_queue);\n    connection seL4Notification conn44(from pacer.period, to MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_pacer_notification);\n    connection seL4Notification conn45(from pacer.period, to MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_pacer_notification);\n    connection seL4Notification conn46(from pacer.period, to MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.sb_pacer_notification);\n    connection seL4Notification conn47(from pacer.period, to MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.sb_pacer_notification);\n    connection seL4Notification conn48(from pacer.period, to MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_pacer_notification);\n  }\n\n  configuration {\n    MCMP_PROC_SW_FC_UART_UARTDriver._stack_size = 524288;\n    MCMP_PROC_SW_FC_UART_UARTDriver._domain = 3;\n    vmRADIO.cnode_size_bits = 18;\n    vmRADIO.simple_untyped21_pool = 12;\n    vmRADIO.simple_untyped12_pool = 12;\n    vmRADIO.num_extra_frame_caps = 0;\n    vmRADIO.extra_frame_map_address = 0;\n    vmRADIO._stack_size = 524288;\n    vmRADIO._domain = 2;\n    MCMP_PROC_SW_FlyZones_FlyZonesDatabase._stack_size = 524288;\n    MCMP_PROC_SW_FlyZones_FlyZonesDatabase._domain = 10;\n    vmUXAS.cnode_size_bits = 18;\n    vmUXAS.simple_untyped21_pool = 12;\n    vmUXAS.simple_untyped12_pool = 12;\n    vmUXAS.num_extra_frame_caps = 0;\n    vmUXAS.extra_frame_map_address = 0;\n    vmUXAS._stack_size = 524288;\n    vmUXAS._domain = 9;\n    MCMP_PROC_SW_WPM_WaypointPlanManagerService._stack_size = 524288;\n    MCMP_PROC_SW_WPM_WaypointPlanManagerService._domain = 14;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate._stack_size = 524288;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate._domain = 5;\n    MCMP_PROC_SW_FLT_LST_CASE_Filter_LST._stack_size = 524288;\n    MCMP_PROC_SW_FLT_LST_CASE_Filter_LST._domain = 7;\n    MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req._stack_size = 524288;\n    MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req._domain = 11;\n    MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo._stack_size = 524288;\n    MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo._domain = 13;\n    conn4.size = 262144;\n    MCMP_PROC_SW_FC_UART_UARTDriver.sb_AirVehicleState_WPM_queue_1_access = \"W\";\n    MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_AirVehicleState_queue_access = \"R\";\n    conn6.size = 262144;\n    MCMP_PROC_SW_FC_UART_UARTDriver.sb_AirVehicleState_UXAS_queue_1_access = \"W\";\n    vmUXAS.sb_AirVehicleState_notification_domain = 9;\n    conn8.size = 262144;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_trusted_ids_queue_access = \"R\";\n    conn10.size = 262144;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_in_queue_access = \"R\";\n    conn12.size = 262144;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_OperatingRegion_in_queue_access = \"R\";\n    conn14.size = 262144;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_LineSearchTask_in_queue_access = \"R\";\n    conn15.size = 262144;\n    MCMP_PROC_SW_FlyZones_FlyZonesDatabase.sb_keep_in_zones_access = \"W\";\n    MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_keep_in_zones_access = \"R\";\n    conn16.size = 262144;\n    MCMP_PROC_SW_FlyZones_FlyZonesDatabase.sb_keep_out_zones_access = \"W\";\n    MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_keep_out_zones_access = \"R\";\n    conn18.size = 262144;\n    MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_observed_queue_access = \"R\";\n    conn20.size = 262144;\n    MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.sb_observed_queue_access = \"R\";\n    conn22.size = 262144;\n    MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_MissionCommand_queue_1_access = \"W\";\n    MCMP_PROC_SW_FC_UART_UARTDriver.sb_MissionCommand_queue_access = \"R\";\n    conn24.size = 262144;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_out_UXAS_queue_1_access = \"W\";\n    vmUXAS.sb_AutomationRequest_notification_domain = 9;\n    conn26.size = 262144;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_AutomationRequest_out_MON_REQ_queue_1_access = \"W\";\n    MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req.sb_reference_1_queue_access = \"R\";\n    conn28.size = 262144;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_OperatingRegion_out_queue_1_access = \"W\";\n    vmUXAS.sb_OperatingRegion_notification_domain = 9;\n    conn30.size = 262144;\n    MCMP_PROC_SW_AM_Gate_CASE_AttestationGate.sb_LineSearchTask_out_queue_1_access = \"W\";\n    MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.sb_filter_in_queue_access = \"R\";\n    conn32.size = 262144;\n    MCMP_PROC_SW_FLT_LST_CASE_Filter_LST.sb_filter_out_queue_1_access = \"W\";\n    vmUXAS.sb_LineSearchTask_notification_domain = 9;\n    conn34.size = 262144;\n    MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_output_queue_1_access = \"W\";\n    MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_AutomationResponse_queue_access = \"R\";\n    MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo.sb_alert_counter_access = \"W\";\n    MCMP_PROC_SW_WPM_WaypointPlanManagerService.sb_ReturnHome_counter_access = \"R\";\n    pacer._domain = 1;\n\n    fserv.heap_size = 165536;\n    vmRADIO.fs_shmem_size = 0x100000;\n    vmRADIO.global_endpoint_base = 1 << 27;\n    vmRADIO.asid_pool = true;\n    vmRADIO.simple = true;\n    vmRADIO.base_prio = 100;\n    vmRADIO._priority = 101;\n    vmRADIO.sem_value = 0;\n    vmRADIO.heap_size = 0x300000;\n    time_server.timers_per_client = 1;\n    time_server.priority = 255;\n    time_server.simple = true;\n    vmRADIO.serial_getchar_shmem_size = 0x1000;\n    vmRADIO.batch_shmem_size = 0x1000;\n    vmUXAS.fs_shmem_size = 0x100000;\n    vmUXAS.global_endpoint_base = 1 << 27;\n    vmUXAS.asid_pool = true;\n    vmUXAS.simple = true;\n    vmUXAS.base_prio = 100;\n    vmUXAS._priority = 101;\n    vmUXAS.sem_value = 0;\n    vmUXAS.heap_size = 0x300000;\n    vmUXAS.serial_getchar_shmem_size = 0x1000;\n    vmUXAS.batch_shmem_size = 0x1000;\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/includes\/seqNum.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef _SEQNUM_H_\n#define _SEQNUM_H_\n\n\/\/ Typedef for seqNum to make it easy to change the type. Keep these consistent!\ntypedef uintmax_t seqNum_t;\n#define SEQNUM_MAX UINTMAX_MAX\n#define PRIseqNum PRIuMAX\n\n\/\/ DIRTY_SEQ_NUM is used to mark a sampling port message as dirty while it is\n\/\/ being writen. DIRTY_SEQ_NUM is not a valid sequence number. Valid sequence\n\/\/ numbers are from 0 to DIRTY_SEQ_NUM-1 is never a valid sequence number.\nstatic const seqNum_t DIRTY_SEQ_NUM = SEQNUM_MAX;\n\n#endif",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/includes\/sp_union_art_DataContent.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef SP_UNION_ART_DATACONTENT_H\n#define SP_UNION_ART_DATACONTENT_H\n\n#include <sb_types.h>\n#include <seqNum.h>\n\n\/\/ Sampling port message with bool data\ntypedef struct sp_union_art_DataContent {\n\n  \/\/ The sampling port message data.\n  \/\/\n  union_art_DataContent data;\n\n  \/\/ Sequence number incremented by the writer every time the sampling port is\n  \/\/ written. Read by the receiver to detect dropped messages and incoherent\n  \/\/ message reads.  An incoherent message is one that is formed of parts of\n  \/\/ more than one message.  An incoherent message can occur when writing\n  \/\/ happens during read. If the component runs long enough, this counter\n  \/\/ will wrap back to zero.  This causes no problems unless the receiver is\n  \/\/ delayed for the wrap time. In that case the receiver may not detect\n  \/\/ dropped or incoherent message. But if the receiver is delayed for that\n  \/\/ long the system is probably in a very bad state. Also see DIRTY_SEQ_NUM\n  \/\/ above.\n  \/\/\n  \/\/ TODO: Currently using ggc builtin _Atomic. Would like to use c11 std, but\n  \/\/ have not figured out how to do this int the seL4 cmake build environment.\n  _Atomic seqNum_t seqNum;  \n\n} sp_union_art_DataContent_t;\n\nvoid init_sp_union_art_DataContent(sp_union_art_DataContent_t *port, seqNum_t *seqNum);\n\nbool write_sp_union_art_DataContent(sp_union_art_DataContent_t *port, const union_art_DataContent *data, seqNum_t *seqNum);\n\nbool read_sp_union_art_DataContent(sp_union_art_DataContent_t *port, union_art_DataContent *data, seqNum_t *seqNum);\n\nbool is_empty_sp_union_art_DataContent(sp_union_art_DataContent_t *port);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/src\/sp_union_art_DataContent.c",
        {
          "type" : "TestResource",
          "content" : "#include <sp_union_art_DataContent.h>\n\nvoid init_sp_union_art_DataContent(sp_union_art_DataContent_t *port, seqNum_t *seqNum) {\n  *seqNum = 0; \/\/ First message sequence number will be 1.\n  port->seqNum = DIRTY_SEQ_NUM;\n}\n\n\/\/ Write message to a sampling port (data type: int)\n\/\/\n\/\/ Returns true when successful. Otherwise returns false. Currently there is no\n\/\/ way to fail and true is always returned. But this may change in the\n\/\/ future. seqNum is incremented when a message is successfully sent. seqNum\n\/\/ should not be modified otherwise.\n\/\/\n\/\/ TODO: Encapsulate this better. seqNum state should be maintained internally. Possible solutions:\n\/\/\n\/\/    - Allow write to have read access to dataport. Then seqNum is simply in the data port.\n\/\/\n\/\/    - Create a wrapper struct.\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_RELEASE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool write_sp_union_art_DataContent(sp_union_art_DataContent_t *port, const union_art_DataContent *data, seqNum_t *seqNum) {\n  \/\/ Mark the message dirty BEFORE we start writing.\n  port->seqNum = DIRTY_SEQ_NUM;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Write the data\n  port->data = *data;\n  \/\/ Increment the sequence number. We are the only writer of seqNum, so\n  \/\/ increment does not have to be atomic.\n  *seqNum = (*seqNum + 1) % DIRTY_SEQ_NUM;\n  port->seqNum = *seqNum;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE continuing\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Can't fail for now.\n  return true;\n}\n\n\/\/ Read a message from a sampling port (data type: int)\n\/\/\n\/\/ Return true upon successful read. Data is updated with the read\n\/\/ message. The sequence number of the message is also returned. The message,\n\/\/ might be tha same previously read. The sequences number can be used to\n\/\/ detect rereading the same message or dropped messages.\n\/\/\n\/\/ Return false if we fail to read a message. For now the only way to fail is\n\/\/ when we detect the possibility of a write during read. In this case data\n\/\/ may be incoherent and should not be used. Sequence number is set to\n\/\/ DIRTY_SEQ_NUM;\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_ACQUIRE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool read_sp_union_art_DataContent(sp_union_art_DataContent_t *port, union_art_DataContent *data, seqNum_t *seqNum) {\n  seqNum_t newSeqNum = port->seqNum;\n  \/\/ Acquire memory fence - Read seqNum BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  *data = port->data;\n  \/\/ Acquire memory fence - Read data BEFORE reading seqNum again \n  \/\/atomic_thread_fence(memory_order_acquire);\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  \/\/ The following logic will NOT catch case where the writer wrapped\n  \/\/ sequence numbers since our last read. For this to happen, this reader\n  \/\/ would have to be delayed for the entire time to wrap. \n  if (newSeqNum != DIRTY_SEQ_NUM && newSeqNum == port->seqNum) {\n    \/\/ Message data is good.  Write did not occur during read. \n    *seqNum = newSeqNum;\n    return true;\n  } else {\n    \/\/ Writer may have updated data while we were reading. Do not use possibly incoherent data.\n    *seqNum = DIRTY_SEQ_NUM;\n    return false;\n  }\n}\n\nbool is_empty_sp_union_art_DataContent(sp_union_art_DataContent_t *port) {\n  return port->seqNum == DIRTY_SEQ_NUM;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/CMake_CakeMLOptions.cmake",
        {
          "type" : "TestResource",
          "content" : "option(CAKEML_DUMP_BUFFERS\n       \"Print the contents of byte-arrays being sent to CakeML\"\n       OFF)\n\nif(CAKEML_DUMP_BUFFERS OR \"$ENV{CAKEML_DUMP_BUFFERS}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_DUMP_BUFFERS)\nendif()\n\noption(CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n       \"Print warning messages if byte-arrays being sent to CakeML are larger than expected\"\n       OFF)\n\nif(CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS OR \"$ENV{CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS)\nendif()\n\noption(CAKEML_ASSEMBLIES_PRESENT\n       \"Enable if CakeML assembly files have been included\"\n       OFF)\n\nif(CAKEML_ASSEMBLIES_PRESENT OR \"$ENV{CAKEML_ASSEMBLIES_PRESENT}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_ASSEMBLIES_PRESENT)\nendif()",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/CMake_TranspilerOptions.cmake",
        {
          "type" : "TestResource",
          "content" : "option(BOUND_CHECK\n       \"Build the program with sequence bound checking.\"\n       OFF)\n\nif(BOUND_CHECK OR \"$ENV{BOUND_CHECK}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_BOUND_CHECK)\nendif()\n\noption(NO_PRINT\n       \"Build the program without console output.\"\n       OFF)\n\nif(NO_PRINT OR \"$ENV{NO_PRINT}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_NO_PRINT)\nendif()\n\noption(RANGE_CHECK\n       \"Build the program with range checking.\"\n       OFF)\n\nif(RANGE_CHECK OR \"$ENV{RANGE_CHECK}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_RANGE_CHECK)\nendif()\n\noption(WITH_LOC\n       \"Build the program with Slang location info.\"\n       OFF)\n\nif(WITH_LOC OR \"$ENV{WITH_LOC}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_LOC)\nendif()",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/CMake_CAmkES_VM_Options.cmake",
        {
          "type" : "TestResource",
          "content" : "option(USE_PRECONFIGURED_ROOTFS\n       \"Use preconfigured rootfs rather than downloading a vanilla linux image\"\n       OFF)",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (UAV_Impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_CakeMLOptions.cmake)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_TranspilerOptions.cmake)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_CAmkES_VM_Options.cmake)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/SlangTypeLibrary)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/components\/VM)\n\nDeclareCAmkESComponent(UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\n  SOURCES components\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/src\/sb_UARTDriver_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/includes\/ types\/includes\n  LIBS UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\n)\n\nDeclareCAmkESComponent(FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\n  SOURCES components\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/src\/sb_FlyZonesDatabase_thr_Impl.c types\/src\/sp_union_art_DataContent.c types\/src\/sp_union_art_DataContent.c\n  INCLUDES components\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/includes\/ types\/includes types\/includes types\/includes\n  LIBS FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\n)\n\nDeclareCAmkESComponent(WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\n  SOURCES components\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/src\/sb_WaypointPlanManagerService_thr_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/includes\/ types\/includes\n  LIBS WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\n)\n\nDeclareCAmkESComponent(CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\n  SOURCES components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl_ffi.c components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl.S components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/includes\/ types\/includes\n  LIBS CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\n)\n\nDeclareCAmkESComponent(CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\n  SOURCES components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/src\/sb_CASE_Filter_LST_thr_Impl_ffi.c components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/src\/sb_CASE_Filter_LST_thr_Impl.S components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/src\/sb_CASE_Filter_LST_thr_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/includes\/ types\/includes\n  LIBS CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\n)\n\nDeclareCAmkESComponent(CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\n  SOURCES components\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/src\/sb_CASE_Monitor_Req_thr_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/includes\/ types\/includes\n  LIBS CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\n)\n\nDeclareCAmkESComponent(CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\n  SOURCES components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/src\/sb_CASE_Monitor_Geo_thr_Impl_ffi.c components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/src\/sb_CASE_Monitor_Geo_thr_Impl.S components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/src\/sb_CASE_Monitor_Geo_thr_Impl.c types\/src\/sp_union_art_DataContent.c types\/src\/sp_union_art_DataContent.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/includes\/ types\/includes types\/includes types\/includes\n  LIBS CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\n)\n\nDeclareCAmkESComponent(Pacer\n  SOURCES components\/Pacer\/src\/Pacer.c\n  LIBS SB_Type_Library SlangTypeLibrary\n)\n\nDeclareCAmkESRootserver(UAV_Impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/bin\/run-camkes.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o noclobber -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:s\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"  -c, --camkes-dir      Location of CAmkES project\"\n  echo \"  -n, --non-interactive Non-interactive mode.  Symlink in apps directory will be replaced\"\n  echo \"                        if present, CAmkES build directory will not be deleted\"\n  echo \"  -o, --camkes-options  CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"  -s, --simulate        Simulate via QEMU\"\n  exit 2\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes-arm-vm\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes-arm-vm\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes-arm-vm project directory.\"\n  echo \"See https:\/\/github.com\/SEL4PROJ\/camkes-arm-vm\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    # if the project contains VMs and USE_PRECONFIGURED_ROOTFS=OFF then\n    # deleting the build directory would force the linux image to be\n    # re-downloaded, which can take a long time\n    echo \"Non-interactive mode so not deleting existing ${BUILD_DIR}\"\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} \\\n    -DPLATFORM=qemu-arm-virt \\\n    -DARM_HYP=ON \\\n    -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\nif [ \"${SIMULATE}\" = true ]; then\n  qemu-system-aarch64 \\\n      -machine virt,virtualization=on,highmem=off,secure=off \\\n      -cpu cortex-a53 \\\n      -nographic \\\n      -m size=1024 \\\n      -kernel images\/capdl-loader-image-arm-qemu-arm-virt\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/src\/sb_UARTDriver_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_UARTDriver_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_MissionCommand_recv_queue;\n\n\/************************************************************************\n * sb_MissionCommand_dequeue_poll:\n ************************************************************************\/\nbool sb_MissionCommand_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_MissionCommand_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_MissionCommand_dequeue:\n ************************************************************************\/\nbool sb_MissionCommand_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_MissionCommand_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_MissionCommand_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_MissionCommand_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_MissionCommand_recv_queue);\n}\n\nbool sb_AirVehicleState_WPM_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_AirVehicleState_WPM_queue_1, (union_art_DataContent*) data);\n  sb_AirVehicleState_WPM_1_notification_emit();\n\n  return true;\n}\n\nbool sb_AirVehicleState_UXAS_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_AirVehicleState_UXAS_queue_1, (union_art_DataContent*) data);\n  sb_AirVehicleState_UXAS_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send AirVehicleState_WPM: Out EventDataPort CMASI__AirVehicleState_i\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_AirVehicleState_WPM_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_UARTDriver_Impl.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_AirVehicleState_WPM_Send\", 0);\n\n  sb_AirVehicleState_WPM_enqueue(d);\n}\n\n\/\/ send AirVehicleState_UXAS: Out EventDataPort CMASI__AirVehicleState_i\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_AirVehicleState_UXAS_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_UARTDriver_Impl.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_AirVehicleState_UXAS_Send\", 0);\n\n  sb_AirVehicleState_UXAS_enqueue(d);\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_send_data_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_UARTDriver_Impl.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_send_data_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ is_empty MissionCommand: In EventDataPort\nB slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_MissionCommand_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_MissionCommand_is_empty();\n}\n\n\/\/ receive MissionCommand: In EventDataPort union_art_DataContent\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_MissionCommand_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_UARTDriver_Impl.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_MissionCommand_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_MissionCommand_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nB slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_recv_data_IsEmpty(STACK_FRAME_ONLY) {\n  return T;\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nUnit slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_recv_data_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_UARTDriver_Impl.c\", \"\", \"slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_seL4Nix_recv_data_Receive\", 0);\n\n  \/\/ FIXME: dummy implementation\n\n  \/\/ put None in result\n  DeclNewNone_964667(none);\n  Type_assign(result, &none, sizeof(union Option_8E9F45));\n}\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_UARTDriver_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\\n\");\n\n  \/\/ initialise data structure for incoming event data port MissionCommand\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_MissionCommand_recv_queue, sb_MissionCommand_queue);\n\n  \/\/ initialise data structure for outgoing event data port AirVehicleState_WPM\n  sb_queue_union_art_DataContent_1_init(sb_AirVehicleState_WPM_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port AirVehicleState_UXAS\n  sb_queue_union_art_DataContent_1_init(sb_AirVehicleState_UXAS_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_UARTDriver_Impl.c\", \"\", \"run\", 0);\n\n  sb_pacer_notification_wait();\n  for(;;) {\n    sb_pacer_notification_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_Drivers_UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/UARTDriver_Impl_MCMP_PROC_SW_FC_UART_UARTDriver\/includes\/sb_UARTDriver_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_UARTDRIVER_IMPL_H\n#define SB_UARTDRIVER_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_MissionCommand_dequeue(union_art_DataContent *);\n\nbool sb_AirVehicleState_WPM_enqueue(const union_art_DataContent *);\n\nbool sb_AirVehicleState_UXAS_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_UARTDRIVER_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/src\/sb_FlyZonesDatabase_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_FlyZonesDatabase_thr_Impl.h>\n#include <FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nseqNum_t sb_keep_out_zones_seqNum;\n\nseqNum_t sb_keep_in_zones_seqNum;\n\nbool sb_keep_in_zones_write(const union_art_DataContent * value) {\n  return write_sp_union_art_DataContent(sb_keep_in_zones, value, &sb_keep_in_zones_seqNum);\n}\n\nbool sb_keep_out_zones_write(const union_art_DataContent * value) {\n  return write_sp_union_art_DataContent(sb_keep_out_zones, value, &sb_keep_out_zones_seqNum);\n}\n\n\/\/ send keep_in_zones: Out DataPort CMASI__Polygon_i\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix_keep_in_zones_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_FlyZonesDatabase_thr_Impl.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix_keep_in_zones_Send\", 0);\n\n  sb_keep_in_zones_write(d);\n}\n\n\/\/ send keep_out_zones: Out DataPort CMASI__Polygon_i\nUnit slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix_keep_out_zones_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_FlyZonesDatabase_thr_Impl.c\", \"\", \"slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_seL4Nix_keep_out_zones_Send\", 0);\n\n  sb_keep_out_zones_write(d);\n}\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_FlyZonesDatabase_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\\n\");\n\n  \/\/ initialise data structure for data port keep_in_zones\n  init_sp_union_art_DataContent(sb_keep_in_zones, &sb_keep_in_zones_seqNum);\n\n  \/\/ initialise data structure for data port keep_out_zones\n  init_sp_union_art_DataContent(sb_keep_out_zones, &sb_keep_out_zones_seqNum);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_FlyZonesDatabase_thr_Impl.c\", \"\", \"run\", 0);\n\n  sb_pacer_notification_wait();\n  for(;;) {\n    sb_pacer_notification_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_SW_FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/FlyZonesDatabase_thr_Impl_MCMP_PROC_SW_FlyZones_FlyZonesDatabase\/includes\/sb_FlyZonesDatabase_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_FLYZONESDATABASE_THR_IMPL_H\n#define SB_FLYZONESDATABASE_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_keep_in_zones_write(const union_art_DataContent * value);\n\nbool sb_keep_out_zones_write(const union_art_DataContent * value);\n\n#endif \/\/ SB_FLYZONESDATABASE_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/src\/sb_WaypointPlanManagerService_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_WaypointPlanManagerService_thr_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_AutomationResponse_recv_queue;\n\n\/************************************************************************\n * sb_AutomationResponse_dequeue_poll:\n ************************************************************************\/\nbool sb_AutomationResponse_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_AutomationResponse_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_AutomationResponse_dequeue:\n ************************************************************************\/\nbool sb_AutomationResponse_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_AutomationResponse_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_AutomationResponse_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_AutomationResponse_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_AutomationResponse_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_AirVehicleState_recv_queue;\n\n\/************************************************************************\n * sb_AirVehicleState_dequeue_poll:\n ************************************************************************\/\nbool sb_AirVehicleState_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_AirVehicleState_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_AirVehicleState_dequeue:\n ************************************************************************\/\nbool sb_AirVehicleState_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_AirVehicleState_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_AirVehicleState_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_AirVehicleState_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_AirVehicleState_recv_queue);\n}\n\nbool sb_MissionCommand_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_MissionCommand_queue_1, (union_art_DataContent*) data);\n  sb_MissionCommand_1_notification_emit();\n\n  return true;\n}\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     ReturnHome\n *\n ************************************************************************\/\nstatic sb_event_counter_t sb_ReturnHome_received_events = 0;\nstatic sb_event_counter_t sb_ReturnHome_last_counter = 0;\n\n\/************************************************************************\n * sb_ReturnHome_dequeue:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_ReturnHome_dequeue() {\n  if(sb_ReturnHome_received_events > 0) {\n    sb_ReturnHome_received_events--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n * sb_ReturnHome_is_empty;\n *\n * Helper method to determine if infrastructure port has not received\n * any new events since the last dispatch\n *\n ************************************************************************\/\nbool sb_ReturnHome_is_empty() {\n  return sb_ReturnHome_received_events == 0;\n}\n\nvoid sb_freeze_event_port_ReturnHome() {\n  sb_event_counter_t current_sb_ReturnHome_counter;\n\n  sb_ReturnHome_received_events = 0; \/\/ drop any events not handled during last dispatch\n\n  \/\/ get current shared counter value\n  current_sb_ReturnHome_counter = *sb_ReturnHome_counter;\n\n  \/\/ Acquire memory fence - ensure preceding read occurs before any subsequent read or write\n  sb_ReturnHome_counter_acquire();\n\n  \/\/ NOTE: Counters can wrap, so we must use != below instead of >\n  while(current_sb_ReturnHome_counter != sb_ReturnHome_last_counter){\n    sb_ReturnHome_last_counter++;\n    sb_ReturnHome_received_events++;\n  }\n\n  if(sb_ReturnHome_received_events > 0) {\n\n    \/\/ ReturnHome's queue size is 1\n    if(sb_ReturnHome_received_events > 1) {\n      \/\/printf(\"WaypointPlanManagerService_thr_Impl: dropping %i event(s) from incoming event port ReturnHome\\n\", (sb_ReturnHome_received_events - 1));\n\n      \/\/ drop events\n      sb_ReturnHome_received_events = 1;\n    }\n  }\n}\n\n\/\/ send MissionCommand: Out EventDataPort CMASI__MissionCommand_i\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_MissionCommand_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_WaypointPlanManagerService_thr_Impl.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_MissionCommand_Send\", 0);\n\n  sb_MissionCommand_enqueue(d);\n}\n\n\/\/ is_empty AutomationResponse: In EventDataPort\nB slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_AutomationResponse_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_AutomationResponse_is_empty();\n}\n\n\/\/ receive AutomationResponse: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_AutomationResponse_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_WaypointPlanManagerService_thr_Impl.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_AutomationResponse_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_AutomationResponse_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty AirVehicleState: In EventDataPort\nB slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_AirVehicleState_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_AirVehicleState_is_empty();\n}\n\n\/\/ receive AirVehicleState: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_AirVehicleState_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_WaypointPlanManagerService_thr_Impl.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_AirVehicleState_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_AirVehicleState_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty ReturnHome: In EventPort\nB slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_ReturnHome_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_ReturnHome_is_empty();\n}\n\n\/\/ receive ReturnHome: In EventPort\nUnit slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_ReturnHome_Receive(STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_WaypointPlanManagerService_thr_Impl.c\", \"\", \"slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_seL4Nix_ReturnHome_Receive\", 0);\n\n  if(sb_ReturnHome_dequeue()) {\n    \/\/ event port - ART requires an Empty payload be sent\n    DeclNewart_Empty(payload);\n\n    \/\/ wrap it in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &payload);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n} \n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_WaypointPlanManagerService_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\\n\");\n\n  \/\/ initialise data structure for incoming event data port AutomationResponse\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_AutomationResponse_recv_queue, sb_AutomationResponse_queue);\n\n  \/\/ initialise data structure for incoming event data port AirVehicleState\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_AirVehicleState_recv_queue, sb_AirVehicleState_queue);\n\n  \/\/ initialise data structure for outgoing event data port MissionCommand\n  sb_queue_union_art_DataContent_1_init(sb_MissionCommand_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_WaypointPlanManagerService_thr_Impl.c\", \"\", \"run\", 0);\n\n\n  sb_pacer_notification_wait();\n  for(;;) {\n    sb_pacer_notification_wait();\n    sb_freeze_event_port_ReturnHome();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_SW_WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/WaypointPlanManagerService_thr_Impl_MCMP_PROC_SW_WPM_WaypointPlanManagerService\/includes\/sb_WaypointPlanManagerService_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_WAYPOINTPLANMANAGERSERVICE_THR_IMPL_H\n#define SB_WAYPOINTPLANMANAGERSERVICE_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_AutomationResponse_dequeue(union_art_DataContent *);\n\nbool sb_AirVehicleState_dequeue(union_art_DataContent *);\n\nbool sb_MissionCommand_enqueue(const union_art_DataContent *);\n\nbool sb_ReturnHome_dequeue(void);\n\n#endif \/\/ SB_WAYPOINTPLANMANAGERSERVICE_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl_ffi.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <all.h>\n#include <camkes.h>\n#include <stdbool.h>\n#include <CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_api.h>\n#include <CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.h>\n\nslang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints entryPoints;\nIS_82ABD8 event_in_port_ids;\nIS_82ABD8 data_in_port_ids;\nIS_82ABD8 event_out_port_ids;\nIS_82ABD8 data_out_port_ids;\nbool initialized = false;\n\nvoid init(STACK_FRAME_ONLY) {\n  if(!initialized) {\n    DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"init\", 0);\n\n    entryPoints = (slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_entryPoints(SF_LAST);\n    event_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n    data_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n    event_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n    data_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n    initialized = true;\n  }\n}\n\nvoid ffiinitializeComponent(unsigned char *parameter, long parameterSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiinitializeComponent\", 0);\n\n  entryPoints = (slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_entryPoints(SF_LAST);\n  event_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n  data_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n  event_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n  data_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n}\n\nvoid checkAndReportBufferOverrun(STACK_FRAME long bytesWritten, long bufferSizeBytes) {\n  #ifdef CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"checkAndReportBufferOverrun\", 0);\n\n  init(SF_LAST);\n  if (bytesWritten > bufferSizeBytes) {\n    DeclNewString(_str);\n    String str = (String)&_str;\n    String__append(SF str, string(\"Wrote too many bytes to buffer\"));\n    api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF str);\n  }\n  #endif\n}\n\nvoid dumpBuffer(STACK_FRAME size_t numBits, U8* buffer) {\n  #ifdef CAKEML_DUMP_BUFFERS\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"dumpBuffer\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  String__append(SF str, string(\"[\"));\n  size_t end = ((numBits \/ 8) > 80) ? 80 : (numBits \/ 8);\n  for (int i = 0 ; i < end ; ++i) {\n    U8_string_(SF str, buffer[i]);\n  }\n  String__append(SF str, string(\"]\"));\n  api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF str);\n  #endif\n}\n\nvoid ffiapi_receiveInput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_receiveInput\", 0);\n\n  init(SF_LAST);\n  art_Art_receiveInput(SF event_in_port_ids, data_in_port_ids);\n}\n\nvoid ffiapi_sendOutput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_sendOutput\", 0);\n\n  init(SF_LAST);\n  art_Art_sendOutput(SF event_out_port_ids, data_out_port_ids);\n}\n\nvoid ffiapi_logInfo(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_logInfo\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logInfo__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_logDebug(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_logDebug\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logDebug__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_logError(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_logError\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logError__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_get_trusted_ids(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_get_trusted_ids\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_trusted_ids__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_get_AutomationRequest_in(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_get_AutomationRequest_in\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_AutomationRequest_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_AutomationRequest_out_UXAS(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_send_AutomationRequest_out_UXAS\", 0);\n\n  init(SF_LAST);\n  api_put_AutomationRequest_out_UXAS__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffiapi_send_AutomationRequest_out_MON_REQ(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_send_AutomationRequest_out_MON_REQ\", 0);\n\n  init(SF_LAST);\n  api_put_AutomationRequest_out_MON_REQ__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffiapi_get_OperatingRegion_in(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_get_OperatingRegion_in\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_OperatingRegion_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_OperatingRegion_out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_send_OperatingRegion_out\", 0);\n\n  init(SF_LAST);\n  api_put_OperatingRegion_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffiapi_get_LineSearchTask_in(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_get_LineSearchTask_in\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_LineSearchTask_in__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_LineSearchTask_out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_send_LineSearchTask_out\", 0);\n\n  init(SF_LAST);\n  api_put_LineSearchTask_out__slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffisb_pacer_notification_wait(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_pacer_notification_wait();\n  output[0] = 1;\n}\n\nvoid ffisb_pacer_notification_emit(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  \/\/ non self-pacing so do nothing\n  output[0] = 1;\n}\n\n\/**\n * Required by the FFI framework\n *\/\n\nvoid ffiwrite (unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n}\n\nvoid cml_exit(int arg) {\n  #ifdef DEBUG_FFI\n  {\n    fprintf(stderr,\"GCNum: %d, GCTime(us): %ld\\n\",numGC,microsecs);\n  }\n  #endif\n  exit(arg);\n}\n\n\/\/ convert big-endian 32-bit float to little-endian 64 bit double\nvoid ffifloat2double(unsigned char *parameter, long parameterSizeBytes,\n                     unsigned char *output,    long outputSizeBytes) {\n  char bytes [4];\n  assert (4 == parameterSizeBytes);\n  bytes[3] = parameter[0];\n  bytes[2] = parameter[1];\n  bytes[1] = parameter[2];\n  bytes[0] = parameter[3];\n\n  double result = *((float*)bytes);\n  memcpy(output, (unsigned char*) &result, sizeof(double));\n}\n\nvoid ffiraw_print_buffer(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n\n  int elideAfter = 20; \/\/ stop printing after this many consecutive 0's seen\n  int stopAfter = 50; \/\/ exit after this many consecutive 0's seen, lessens 'busy-wait'\n\n  U8* buffer = (U8 *) parameter;\n\n  printf(\"%i bytes\\n\", parameterSizeBytes); \/\/ doesn't include the bool byte\n\n  if(parameterSizeBytes > 0) {\n    int numZerosSeen = 0;\n    printf(\"[%02x\\n\", buffer[0]); \/\/ first byte is a bool\n    for(int i = 1; i < parameterSizeBytes + 1; i++) {\n      numZerosSeen = buffer[i] == 0 ? (numZerosSeen + 1) : 0;\n      if(numZerosSeen >= elideAfter) {\n        if(numZerosSeen % stopAfter == 0) { printf(\"...\"); break; }\n      } else {\n      \tprintf(\"%02x \", buffer[i]);\n      \tif(i % 16 == 0) printf(\"\\n\");\n      }\n    }\n    printf(\"]\\n\");\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl.S",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ placeholder for CakeML assembly",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_AttestationGate_thr_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_trusted_ids_recv_queue;\n\n\/************************************************************************\n * sb_trusted_ids_dequeue_poll:\n ************************************************************************\/\nbool sb_trusted_ids_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_trusted_ids_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_trusted_ids_dequeue:\n ************************************************************************\/\nbool sb_trusted_ids_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_trusted_ids_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_trusted_ids_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_trusted_ids_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_trusted_ids_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_AutomationRequest_in_recv_queue;\n\n\/************************************************************************\n * sb_AutomationRequest_in_dequeue_poll:\n ************************************************************************\/\nbool sb_AutomationRequest_in_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_AutomationRequest_in_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_AutomationRequest_in_dequeue:\n ************************************************************************\/\nbool sb_AutomationRequest_in_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_AutomationRequest_in_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_AutomationRequest_in_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_AutomationRequest_in_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_AutomationRequest_in_recv_queue);\n}\n\nbool sb_AutomationRequest_out_UXAS_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_AutomationRequest_out_UXAS_queue_1, (union_art_DataContent*) data);\n  sb_AutomationRequest_out_UXAS_1_notification_emit();\n\n  return true;\n}\n\nbool sb_AutomationRequest_out_MON_REQ_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_AutomationRequest_out_MON_REQ_queue_1, (union_art_DataContent*) data);\n  sb_AutomationRequest_out_MON_REQ_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_OperatingRegion_in_recv_queue;\n\n\/************************************************************************\n * sb_OperatingRegion_in_dequeue_poll:\n ************************************************************************\/\nbool sb_OperatingRegion_in_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_OperatingRegion_in_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_OperatingRegion_in_dequeue:\n ************************************************************************\/\nbool sb_OperatingRegion_in_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_OperatingRegion_in_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_OperatingRegion_in_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_OperatingRegion_in_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_OperatingRegion_in_recv_queue);\n}\n\nbool sb_OperatingRegion_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_OperatingRegion_out_queue_1, (union_art_DataContent*) data);\n  sb_OperatingRegion_out_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_LineSearchTask_in_recv_queue;\n\n\/************************************************************************\n * sb_LineSearchTask_in_dequeue_poll:\n ************************************************************************\/\nbool sb_LineSearchTask_in_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_LineSearchTask_in_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_LineSearchTask_in_dequeue:\n ************************************************************************\/\nbool sb_LineSearchTask_in_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_LineSearchTask_in_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_LineSearchTask_in_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_LineSearchTask_in_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_LineSearchTask_in_recv_queue);\n}\n\nbool sb_LineSearchTask_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_LineSearchTask_out_queue_1, (union_art_DataContent*) data);\n  sb_LineSearchTask_out_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send AutomationRequest_out_UXAS: Out EventDataPort CMASI__AutomationRequest_i\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_AutomationRequest_out_UXAS_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_AutomationRequest_out_UXAS_Send\", 0);\n\n  sb_AutomationRequest_out_UXAS_enqueue(d);\n}\n\n\/\/ send AutomationRequest_out_MON_REQ: Out EventDataPort CMASI__AutomationRequest_i\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_AutomationRequest_out_MON_REQ_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_AutomationRequest_out_MON_REQ_Send\", 0);\n\n  sb_AutomationRequest_out_MON_REQ_enqueue(d);\n}\n\n\/\/ send OperatingRegion_out: Out EventDataPort CMASI__OperatingRegion_i\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_OperatingRegion_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_OperatingRegion_out_Send\", 0);\n\n  sb_OperatingRegion_out_enqueue(d);\n}\n\n\/\/ send LineSearchTask_out: Out EventDataPort CMASI__LineSearchTask_i\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_LineSearchTask_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_LineSearchTask_out_Send\", 0);\n\n  sb_LineSearchTask_out_enqueue(d);\n}\n\n\/\/ is_empty trusted_ids: In EventDataPort\nB slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_trusted_ids_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_trusted_ids_is_empty();\n}\n\n\/\/ receive trusted_ids: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_trusted_ids_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_trusted_ids_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_trusted_ids_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty AutomationRequest_in: In EventDataPort\nB slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_AutomationRequest_in_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_AutomationRequest_in_is_empty();\n}\n\n\/\/ receive AutomationRequest_in: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_AutomationRequest_in_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_AutomationRequest_in_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_AutomationRequest_in_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty OperatingRegion_in: In EventDataPort\nB slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_OperatingRegion_in_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_OperatingRegion_in_is_empty();\n}\n\n\/\/ receive OperatingRegion_in: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_OperatingRegion_in_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_OperatingRegion_in_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_OperatingRegion_in_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty LineSearchTask_in: In EventDataPort\nB slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_LineSearchTask_in_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_LineSearchTask_in_is_empty();\n}\n\n\/\/ receive LineSearchTask_in: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_LineSearchTask_in_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_seL4Nix_LineSearchTask_in_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_LineSearchTask_in_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\\n\");\n\n  \/\/ initialise data structure for incoming event data port trusted_ids\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_trusted_ids_recv_queue, sb_trusted_ids_queue);\n\n  \/\/ initialise data structure for incoming event data port AutomationRequest_in\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_AutomationRequest_in_recv_queue, sb_AutomationRequest_in_queue);\n\n  \/\/ initialise data structure for outgoing event data port AutomationRequest_out_UXAS\n  sb_queue_union_art_DataContent_1_init(sb_AutomationRequest_out_UXAS_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port AutomationRequest_out_MON_REQ\n  sb_queue_union_art_DataContent_1_init(sb_AutomationRequest_out_MON_REQ_queue_1);\n\n  \/\/ initialise data structure for incoming event data port OperatingRegion_in\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_OperatingRegion_in_recv_queue, sb_OperatingRegion_in_queue);\n\n  \/\/ initialise data structure for outgoing event data port OperatingRegion_out\n  sb_queue_union_art_DataContent_1_init(sb_OperatingRegion_out_queue_1);\n\n  \/\/ initialise data structure for incoming event data port LineSearchTask_in\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_LineSearchTask_in_recv_queue, sb_LineSearchTask_in_queue);\n\n  \/\/ initialise data structure for outgoing event data port LineSearchTask_out\n  sb_queue_union_art_DataContent_1_init(sb_LineSearchTask_out_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\\n\");\n}\n\n#ifndef CAKEML_ASSEMBLIES_PRESENT\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"run\", 0);\n\n  sb_pacer_notification_wait();\n  for(;;) {\n    sb_pacer_notification_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_SW_CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_AttestationGate_thr_Impl_MCMP_PROC_SW_AM_Gate_CASE_AttestationGate\/includes\/sb_CASE_AttestationGate_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_ATTESTATIONGATE_THR_IMPL_H\n#define SB_CASE_ATTESTATIONGATE_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_trusted_ids_dequeue(union_art_DataContent *);\n\nbool sb_AutomationRequest_in_dequeue(union_art_DataContent *);\n\nbool sb_AutomationRequest_out_UXAS_enqueue(const union_art_DataContent *);\n\nbool sb_AutomationRequest_out_MON_REQ_enqueue(const union_art_DataContent *);\n\nbool sb_OperatingRegion_in_dequeue(union_art_DataContent *);\n\nbool sb_OperatingRegion_out_enqueue(const union_art_DataContent *);\n\nbool sb_LineSearchTask_in_dequeue(union_art_DataContent *);\n\nbool sb_LineSearchTask_out_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_CASE_ATTESTATIONGATE_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/src\/sb_CASE_Filter_LST_thr_Impl_ffi.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <all.h>\n#include <camkes.h>\n#include <stdbool.h>\n#include <CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_api.h>\n#include <CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.h>\n\nslang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints entryPoints;\nIS_82ABD8 event_in_port_ids;\nIS_82ABD8 data_in_port_ids;\nIS_82ABD8 event_out_port_ids;\nIS_82ABD8 data_out_port_ids;\nbool initialized = false;\n\nvoid init(STACK_FRAME_ONLY) {\n  if(!initialized) {\n    DeclNewStackFrame(caller, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"init\", 0);\n\n    entryPoints = (slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_entryPoints(SF_LAST);\n    event_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n    data_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n    event_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n    data_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n    initialized = true;\n  }\n}\n\nvoid ffiinitializeComponent(unsigned char *parameter, long parameterSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"ffiinitializeComponent\", 0);\n\n  entryPoints = (slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_entryPoints(SF_LAST);\n  event_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n  data_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n  event_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n  data_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n}\n\nvoid checkAndReportBufferOverrun(STACK_FRAME long bytesWritten, long bufferSizeBytes) {\n  #ifdef CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"checkAndReportBufferOverrun\", 0);\n\n  init(SF_LAST);\n  if (bytesWritten > bufferSizeBytes) {\n    DeclNewString(_str);\n    String str = (String)&_str;\n    String__append(SF str, string(\"Wrote too many bytes to buffer\"));\n    api_logInfo__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF str);\n  }\n  #endif\n}\n\nvoid dumpBuffer(STACK_FRAME size_t numBits, U8* buffer) {\n  #ifdef CAKEML_DUMP_BUFFERS\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"dumpBuffer\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  String__append(SF str, string(\"[\"));\n  size_t end = ((numBits \/ 8) > 80) ? 80 : (numBits \/ 8);\n  for (int i = 0 ; i < end ; ++i) {\n    U8_string_(SF str, buffer[i]);\n  }\n  String__append(SF str, string(\"]\"));\n  api_logInfo__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF str);\n  #endif\n}\n\nvoid ffiapi_receiveInput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"ffiapi_receiveInput\", 0);\n\n  init(SF_LAST);\n  art_Art_receiveInput(SF event_in_port_ids, data_in_port_ids);\n}\n\nvoid ffiapi_sendOutput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"ffiapi_sendOutput\", 0);\n\n  init(SF_LAST);\n  art_Art_sendOutput(SF event_out_port_ids, data_out_port_ids);\n}\n\nvoid ffiapi_logInfo(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"ffiapi_logInfo\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logInfo__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF str);\n} \n\nvoid ffiapi_logDebug(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"ffiapi_logDebug\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logDebug__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF str);\n} \n\nvoid ffiapi_logError(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"ffiapi_logError\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logError__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF str);\n} \n\nvoid ffiapi_get_filter_in(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"ffiapi_get_filter_in\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_filter_in__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_filter_out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl_ffi.c\", \"\", \"ffiapi_send_filter_out\", 0);\n\n  init(SF_LAST);\n  api_put_filter_out__slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffisb_pacer_notification_wait(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_pacer_notification_wait();\n  output[0] = 1;\n}\n\nvoid ffisb_pacer_notification_emit(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  \/\/ non self-pacing so do nothing\n  output[0] = 1;\n}\n\n\/**\n * Required by the FFI framework\n *\/\n\nvoid ffiwrite (unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n}\n\nvoid cml_exit(int arg) {\n  #ifdef DEBUG_FFI\n  {\n    fprintf(stderr,\"GCNum: %d, GCTime(us): %ld\\n\",numGC,microsecs);\n  }\n  #endif\n  exit(arg);\n}\n\n\/\/ convert big-endian 32-bit float to little-endian 64 bit double\nvoid ffifloat2double(unsigned char *parameter, long parameterSizeBytes,\n                     unsigned char *output,    long outputSizeBytes) {\n  char bytes [4];\n  assert (4 == parameterSizeBytes);\n  bytes[3] = parameter[0];\n  bytes[2] = parameter[1];\n  bytes[1] = parameter[2];\n  bytes[0] = parameter[3];\n\n  double result = *((float*)bytes);\n  memcpy(output, (unsigned char*) &result, sizeof(double));\n}\n\nvoid ffiraw_print_buffer(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n\n  int elideAfter = 20; \/\/ stop printing after this many consecutive 0's seen\n  int stopAfter = 50; \/\/ exit after this many consecutive 0's seen, lessens 'busy-wait'\n\n  U8* buffer = (U8 *) parameter;\n\n  printf(\"%i bytes\\n\", parameterSizeBytes); \/\/ doesn't include the bool byte\n\n  if(parameterSizeBytes > 0) {\n    int numZerosSeen = 0;\n    printf(\"[%02x\\n\", buffer[0]); \/\/ first byte is a bool\n    for(int i = 1; i < parameterSizeBytes + 1; i++) {\n      numZerosSeen = buffer[i] == 0 ? (numZerosSeen + 1) : 0;\n      if(numZerosSeen >= elideAfter) {\n        if(numZerosSeen % stopAfter == 0) { printf(\"...\"); break; }\n      } else {\n      \tprintf(\"%02x \", buffer[i]);\n      \tif(i % 16 == 0) printf(\"\\n\");\n      }\n    }\n    printf(\"]\\n\");\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/src\/sb_CASE_Filter_LST_thr_Impl.S",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ placeholder for CakeML assembly",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/src\/sb_CASE_Filter_LST_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_Filter_LST_thr_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_filter_in_recv_queue;\n\n\/************************************************************************\n * sb_filter_in_dequeue_poll:\n ************************************************************************\/\nbool sb_filter_in_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_filter_in_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_filter_in_dequeue:\n ************************************************************************\/\nbool sb_filter_in_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_filter_in_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_filter_in_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_filter_in_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_filter_in_recv_queue);\n}\n\nbool sb_filter_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_filter_out_queue_1, (union_art_DataContent*) data);\n  sb_filter_out_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send filter_out: Out EventDataPort CMASI__LineSearchTask_i\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix_filter_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_Filter_LST_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix_filter_out_Send\", 0);\n\n  sb_filter_out_enqueue(d);\n}\n\n\/\/ is_empty filter_in: In EventDataPort\nB slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix_filter_in_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_filter_in_is_empty();\n}\n\n\/\/ receive filter_in: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix_filter_in_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Filter_LST_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_seL4Nix_filter_in_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_filter_in_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\\n\");\n\n  \/\/ initialise data structure for incoming event data port filter_in\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_filter_in_recv_queue, sb_filter_in_queue);\n\n  \/\/ initialise data structure for outgoing event data port filter_out\n  sb_queue_union_art_DataContent_1_init(sb_filter_out_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\\n\");\n}\n\n#ifndef CAKEML_ASSEMBLIES_PRESENT\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Filter_LST_thr_Impl.c\", \"\", \"run\", 0);\n\n  sb_pacer_notification_wait();\n  for(;;) {\n    sb_pacer_notification_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_SW_CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Filter_LST_thr_Impl_MCMP_PROC_SW_FLT_LST_CASE_Filter_LST\/includes\/sb_CASE_Filter_LST_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_FILTER_LST_THR_IMPL_H\n#define SB_CASE_FILTER_LST_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_filter_in_dequeue(union_art_DataContent *);\n\nbool sb_filter_out_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_CASE_FILTER_LST_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/src\/sb_CASE_Monitor_Req_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_Monitor_Req_thr_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_observed_recv_queue;\n\n\/************************************************************************\n * sb_observed_dequeue_poll:\n ************************************************************************\/\nbool sb_observed_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_observed_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_observed_dequeue:\n ************************************************************************\/\nbool sb_observed_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_observed_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_observed_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_observed_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_observed_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_reference_1_recv_queue;\n\n\/************************************************************************\n * sb_reference_1_dequeue_poll:\n ************************************************************************\/\nbool sb_reference_1_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_reference_1_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_reference_1_dequeue:\n ************************************************************************\/\nbool sb_reference_1_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_reference_1_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_reference_1_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_reference_1_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_reference_1_recv_queue);\n}\n\n\/\/ is_empty observed: In EventDataPort\nB slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix_observed_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_observed_is_empty();\n}\n\n\/\/ receive observed: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix_observed_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor_Req_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix_observed_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_observed_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty reference_1: In EventDataPort\nB slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix_reference_1_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_reference_1_is_empty();\n}\n\n\/\/ receive reference_1: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix_reference_1_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor_Req_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_seL4Nix_reference_1_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_reference_1_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Req_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\\n\");\n\n  \/\/ initialise data structure for incoming event data port observed\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_observed_recv_queue, sb_observed_queue);\n\n  \/\/ initialise data structure for incoming event data port reference_1\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_reference_1_recv_queue, sb_reference_1_queue);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Req_thr_Impl.c\", \"\", \"run\", 0);\n\n  sb_pacer_notification_wait();\n  for(;;) {\n    sb_pacer_notification_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_SW_CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Monitor_Req_thr_Impl_MCMP_PROC_SW_MON_REQ_CASE_Monitor_Req\/includes\/sb_CASE_Monitor_Req_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_MONITOR_REQ_THR_IMPL_H\n#define SB_CASE_MONITOR_REQ_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_observed_dequeue(union_art_DataContent *);\n\nbool sb_reference_1_dequeue(union_art_DataContent *);\n\n#endif \/\/ SB_CASE_MONITOR_REQ_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/src\/sb_CASE_Monitor_Geo_thr_Impl_ffi.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <all.h>\n#include <camkes.h>\n#include <stdbool.h>\n#include <CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_api.h>\n#include <CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.h>\n\nslang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints entryPoints;\nIS_82ABD8 event_in_port_ids;\nIS_82ABD8 data_in_port_ids;\nIS_82ABD8 event_out_port_ids;\nIS_82ABD8 data_out_port_ids;\nbool initialized = false;\n\nvoid init(STACK_FRAME_ONLY) {\n  if(!initialized) {\n    DeclNewStackFrame(caller, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"init\", 0);\n\n    entryPoints = (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_entryPoints(SF_LAST);\n    event_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n    data_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n    event_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n    data_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n    initialized = true;\n  }\n}\n\nvoid ffiinitializeComponent(unsigned char *parameter, long parameterSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiinitializeComponent\", 0);\n\n  entryPoints = (slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_entryPoints(SF_LAST);\n  event_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n  data_in_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n  event_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n  data_out_port_ids = (IS_82ABD8) slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n}\n\nvoid checkAndReportBufferOverrun(STACK_FRAME long bytesWritten, long bufferSizeBytes) {\n  #ifdef CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"checkAndReportBufferOverrun\", 0);\n\n  init(SF_LAST);\n  if (bytesWritten > bufferSizeBytes) {\n    DeclNewString(_str);\n    String str = (String)&_str;\n    String__append(SF str, string(\"Wrote too many bytes to buffer\"));\n    api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF str);\n  }\n  #endif\n}\n\nvoid dumpBuffer(STACK_FRAME size_t numBits, U8* buffer) {\n  #ifdef CAKEML_DUMP_BUFFERS\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"dumpBuffer\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  String__append(SF str, string(\"[\"));\n  size_t end = ((numBits \/ 8) > 80) ? 80 : (numBits \/ 8);\n  for (int i = 0 ; i < end ; ++i) {\n    U8_string_(SF str, buffer[i]);\n  }\n  String__append(SF str, string(\"]\"));\n  api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF str);\n  #endif\n}\n\nvoid ffiapi_receiveInput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_receiveInput\", 0);\n\n  init(SF_LAST);\n  art_Art_receiveInput(SF event_in_port_ids, data_in_port_ids);\n}\n\nvoid ffiapi_sendOutput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_sendOutput\", 0);\n\n  init(SF_LAST);\n  art_Art_sendOutput(SF event_out_port_ids, data_out_port_ids);\n}\n\nvoid ffiapi_logInfo(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_logInfo\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logInfo__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF str);\n} \n\nvoid ffiapi_logDebug(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_logDebug\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logDebug__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF str);\n} \n\nvoid ffiapi_logError(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_logError\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logError__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF str);\n} \n\nvoid ffiapi_get_keep_in_zones(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_get_keep_in_zones\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  api_get_keep_in_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF &numBits, (U8 *)(output));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_get_keep_out_zones(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_get_keep_out_zones\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  api_get_keep_out_zones__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF &numBits, (U8 *)(output));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_get_observed(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_get_observed\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_observed__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_output(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_send_output\", 0);\n\n  init(SF_LAST);\n  api_put_output__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffiapi_send_alert(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl_ffi.c\", \"\", \"ffiapi_send_alert\", 0);\n\n  init(SF_LAST);\n  api_put_alert__slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo(SF_LAST );\n}\n\nvoid ffisb_pacer_notification_wait(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_pacer_notification_wait();\n  output[0] = 1;\n}\n\nvoid ffisb_pacer_notification_emit(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  \/\/ non self-pacing so do nothing\n  output[0] = 1;\n}\n\n\/**\n * Required by the FFI framework\n *\/\n\nvoid ffiwrite (unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n}\n\nvoid cml_exit(int arg) {\n  #ifdef DEBUG_FFI\n  {\n    fprintf(stderr,\"GCNum: %d, GCTime(us): %ld\\n\",numGC,microsecs);\n  }\n  #endif\n  exit(arg);\n}\n\n\/\/ convert big-endian 32-bit float to little-endian 64 bit double\nvoid ffifloat2double(unsigned char *parameter, long parameterSizeBytes,\n                     unsigned char *output,    long outputSizeBytes) {\n  char bytes [4];\n  assert (4 == parameterSizeBytes);\n  bytes[3] = parameter[0];\n  bytes[2] = parameter[1];\n  bytes[1] = parameter[2];\n  bytes[0] = parameter[3];\n\n  double result = *((float*)bytes);\n  memcpy(output, (unsigned char*) &result, sizeof(double));\n}\n\nvoid ffiraw_print_buffer(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n\n  int elideAfter = 20; \/\/ stop printing after this many consecutive 0's seen\n  int stopAfter = 50; \/\/ exit after this many consecutive 0's seen, lessens 'busy-wait'\n\n  U8* buffer = (U8 *) parameter;\n\n  printf(\"%i bytes\\n\", parameterSizeBytes); \/\/ doesn't include the bool byte\n\n  if(parameterSizeBytes > 0) {\n    int numZerosSeen = 0;\n    printf(\"[%02x\\n\", buffer[0]); \/\/ first byte is a bool\n    for(int i = 1; i < parameterSizeBytes + 1; i++) {\n      numZerosSeen = buffer[i] == 0 ? (numZerosSeen + 1) : 0;\n      if(numZerosSeen >= elideAfter) {\n        if(numZerosSeen % stopAfter == 0) { printf(\"...\"); break; }\n      } else {\n      \tprintf(\"%02x \", buffer[i]);\n      \tif(i % 16 == 0) printf(\"\\n\");\n      }\n    }\n    printf(\"]\\n\");\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/src\/sb_CASE_Monitor_Geo_thr_Impl.S",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ placeholder for CakeML assembly",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/src\/sb_CASE_Monitor_Geo_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_Monitor_Geo_thr_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nseqNum_t sb_keep_out_zones_seqNum;\n\nseqNum_t sb_keep_in_zones_seqNum;\n\n\/*****************************************************************\n * sb_keep_in_zones_is_empty:\n *\n * Helper method to determine if the data infrastructure port has\n * received data\n *\n ****************************************************************\/\nbool sb_keep_in_zones_is_empty() {\n  return is_empty_sp_union_art_DataContent(sb_keep_in_zones);\n}\n\nbool sb_keep_in_zones_read(union_art_DataContent * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_union_art_DataContent(sb_keep_in_zones, value, &new_seqNum) ) {\n    sb_keep_in_zones_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\n\/*****************************************************************\n * sb_keep_out_zones_is_empty:\n *\n * Helper method to determine if the data infrastructure port has\n * received data\n *\n ****************************************************************\/\nbool sb_keep_out_zones_is_empty() {\n  return is_empty_sp_union_art_DataContent(sb_keep_out_zones);\n}\n\nbool sb_keep_out_zones_read(union_art_DataContent * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_union_art_DataContent(sb_keep_out_zones, value, &new_seqNum) ) {\n    sb_keep_out_zones_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_observed_recv_queue;\n\n\/************************************************************************\n * sb_observed_dequeue_poll:\n ************************************************************************\/\nbool sb_observed_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_observed_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_observed_dequeue:\n ************************************************************************\/\nbool sb_observed_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_observed_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_observed_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_observed_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_observed_recv_queue);\n}\n\nbool sb_output_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_output_queue_1, (union_art_DataContent*) data);\n  sb_output_1_notification_emit();\n\n  return true;\n}\n\n\/************************************************************************\n * sb_alert_enqueue\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to send to a remote event port.\n *\n ************************************************************************\/\nbool sb_alert_enqueue(void) {\n  \/\/ sb_alert_counter is a dataport (shared memory) that is written by the sender\n  \/\/ and read by the receiver(s). This counter is monotonicly increasing,\n  \/\/ but can wrap.\n  (*sb_alert_counter)++;\n\n  \/\/ Release memory fence - ensure subsequent write occurs after any preceeding read or write\n  sb_alert_counter_release();\n\n  sb_alert_emit();\n\n  return true;\n}\n\n\n\/\/ send output: Out EventDataPort CMASI__AutomationResponse_i\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_output_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor_Geo_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_output_Send\", 0);\n\n  sb_output_enqueue(d);\n}\n\n\/\/ send alert: Out EventPort\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_alert_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor_Geo_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_alert_Send\", 0);\n\n  \/\/ event port - can ignore the Slang Empty payload\n  art_Empty payload = (art_Empty) d;\n\n  \/\/ send event via CAmkES\n  sb_alert_enqueue();\n}\n\n\/\/ is_empty keep_in_zones: In DataPort\nB slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_keep_in_zones_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_keep_in_zones_is_empty();\n}\n\n\/\/ receive keep_in_zones: In DataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_keep_in_zones_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor_Geo_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_keep_in_zones_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_keep_in_zones_read((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty keep_out_zones: In DataPort\nB slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_keep_out_zones_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_keep_out_zones_is_empty();\n}\n\n\/\/ receive keep_out_zones: In DataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_keep_out_zones_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor_Geo_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_keep_out_zones_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_keep_out_zones_read((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty observed: In EventDataPort\nB slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_observed_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_observed_is_empty();\n}\n\n\/\/ receive observed: In EventDataPort union_art_DataContent\nUnit slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_observed_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor_Geo_thr_Impl.c\", \"\", \"slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_seL4Nix_observed_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_observed_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\\n\");\n\n  \/\/ initialise data structure for incoming event data port observed\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_observed_recv_queue, sb_observed_queue);\n\n  \/\/ initialise data structure for outgoing event data port output\n  sb_queue_union_art_DataContent_1_init(sb_output_queue_1);\n\n  \/\/ initialise shared counter for event port alert\n  *sb_alert_counter = 0;\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\\n\");\n}\n\n#ifndef CAKEML_ASSEMBLIES_PRESENT\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor_Geo_thr_Impl.c\", \"\", \"run\", 0);\n\n\n  sb_pacer_notification_wait();\n  for(;;) {\n    sb_pacer_notification_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_SW_CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/CASE_Monitor_Geo_thr_Impl_MCMP_PROC_SW_MON_GEO_CASE_Monitor_Geo\/includes\/sb_CASE_Monitor_Geo_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_MONITOR_GEO_THR_IMPL_H\n#define SB_CASE_MONITOR_GEO_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_keep_in_zones_read(union_art_DataContent * value);\n\nbool sb_keep_out_zones_read(union_art_DataContent * value);\n\nbool sb_observed_dequeue(union_art_DataContent *);\n\nbool sb_output_enqueue(const union_art_DataContent *);\n\nbool sb_alert_enqueue(void);\n\n#endif \/\/ SB_CASE_MONITOR_GEO_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/Pacer\/src\/Pacer.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ Copyright 2019 Adventium Labs\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sel4\/sel4.h>\n#include <sb_queue_int8_t_1.h>\n\nextern const char *get_instance_name(void);\n\nvoid send_period_to_vmRADIO(int8_t *data) {\n  sb_queue_int8_t_1_enqueue(period_to_vmRADIO_queue, data);\n  period_to_vmRADIO_notification_emit();\n}\n\nvoid send_period_to_vmUXAS(int8_t *data) {\n  sb_queue_int8_t_1_enqueue(period_to_vmUXAS_queue, data);\n  period_to_vmUXAS_notification_emit();\n}\n\nvoid pre_init(void) {\n  sb_queue_int8_t_1_init(period_to_vmRADIO_queue);\n  sb_queue_int8_t_1_init(period_to_vmUXAS_queue);\n}\n\nint run(void) {\n\n  int8_t tickCount = 0;\n\n  while (1) {\n    \/\/printf(\"%s: Period tick %d\\n\", get_instance_name(), tickCount);\n\n    tickCount++;\n\n    tick_emit();\n\n    send_period_to_vmRADIO(&tickCount);\n    send_period_to_vmUXAS(&tickCount);\n    period_emit();\n\n    tock_wait();\n  }\n\n  return 0;\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/includes\/sb_queue_union_art_DataContent_1.h",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE-1 elements.\n#define SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_union_art_DataContent_1 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type union_art_DataContent \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  union_art_DataContent elt[SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE];\n\n} sb_queue_union_art_DataContent_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue, \n  union_art_DataContent *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_union_art_DataContent_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_union_art_DataContent_1_t *queue;\n\n} sb_queue_union_art_DataContent_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_union_art_DataContent_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_union_art_DataContent_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/src\/sb_queue_union_art_DataContent_1.c",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_union_art_DataContent_1.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue, \n  union_art_DataContent *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_union_art_DataContent_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/includes\/sb_types.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <all.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef union art_DataContent union_art_DataContent;\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/includes\/sb_event_counter.h",
        {
          "type" : "TestResource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t;\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/src\/cross_vm_connections_vmRADIO.c",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2019, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_BSD)\n *\/\n\n#include <autoconf.h>\n#include <camkes.h>\n#include <vmlinux.h>\n#include <sel4vm\/guest_vm.h>\n\n#include <sel4vmmplatsupport\/drivers\/cross_vm_connection.h>\n#include <sel4vmmplatsupport\/drivers\/pci_helper.h>\n#include <pci\/helper.h>\n\n#ifdef CONFIG_PLAT_QEMU_ARM_VIRT\n#define CONNECTION_BASE_ADDRESS 0xDF000000\n#else\n#define CONNECTION_BASE_ADDRESS 0x3F000000\n#endif\n\n#define NUM_CONNECTIONS 5\nstatic struct camkes_crossvm_connection connections[NUM_CONNECTIONS];\n\nextern dataport_caps_handle_t sb_trusted_ids_queue_1_handle;\nvoid sb_trusted_ids_1_notification_emit_underlying(void);\nextern dataport_caps_handle_t sb_AutomationRequest_queue_1_handle;\nvoid sb_AutomationRequest_1_notification_emit_underlying(void);\nextern dataport_caps_handle_t sb_OperatingRegion_queue_1_handle;\nvoid sb_OperatingRegion_1_notification_emit_underlying(void);\nextern dataport_caps_handle_t sb_LineSearchTask_queue_1_handle;\nvoid sb_LineSearchTask_1_notification_emit_underlying(void);\nextern dataport_caps_handle_t sb_pacer_period_queue_handle;\nseL4_Word sb_pacer_period_notification_notification_badge(void);\n\nstatic int consume_callback(vm_t *vm, void *cookie) {\n    consume_connection_event(vm, (seL4_Word) cookie, true);\n    return 0;\n}\n\nvoid init_cross_vm_connections(vm_t *vm, void *cookie) {\n    connections[0] = (struct camkes_crossvm_connection) {\n      .handle = &sb_trusted_ids_queue_1_handle,\n      .emit_fn = sb_trusted_ids_1_notification_emit_underlying,\n      .consume_badge = -1,\n      .connection_name = \"sb_trusted_ids_queue_1\"\n    };\n\n    connections[1] = (struct camkes_crossvm_connection) {\n      .handle = &sb_AutomationRequest_queue_1_handle,\n      .emit_fn = sb_AutomationRequest_1_notification_emit_underlying,\n      .consume_badge = -1,\n      .connection_name = \"sb_AutomationRequest_queue_1\"\n    };\n\n    connections[2] = (struct camkes_crossvm_connection) {\n      .handle = &sb_OperatingRegion_queue_1_handle,\n      .emit_fn = sb_OperatingRegion_1_notification_emit_underlying,\n      .consume_badge = -1,\n      .connection_name = \"sb_OperatingRegion_queue_1\"\n    };\n\n    connections[3] = (struct camkes_crossvm_connection) {\n      .handle = &sb_LineSearchTask_queue_1_handle,\n      .emit_fn = sb_LineSearchTask_1_notification_emit_underlying,\n      .consume_badge = -1,\n      .connection_name = \"sb_LineSearchTask_queue_1\"\n    };\n\n    connections[4] = (struct camkes_crossvm_connection) {\n      .handle = &sb_pacer_period_queue_handle,\n      .emit_fn = NULL,\n      .consume_badge = sb_pacer_period_notification_notification_badge(),\n      .connection_name = \"sb_pacer_period_queue\"\n    };\n\n    for (int i = 0; i < NUM_CONNECTIONS; i++) {\n        if (connections[i].consume_badge != -1) {\n            int err = register_async_event_handler(connections[i].consume_badge, consume_callback, (void *)connections[i].consume_badge);\n            ZF_LOGF_IF(err, \"Failed to register_async_event_handler for init_cross_vm_connections.\");\n        }\n    }\n\n    cross_vm_connections_init(vm, CONNECTION_BASE_ADDRESS, connections, ARRAY_SIZE(connections));\n}\n\nDEFINE_MODULE(cross_vm_connections, NULL, init_cross_vm_connections)",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/bin\/setup-camkes-arm-vm.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o noclobber\n\nif [ -n \"$1\" ]; then\n    CAMKES_ARM_VM_DIR=$1\nelse\n  CASE_HOME=$HOME\/CASE\n\n  if [[ ! -d \"${CASE_HOME}\" ]]; then\n    echo \"CASE home not found: ${CASE_HOME}\"\n    exit 1\n  fi\n\n  CAMKES_ARM_VM_DIR=${CASE_HOME}\/camkes-arm-vm\nfi\n\nif [[ -d \"${CAMKES_ARM_VM_DIR}\" ]]; then\n  read -p \"The following directory already exists, replace ${CAMKES_ARM_VM_DIR} [Y|y]? \" -n 1 -r; echo\n  if [[ $REPLY =~ ^[Yy]$ ]]; then\n    rm -rf ${CAMKES_ARM_VM_DIR}\n  else\n    exit -1\n  fi\nfi\n\nmkdir $CAMKES_ARM_VM_DIR\ncd $CAMKES_ARM_VM_DIR\n\necho \"Cloning camkes arm\"\nrepo init -u https:\/\/github.com\/SEL4PROJ\/camkes-arm-vm-manifest.git --depth=1\nrepo sync -j8\n\necho \"Cloning Kent's CAmkES\"\n\n(cd projects && rm -rf camkes && git clone https:\/\/github.com\/kent-mcleod\/camkes.git -b kent\/aadl)\n\ncd $CAMKES_ARM_VM_DIR\n\nln -sf projects\/camkes\/easy-settings.cmake\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/src\/cross_vm_connections_vmUXAS.c",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2019, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_BSD)\n *\/\n\n#include <autoconf.h>\n#include <camkes.h>\n#include <vmlinux.h>\n#include <sel4vm\/guest_vm.h>\n\n#include <sel4vmmplatsupport\/drivers\/cross_vm_connection.h>\n#include <sel4vmmplatsupport\/drivers\/pci_helper.h>\n#include <pci\/helper.h>\n\n#ifdef CONFIG_PLAT_QEMU_ARM_VIRT\n#define CONNECTION_BASE_ADDRESS 0xDF000000\n#else\n#define CONNECTION_BASE_ADDRESS 0x3F000000\n#endif\n\n#define NUM_CONNECTIONS 7\nstatic struct camkes_crossvm_connection connections[NUM_CONNECTIONS];\n\nextern dataport_caps_handle_t sb_AutomationRequest_queue_handle;\nseL4_Word sb_AutomationRequest_notification_notification_badge(void);\nextern dataport_caps_handle_t sb_AirVehicleState_queue_handle;\nseL4_Word sb_AirVehicleState_notification_notification_badge(void);\nextern dataport_caps_handle_t sb_OperatingRegion_queue_handle;\nseL4_Word sb_OperatingRegion_notification_notification_badge(void);\nextern dataport_caps_handle_t sb_LineSearchTask_queue_handle;\nseL4_Word sb_LineSearchTask_notification_notification_badge(void);\nextern dataport_caps_handle_t sb_AutomationResponse_MON_GEO_queue_1_handle;\nvoid sb_AutomationResponse_MON_GEO_1_notification_emit_underlying(void);\nextern dataport_caps_handle_t sb_AutomationResponse_MON_REQ_queue_1_handle;\nvoid sb_AutomationResponse_MON_REQ_1_notification_emit_underlying(void);\nextern dataport_caps_handle_t sb_pacer_period_queue_handle;\nseL4_Word sb_pacer_period_notification_notification_badge(void);\n\nstatic int consume_callback(vm_t *vm, void *cookie) {\n    consume_connection_event(vm, (seL4_Word) cookie, true);\n    return 0;\n}\n\nvoid init_cross_vm_connections(vm_t *vm, void *cookie) {\n    connections[0] = (struct camkes_crossvm_connection) {\n      .handle = &sb_AutomationRequest_queue_handle,\n      .emit_fn = NULL,\n      .consume_badge = sb_AutomationRequest_notification_notification_badge(),\n      .connection_name = \"sb_AutomationRequest_queue\"\n    };\n\n    connections[1] = (struct camkes_crossvm_connection) {\n      .handle = &sb_AirVehicleState_queue_handle,\n      .emit_fn = NULL,\n      .consume_badge = sb_AirVehicleState_notification_notification_badge(),\n      .connection_name = \"sb_AirVehicleState_queue\"\n    };\n\n    connections[2] = (struct camkes_crossvm_connection) {\n      .handle = &sb_OperatingRegion_queue_handle,\n      .emit_fn = NULL,\n      .consume_badge = sb_OperatingRegion_notification_notification_badge(),\n      .connection_name = \"sb_OperatingRegion_queue\"\n    };\n\n    connections[3] = (struct camkes_crossvm_connection) {\n      .handle = &sb_LineSearchTask_queue_handle,\n      .emit_fn = NULL,\n      .consume_badge = sb_LineSearchTask_notification_notification_badge(),\n      .connection_name = \"sb_LineSearchTask_queue\"\n    };\n\n    connections[4] = (struct camkes_crossvm_connection) {\n      .handle = &sb_AutomationResponse_MON_GEO_queue_1_handle,\n      .emit_fn = sb_AutomationResponse_MON_GEO_1_notification_emit_underlying,\n      .consume_badge = -1,\n      .connection_name = \"sb_AutomationResponse_MON_GEO_queue_1\"\n    };\n\n    connections[5] = (struct camkes_crossvm_connection) {\n      .handle = &sb_AutomationResponse_MON_REQ_queue_1_handle,\n      .emit_fn = sb_AutomationResponse_MON_REQ_1_notification_emit_underlying,\n      .consume_badge = -1,\n      .connection_name = \"sb_AutomationResponse_MON_REQ_queue_1\"\n    };\n\n    connections[6] = (struct camkes_crossvm_connection) {\n      .handle = &sb_pacer_period_queue_handle,\n      .emit_fn = NULL,\n      .consume_badge = sb_pacer_period_notification_notification_badge(),\n      .connection_name = \"sb_pacer_period_queue\"\n    };\n\n    for (int i = 0; i < NUM_CONNECTIONS; i++) {\n        if (connections[i].consume_badge != -1) {\n            int err = register_async_event_handler(connections[i].consume_badge, consume_callback, (void *)connections[i].consume_badge);\n            ZF_LOGF_IF(err, \"Failed to register_async_event_handler for init_cross_vm_connections.\");\n        }\n    }\n\n    cross_vm_connections_init(vm, CONNECTION_BASE_ADDRESS, connections, ARRAY_SIZE(connections));\n}\n\nDEFINE_MODULE(cross_vm_connections, NULL, init_cross_vm_connections)",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject(arm-vm C)\n\nincludeGlobalComponents()\nfind_package(camkes-vm REQUIRED)\nfind_package(camkes-vm-images REQUIRED)\nfind_package(camkes-arm-vm REQUIRED)\nfind_package(camkes-vm-linux REQUIRED)\ncamkes_arm_vm_import_project()\n\ninclude(${CAMKES_VM_LINUX_HELPERS_PATH})\ninclude(${CAMKES_VM_LINUX_MODULE_HELPERS_PATH})\ninclude(${CAMKES_VM_LINUX_SOURCE_HELPERS_PATH})\ninclude(ExternalProject)\ninclude(external-project-helpers)\n\n#MESSAGE(\"KernelARMPlatform = ${KernelARMPlatform}\")\n#MESSAGE(\"CAMKES_ARM_VM_DIR = ${CAMKES_ARM_VM_DIR}\")\n#MESSAGE(\"CAMKES_VM_IMAGES_DIR = ${CAMKES_VM_IMAGES_DIR}\")\n#MESSAGE(\"CAMKES_VM_LINUX_DIR = ${CAMKES_VM_LINUX_DIR}\")\n#MESSAGE(\"CMAKE_CURRENT_BINARY_DIR = ${CMAKE_CURRENT_BINARY_DIR}\")\n#MESSAGE(\"CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}\")\n#MESSAGE(\"CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}\")\n#MESSAGE(\"BASE_C_FLAGS = ${BASE_C_FLAGS}\")\n\nif(\"${KernelARMPlatform}\" STREQUAL \"qemu-arm-virt\" AND (NOT USE_PRECONFIGURED_ROOTFS))\n    MESSAGE(\"Not using preconfigured rootfs, will download a vanilla linux image instead\")\n\n    set(cpp_flags \"-DKERNELARMPLATFORM_QEMU-ARM-VIRT\")\n    set(linux_repo \"https:\/\/git.kernel.org\/pub\/scm\/linux\/kernel\/git\/stable\/linux.git\")\n    set(linux_tag \"v4.9.189\")\n    set(linux_arch \"arm64\")\n    set(linux_cross_compile \"aarch64-linux-gnu-\")\n    set(rootfs_file \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/rootfs.cpio.gz\")\n    # Checkout and configure linux to build crossvm module\n    ExternalProject_Add(\n        checkout_linux\n        GIT_REPOSITORY ${linux_repo}\n        GIT_TAG ${linux_tag}\n        GIT_SHALLOW TRUE\n        GIT_PROGRESS TRUE\n        USES_TERMINAL_DOWNLOAD TRUE\n        BUILD_COMMAND \"\"\n        INSTALL_COMMAND \"\"\n        CONFIGURE_COMMAND \"\"\n        SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}\/linux_out\n    )\n    Message(\"Done cloning ${linux_repo}\")\n\n    # Linux config and symvers are to be copied to unpacked archive\n    set(linux_config \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/linux_configs\/config\")\n    set(linux_symvers \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/linux_configs\/Module.symvers\")\n    # Configure unpacked archive with config and symvers\n    ConfigureLinux(\n        ${CMAKE_CURRENT_BINARY_DIR}\/linux_out\n        ${linux_config}\n        ${linux_symvers}\n        configure_vm_linux\n        ARCH\n        ${linux_arch}\n        CROSS_COMPILE\n        ${linux_cross_compile}\n        DEPENDS\n        checkout_linux\n    )\n\n    # Compile CrossVM Dataport Module\n    DefineLinuxModule(\n        ${CAMKES_VM_LINUX_DIR}\/camkes-linux-artifacts\/camkes-linux-modules\/camkes-connector-modules\/connection\n        output_module\n        output_module_target\n        KERNEL_DIR\n        ${CMAKE_CURRENT_BINARY_DIR}\/linux_out\n        ARCH\n        ${linux_arch}\n        CROSS_COMPILE\n        ${linux_cross_compile}\n        DEPENDS\n        checkout_linux\n        configure_vm_linux\n    )\n\n    AddFileToOverlayDir(\n        \"connection.ko\"\n        ${output_module}\n        \"lib\/modules\/4.14.87\/kernel\/drivers\/vmm\"\n        overlay\n        DEPENDS\n        output_module_target\n    )\n\n    # Add script to initialise dataport module\n    AddFileToOverlayDir(\n        \"S90crossvm_module_init\"\n        ${CMAKE_CURRENT_SOURCE_DIR}\/overlay_files\/init_scripts\/cross_vm_module_init\n        \"etc\/init.d\"\n        overlay\n    )\nelse()\n    MESSAGE(\"Using pre-configured rootfs\")\n\n    # Use pre-configured rootfs file with crossvm modules and apps installed\n    set(rootfs_file \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/rootfs_crossvm.cpio.gz\")\nendif()\n\n# Complile CrossVM Event Apps vmRADIO and vmUXAS\nforeach(item IN ITEMS vmRADIO vmUXAS)\n    ExternalProject_Add(\n        ${item}\n        SOURCE_DIR\n        ${CMAKE_CURRENT_SOURCE_DIR}\/apps\/${item}\n        BINARY_DIR\n        ${CMAKE_CURRENT_BINARY_DIR}\/${item}\n        INSTALL_COMMAND\n        \"\"\n        BUILD_ALWAYS\n        ON\n        EXCLUDE_FROM_ALL\n        CMAKE_ARGS\n        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n        -DSlangTypeLibrary_DIR=${CMAKE_CURRENT_SOURCE_DIR}\/..\/..\/slang_libraries\/SlangTypeLibrary\n        -DSB_Type_Library_DIR=${CMAKE_CURRENT_SOURCE_DIR}\/..\/..\/types\n        -DCMAKE_C_FLAGS=${BASE_C_FLAGS}\n    )\n\n    AddExternalProjFilesToOverlay(\n        ${item}\n        ${CMAKE_CURRENT_BINARY_DIR}\/${item}\n        overlay\n        \"usr\/bin\"\n        FILES\n        ${item}\n    )\nendforeach()\n\nMessage(\"Done compiling CrossVM Event Apps for vmRADIO and vmUXAS\")\n\n\n# Overwrite inittab file for using the virtio console hvc0.\nAddFileToOverlayDir(\n    \"inittab\"\n    ${CMAKE_CURRENT_SOURCE_DIR}\/overlay_files\/init_scripts\/inittab_hvc0\n    \"etc\"\n    overlay\n)\n\n# Use initrd with crossvm kernel module and setup already included.\n# Construct new rootfs\nAddOverlayDirToRootfs(\n    overlay\n    ${rootfs_file}\n    \"buildroot\"\n    \"rootfs_install\"\n    output_overlayed_rootfs_location\n    rootfs_target\n    GZIP\n)\n\nAddToFileServer(\"linux-initrd-vm-client\" ${output_overlayed_rootfs_location} DEPENDS rootfs_target)\n\n# Add linux kernel image to file server\nAddToFileServer(\"linux\" \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/linux\")\n\nDefineCAmkESVMFileServer()\n\nCAmkESAddImportPath(${CMAKE_CURRENT_SOURCE_DIR}\/${KernelARMPlatform}\/)\n\n# Define our VM Component with our cross vm dataports glue code\nDeclareCamkesARMVM(\n  VM_RadioDriver_Attestation_thr_Impl_MCMP_PROC_SW_RADIO_RadioDriver_Attestation\n  EXTRA_SOURCES src\/cross_vm_connections_vmRADIO.c\n  EXTRA_LIBS SB_Type_Library\n             SlangTypeLibrary)\n\nDeclareCamkesARMVM(\n  VM_UxAS_thr_Impl_MCMP_PROC_SW_UXAS_UxAS\n  EXTRA_SOURCES src\/cross_vm_connections_vmUXAS.c\n  EXTRA_LIBS SB_Type_Library\n             SlangTypeLibrary)\n\nCAmkESAddCPPInclude(${CAMKES_ARM_VM_DIR}\/components\/VM)",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/exynos5422\/devices.camkes",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2020, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_BSD)\n *\/\n\n#include <configurations\/vm.h>\n\n#define VM_RAM_OFFSET 0\n#define VM_INITRD_MAX_SIZE 0x1900000 \/\/ 25 MB\n\n\n#define VM1_RAM_BASE       0x48000000\n#define VM1_RAM_MMIOS_BASE \"0x48000000:27\"\n#define VM1_RAM_SIZE       0x8000000\n#define VM1_DTB_ADDR       0x4f000000  \/\/ VM1_RAM_BASE + 0x7000000\n#define VM1_INITRD_ADDR    0x4d700000  \/\/ VM1_DTB_ADDR - VM_INITRD_MAX_SIZE\n\n#define VM2_RAM_BASE       0x50000000\n#define VM2_RAM_MMIOS_BASE \"0x50000000:27\"\n#define VM2_RAM_SIZE       0x8000000\n#define VM2_DTB_ADDR       0x57000000  \/\/ VM2_RAM_BASE + 0x7000000\n#define VM2_INITRD_ADDR    0x55700000  \/\/ VM2_DTB_ADDR - VM_INITRD_MAX_SIZE\n\nassembly {\n  composition {}\n  configuration {\n    vmRADIO.linux_address_config = {\n      \"linux_ram_base\" : VAR_STRINGIZE(VM1_RAM_BASE),\n      \"linux_ram_paddr_base\" : VAR_STRINGIZE(VM1_RAM_BASE),\n      \"linux_ram_size\" : VAR_STRINGIZE(VM1_RAM_SIZE),\n      \"linux_ram_offset\" : VAR_STRINGIZE(VM_RAM_OFFSET),\n      \"dtb_addr\" : VAR_STRINGIZE(VM1_DTB_ADDR),\n      \"initrd_max_size\" : VAR_STRINGIZE(VM_INITRD_MAX_SIZE),\n      \"initrd_addr\" : VAR_STRINGIZE(VM1_INITRD_ADDR),\n    };\n    vmRADIO.linux_image_config = {\n      \"linux_bootcmdline\" : \"console=hvc0 root=\/dev\/ram0 nosmp rw debug loglevel=8 pci=nomsi initcall_blacklist=clk_disable_unused\",\n      \"linux_stdout\" : \"hvc0\",\n      \"dtb_name\" : \"\",\n      \"initrd_name\" : \"linux-initrd-vm-client\",\n    };\n    vmRADIO.mmios = [\n      \"0x10000000:0x1000:12\", \/\/ CHIP ID\n      \"0x10486000:0x1000:12\"  \/\/ VCPU\n    ];\n    vmRADIO.untyped_mmios = [\n      VM1_RAM_MMIOS_BASE  \/\/ RAM\n    ];\n    vmRADIO.irqs = [];\n    vmRADIO.dtb = dtb([{}]);\n\n    vmUXAS.linux_address_config = {\n      \"linux_ram_base\" : VAR_STRINGIZE(VM2_RAM_BASE),\n      \"linux_ram_paddr_base\" : VAR_STRINGIZE(VM2_RAM_BASE),\n      \"linux_ram_size\" : VAR_STRINGIZE(VM2_RAM_SIZE),\n      \"linux_ram_offset\" : VAR_STRINGIZE(VM_RAM_OFFSET),\n      \"dtb_addr\" : VAR_STRINGIZE(VM2_DTB_ADDR),\n      \"initrd_max_size\" : VAR_STRINGIZE(VM_INITRD_MAX_SIZE),\n      \"initrd_addr\" : VAR_STRINGIZE(VM2_INITRD_ADDR),\n    };\n    vmUXAS.linux_image_config = {\n      \"linux_bootcmdline\" : \"console=hvc0 root=\/dev\/ram0 nosmp rw debug loglevel=8 pci=nomsi initcall_blacklist=clk_disable_unused\",\n      \"linux_stdout\" : \"hvc0\",\n      \"dtb_name\" : \"\",\n      \"initrd_name\" : \"linux-initrd-vm-client\",\n    };\n    vmUXAS.mmios = [\n      \"0x10000000:0x1000:12\", \/\/ CHIP ID\n      \"0x10486000:0x1000:12\"  \/\/ VCPU\n    ];\n    vmUXAS.untyped_mmios = [\n      VM2_RAM_MMIOS_BASE  \/\/ RAM\n    ];\n    vmUXAS.irqs = [];\n    vmUXAS.dtb = dtb([{}]);\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/qemu-arm-virt\/devices.camkes",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2020, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_BSD)\n *\/\n\n#include <configurations\/vm.h>\n#define VM_RAM_OFFSET      0x00000000\n#define VM_INITRD_MAX_SIZE 0x3200000 \/\/ 50 MB\n\n#define VM1_RAM_BASE       0x48000000\n#define VM1_RAM_MMIOS_BASE \"0x48000000:27\"\n#define VM1_RAM_SIZE       0x8000000\n#define VM1_DTB_ADDR       0x4f000000  \/\/ VM1_RAM_BASE + 0x7000000\n#define VM1_INITRD_ADDR    0x4d700000  \/\/ VM1_DTB_ADDR - VM_INITRD_MAX_SIZE\n\n#define VM2_RAM_BASE       0x50000000\n#define VM2_RAM_MMIOS_BASE \"0x50000000:27\"\n#define VM2_RAM_SIZE       0x8000000\n#define VM2_DTB_ADDR       0x57000000  \/\/ VM2_RAM_BASE + 0x7000000\n#define VM2_INITRD_ADDR    0x55700000  \/\/ VM2_DTB_ADDR - VM_INITRD_MAX_SIZE\n\nassembly {\n  composition {}\n  configuration {\n    vmRADIO.linux_address_config = {\n      \"linux_ram_base\" : VAR_STRINGIZE(VM1_RAM_BASE),\n      \"linux_ram_paddr_base\" : VAR_STRINGIZE(VM1_RAM_BASE),\n      \"linux_ram_size\" : VAR_STRINGIZE(VM1_RAM_SIZE),\n      \"linux_ram_offset\" : VAR_STRINGIZE(VM_RAM_OFFSET),\n      \"dtb_addr\" : VAR_STRINGIZE(VM1_DTB_ADDR),\n      \"initrd_max_size\" : VAR_STRINGIZE(VM_INITRD_MAX_SIZE),\n      \"initrd_addr\" : VAR_STRINGIZE(VM1_INITRD_ADDR),\n    };\n    vmRADIO.linux_image_config = {\n      \"linux_bootcmdline\" : \"console=hvc0 nosmp rw debug loglevel=8 pci=nomsi,realloc=off,bios initcall_blacklist=clk_disable_unused\",\n      \"linux_stdout\" : \"hvc0\",\n      \"dtb_name\" : \"\",\n      \"initrd_name\" : \"linux-initrd-vm-client\",\n    };\n    vmRADIO.mmios = [\n      \"0x8040000:0x1000:12\", \/\/ Interrupt Controller Virtual CPU interface (Virtual Machine view)\n    ];\n    vmRADIO.untyped_mmios = [\n      VM1_RAM_MMIOS_BASE  \/\/ RAM\n    ];\n    vmRADIO.irqs = [];\n    vmRADIO.dtb = dtb([{}]);\n\n\n    vmUXAS.linux_address_config = {\n      \"linux_ram_base\" : VAR_STRINGIZE(VM2_RAM_BASE),\n      \"linux_ram_paddr_base\" : VAR_STRINGIZE(VM2_RAM_BASE),\n      \"linux_ram_size\" : VAR_STRINGIZE(VM2_RAM_SIZE),\n      \"linux_ram_offset\" : VAR_STRINGIZE(VM_RAM_OFFSET),\n      \"dtb_addr\" : VAR_STRINGIZE(VM2_DTB_ADDR),\n      \"initrd_max_size\" : VAR_STRINGIZE(VM_INITRD_MAX_SIZE),\n      \"initrd_addr\" : VAR_STRINGIZE(VM2_INITRD_ADDR),\n    };\n    vmUXAS.linux_image_config = {\n      \"linux_bootcmdline\" : \"console=hvc0 nosmp rw debug loglevel=8 pci=nomsi,realloc=off,bios initcall_blacklist=clk_disable_unused\",\n      \"linux_stdout\" : \"hvc0\",\n      \"dtb_name\" : \"\",\n      \"initrd_name\" : \"linux-initrd-vm-client\",\n    };\n    vmUXAS.mmios = [\n      \"0x8040000:0x1000:12\", \/\/ Interrupt Controller Virtual CPU interface (Virtual Machine view)\n    ];\n    vmUXAS.untyped_mmios = [\n      VM2_RAM_MMIOS_BASE  \/\/ RAM\n    ];\n    vmUXAS.irqs = [];\n    vmUXAS.dtb = dtb([{}]);\n\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/overlay_files\/init_scripts\/cross_vm_module_init",
        {
          "type" : "TestResource",
          "content" : "#!\/bin\/sh\n#\n# Copyright 2020, Data61\n# Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n# ABN 41 687 119 230.\n#\n# This software may be distributed and modified according to the terms of\n# the BSD 2-Clause license. Note that NO WARRANTY is provided.\n# See \"LICENSE_BSD2.txt\" for details.\n#\n# @TAG(DATA61_BSD)\n#\n\ninsmod \/lib\/modules\/4.14.87\/kernel\/drivers\/vmm\/connection.ko",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/overlay_files\/init_scripts\/inittab_hvc0",
        {
          "type" : "TestResource",
          "content" : "# @TAG(CUSTOM)\n# \/etc\/inittab\n#\n# This file will not be overwritten so is safe to edit\n#\n# Copyright (C) 2001 Erik Andersen <andersen@codepoet.org>\n#\n# Note: BusyBox init doesn't support runlevels.  The runlevels field is\n# completely ignored by BusyBox init. If you want runlevels, use\n# sysvinit.\n#\n# Format for each entry: <id>:<runlevels>:<action>:<process>\n#\n# id        == tty to run on, or empty for \/dev\/console\n# runlevels == ignored\n# action    == one of sysinit, respawn, askfirst, wait, and once\n# process   == program to run\n\n# Startup the system\n::sysinit:\/bin\/mount -t proc proc \/proc\n::sysinit:\/bin\/mount -o remount,rw \/\n::sysinit:\/bin\/mkdir -p \/dev\/pts \/dev\/shm\n::sysinit:\/bin\/mount -a\n::sysinit:\/sbin\/swapon -a\nnull::sysinit:\/bin\/ln -sf \/proc\/self\/fd \/dev\/fd\nnull::sysinit:\/bin\/ln -sf \/proc\/self\/fd\/0 \/dev\/stdin\nnull::sysinit:\/bin\/ln -sf \/proc\/self\/fd\/1 \/dev\/stdout\nnull::sysinit:\/bin\/ln -sf \/proc\/self\/fd\/2 \/dev\/stderr\n::sysinit:\/bin\/hostname -F \/etc\/hostname\n# now run any rc scripts\n::sysinit:\/etc\/init.d\/rcS\n\n# Put a getty on the serial port\nhvc0:2345:respawn:\/sbin\/getty -L 9600 hvc0\n\n# Stuff to do for the 3-finger salute\n#::ctrlaltdel:\/sbin\/reboot\n\n# Stuff to do before rebooting\n::shutdown:\/etc\/init.d\/rcK\n::shutdown:\/sbin\/swapoff -a\n::shutdown:\/bin\/umount -a -r",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/apps\/vmRADIO\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject(vmRADIO C)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_subdirectory(${SlangTypeLibrary_DIR} SlangTypeLibrary)\n\nadd_subdirectory(${SB_Type_Library_DIR} SB_Type_Library)\n\nadd_executable(vmRADIO vmRADIO.c)\n\ntarget_link_libraries(vmRADIO\n                      SB_Type_Library\n                      SlangTypeLibrary\n                      -static-libgcc -static)",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/apps\/vmRADIO\/vmRADIO.c",
        {
          "type" : "TestResource",
          "content" : "#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <assert.h>\n#include <string.h>\n\n#include <sys\/types.h>\n#include <sys\/stat.h>\n#include <sys\/mman.h>\n#include <errno.h>\n\n#include <sb_types.h>\n#include <sb_event_counter.h>\n#include <sb_queue_int8_t_1.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nint main(int argc, char *argv[]) {\n  printf(\"VM App vmRADIO started\\n\");\n  return 0;\n}",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/apps\/vmUXAS\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "cmake_minimum_required(VERSION 3.8.2)\n\nproject(vmUXAS C)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_subdirectory(${SlangTypeLibrary_DIR} SlangTypeLibrary)\n\nadd_subdirectory(${SB_Type_Library_DIR} SB_Type_Library)\n\nadd_executable(vmUXAS vmUXAS.c)\n\ntarget_link_libraries(vmUXAS\n                      SB_Type_Library\n                      SlangTypeLibrary\n                      -static-libgcc -static)",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/components\/VM\/apps\/vmUXAS\/vmUXAS.c",
        {
          "type" : "TestResource",
          "content" : "#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <assert.h>\n#include <string.h>\n\n#include <sys\/types.h>\n#include <sys\/stat.h>\n#include <sys\/mman.h>\n#include <errno.h>\n\n#include <sb_types.h>\n#include <sb_event_counter.h>\n#include <sb_queue_int8_t_1.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nint main(int argc, char *argv[]) {\n  printf(\"VM App vmUXAS started\\n\");\n  return 0;\n}",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/includes\/sb_queue_int8_t_1.h",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_INT8_T_1_SIZE-1 elements.\n#define SB_QUEUE_INT8_T_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_int8_t_1 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type int8_t \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  int8_t elt[SB_QUEUE_INT8_T_1_SIZE];\n\n} sb_queue_int8_t_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_int8_t_1_init(sb_queue_int8_t_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_int8_t_1_enqueue(\n  sb_queue_int8_t_1_t *queue, \n  int8_t *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_int8_t_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_int8_t_1_t *queue;\n\n} sb_queue_int8_t_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_int8_t_1_Recv_init(\n  sb_queue_int8_t_1_Recv_t *recvQueue, \n  sb_queue_int8_t_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_int8_t_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_int8_t_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_int8_t_1_dequeue(\n  sb_queue_int8_t_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  int8_t *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_int8_t_1_is_empty(sb_queue_int8_t_1_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/src\/sb_queue_int8_t_1.c",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_int8_t_1.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_int8_t_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_1_init(sb_queue_int8_t_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_int8_t_1_enqueue(\n  sb_queue_int8_t_1_t *queue, \n  int8_t *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_INT8_T_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_INT8_T_1_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_int8_t_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_1_Recv_init(\n  sb_queue_int8_t_1_Recv_t *recvQueue, \n  sb_queue_int8_t_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_int8_t_1_dequeue(\n  sb_queue_int8_t_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  int8_t *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_int8_t_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_INT8_T_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_INT8_T_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_INT8_T_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_INT8_T_1_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_INT8_T_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_int8_t_1_is_empty(sb_queue_int8_t_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/kernel\/domain_schedule.c",
        {
          "type" : "TestResource",
          "content" : "#include <config.h>\n#include <object\/structures.h>\n#include <model\/statedata.h>\n\n\/\/ this file will not be overwritten and is safe to edit\n\n\/************************************************************\n\n   This is a kernel data structure containing an example schedule.\n   The length is in seL4 ticks (2 ms).\n   This schedule should be generated from the AADL model\n   using execution time and data flow latency specifications.\n\n   Pacer runs at highest rate and should always be in domain 1\n\n   Properties from AADL Model\n   --------------------------\n\n     Timing_Properties::Clock_Period : 2 ms\n     Timing_Properties::Frame_Period : 1000 ms\n\n     UARTDriver\n     ----------\n\n       CASE_Scheduling::Domain : 3\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 6 ms\n       Timing_Properties::Period : 500 ms\n\n     RadioDriver_Attestation\n     -----------------------\n\n       CASE_Scheduling::Domain : 2\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 2 ms\n       Timing_Properties::Period : 500 ms\n\n     FlyZonesDatabase\n     ----------------\n\n       CASE_Scheduling::Domain : 10\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 2 ms\n       Timing_Properties::Period : 500 ms\n\n     UxAS\n     ----\n\n       CASE_Scheduling::Domain : 9\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 2 ms\n       Timing_Properties::Period : 500 ms\n\n     WaypointPlanManagerService\n     --------------------------\n\n       CASE_Scheduling::Domain : 14\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 2 ms\n       Timing_Properties::Period : 500 ms\n\n     CASE_AttestationGate\n     --------------------\n\n       CASE_Scheduling::Domain : 5\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 2 ms\n       Timing_Properties::Period : 500 ms\n\n     CASE_Filter_LST\n     ---------------\n\n       CASE_Scheduling::Domain : 7\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 2 ms\n       Timing_Properties::Period : 500 ms\n\n     CASE_Monitor_Req\n     ----------------\n\n       CASE_Scheduling::Domain : 11\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 2 ms\n       Timing_Properties::Period : 500 ms\n\n     CASE_Monitor_Geo\n     ----------------\n\n       CASE_Scheduling::Domain : 13\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 2 ms\n       Timing_Properties::Period : 500 ms\n\n *********************************************************\/\n\nconst int dom0swapTime = 10; \n\nconst dschedule_t ksDomSchedule[] = {\n  { .domain = 0, .length = 100 },  \/\/ all other seL4 threads, init, 200ms\n  { .domain = 1, .length = 5 },  \/\/ pacer 10ms.  Should always be in domain 1\n  { .domain = 0, .length = 5 },  \/\/ deliver pacer pulses\n\n  { .domain = 2, .length = 50 },  \/\/ RadioDriver_Attestation  \n\n  { .domain = 3, .length = 5 },  \/\/ UARTDriver  \n  { .domain = 5, .length = 5 },  \/\/ CASE_AttestationGate  \n  { .domain = 7, .length = 5 },  \/\/ CASE_Filter_LST  \n\n  { .domain = 9, .length = 50 },  \/\/ UxAS  \n\n  { .domain = 10, .length = 5 },  \/\/ FlyZonesDatabase  \n  { .domain = 11, .length = 5 },  \/\/ CASE_Monitor_Req  \n  { .domain = 14, .length = 5 },  \/\/ WaypointPlanManagerService  \n  { .domain = 13, .length = 5 },  \/\/ CASE_Monitor_Geo \n};\n\nconst word_t ksDomScheduleLength = sizeof(ksDomSchedule) \/ sizeof(dschedule_t);\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/settings.cmake",
        {
          "type" : "TestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n# Add virtual PCI device to VMM for registering cross component connectors as\n# devices on the PCI bus.\nset(VmPCISupport ON CACHE BOOL \"\" FORCE)\n\n# Disable libusb from being compiled.\nset(LibUSB OFF CACHE BOOL \"\" FORCE)\n\n# Enables the option for the VM to open and load a seperate initrd file\nset(VmInitRdFile ON CACHE BOOL \"\" FORCE)\n\n# Enable virtio console vmm module\nset(VmVirtioConsole ON CACHE BOOL \"\" FORCE)\n\n# Make VTimers see absolute time rather than virtual time.\nset(KernelArmVtimerUpdateVOffset OFF CACHE BOOL \"\" FORCE)\n\n# Don't trap WFI or WFE instructions in a VM.\nset(KernelArmDisableWFIWFETraps ON CACHE BOOL \"\" FORCE)\n\nif(\"${PLATFORM}\" STREQUAL \"qemu-arm-virt\")\n    set(KernelArmCPU cortex-a53 CACHE STRING \"\" FORCE)\n    set(KernelArmExportPCNTUser ON CACHE BOOL \"\" FORCE)\n    set(KernelArmExportPTMRUser ON CACHE BOOL \"\" FORCE)\n\n    set(MIN_QEMU_VERSION \"4.0.0\")\n    execute_process(COMMAND ${QEMU_BINARY} -version OUTPUT_VARIABLE QEMU_VERSION_STR)\n    string(\n        REGEX\n            MATCH\n            \"[0-9](\\\\.[0-9])+\"\n            QEMU_VERSION\n            ${QEMU_VERSION_STR}\n    )\n    if(\"${QEMU_VERSION}\" VERSION_LESS \"${MIN_QEMU_VERSION}\")\n        message(WARNING \"Warning: qemu version should be at least ${MIN_QEMU_VERSION}\")\n    endif()\n\nendif()\n# Add virtual PCI device to VMM for registering cross component connectors as\n# devices on the PCI bus.\nset(VmPCISupport ON CACHE BOOL \"\" FORCE)\n\n# Disable libusb from being compiled.\nset(LibUSB OFF CACHE BOOL \"\" FORCE)\n\n# Enables the option for the VM to open and load a seperate initrd file\nset(VmInitRdFile ON CACHE BOOL \"\" FORCE)\n\n# Enable virtio console vmm module\nset(VmVirtioConsole ON CACHE BOOL \"\" FORCE)\n\n# Make VTimers see absolute time rather than virtual time.\nset(KernelArmVtimerUpdateVOffset OFF CACHE BOOL \"\" FORCE)\n\n# Don't trap WFI or WFE instructions in a VM.\nset(KernelArmDisableWFIWFETraps ON CACHE BOOL \"\" FORCE)\n\nif(\"${PLATFORM}\" STREQUAL \"qemu-arm-virt\")\n    set(KernelArmCPU cortex-a53 CACHE STRING \"\" FORCE)\n    set(KernelArmExportPCNTUser ON CACHE BOOL \"\" FORCE)\n    set(KernelArmExportPTMRUser ON CACHE BOOL \"\" FORCE)\n\n    set(MIN_QEMU_VERSION \"4.0.0\")\n    execute_process(COMMAND ${QEMU_BINARY} -version OUTPUT_VARIABLE QEMU_VERSION_STR)\n    string(\n        REGEX\n            MATCH\n            \"[0-9](\\\\.[0-9])+\"\n            QEMU_VERSION\n            ${QEMU_VERSION_STR}\n    )\n    if(\"${QEMU_VERSION}\" VERSION_LESS \"${MIN_QEMU_VERSION}\")\n        message(WARNING \"Warning: qemu version should be at least ${MIN_QEMU_VERSION}\")\n    endif()\n\nendif()\nset(KernelDomainSchedule \"${CMAKE_CURRENT_LIST_DIR}\/kernel\/domain_schedule.c\" CACHE INTERNAL \"\")\nset(KernelNumDomains 16 CACHE STRING \"\" FORCE)\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "uav_june_step6--SeL4\/types\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            src\/sb_queue_union_art_DataContent_1.c\n            src\/sb_queue_int8_t_1.c\n            src\/sp_union_art_DataContent.c)\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           PUBLIC includes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
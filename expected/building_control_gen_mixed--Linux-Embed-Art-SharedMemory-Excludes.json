{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/data\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempUnit.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@enum object TempUnit {\n  'Fahrenheit\n  'Celsius\n  'Kelvin\n}\n\nobject TempUnit_Payload {\n  def empty(): TempUnit_Payload = {\n    return TempUnit_Payload(BuildingControl.TempUnit.byOrdinal(0).get)\n  }\n}\n\n@datatype class TempUnit_Payload(value: BuildingControl.TempUnit.Type) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/data\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/Temperature_impl.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Temperature_impl {\n  def empty(): BuildingControl.Temperature_impl = {\n    return BuildingControl.Temperature_impl(Base_Types.Float_32_empty(), BuildingControl.TempUnit.byOrdinal(0).get)\n  }\n}\n\n@datatype class Temperature_impl(\n  degrees : Base_Types.Float_32,\n  unit : BuildingControl.TempUnit.Type) {\n}\n\nobject Temperature_impl_Payload {\n  def empty(): Temperature_impl_Payload = {\n    return Temperature_impl_Payload(BuildingControl.Temperature_impl.empty())\n  }\n}\n\n@datatype class Temperature_impl_Payload(value: BuildingControl.Temperature_impl) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/data\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/SetPoint_impl.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject SetPoint_impl {\n  def empty(): BuildingControl.SetPoint_impl = {\n    return BuildingControl.SetPoint_impl(BuildingControl.Temperature_impl.empty(), BuildingControl.Temperature_impl.empty())\n  }\n}\n\n@datatype class SetPoint_impl(\n  low : BuildingControl.Temperature_impl,\n  high : BuildingControl.Temperature_impl) {\n}\n\nobject SetPoint_impl_Payload {\n  def empty(): SetPoint_impl_Payload = {\n    return SetPoint_impl_Payload(BuildingControl.SetPoint_impl.empty())\n  }\n}\n\n@datatype class SetPoint_impl_Payload(value: BuildingControl.SetPoint_impl) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/data\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/FanAck.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@enum object FanAck {\n  'Ok\n  'Error\n}\n\nobject FanAck_Payload {\n  def empty(): FanAck_Payload = {\n    return FanAck_Payload(BuildingControl.FanAck.byOrdinal(0).get)\n  }\n}\n\n@datatype class FanAck_Payload(value: BuildingControl.FanAck.Type) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/data\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/FanCmd.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@enum object FanCmd {\n  'On\n  'Off\n}\n\nobject FanCmd_Payload {\n  def empty(): FanCmd_Payload = {\n    return FanCmd_Payload(BuildingControl.FanCmd.byOrdinal(0).get)\n  }\n}\n\n@datatype class FanCmd_Payload(value: BuildingControl.FanCmd.Type) extends art.DataContent\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/data\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Base_Types.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport org.sireum.S8._\nimport org.sireum.S16._\nimport org.sireum.S32._\nimport org.sireum.S64._\nimport org.sireum.U8._\nimport org.sireum.U16._\nimport org.sireum.U32._\nimport org.sireum.U64._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Base_Types {\n\n  type Boolean = org.sireum.B\n\n  type Integer = org.sireum.Z\n\n  type Integer_8 = org.sireum.S8\n  type Integer_16 = org.sireum.S16\n  type Integer_32 = org.sireum.S32\n  type Integer_64 = org.sireum.S64\n\n  type Unsigned_8 = org.sireum.U8\n  type Unsigned_16 = org.sireum.U16\n  type Unsigned_32 = org.sireum.U32\n  type Unsigned_64 = org.sireum.U64\n\n  \/\/ TODO: Base_Types::Natural\n\n  type Float = org.sireum.R\n  type Float_32 = org.sireum.F32\n  type Float_64 = org.sireum.F64\n\n  type Character = org.sireum.C\n  type String = org.sireum.String\n\n  type Bits = org.sireum.ISZ[org.sireum.B]\n\n  @datatype class Boolean_Payload(value: Boolean) extends art.DataContent\n\n  @datatype class Integer_Payload(value: Integer) extends art.DataContent\n\n  @datatype class Integer_8_Payload(value: Integer_8) extends art.DataContent\n  @datatype class Integer_16_Payload(value: Integer_16) extends art.DataContent\n  @datatype class Integer_32_Payload(value: Integer_32) extends art.DataContent\n  @datatype class Integer_64_Payload(value: Integer_64) extends art.DataContent\n\n  @datatype class Unsigned_8_Payload(value: Unsigned_8) extends art.DataContent\n  @datatype class Unsigned_16_Payload(value: Unsigned_16) extends art.DataContent\n  @datatype class Unsigned_32_Payload(value: Unsigned_32) extends art.DataContent\n  @datatype class Unsigned_64_Payload(value: Unsigned_64) extends art.DataContent\n\n  @datatype class Float_Payload(value: Float) extends art.DataContent\n  @datatype class Float_32_Payload(value: Float_32) extends art.DataContent\n  @datatype class Float_64_Payload(value: Float_64) extends art.DataContent\n\n  @datatype class Character_Payload(value: Character) extends art.DataContent\n  @datatype class String_Payload(value: String) extends art.DataContent\n\n  @datatype class Bits_Payload(value: Bits) extends art.DataContent\n\n  def Boolean_empty(): Boolean = { return F }\n\n  def Integer_empty(): Integer = { return z\"0\" }\n\n  def Integer_8_empty(): Integer_8 = { return s8\"0\" }\n  def Integer_16_empty(): Integer_16 = { return s16\"0\" }\n  def Integer_32_empty(): Integer_32 = { return s32\"0\" }\n  def Integer_64_empty(): Integer_64 = { return s64\"0\" }\n\n  def Unsigned_8_empty(): Unsigned_8 = { return u8\"0\" }\n  def Unsigned_16_empty(): Unsigned_16 = { return u16\"0\" }\n  def Unsigned_32_empty(): Unsigned_32 = { return u32\"0\" }\n  def Unsigned_64_empty(): Unsigned_64 = { return u64\"0\" }\n\n  def Float_empty(): Float = { return r\"0\" }\n  def Float_32_empty(): Float_32 = { return f32\"0\" }\n  def Float_64_empty(): Float_64 = { return f64\"0\" }\n\n  def Character_empty(): Character = { return ' ' }\n  def String_empty(): String = { return \"\" }\n\n  def Bits_empty(): Bits = { return ISZ() }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/architecture\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Arch.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\nimport art.PortMode._\nimport art.DispatchPropertyProtocol._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Arch {\n  val BuildingControlDemo_i_Instance_tcp_tempSensor : building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge = {\n    val currentTemp = Port[BuildingControl.Temperature_impl] (id = 0, name = \"BuildingControlDemo_i_Instance_tcp_tempSensor_currentTemp\", mode = DataOut)\n    val tempChanged = Port[art.Empty] (id = 1, name = \"BuildingControlDemo_i_Instance_tcp_tempSensor_tempChanged\", mode = EventOut)\n\n    building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge(\n      id = 0,\n      name = \"BuildingControlDemo_i_Instance_tcp_tempSensor\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      currentTemp = currentTemp,\n      tempChanged = tempChanged\n    )\n  }\n  val BuildingControlDemo_i_Instance_tcp_tempControl : building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge = {\n    val currentTemp = Port[BuildingControl.Temperature_impl] (id = 2, name = \"BuildingControlDemo_i_Instance_tcp_tempControl_currentTemp\", mode = DataIn)\n    val fanAck = Port[BuildingControl.FanAck.Type] (id = 3, name = \"BuildingControlDemo_i_Instance_tcp_tempControl_fanAck\", mode = EventIn)\n    val setPoint = Port[BuildingControl.SetPoint_impl] (id = 4, name = \"BuildingControlDemo_i_Instance_tcp_tempControl_setPoint\", mode = EventIn)\n    val fanCmd = Port[BuildingControl.FanCmd.Type] (id = 5, name = \"BuildingControlDemo_i_Instance_tcp_tempControl_fanCmd\", mode = EventOut)\n    val tempChanged = Port[art.Empty] (id = 6, name = \"BuildingControlDemo_i_Instance_tcp_tempControl_tempChanged\", mode = EventIn)\n\n    building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge(\n      id = 1,\n      name = \"BuildingControlDemo_i_Instance_tcp_tempControl\",\n      dispatchProtocol = Sporadic(min = 1000),\n      dispatchTriggers = None(),\n\n      currentTemp = currentTemp,\n      fanAck = fanAck,\n      setPoint = setPoint,\n      fanCmd = fanCmd,\n      tempChanged = tempChanged\n    )\n  }\n  val BuildingControlDemo_i_Instance_tcp_fan : building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge = {\n    val fanCmd = Port[BuildingControl.FanCmd.Type] (id = 7, name = \"BuildingControlDemo_i_Instance_tcp_fan_fanCmd\", mode = EventIn)\n    val fanAck = Port[BuildingControl.FanAck.Type] (id = 8, name = \"BuildingControlDemo_i_Instance_tcp_fan_fanAck\", mode = EventOut)\n\n    building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge(\n      id = 2,\n      name = \"BuildingControlDemo_i_Instance_tcp_fan\",\n      dispatchProtocol = Sporadic(min = 1000),\n      dispatchTriggers = None(),\n\n      fanCmd = fanCmd,\n      fanAck = fanAck\n    )\n  }\n\n  val ad : ArchitectureDescription = {\n\n    ArchitectureDescription(\n      components = MSZ (BuildingControlDemo_i_Instance_tcp_tempSensor, BuildingControlDemo_i_Instance_tcp_tempControl, BuildingControlDemo_i_Instance_tcp_fan),\n\n      connections = ISZ (Connection(from = BuildingControlDemo_i_Instance_tcp_tempSensor.currentTemp, to = BuildingControlDemo_i_Instance_tcp_tempControl.currentTemp),\n                         Connection(from = BuildingControlDemo_i_Instance_tcp_tempSensor.tempChanged, to = BuildingControlDemo_i_Instance_tcp_tempControl.tempChanged),\n                         Connection(from = BuildingControlDemo_i_Instance_tcp_tempControl.fanCmd, to = BuildingControlDemo_i_Instance_tcp_fan.fanCmd),\n                         Connection(from = BuildingControlDemo_i_Instance_tcp_fan.fanAck, to = BuildingControlDemo_i_Instance_tcp_tempControl.fanAck))\n    )\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/architecture\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Demo.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file was auto-generated.  Do not edit\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nobject Demo extends App {\n  art.Art.run(Arch.ad)\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/test\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempSensor_i_tcp_tempSensor_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport art.{ArtNative_Ext, Empty}\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass TempSensor_i_tcp_tempSensor_Test extends BridgeTestSuite[TempSensor_i_tcp_tempSensor_Bridge](Arch.BuildingControlDemo_i_Instance_tcp_tempSensor) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ getter for out DataPort\n  def get_currentTemp(): Option[BuildingControl.Temperature_impl] = {\n    val value: Option[BuildingControl.Temperature_impl] = get_currentTemp_payload() match {\n      case Some(BuildingControl.Temperature_impl_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port currentTemp.  Expecting 'BuildingControl.Temperature_impl_Payload' but received ${v}\")\n      case _ => None[BuildingControl.Temperature_impl]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_currentTemp_payload(): Option[BuildingControl.Temperature_impl_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.currentTemp_Id).asInstanceOf[Option[BuildingControl.Temperature_impl_Payload]]\n  }\n\n  \/\/ getter for out EventPort\n  def get_tempChanged(): Option[art.Empty] = {\n    val value: Option[art.Empty] = get_tempChanged_payload() match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) => fail(s\"Unexpected payload on port tempChanged.  Expecting 'Empty' but received ${v}\")\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventPort\n  def get_tempChanged_payload(): Option[Empty] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.tempChanged_Id).asInstanceOf[Option[Empty]]\n  }\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempSensor_i_tcp_tempSensor_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.{TempSensor_i_tcp_tempSensor => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class TempSensor_i_tcp_tempSensor_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  currentTemp: Port[BuildingControl.Temperature_impl],\n  tempChanged: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(currentTemp,\n              tempChanged),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(currentTemp),\n\n    eventIns = ISZ(),\n\n    eventOuts = ISZ(tempChanged)\n  )\n\n  val initialization_api : TempSensor_i_Initialization_Api = {\n    val api = TempSensor_i_Initialization_Api(\n      id,\n      currentTemp.id,\n      tempChanged.id\n    )\n    TempSensor_i_tcp_tempSensor_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : TempSensor_i_Operational_Api = {\n    val api = TempSensor_i_Operational_Api(\n      id,\n      currentTemp.id,\n      tempChanged.id\n    )\n    TempSensor_i_tcp_tempSensor_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    TempSensor_i_tcp_tempSensor_Bridge.EntryPoints(\n      id,\n\n      currentTemp.id,\n      tempChanged.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject TempSensor_i_tcp_tempSensor_Bridge {\n\n  var c_initialization_api: Option[TempSensor_i_Initialization_Api] = None()\n  var c_operational_api: Option[TempSensor_i_Operational_Api] = None()\n\n  @record class EntryPoints(\n    TempSensor_i_tcp_tempSensor_BridgeId : Art.BridgeId,\n\n    currentTemp_Id : Art.PortId,\n    tempChanged_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: TempSensor_i_Initialization_Api,\n    operational_api: TempSensor_i_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ(currentTemp_Id)\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(tempChanged_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n      component.timeTriggered(operational_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n      component.timeTriggered(operational_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempSensor_i_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n@sig trait TempSensor_i_Api {\n  def id: Art.BridgeId\n  def currentTemp_Id : Art.PortId\n  def tempChanged_Id : Art.PortId\n\n  def setcurrentTemp(value : BuildingControl.Temperature_impl) : Unit = {\n    Art.putValue(currentTemp_Id, BuildingControl.Temperature_impl_Payload(value))\n  }\n\n  def sendtempChanged() : Unit = {\n    Art.putValue(tempChanged_Id, art.Empty())\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class TempSensor_i_Initialization_Api (\n  val id: Art.BridgeId,\n  val currentTemp_Id : Art.PortId,\n  val tempChanged_Id : Art.PortId) extends TempSensor_i_Api\n\n@datatype class TempSensor_i_Operational_Api (\n  val id: Art.BridgeId,\n  val currentTemp_Id : Art.PortId,\n  val tempChanged_Id : Art.PortId) extends TempSensor_i_Api {\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/component\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempSensor_i_tcp_tempSensor.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject TempSensor_i_tcp_tempSensor {\n\n  def initialise(api: TempSensor_i_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.setcurrentTemp(BuildingControl.Temperature_impl.empty())\n    api.sendtempChanged()\n  }\n\n  def timeTriggered(api: TempSensor_i_Operational_Api): Unit = {\n    \/\/ example api usage\n\n    api.setcurrentTemp(BuildingControl.Temperature_impl.empty())\n    api.sendtempChanged()\n  }\n\n  def activate(api: TempSensor_i_Operational_Api): Unit = { }\n\n  def deactivate(api: TempSensor_i_Operational_Api): Unit = { }\n\n  def finalise(api: TempSensor_i_Operational_Api): Unit = { }\n\n  def recover(api: TempSensor_i_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/test\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/BridgeTestSuite.scala",
        {
          "type" : "TestResource",
          "content" : "package building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport art.{Art, Bridge}\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\n\n\/**\n * A test suite that provides the following functionality for unit tests:\n *  - Clears all registers bridges and ports before each test\n *  - Initializes the selected bridge and ports before each test\n *  - Finalizes the bridge after each test\n *  - Creates a new instance of the test suite class for each test\n *    -> NOTE: this is NOT the same as having a separate JVM per-test (or suite), but is useful for test-local variables\n *\n *  If automatic calls to initTest() or finalizeTest() are not desired, simply override beforeEach() or afterEach()\n *  methods to change the desired behavior.\n *\n * @param bridge the bridge being tested, see [[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.Arch]] for potential values.\n * @tparam T the type of the bridge being tested\n *\/\n\n\/\/ This file was auto-generated.  Do no edit\n\nclass BridgeTestSuite[+T <: Bridge](val bridge: T) extends AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach {\n\n  \/**\n   * Automatically called before each test. Currently calls Art.initTest for the given bridge. Override as needed.\n   *\/\n  override protected def beforeEach(): Unit = {\n    Art.initTest(bridge)\n  }\n\n  \/**\n   * Automatically called after each test. Currently calls Art.finalizeTest for the given bridge. Override as needed.\n   *\/\n  override protected def afterEach(): Unit = {\n    Art.finalizeTest(bridge)\n  }\n\n  \/**\n   * Invokes testCompute() once per registered bridge.\n   *\n   * IMPORTANT: This method also clears all bridge output BEFORE each call. This will have no effect the first time it's\n   * invoked (because all output will be empty), but it does ensure that output doesn't \"leak\" across multiple\n   * invocations.\n   *\n   *\/\n  def executeTest(): Unit = {\n    Art.manuallyClearOutput()\n    Art.executeTest(bridge)\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/test\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempControl_i_tcp_tempControl_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport art.{ArtNative_Ext, Empty}\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass TempControl_i_tcp_tempControl_Test extends BridgeTestSuite[TempControl_i_tcp_tempControl_Bridge](Arch.BuildingControlDemo_i_Instance_tcp_tempControl) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ setter for in DataPort\n  def put_currentTemp(value : BuildingControl.Temperature_impl): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.currentTemp_Id, BuildingControl.Temperature_impl_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_fanAck(value : BuildingControl.FanAck.Type): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.fanAck_Id, BuildingControl.FanAck_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_setPoint(value : BuildingControl.SetPoint_impl): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.setPoint_Id, BuildingControl.SetPoint_impl_Payload(value))\n  }\n\n  \/\/ setter for in EventPort\n  def put_tempChanged(): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.tempChanged_Id, Empty())\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_fanCmd(): Option[BuildingControl.FanCmd.Type] = {\n    val value: Option[BuildingControl.FanCmd.Type] = get_fanCmd_payload() match {\n      case Some(BuildingControl.FanCmd_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port fanCmd.  Expecting 'BuildingControl.FanCmd_Payload' but received ${v}\")\n      case _ => None[BuildingControl.FanCmd.Type]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_fanCmd_payload(): Option[BuildingControl.FanCmd_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.fanCmd_Id).asInstanceOf[Option[BuildingControl.FanCmd_Payload]]\n  }\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempControl_i_tcp_tempControl_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.{TempControl_i_tcp_tempControl => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class TempControl_i_tcp_tempControl_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  currentTemp: Port[BuildingControl.Temperature_impl],\n  fanAck: Port[BuildingControl.FanAck.Type],\n  setPoint: Port[BuildingControl.SetPoint_impl],\n  fanCmd: Port[BuildingControl.FanCmd.Type],\n  tempChanged: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(currentTemp,\n              fanAck,\n              setPoint,\n              fanCmd,\n              tempChanged),\n\n    dataIns = ISZ(currentTemp),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(fanAck,\n                   setPoint,\n                   tempChanged),\n\n    eventOuts = ISZ(fanCmd)\n  )\n\n  val initialization_api : TempControl_i_Initialization_Api = {\n    val api = TempControl_i_Initialization_Api(\n      id,\n      currentTemp.id,\n      fanAck.id,\n      setPoint.id,\n      fanCmd.id,\n      tempChanged.id\n    )\n    TempControl_i_tcp_tempControl_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : TempControl_i_Operational_Api = {\n    val api = TempControl_i_Operational_Api(\n      id,\n      currentTemp.id,\n      fanAck.id,\n      setPoint.id,\n      fanCmd.id,\n      tempChanged.id\n    )\n    TempControl_i_tcp_tempControl_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    TempControl_i_tcp_tempControl_Bridge.EntryPoints(\n      id,\n\n      currentTemp.id,\n      fanAck.id,\n      setPoint.id,\n      fanCmd.id,\n      tempChanged.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject TempControl_i_tcp_tempControl_Bridge {\n\n  var c_initialization_api: Option[TempControl_i_Initialization_Api] = None()\n  var c_operational_api: Option[TempControl_i_Operational_Api] = None()\n\n  @record class EntryPoints(\n    TempControl_i_tcp_tempControl_BridgeId : Art.BridgeId,\n\n    currentTemp_Id : Art.PortId,\n    fanAck_Id : Art.PortId,\n    setPoint_Id : Art.PortId,\n    fanCmd_Id : Art.PortId,\n    tempChanged_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: TempControl_i_Initialization_Api,\n    operational_api: TempControl_i_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ(currentTemp_Id)\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(fanAck_Id,\n                                              setPoint_Id,\n                                              tempChanged_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(fanCmd_Id)\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(TempControl_i_tcp_tempControl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == fanAck_Id){\n          val Some(BuildingControl.FanAck_Payload(value)) = Art.getValue(fanAck_Id)\n          component.handlefanAck(operational_api, value)\n        }\n        else if(portId == setPoint_Id){\n          val Some(BuildingControl.SetPoint_impl_Payload(value)) = Art.getValue(setPoint_Id)\n          component.handlesetPoint(operational_api, value)\n        }\n        else if(portId == tempChanged_Id) {\n          component.handletempChanged(operational_api)\n        }\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(TempControl_i_tcp_tempControl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == fanAck_Id){\n          val Some(BuildingControl.FanAck_Payload(value)) = Art.getValue(fanAck_Id)\n          component.handlefanAck(operational_api, value)\n        }\n        else if(portId == setPoint_Id){\n          val Some(BuildingControl.SetPoint_impl_Payload(value)) = Art.getValue(setPoint_Id)\n          component.handlesetPoint(operational_api, value)\n        }\n        else if(portId == tempChanged_Id) {\n          component.handletempChanged(operational_api)\n        }\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempControl_i_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n@sig trait TempControl_i_Api {\n  def id: Art.BridgeId\n  def currentTemp_Id : Art.PortId\n  def fanAck_Id : Art.PortId\n  def setPoint_Id : Art.PortId\n  def fanCmd_Id : Art.PortId\n  def tempChanged_Id : Art.PortId\n\n  def sendfanCmd(value : BuildingControl.FanCmd.Type) : Unit = {\n    Art.putValue(fanCmd_Id, BuildingControl.FanCmd_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class TempControl_i_Initialization_Api (\n  val id: Art.BridgeId,\n  val currentTemp_Id : Art.PortId,\n  val fanAck_Id : Art.PortId,\n  val setPoint_Id : Art.PortId,\n  val fanCmd_Id : Art.PortId,\n  val tempChanged_Id : Art.PortId) extends TempControl_i_Api\n\n@datatype class TempControl_i_Operational_Api (\n  val id: Art.BridgeId,\n  val currentTemp_Id : Art.PortId,\n  val fanAck_Id : Art.PortId,\n  val setPoint_Id : Art.PortId,\n  val fanCmd_Id : Art.PortId,\n  val tempChanged_Id : Art.PortId) extends TempControl_i_Api {\n\n  def getcurrentTemp() : Option[BuildingControl.Temperature_impl] = {\n    val value : Option[BuildingControl.Temperature_impl] = Art.getValue(currentTemp_Id) match {\n      case Some(BuildingControl.Temperature_impl_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port currentTemp.  Expecting 'BuildingControl.Temperature_impl_Payload' but received ${v}\")\n        None[BuildingControl.Temperature_impl]()\n      case _ => None[BuildingControl.Temperature_impl]()\n    }\n    return value\n  }\n\n  def getfanAck() : Option[BuildingControl.FanAck.Type] = {\n    val value : Option[BuildingControl.FanAck.Type] = Art.getValue(fanAck_Id) match {\n      case Some(BuildingControl.FanAck_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port fanAck.  Expecting 'BuildingControl.FanAck_Payload' but received ${v}\")\n        None[BuildingControl.FanAck.Type]()\n      case _ => None[BuildingControl.FanAck.Type]()\n    }\n    return value\n  }\n\n  def getsetPoint() : Option[BuildingControl.SetPoint_impl] = {\n    val value : Option[BuildingControl.SetPoint_impl] = Art.getValue(setPoint_Id) match {\n      case Some(BuildingControl.SetPoint_impl_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port setPoint.  Expecting 'BuildingControl.SetPoint_impl_Payload' but received ${v}\")\n        None[BuildingControl.SetPoint_impl]()\n      case _ => None[BuildingControl.SetPoint_impl]()\n    }\n    return value\n  }\n\n  def gettempChanged() : Option[art.Empty] = {\n    val value : Option[art.Empty] = Art.getValue(tempChanged_Id) match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port tempChanged.  Expecting 'Empty' but received ${v}\")\n        None[art.Empty]()\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/component\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/TempControl_i_tcp_tempControl.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject TempControl_i_tcp_tempControl {\n\n  def initialise(api: TempControl_i_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.sendfanCmd(BuildingControl.FanCmd.byOrdinal(0).get)\n  }\n\n  def handlefanAck(api: TempControl_i_Operational_Api, value : BuildingControl.FanAck.Type): Unit = {\n    api.logInfo(\"example handlefanAck implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  def handlesetPoint(api: TempControl_i_Operational_Api, value : BuildingControl.SetPoint_impl): Unit = {\n    api.logInfo(\"example handlesetPoint implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  def handletempChanged(api: TempControl_i_Operational_Api): Unit = {\n    api.logInfo(\"example handletempChanged implementation\")\n    api.logInfo(\"received tempChanged\")\n  }\n\n  def activate(api: TempControl_i_Operational_Api): Unit = { }\n\n  def deactivate(api: TempControl_i_Operational_Api): Unit = { }\n\n  def finalise(api: TempControl_i_Operational_Api): Unit = { }\n\n  def recover(api: TempControl_i_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/test\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/Fan_i_tcp_fan_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport art.{ArtNative_Ext, Empty}\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass Fan_i_tcp_fan_Test extends BridgeTestSuite[Fan_i_tcp_fan_Bridge](Arch.BuildingControlDemo_i_Instance_tcp_fan) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ setter for in EventDataPort\n  def put_fanCmd(value : BuildingControl.FanCmd.Type): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.fanCmd_Id, BuildingControl.FanCmd_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_fanAck(): Option[BuildingControl.FanAck.Type] = {\n    val value: Option[BuildingControl.FanAck.Type] = get_fanAck_payload() match {\n      case Some(BuildingControl.FanAck_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port fanAck.  Expecting 'BuildingControl.FanAck_Payload' but received ${v}\")\n      case _ => None[BuildingControl.FanAck.Type]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_fanAck_payload(): Option[BuildingControl.FanAck_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.fanAck_Id).asInstanceOf[Option[BuildingControl.FanAck_Payload]]\n  }\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/Fan_i_tcp_fan_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.{Fan_i_tcp_fan => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class Fan_i_tcp_fan_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  fanCmd: Port[BuildingControl.FanCmd.Type],\n  fanAck: Port[BuildingControl.FanAck.Type]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(fanCmd,\n              fanAck),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(fanCmd),\n\n    eventOuts = ISZ(fanAck)\n  )\n\n  val initialization_api : Fan_i_Initialization_Api = {\n    val api = Fan_i_Initialization_Api(\n      id,\n      fanCmd.id,\n      fanAck.id\n    )\n    Fan_i_tcp_fan_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : Fan_i_Operational_Api = {\n    val api = Fan_i_Operational_Api(\n      id,\n      fanCmd.id,\n      fanAck.id\n    )\n    Fan_i_tcp_fan_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    Fan_i_tcp_fan_Bridge.EntryPoints(\n      id,\n\n      fanCmd.id,\n      fanAck.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject Fan_i_tcp_fan_Bridge {\n\n  var c_initialization_api: Option[Fan_i_Initialization_Api] = None()\n  var c_operational_api: Option[Fan_i_Operational_Api] = None()\n\n  @record class EntryPoints(\n    Fan_i_tcp_fan_BridgeId : Art.BridgeId,\n\n    fanCmd_Id : Art.PortId,\n    fanAck_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: Fan_i_Initialization_Api,\n    operational_api: Fan_i_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(fanCmd_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(fanAck_Id)\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(Fan_i_tcp_fan_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == fanCmd_Id){\n          val Some(BuildingControl.FanCmd_Payload(value)) = Art.getValue(fanCmd_Id)\n          component.handlefanCmd(operational_api, value)\n        }\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(Fan_i_tcp_fan_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == fanCmd_Id){\n          val Some(BuildingControl.FanCmd_Payload(value)) = Art.getValue(fanCmd_Id)\n          component.handlefanCmd(operational_api, value)\n        }\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/bridge\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/Fan_i_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n@sig trait Fan_i_Api {\n  def id: Art.BridgeId\n  def fanCmd_Id : Art.PortId\n  def fanAck_Id : Art.PortId\n\n  def sendfanAck(value : BuildingControl.FanAck.Type) : Unit = {\n    Art.putValue(fanAck_Id, BuildingControl.FanAck_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class Fan_i_Initialization_Api (\n  val id: Art.BridgeId,\n  val fanCmd_Id : Art.PortId,\n  val fanAck_Id : Art.PortId) extends Fan_i_Api\n\n@datatype class Fan_i_Operational_Api (\n  val id: Art.BridgeId,\n  val fanCmd_Id : Art.PortId,\n  val fanAck_Id : Art.PortId) extends Fan_i_Api {\n\n  def getfanCmd() : Option[BuildingControl.FanCmd.Type] = {\n    val value : Option[BuildingControl.FanCmd.Type] = Art.getValue(fanCmd_Id) match {\n      case Some(BuildingControl.FanCmd_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port fanCmd.  Expecting 'BuildingControl.FanCmd_Payload' but received ${v}\")\n        None[BuildingControl.FanCmd.Type]()\n      case _ => None[BuildingControl.FanCmd.Type]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/component\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/BuildingControl\/Fan_i_tcp_fan.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject Fan_i_tcp_fan {\n\n  def initialise(api: Fan_i_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.sendfanAck(BuildingControl.FanAck.byOrdinal(0).get)\n  }\n\n  def handlefanCmd(api: Fan_i_Operational_Api, value : BuildingControl.FanCmd.Type): Unit = {\n    api.logInfo(\"example handlefanCmd implementation\")\n    api.logInfo(s\"received ${value}\")\n  }\n\n  def activate(api: Fan_i_Operational_Api): Unit = { }\n\n  def deactivate(api: Fan_i_Operational_Api): Unit = { }\n\n  def finalise(api: Fan_i_Operational_Api): Unit = { }\n\n  def recover(api: Fan_i_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/component\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/TranspilerToucher.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject TranspilerToucher {\n  def touch(): Unit = {\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/TempSensor_i_tcp_tempSensor_App.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject TempSensor_i_tcp_tempSensor_App extends App {\n\n  val entryPoints: Bridge.EntryPoints = Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.entryPoints\n  val appPortId: Art.PortId = IPCPorts.TempSensor_i_tcp_tempSensor_App\n  val appPortIdOpt: Option[Art.PortId] = Some(appPortId)\n\n  def initialiseArchitecture(seed: Z): Unit = {\n    Platform.initialise(seed, appPortIdOpt)\n\n    Art.run(Arch.ad)\n  }\n\n  def initialise(): Unit = {\n    entryPoints.initialise()\n  }\n\n  def compute(): Unit = {\n\n    entryPoints.compute()\n    Process.sleep(1000)\n  }\n\n  def finalise(): Unit = {\n    entryPoints.finalise()\n  }\n\n  def main(args: ISZ[String]): Z = {\n\n    val seed: Z = if (args.size == z\"1\") {\n      val n = Z(args(0)).get\n      if (n == z\"0\") 1 else n\n    } else {\n      1\n    }\n\n    initialiseArchitecture(seed)\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after setting up component\n\n    initialise()\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after component init\n\n    println(\"TempSensor_i_tcp_tempSensor_App starting ...\")\n\n    ArtNix.timeDispatch()\n\n    var terminated = F\n    while (!terminated) {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(appPortIdOpt, out)\n      if (out.value2.isEmpty) {\n        compute()\n      } else {\n        terminated = T\n      }\n    }\n    exit()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Float_32_Payload(Base_Types.Float_32_empty()))\n      printDataContent(BuildingControl.TempUnit_Payload(BuildingControl.TempUnit.byOrdinal(0).get))\n      printDataContent(BuildingControl.Temperature_impl_Payload(BuildingControl.Temperature_impl.empty()))\n      printDataContent(BuildingControl.SetPoint_impl_Payload(BuildingControl.SetPoint_impl.empty()))\n      printDataContent(BuildingControl.FanAck_Payload(BuildingControl.FanAck.byOrdinal(0).get))\n      printDataContent(BuildingControl.FanCmd_Payload(BuildingControl.FanCmd.byOrdinal(0).get))\n      printDataContent(art.Empty())\n\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_initialization_api.get.logInfo(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_initialization_api.get.logDebug(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_initialization_api.get.logError(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_operational_api.get.logInfo(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_operational_api.get.logDebug(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_operational_api.get.logError(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_initialization_api.get.setcurrentTemp(BuildingControl.Temperature_impl.empty())\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_operational_api.get.setcurrentTemp(BuildingControl.Temperature_impl.empty())\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_initialization_api.get.sendtempChanged()\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge.c_operational_api.get.sendtempChanged()\n    }\n  }\n\n  def exit(): Unit = {\n    finalise()\n    Platform.finalise()\n  }\n\n  override def atExit(): Unit = {\n    exit()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/ext.c",
        {
          "type" : "TestResource",
          "content" : "#include <all.h>\n#include <ext.h>\n\n\/\/ add c extension code here",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/ext.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef EXT_H\n#define EXT_H\n\n#endif",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/TempSensor_i_tcp_tempSensor\/TempSensor_i_tcp_tempSensor.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef TEMPSENSOR_I_TCP_TEMPSENSOR_H\n#define TEMPSENSOR_I_TCP_TEMPSENSOR_H\n\n#include <all.h>\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_initialise_(STACK_FRAME_ONLY);\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_finalise_(STACK_FRAME_ONLY);\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_timeTriggered_(STACK_FRAME);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/TempSensor_i_tcp_tempSensor\/TempSensor_i_tcp_tempSensor.c",
        {
          "type" : "TestResource",
          "content" : "#include <TempSensor_i_tcp_tempSensor_api.h>\n#include <TempSensor_i_tcp_tempSensor.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_initialise_(STACK_FRAME_ONLY) {\n DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_initialise_\", 0);\n\n \/\/ example api usage\n\n api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(SF string(\"Example logInfo\"));\n api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(SF string(\"Example logDebug\"));\n api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(SF string(\"Example logError\"));\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_finalise_\", 0);\n\n  \/\/ example finalise method\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_timeTriggered_(STACK_FRAME) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_timeTriggered_\", 0);\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/TempSensor_i_tcp_tempSensor\/TempSensor_i_tcp_tempSensor_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef TEMPSENSOR_I_TCP_TEMPSENSOR_API_H\n#define TEMPSENSOR_I_TCP_TEMPSENSOR_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nvoid api_send_currentTemp__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Temperature_impl value);\n\nvoid api_send_tempChanged__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(STACK_FRAME);\n\nvoid api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/TempSensor_i_tcp_tempSensor\/TempSensor_i_tcp_tempSensor_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <TempSensor_i_tcp_tempSensor_api.h>\n#include <TempSensor_i_tcp_tempSensor.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nvoid api_send_currentTemp__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Temperature_impl value) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor_api.c\", \"\", \"api_send_currentTemp__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor\", 0);\n\n  \/\/ Option_437CEE = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api(api);\n  Option_437CEE_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api_setcurrentTemp_(\n    SF\n    &api,\n    value);\n}\n\nvoid api_send_tempChanged__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(STACK_FRAME) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor_api.c\", \"\", \"api_send_tempChanged__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor\", 0);\n\n  \/\/ Option_437CEE = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api(api);\n  Option_437CEE_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api_sendtempChanged_(\n    SF\n    &api);\n}\n\nvoid api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor_api.c\", \"\", \"api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor\", 0);\n\n  \/\/ Option_437CEE = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api(api);\n  Option_437CEE_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor_api.c\", \"\", \"api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor\", 0);\n\n  \/\/ Option_437CEE = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api(api);\n  Option_437CEE_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor_api.c\", \"\", \"api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor\", 0);\n\n  \/\/ Option_437CEE = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api(api);\n  Option_437CEE_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_initialise(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_initialise\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_initialise_(SF_LAST);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_finalise(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Operational_Api api) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_finalise\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_finalise_(SF_LAST);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_timeTriggered(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_Operational_Api api) {\n  DeclNewStackFrame(caller, \"TempSensor_i_tcp_tempSensor_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_timeTriggered\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempSensor_i_tcp_tempSensor_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/TempControl_i_tcp_tempControl_App.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject TempControl_i_tcp_tempControl_App extends App {\n\n  val entryPoints: Bridge.EntryPoints = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.entryPoints\n  val appPortId: Art.PortId = IPCPorts.TempControl_i_tcp_tempControl_App\n  val appPortIdOpt: Option[Art.PortId] = Some(appPortId)\n  val currentTempPortId: Art.PortId = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.currentTemp.id\n  val currentTempPortIdOpt: Option[Art.PortId] = Some(currentTempPortId)\n  val fanAckPortId: Art.PortId = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.fanAck.id\n  val fanAckPortIdOpt: Option[Art.PortId] = Some(fanAckPortId)\n  val setPointPortId: Art.PortId = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.setPoint.id\n  val setPointPortIdOpt: Option[Art.PortId] = Some(setPointPortId)\n  val tempChangedPortId: Art.PortId = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.tempChanged.id\n  val tempChangedPortIdOpt: Option[Art.PortId] = Some(tempChangedPortId)\n\n  def initialiseArchitecture(seed: Z): Unit = {\n    Platform.initialise(seed, appPortIdOpt)\n    Platform.initialise(seed, currentTempPortIdOpt)\n    Platform.initialise(seed, fanAckPortIdOpt)\n    Platform.initialise(seed, setPointPortIdOpt)\n    Platform.initialise(seed, tempChangedPortIdOpt)\n\n    Art.run(Arch.ad)\n  }\n\n  def initialise(): Unit = {\n    entryPoints.initialise()\n  }\n\n  def compute(): Unit = {\n    var dispatch = F\n\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(currentTempPortIdOpt, out)\n      out.value2 match {\n        case Some(v: BuildingControl.Temperature_impl_Payload) => ArtNix.updateData(currentTempPortId, v); dispatch = F\n        case Some(v) => halt(s\"Unexpected payload on port currentTemp.  Expecting something of type BuildingControl.Temperature_impl_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(fanAckPortIdOpt, out)\n      out.value2 match {\n        case Some(v: BuildingControl.FanAck_Payload) => ArtNix.updateData(fanAckPortId, v); dispatch = T\n        case Some(v) => halt(s\"Unexpected payload on port fanAck.  Expecting something of type BuildingControl.FanAck_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(setPointPortIdOpt, out)\n      out.value2 match {\n        case Some(v: BuildingControl.SetPoint_impl_Payload) => ArtNix.updateData(setPointPortId, v); dispatch = T\n        case Some(v) => halt(s\"Unexpected payload on port setPoint.  Expecting something of type BuildingControl.SetPoint_impl_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(tempChangedPortIdOpt, out)\n      out.value2 match {\n        case Some(v: art.Empty) => ArtNix.updateData(tempChangedPortId, v); dispatch = T\n        case Some(v) => halt(s\"Unexpected payload on port tempChanged.  Expecting something of type art.Empty but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    if (dispatch) {\n      entryPoints.compute()\n      Process.sleep(1000)\n    } else {\n      Process.sleep(10)\n    }\n  }\n\n  def finalise(): Unit = {\n    entryPoints.finalise()\n  }\n\n  def main(args: ISZ[String]): Z = {\n\n    val seed: Z = if (args.size == z\"1\") {\n      val n = Z(args(0)).get\n      if (n == z\"0\") 1 else n\n    } else {\n      1\n    }\n\n    initialiseArchitecture(seed)\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after setting up component\n\n    initialise()\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after component init\n\n    println(\"TempControl_i_tcp_tempControl_App starting ...\")\n\n    ArtNix.eventDispatch()\n\n    var terminated = F\n    while (!terminated) {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(appPortIdOpt, out)\n      if (out.value2.isEmpty) {\n        compute()\n      } else {\n        terminated = T\n      }\n    }\n    exit()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Float_32_Payload(Base_Types.Float_32_empty()))\n      printDataContent(BuildingControl.TempUnit_Payload(BuildingControl.TempUnit.byOrdinal(0).get))\n      printDataContent(BuildingControl.Temperature_impl_Payload(BuildingControl.Temperature_impl.empty()))\n      printDataContent(BuildingControl.SetPoint_impl_Payload(BuildingControl.SetPoint_impl.empty()))\n      printDataContent(BuildingControl.FanAck_Payload(BuildingControl.FanAck.byOrdinal(0).get))\n      printDataContent(BuildingControl.FanCmd_Payload(BuildingControl.FanCmd.byOrdinal(0).get))\n      printDataContent(art.Empty())\n\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_initialization_api.get.logInfo(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_initialization_api.get.logDebug(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_initialization_api.get.logError(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_operational_api.get.logInfo(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_operational_api.get.logDebug(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_currentTemp: Option[BuildingControl.Temperature_impl] = building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_operational_api.get.getcurrentTemp()\n      val apiUsage_fanAck: Option[BuildingControl.FanAck.Type] = building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_operational_api.get.getfanAck()\n      val apiUsage_setPoint: Option[BuildingControl.SetPoint_impl] = building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_operational_api.get.getsetPoint()\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_initialization_api.get.sendfanCmd(BuildingControl.FanCmd.byOrdinal(0).get)\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_operational_api.get.sendfanCmd(BuildingControl.FanCmd.byOrdinal(0).get)\n      val apiUsage_tempChanged: Option[art.Empty] = building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl_Bridge.c_operational_api.get.gettempChanged()\n    }\n  }\n\n  def exit(): Unit = {\n    finalise()\n    Platform.finalise()\n  }\n\n  override def atExit(): Unit = {\n    exit()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/TempControl_i_tcp_tempControl\/TempControl_i_tcp_tempControl.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef TEMPCONTROL_I_TCP_TEMPCONTROL_H\n#define TEMPCONTROL_I_TCP_TEMPCONTROL_H\n\n#include <all.h>\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_initialise_(STACK_FRAME_ONLY);\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_finalise_(STACK_FRAME_ONLY);\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlefanAck_(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanAck_Type value);\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlesetPoint_(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_SetPoint_impl value);\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handletempChanged_(STACK_FRAME);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/TempControl_i_tcp_tempControl\/TempControl_i_tcp_tempControl.c",
        {
          "type" : "TestResource",
          "content" : "#include <TempControl_i_tcp_tempControl_api.h>\n#include <TempControl_i_tcp_tempControl.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_initialise_(STACK_FRAME_ONLY) {\n DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_initialise_\", 0);\n\n \/\/ example api usage\n\n api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(SF string(\"Example logInfo\"));\n api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(SF string(\"Example logDebug\"));\n api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(SF string(\"Example logError\"));\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_finalise_\", 0);\n\n  \/\/ example finalise method\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlefanAck_(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanAck_Type value) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlefanAck_\", 0);\n\n  DeclNewString(fanAckString);\n  String__append(SF (String) &fanAckString, string(\"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlefanAck called\"));\n  api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl (SF (String) &fanAckString);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlesetPoint_(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_SetPoint_impl value) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlesetPoint_\", 0);\n\n  DeclNewString(setPointString);\n  String__append(SF (String) &setPointString, string(\"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlesetPoint called\"));\n  api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl (SF (String) &setPointString);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handletempChanged_(STACK_FRAME) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handletempChanged_\", 0);\n\n  DeclNewString(tempChangedString);\n  String__append(SF (String) &tempChangedString, string(\"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handletempChanged called\"));\n  api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl (SF (String) &tempChangedString);\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/TempControl_i_tcp_tempControl\/TempControl_i_tcp_tempControl_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef TEMPCONTROL_I_TCP_TEMPCONTROL_API_H\n#define TEMPCONTROL_I_TCP_TEMPCONTROL_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_currentTemp__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Temperature_impl value);\n\nbool api_get_fanAck__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanAck_Type *value);\n\nbool api_get_setPoint__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_SetPoint_impl value);\n\nvoid api_send_fanCmd__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanCmd_Type value);\n\nbool api_get_tempChanged__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(STACK_FRAME);\n\nvoid api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/TempControl_i_tcp_tempControl\/TempControl_i_tcp_tempControl_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <TempControl_i_tcp_tempControl_api.h>\n#include <TempControl_i_tcp_tempControl.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_currentTemp__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Temperature_impl value){\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"api_get_currentTemp__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl\", 0);\n\n  \/\/ Option_0D985E = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_Operational_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api(api);\n  Option_0D985E_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_Bridge_c_operational_api(SF_LAST));\n\n  \/\/ Option_32F601 = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Temperature_impl]\n  \/\/ Some_CE6E4F = Some[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Temperature_impl]\n  DeclNewOption_32F601(t_0);\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api_getcurrentTemp_(\n    SF\n    (Option_32F601) &t_0,\n    &api);\n\n  if(t_0.type == TSome_CE6E4F){\n    Type_assign(value, &t_0.Some_CE6E4F.value, sizeof(struct building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Temperature_impl));\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_fanAck__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanAck_Type *value){\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"api_get_fanAck__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl\", 0);\n\n  \/\/ Option_0D985E = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_Operational_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api(api);\n  Option_0D985E_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_Bridge_c_operational_api(SF_LAST));\n\n  \/\/ Option_6A4891 = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.FanAck.Type]\n  \/\/ Some_9DB21D = Some[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.FanAck.Type]\n  DeclNewOption_6A4891(t_0);\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api_getfanAck_(\n    SF\n    (Option_6A4891) &t_0,\n    &api);\n\n  if(t_0.type == TSome_9DB21D){\n    Type_assign(value, &t_0.Some_9DB21D.value, sizeof(building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanAck_Type));\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_setPoint__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_SetPoint_impl value){\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"api_get_setPoint__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl\", 0);\n\n  \/\/ Option_0D985E = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_Operational_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api(api);\n  Option_0D985E_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_Bridge_c_operational_api(SF_LAST));\n\n  \/\/ Option_8CC05D = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.SetPoint_impl]\n  \/\/ Some_824F01 = Some[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.SetPoint_impl]\n  DeclNewOption_8CC05D(t_0);\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api_getsetPoint_(\n    SF\n    (Option_8CC05D) &t_0,\n    &api);\n\n  if(t_0.type == TSome_824F01){\n    Type_assign(value, &t_0.Some_824F01.value, sizeof(struct building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_SetPoint_impl));\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_send_fanCmd__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanCmd_Type value) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"api_send_fanCmd__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl\", 0);\n\n  \/\/ Option_C7C5A2 = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api(api);\n  Option_C7C5A2_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api_sendfanCmd_(\n    SF\n    &api,\n    value);\n}\n\nbool api_get_tempChanged__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(STACK_FRAME){\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"api_get_tempChanged__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl\", 0);\n\n  \/\/ Option_0D985E = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_Operational_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api(api);\n  Option_0D985E_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_Bridge_c_operational_api(SF_LAST));\n\n  \/\/ Option_C622DB = Option[art.Empty]\n  \/\/ Some_4782C6 = Some[art.Empty]\n  DeclNewOption_C622DB(t_0);\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api_gettempChanged_(\n    SF\n    (Option_C622DB) &t_0,\n    &api);\n\n  if(t_0.type == TSome_4782C6){\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl\", 0);\n\n  \/\/ Option_C7C5A2 = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api(api);\n  Option_C7C5A2_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl\", 0);\n\n  \/\/ Option_C7C5A2 = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api(api);\n  Option_C7C5A2_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl\", 0);\n\n  \/\/ Option_C7C5A2 = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api(api);\n  Option_C7C5A2_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_initialise(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_initialise\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_initialise_(SF_LAST);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_finalise(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api api) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_finalise\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_finalise_(SF_LAST);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlefanAck(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api api,\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanAck_Type value) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlefanAck\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlefanAck_(SF_LAST value);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlesetPoint(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api api,\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_SetPoint_impl value) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlesetPoint\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handlesetPoint_(SF_LAST value);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handletempChanged(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_Operational_Api api) {\n  DeclNewStackFrame(caller, \"TempControl_i_tcp_tempControl_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handletempChanged\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_TempControl_i_tcp_tempControl_handletempChanged_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Fan_i_tcp_fan_App.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Fan_i_tcp_fan_App extends App {\n\n  val entryPoints: Bridge.EntryPoints = Arch.BuildingControlDemo_i_Instance_tcp_fan.entryPoints\n  val appPortId: Art.PortId = IPCPorts.Fan_i_tcp_fan_App\n  val appPortIdOpt: Option[Art.PortId] = Some(appPortId)\n  val fanCmdPortId: Art.PortId = Arch.BuildingControlDemo_i_Instance_tcp_fan.fanCmd.id\n  val fanCmdPortIdOpt: Option[Art.PortId] = Some(fanCmdPortId)\n\n  def initialiseArchitecture(seed: Z): Unit = {\n    Platform.initialise(seed, appPortIdOpt)\n    Platform.initialise(seed, fanCmdPortIdOpt)\n\n    Art.run(Arch.ad)\n  }\n\n  def initialise(): Unit = {\n    entryPoints.initialise()\n  }\n\n  def compute(): Unit = {\n    var dispatch = F\n\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(fanCmdPortIdOpt, out)\n      out.value2 match {\n        case Some(v: BuildingControl.FanCmd_Payload) => ArtNix.updateData(fanCmdPortId, v); dispatch = T\n        case Some(v) => halt(s\"Unexpected payload on port fanCmd.  Expecting something of type BuildingControl.FanCmd_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    if (dispatch) {\n      entryPoints.compute()\n      Process.sleep(1000)\n    } else {\n      Process.sleep(10)\n    }\n  }\n\n  def finalise(): Unit = {\n    entryPoints.finalise()\n  }\n\n  def main(args: ISZ[String]): Z = {\n\n    val seed: Z = if (args.size == z\"1\") {\n      val n = Z(args(0)).get\n      if (n == z\"0\") 1 else n\n    } else {\n      1\n    }\n\n    initialiseArchitecture(seed)\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after setting up component\n\n    initialise()\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after component init\n\n    println(\"Fan_i_tcp_fan_App starting ...\")\n\n    ArtNix.eventDispatch()\n\n    var terminated = F\n    while (!terminated) {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(appPortIdOpt, out)\n      if (out.value2.isEmpty) {\n        compute()\n      } else {\n        terminated = T\n      }\n    }\n    exit()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Float_32_Payload(Base_Types.Float_32_empty()))\n      printDataContent(BuildingControl.TempUnit_Payload(BuildingControl.TempUnit.byOrdinal(0).get))\n      printDataContent(BuildingControl.Temperature_impl_Payload(BuildingControl.Temperature_impl.empty()))\n      printDataContent(BuildingControl.SetPoint_impl_Payload(BuildingControl.SetPoint_impl.empty()))\n      printDataContent(BuildingControl.FanAck_Payload(BuildingControl.FanAck.byOrdinal(0).get))\n      printDataContent(BuildingControl.FanCmd_Payload(BuildingControl.FanCmd.byOrdinal(0).get))\n      printDataContent(art.Empty())\n\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_initialization_api.get.logInfo(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_initialization_api.get.logDebug(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_initialization_api.get.logError(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_operational_api.get.logInfo(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_operational_api.get.logDebug(\"\")\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_fanCmd: Option[BuildingControl.FanCmd.Type] = building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_operational_api.get.getfanCmd()\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_initialization_api.get.sendfanAck(BuildingControl.FanAck.byOrdinal(0).get)\n      building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan_Bridge.c_operational_api.get.sendfanAck(BuildingControl.FanAck.byOrdinal(0).get)\n    }\n  }\n\n  def exit(): Unit = {\n    finalise()\n    Platform.finalise()\n  }\n\n  override def atExit(): Unit = {\n    exit()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/Fan_i_tcp_fan\/Fan_i_tcp_fan.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef FAN_I_TCP_FAN_H\n#define FAN_I_TCP_FAN_H\n\n#include <all.h>\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_initialise_(STACK_FRAME_ONLY);\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_finalise_(STACK_FRAME_ONLY);\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_handlefanCmd_(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanCmd_Type value);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/Fan_i_tcp_fan\/Fan_i_tcp_fan.c",
        {
          "type" : "TestResource",
          "content" : "#include <Fan_i_tcp_fan_api.h>\n#include <Fan_i_tcp_fan.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_initialise_(STACK_FRAME_ONLY) {\n DeclNewStackFrame(caller, \"Fan_i_tcp_fan.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_initialise_\", 0);\n\n \/\/ example api usage\n\n api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(SF string(\"Example logInfo\"));\n api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(SF string(\"Example logDebug\"));\n api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(SF string(\"Example logError\"));\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_finalise_\", 0);\n\n  \/\/ example finalise method\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_handlefanCmd_(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanCmd_Type value) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_handlefanCmd_\", 0);\n\n  DeclNewString(fanCmdString);\n  String__append(SF (String) &fanCmdString, string(\"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_handlefanCmd called\"));\n  api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan (SF (String) &fanCmdString);\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/Fan_i_tcp_fan\/Fan_i_tcp_fan_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef FAN_I_TCP_FAN_API_H\n#define FAN_I_TCP_FAN_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_fanCmd__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanCmd_Type *value);\n\nvoid api_send_fanAck__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanAck_Type value);\n\nvoid api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/Fan_i_tcp_fan\/Fan_i_tcp_fan_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <Fan_i_tcp_fan_api.h>\n#include <Fan_i_tcp_fan.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_fanCmd__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanCmd_Type *value){\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan_api.c\", \"\", \"api_get_fanCmd__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan\", 0);\n\n  \/\/ Option_F96FCF = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_Operational_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Operational_Api(api);\n  Option_F96FCF_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Operational_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_Bridge_c_operational_api(SF_LAST));\n\n  \/\/ Option_30E72A = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.FanCmd.Type]\n  \/\/ Some_995AC8 = Some[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.FanCmd.Type]\n  DeclNewOption_30E72A(t_0);\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Operational_Api_getfanCmd_(\n    SF\n    (Option_30E72A) &t_0,\n    &api);\n\n  if(t_0.type == TSome_995AC8){\n    Type_assign(value, &t_0.Some_995AC8.value, sizeof(building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanCmd_Type));\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_send_fanAck__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanAck_Type value) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan_api.c\", \"\", \"api_send_fanAck__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan\", 0);\n\n  \/\/ Option_F9D68C = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api(api);\n  Option_F9D68C_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api_sendfanAck_(\n    SF\n    &api,\n    value);\n}\n\nvoid api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan_api.c\", \"\", \"api_logInfo__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan\", 0);\n\n  \/\/ Option_F9D68C = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api(api);\n  Option_F9D68C_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan_api.c\", \"\", \"api_logDebug__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan\", 0);\n\n  \/\/ Option_F9D68C = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api(api);\n  Option_F9D68C_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan_api.c\", \"\", \"api_logError__building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan\", 0);\n\n  \/\/ Option_F9D68C = Option[building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_Initialization_Api]\n  DeclNewbuilding_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api(api);\n  Option_F9D68C_get_(SF (building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api) &api, building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_Bridge_c_initialization_api(SF_LAST));\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_initialise(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_initialise\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_initialise_(SF_LAST);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_finalise(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Operational_Api api) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_finalise\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_finalise_(SF_LAST);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_handlefanCmd(\n  STACK_FRAME\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_Operational_Api api,\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_FanCmd_Type value) {\n  DeclNewStackFrame(caller, \"Fan_i_tcp_fan_api.c\", \"\", \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_handlefanCmd\", 0);\n\n  building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_BuildingControl_Fan_i_tcp_fan_handlefanCmd_(SF_LAST value);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/SharedMemory.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@ext object SharedMemory {\n  def create(id: Z): Z = $\n  def get(id: Z): Z = $\n  def send(id: Z, port: Art.PortId, d: DataContent): Unit = $\n  def receive(port: Art.PortId, out: MBox2[Art.PortId, DataContent]): Unit = $\n  def sendAsync(id: Z, port: Art.PortId, d: DataContent): B = $\n  def receiveAsync(port: Art.PortId, out: MBox2[Art.PortId, Option[DataContent]]): Unit = $\n  def remove(id: Z): Unit = $\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/SharedMemory_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject SharedMemory_Ext {\n  def create(id: Z): Z = halt(\"stub\")\n  def get(id: Z): Z = halt(\"stub\")\n  def send(id: Z, port: Art.PortId, d: DataContent): Unit = halt(\"stub\")\n  def receive(port: Art.PortId, out: MBox2[Art.PortId, DataContent]): Unit = halt(\"stub\")\n  def sendAsync(id: Z, port: Art.PortId, d: DataContent): B = halt(\"stub\")\n  def receiveAsync(port: Art.PortId, out: MBox2[Art.PortId, Option[DataContent]]): Unit = halt(\"stub\")\n  def remove(id: Z): Unit = halt(\"stub\")\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/IPC.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject IPCPorts {\n  val TempSensor_i_tcp_tempSensor_App: Art.PortId = 9\n  val TempControl_i_tcp_tempControl_App: Art.PortId = 10\n  val Fan_i_tcp_fan_App: Art.PortId = 11\n  val Main: Art.PortId = 12\n\n  def emptyReceiveOut: MBox2[Art.PortId, DataContent] = {\n    return MBox2(-1, art.Empty())\n  }\n\n  def emptyReceiveAsyncOut: MBox2[Art.PortId, Option[DataContent]] = {\n    return MBox2(-1, None())\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/ArtNix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject ArtNix {\n\n  val maxPortIds: Art.PortId = IPCPorts.Main + 1\n  val timeTriggered: TimeTriggered = TimeTriggered()\n  val noData: Option[DataContent] = None()\n  val data: MS[Art.PortId, Option[DataContent]] = MS.create(maxPortIds, noData)\n  val connection: MS[Art.PortId, ISZ[(Art.PortId, Art.PortId)]] = {\n    val r = MS.create[Art.PortId, ISZ[(Art.PortId, Art.PortId)]](maxPortIds, ISZ())\n\n    r(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.currentTemp.id) = ISZ(\n      (IPCPorts.TempControl_i_tcp_tempControl_App, Arch.BuildingControlDemo_i_Instance_tcp_tempControl.currentTemp.id)\n    )\n    r(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.tempChanged.id) = ISZ(\n      (IPCPorts.TempControl_i_tcp_tempControl_App, Arch.BuildingControlDemo_i_Instance_tcp_tempControl.tempChanged.id)\n    )\n    r(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.fanCmd.id) = ISZ(\n      (IPCPorts.Fan_i_tcp_fan_App, Arch.BuildingControlDemo_i_Instance_tcp_fan.fanCmd.id)\n    )\n    r(Arch.BuildingControlDemo_i_Instance_tcp_fan.fanAck.id) = ISZ(\n      (IPCPorts.TempControl_i_tcp_tempControl_App, Arch.BuildingControlDemo_i_Instance_tcp_tempControl.fanAck.id)\n    )\n\n    r\n  }\n  val eventInPorts: MS[Z, Art.PortId] = MSZ(\n    Arch.BuildingControlDemo_i_Instance_tcp_tempControl.fanAck.id,\n    Arch.BuildingControlDemo_i_Instance_tcp_tempControl.setPoint.id,\n    Arch.BuildingControlDemo_i_Instance_tcp_tempControl.tempChanged.id,\n    Arch.BuildingControlDemo_i_Instance_tcp_fan.fanCmd.id\n  )\n  var frozen: MS[Art.PortId, Option[DataContent]] = MS.create(maxPortIds, noData)\n  var outgoing: MS[Art.PortId, Option[DataContent]] = MS.create(maxPortIds, noData)\n  var isTimeDispatch: B = F\n\n  def updateData(port: Art.PortId, d: DataContent): Unit = {\n    data(port) = Some(d)\n  }\n\n  def timeDispatch(): Unit = {\n    isTimeDispatch = T\n  }\n\n  def eventDispatch(): Unit = {\n    isTimeDispatch = F\n  }\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    if (isTimeDispatch) {\n      return timeTriggered\n    } else {\n      var r = ISZ[Art.PortId]()\n      for (i <- eventInPorts if data(i).nonEmpty) {\n        r = r :+ i\n      }\n      return EventTriggered(r)\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    frozen = data\n    for (i <- eventPortIds) {\n      data(i) = noData\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    outgoing(portId) = Some(data)\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    return frozen(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (p <- dataPortIds) {\n      outgoing(p) match {\n        case Some(d) =>\n          outgoing(p) = noData\n          for(e <- connection(p)){\n            Platform.sendAsync(e._1, e._2, d)\n          }\n        case _ =>\n      }\n    }\n\n    for (p <- eventPortIds) {\n      outgoing(p) match {\n        case Some(d) =>\n          outgoing(p) = noData\n          for(e <- connection(p)){\n            Platform.sendAsync(e._1, e._2, d)\n          }\n        case _ =>\n      }\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {\n  }\n\n  def time(): Art.Time = {\n    return Process.time()\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Main.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Main extends App {\n  def main(args: ISZ[String]): Z = {\n\n    val seed: Z = if (args.size == z\"1\") {\n      val n = Z(args(0)).get\n      if (n == z\"0\") 1 else n\n    } else {\n      1\n    }\n\n    Platform.initialise(seed, None())\n\n    val empty = art.Empty()\n\n    Platform.sendAsync(IPCPorts.TempSensor_i_tcp_tempSensor_App, IPCPorts.TempSensor_i_tcp_tempSensor_App, empty)\n    Platform.sendAsync(IPCPorts.TempControl_i_tcp_tempControl_App, IPCPorts.TempControl_i_tcp_tempControl_App, empty)\n    Platform.sendAsync(IPCPorts.Fan_i_tcp_fan_App, IPCPorts.Fan_i_tcp_fan_App, empty)\n\n    Platform.finalise()\n    return 0\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Platform.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@ext object Platform {\n  def initialise(seed: Z, portOpt: Option[Art.PortId]): Unit = $\n  def receive(portOpt: Option[Art.PortId],  out: MBox2[Art.PortId, DataContent]): Unit = $\n  def send(app: Art.PortId, port: Art.PortId, data: DataContent): Unit = $\n  def sendAsync(app: Art.PortId, port: Art.PortId, data: DataContent): B = $\n  def receiveAsync(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, Option[DataContent]]): Unit = $\n  def finalise(): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Platform_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Platform_Ext {\n  def initialise(seed: Z, portOpt: Option[Art.PortId]): Unit = halt(\"stub\")\n  def receive(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, DataContent]) = halt(\"stub\")\n  def send(app: Art.PortId, port: Art.PortId, data: DataContent): Unit = halt(\"stub\")\n  def sendAsync(app: Art.PortId, port: Art.PortId, data: DataContent): B = halt(\"stub\")\n  def receiveAsync(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, Option[DataContent]]): Unit = halt(\"stub\")\n  def finalise(): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/PlatformNix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject PlatformNix {\n\n  var seed: Z = 0\n  var ids: ISZ[Z] = ISZ()\n\n  def initialise(seed: Z, portOpt: Option[Art.PortId]): Unit = {\n    PlatformNix.seed = seed\n    portOpt match {\n      case Some(port) =>\n        val id = seed + port\n        SharedMemory.create(id)\n        ids = ids :+ id\n      case _ =>\n    }\n  }\n\n  def receive(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, DataContent]): Unit = {\n    portOpt match {\n      case Some(port) =>\n        out.value1 = port\n        SharedMemory.receive(seed + port, out)\n      case _ => halt(\"Unsupported receive operation without port.\")\n    }\n  }\n\n  def send(app: Art.PortId, port: Art.PortId, data: DataContent): Unit = {\n    SharedMemory.send(port, seed + port, data)\n  }\n\n  def sendAsync(app: Art.PortId, port: Art.PortId, data: DataContent): B = {\n    val r = SharedMemory.sendAsync(port, seed + port, data)\n    return r\n  }\n\n  def receiveAsync(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, Option[DataContent]]): Unit = {\n    portOpt match {\n      case Some(port) => SharedMemory.receiveAsync(seed + port, out)\n      case _ => halt(\"Unsupported receive operation without port.\")\n    }\n  }\n\n  def finalise(): Unit = {\n    for (id <- ids) {\n      SharedMemory.remove(id)\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Process.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\npackage building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art.Art\n\n\/\/ This file was auto-generated.  Do not edit\n\n@ext object Process {\n  def sleep(n: Z): Unit = $\n\n  def time(): Art.Time = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/nix\/building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\/Process_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes\n\nimport org.sireum._\nimport art.Art\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Process_Ext {\n  def sleep(millis: Z): Unit = halt(\"stub\")\n\n  def time(): Art.Time = halt(\"stub\")\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/bin\/compile-linux.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\ncd ${SCRIPT_HOME}\nmkdir -p linux-build\nmkdir -p ${SCRIPT_HOME}\/..\/src\/c\/nix\/linux-build\ncd ${SCRIPT_HOME}\/..\/src\/c\/nix\/linux-build\nBOUND_CHECK=${BOUND_CHECK:-OFF}\nNO_PRINT=${NO_PRINT:-OFF}\nRANGE_CHECK=${RANGE_CHECK:-OFF}\nWITH_LOC=${WITH_LOC:-OFF}\ncmake -DBOUND_CHECK=$BOUND_CHECK -DNO_PRINT=$NO_PRINT -DRANGE_CHECK=$RANGE_CHECK -DWITH_LOC=$WITH_LOC -DCMAKE_BUILD_TYPE=Release ..\nmake $MAKE_ARGS\nmv *_App ${SCRIPT_HOME}\/linux-build\/\nmv Main ${SCRIPT_HOME}\/linux-build\/",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/bin\/run-linux.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\ncd $SCRIPT_HOME\nx-terminal-emulator -e sh -c \"linux-build\/TempSensor_i_tcp_tempSensor_App\" &\nx-terminal-emulator -e sh -c \"linux-build\/TempControl_i_tcp_tempControl_App\" &\nx-terminal-emulator -e sh -c \"linux-build\/Fan_i_tcp_fan_App\" &\nread -p \"Press enter to initialise components ...\"\nlinux-build\/Main\nread -p \"Press enter again to start ...\"\nlinux-build\/Main",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/bin\/stop.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nAPPS=\"TempSensor_i_tcp_tempSensor_App TempControl_i_tcp_tempControl_App Fan_i_tcp_fan_App\"\nfor APP in ${APPS}; do\n  pkill -f $APP\n  pkill -9 -f $APP\ndone\nME=`whoami`\n\n# message queue\nIPCS_Q=`ipcs -q | egrep \"[0-9a-f]+[0-9]+\" | grep $ME | awk '{print $2}'`\nfor id in $IPCS_Q; do\n  ipcrm -q $id;\ndone\n\n# shared memory\nIPCS_Q=`ipcs -m | egrep \"[0-9a-f]+[0-9]+\" | grep $ME | awk '{print $2}'`\nfor id in $IPCS_Q; do\n  ipcrm -m $id;\ndone\n\n# semaphores\nIPCS_Q=`ipcs -s | egrep \"[0-9a-f]+[0-9]+\" | grep $ME | awk '{print $2}'`\nfor id in $IPCS_Q; do\n  ipcrm -s $id;\ndone\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/c\/ext-c\/ipc.c",
        {
          "type" : "TestResource",
          "content" : "#include <all.h>\n#include <sys\/types.h>\n#include <sys\/shm.h>\n#include <sys\/sem.h>\n#include <unistd.h>\n\n\/\/ This file is auto-generated.  Do not edit\n\nstatic inline void sem_op(int sid, short val) {\n    struct sembuf sem_op;\n    sem_op.sem_num = 0;\n    sem_op.sem_op = val;\n    sem_op.sem_flg = 0;\n    semop(sid, &sem_op, 1);\n}\n\nstatic inline void lock(int sid) {\n    sem_op(sid, -1);\n}\n\nstatic inline void unlock(int sid) {\n    sem_op(sid, 1);\n}\n\nstatic inline int create_sem(Z msgid) {\n    unsigned int permission = 0666;\n    unsigned int mask = IPC_CREAT;\n    int sem_set_id = semget((key_t) msgid, 1, mask | permission);\n\n    if (sem_set_id >= 0) {\n        union semun {\n            int val;\n            struct semid_ds *buf;\n            ushort *array;\n        } sem_val;\n        sem_val.val = 1;\n        semctl(sem_set_id, 0, SETVAL, sem_val);\n    }\n    return sem_set_id;\n}\n\nZ building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_SharedMemory_create(STACK_FRAME Z id) {\n    unsigned int permission = 0666;\n    unsigned int mask = IPC_CREAT;\n\n    create_sem(id);\n\n    int shmid = shmget((key_t) id, sizeof(union Option_8E9F45), (int) (permission | mask));\n    void *p = shmat(shmid, (void *) 0, 0);\n    memset(p, 0, sizeof(union Option_8E9F45));\n    shmdt(p);\n\n    return (Z) shmid;\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_SharedMemory_receive(STACK_FRAME Z port, MBox2_1CBFC4 out) {\n    int sid = semget((key_t) port, 1, 0666);\n\n    lock(sid);\n\n    int shmid = shmget((key_t) port, sizeof(union Option_8E9F45), 0666);\n\n    Option_8E9F45 p = (Option_8E9F45) shmat(shmid, (void *) 0, 0);\n\n    while (p->type != TSome_D29615) { \/\/ wait until there is a data\n        unlock(sid);\n        usleep((useconds_t) 10 * 1000);\n        lock(sid);\n    }\n\n    art_DataContent d = &p->Some_D29615.value;\n    Type_assign(&(out->value2), d, sizeOf((Type) d));\n    memset(p, 0, sizeof(union Option_8E9F45));\n    shmdt(p);\n\n    unlock(sid);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_SharedMemory_receiveAsync(STACK_FRAME Z port, MBox2_1029D1 out) {\n    int sid = semget((key_t) port, 1, 0666);\n\n    lock(sid);\n\n    int shmid = shmget((key_t) port, sizeof(union Option_8E9F45), 0666);\n\n    Option_8E9F45 p = (Option_8E9F45) shmat(shmid, (void *) 0, 0);\n\n    if (p->type == TSome_D29615) {\n        Type_assign(&(out->value2), p, sizeOf((Type) p));\n        memset(p, 0, sizeof(union Option_8E9F45));\n    } else {\n        out->value2.type = TNone_964667;\n    }\n\n    shmdt(p);\n\n    unlock(sid);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_SharedMemory_send(STACK_FRAME Z destid, Z port, art_DataContent d) {\n    int sid = semget((key_t) port, 1, 0666);\n\n    lock(sid);\n\n    int shmid = shmget((key_t) port, sizeof(union Option_8E9F45), 0666);\n\n    Option_8E9F45 p = (Option_8E9F45) shmat(shmid, (void *) 0, 0);\n\n    while (p->type == TSome_D29615) {\n        unlock(sid);\n        usleep((useconds_t) 10 * 1000);\n        lock(sid);\n    }\n\n    p->type = TSome_D29615;\n    Type_assign(&(p->Some_D29615.value), d, sizeOf((Type) d));\n\n    shmdt(p);\n\n    unlock(sid);\n}\n\nB building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_SharedMemory_sendAsync(STACK_FRAME Z destid, Z port, art_DataContent d) {\n    int sid = semget((key_t) port, 1, 0666);\n\n    lock(sid);\n\n    int shmid = shmget((key_t) port, sizeof(union Option_8E9F45), 0666);\n\n    Option_8E9F45 p = (Option_8E9F45) shmat(shmid, (void *) 0, 0);\n    p->type = TSome_D29615;\n    Type_assign(&(p->Some_D29615.value), d, sizeOf((Type) d));\n\n    shmdt(p);\n\n    unlock(sid);\n    return T;\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_SharedMemory_remove(STACK_FRAME Z id) {\n    semctl(semget((key_t) id, 1, 0666), 0, IPC_RMID);\n    shmctl(shmget((key_t) id, sizeof(union Option_8E9F45), 0666), IPC_RMID, NULL);\n}\n\nUnit building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes_Process_sleep(STACK_FRAME Z n) {\n    usleep((useconds_t) n * 1000);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/bin\/transpile.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\n\nif [ -z \"${SIREUM_HOME}\" ]; then\n  echo \"SIREUM_HOME not set. Refer to https:\/\/github.com\/sireum\/kekinian\/#installing\"\n  exit 1\nfi\n\nPATH_SEP=\":\"\nif [ -n \"$COMSPEC\" -a -x \"$COMSPEC\" ]; then\n  PATH_SEP=\";\"\nfi\n\nSCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/src\/c\/nix\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"main\" \\\n  --apps \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.TempSensor_i_tcp_tempSensor_App,building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.TempControl_i_tcp_tempControl_App,building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.Fan_i_tcp_fan_App,building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.Main\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 256 \\\n  --sequence-size 13 \\\n  --sequence \"MS[Z,art.Bridge]=3;MS[Z,MOption[art.Bridge]]=3;IS[Z,art.UPort]=5;IS[Z,art.UConnection]=4\" \\\n  --constants \"art.Art.maxComponents=3;art.Art.maxPorts=13\" \\\n  --forward \"art.ArtNative=building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.ArtNix,building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.Platform=building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.PlatformNix\" \\\n  --stack-size \"110592\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/TempSensor_i_tcp_tempSensor\/TempSensor_i_tcp_tempSensor.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/TempSensor_i_tcp_tempSensor\/TempSensor_i_tcp_tempSensor.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/TempSensor_i_tcp_tempSensor\/TempSensor_i_tcp_tempSensor_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/TempSensor_i_tcp_tempSensor\/TempSensor_i_tcp_tempSensor_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/TempControl_i_tcp_tempControl\/TempControl_i_tcp_tempControl.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/TempControl_i_tcp_tempControl\/TempControl_i_tcp_tempControl.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/TempControl_i_tcp_tempControl\/TempControl_i_tcp_tempControl_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/TempControl_i_tcp_tempControl\/TempControl_i_tcp_tempControl_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/Fan_i_tcp_fan\/Fan_i_tcp_fan.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/Fan_i_tcp_fan\/Fan_i_tcp_fan.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/Fan_i_tcp_fan\/Fan_i_tcp_fan_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/Fan_i_tcp_fan\/Fan_i_tcp_fan_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ipc.c\" \\\n  --exclude-build \"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempSensor_i_tcp_tempSensor,building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.TempControl_i_tcp_tempControl,building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.BuildingControl.Fan_i_tcp_fan\" \\\n  --verbose",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/ArtTimer_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum.{B, F, ISZ, String, T}\nimport art.Art.{BridgeId, Time}\n\nimport scala.collection.mutable.{Map => MMap}\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.util.concurrent.Executors\nimport java.util.concurrent.TimeUnit\n\nobject ArtTimer_Ext {\n\n  val m: MMap[String, AtomicBoolean] = ArtNative_Ext.concMap()\n  val executor = Executors.newSingleThreadScheduledExecutor()\n\n  def finalise(): Unit = {\n    executor.shutdownNow()\n    ArtNative.logInfo(Art.logTitle, \"Finalized ArtTimer\")\n  }\n\n  def clearTimeout(eventId: String): Unit = {\n    m.get(eventId) match {\n      case Some(b) =>\n        b.set(false)\n        m.remove(eventId)\n        ArtNative.logInfo(Art.logTitle, s\"timeout cleared for $eventId\")\n      case _ =>\n    }\n  }\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = {\n    if(m.get(eventId).nonEmpty) {\n      art.Art.logError(bridgeId, s\"callback already set for $eventId\")\n      return\n    }\n\n    if(wait < 0) {\n      art.Art.logError(bridgeId, s\"Invalid wait time: ${wait}.  Value must be non-negative.\")\n      return\n    }\n\n    var b = new AtomicBoolean(true)\n\n    val bridge = Art.bridge(bridgeId)\n    val eventOuts = bridge.ports.eventOuts.map(_.id)\n    val dataOuts = bridge.ports.dataOuts.map(_.id)\n\n    val task = new Runnable {\n      override def run(): Unit = {\n        if (b.get()) {\n          bridge.synchronized {\n            callback()\n            Art.sendOutput(eventOuts, dataOuts)\n            if(autoClear) {\n              clearTimeout(eventId)\n            }\n          }\n        }\n      }\n    }\n\n    m.put(eventId, b)\n\n    val adjusted = wait.toMP.toLong * ArtNative_Ext.slowdown.toMP.toLong\n    executor.schedule(task, adjusted, TimeUnit.MILLISECONDS)\n\n    art.Art.logInfo(bridgeId, s\"callback set for $eventId\")\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/ArchitectureDescription.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n\n@record class ArchitectureDescription(components: MSZ[Bridge],\n                                      connections: ISZ[UConnection]) {\n  @spec val allPorts: ISZ[UPort] = $\n\n  @spec def allPortsSpec(i: Z): ISZ[UPort] = $\n  \/*\n    l\"\"\"\n    = base:  ISZ[UPort](), if i == 0\n    = rec:   components(i).ports.all ++ allPorts(i - 1), if 0 < i \u2227 i < components.size\n  \"\"\"\n\n  l\"\"\" invariant\n\n         AllPorts:\n           allPorts \u2261 allPortsSpec(components.size - 1)\n\n         ComponentIdUnique:\n           \u2200i: [0, components.size)\n             \u2200j: [0, components.size)\n               i \u2260 j \u2192 components(i).id \u2260 components(j).id\n\n         PortIdUnique:\n           \u2200i: [0, allPorts.size)\n             \u2200j: [0, allPorts.size)\n               i \u2260 j \u2192 allPorts(i).id \u2260 allPorts(j).id\n   \"\"\"\n  *\/\n}\n\n@datatype trait UConnection {\n  \/*\n  l\"\"\" invariant\n         FromPortOut:   from.mode \u2261 PortMode.DataOut \u2228 from.mode \u2261 PortMode.EventOut\n         DataPort:    (from.mode \u2261 PortMode.DataOut) \u2261 (to.mode \u2261 PortMode.DataIn)\n         EventPort:  (from.mode \u2261 PortMode.EventOut) \u2261 (to.mode \u2261 PortMode.EventIn)  \"\"\"\n  *\/\n\n  def from: UPort\n\n  def to: UPort\n}\n\n@datatype class Connection(val from: UPort, val to: UPort)\n  extends UConnection\n\n\n@enum object PortMode {\n  'DataIn\n  'DataOut\n  'EventIn\n  'EventOut\n}\n\n@datatype trait UPort {\n  def id: Art.PortId\n\n  def name: String\n\n  def mode: PortMode.Type\n}\n\n@datatype class Port[T](val id: Art.PortId,\n                        val name: String,\n                        val mode: PortMode.Type)\n  extends UPort\n\n@datatype class UrgentPort[T](val id: Art.PortId,\n                              val name: String,\n                              val mode: PortMode.Type,\n                              val urgency: Z)\n  extends UPort\n\n@msig trait Bridge {\n  def id: Art.BridgeId\n\n  def name: String\n\n  def ports: Bridge.Ports\n\n  def entryPoints: Bridge.EntryPoints\n\n  def dispatchProtocol: DispatchPropertyProtocol\n}\n\n\nobject Bridge {\n\n  \/\/ initialise()  ( compute() | activate() deactivate() | recover() )* finalise()\n  @msig trait EntryPoints {\n\n    def initialise(): Unit\n\n    def activate(): Unit\n\n    def deactivate(): Unit\n\n    def compute(): Unit\n\n    def recover(): Unit\n\n    def finalise(): Unit\n\n    def testCompute(): Unit = { println(\"Default testCompute\") }\n  }\n\n  @datatype class Ports(all: ISZ[UPort],\n                        dataIns: ISZ[UPort],\n                        dataOuts: ISZ[UPort],\n                        eventIns: ISZ[UPort],\n                        eventOuts: ISZ[UPort])\n\n}\n\n\n@datatype trait DispatchPropertyProtocol\n\nobject DispatchPropertyProtocol {\n\n  @datatype class Periodic(period: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Aperiodic() extends DispatchPropertyProtocol\n\n  @datatype class Sporadic(min: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Timed() extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Hybrid() extends DispatchPropertyProtocol\n}\n\n@datatype trait DispatchStatus\n\n@datatype class TimeTriggered() extends DispatchStatus\n\n@datatype class EventTriggered(portIds: ISZ[Art.PortId]) extends DispatchStatus",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/Art.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\nobject Art {\n  type PortId = Z\n  type BridgeId = Z\n  type Time = Z\n\n  val z16max: PortId = org.sireum.conversions.Z16.toZ(Z16.Max) \/\/ 32,767\n\n  val maxComponents: BridgeId = 3\n  val maxPorts: PortId = 13\n\n  val logTitle: String = \"Art\"\n  val bridges: MS[BridgeId, MOption[Bridge]] = MS.create[BridgeId, MOption[Bridge]](maxComponents, MNone[Bridge]())\n  val connections: MS[PortId, ISZ[PortId]] = MS.create[PortId, ISZ[PortId]](maxPorts, ISZ())\n  val ports: MS[PortId, Option[UPort]] = MS.create[PortId, Option[UPort]](maxPorts, None[UPort]())\n\n  def bridge(bridgeId: BridgeId): Bridge = {\n    val MSome(r) = bridges(bridgeId)\n    return r\n  }\n\n  def port(p: PortId) : UPort = {\n    val Some(r) = ports(p)\n    return r\n  }\n\n  def register(bridge: Bridge): Unit = {\n    bridges(bridge.id) = MSome(bridge)\n    bridge.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (periodic: $period)\")\n      case DispatchPropertyProtocol.Sporadic(min) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (sporadic: $min)\")\n    }\n    for (port <- bridge.ports.all) {\n      ports(port.id) = Some(port)\n      port.mode match {\n        case PortMode.DataIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data in)\")\n        case PortMode.DataOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data out)\")\n        case PortMode.EventIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event in)\")\n        case PortMode.EventOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event out)\")\n      }\n    }\n  }\n\n  \/\/ can't find definition in the standard ??\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = { \/\/ DISPATCH_STATUS\n    return ArtNative.dispatchStatus(bridgeId)\n  }\n\n  def receiveInput(eventPortIds: ISZ[PortId], dataPortIds: ISZ[PortId]): Unit = { \/\/ RECEIVE_INPUT\n    ArtNative.receiveInput(eventPortIds, dataPortIds)\n  }\n\n  def putValue(portId: PortId, data: DataContent): Unit = { \/\/ PUT_VALUE\n    ArtNative.putValue(portId, data)\n  }\n\n  def getValue(portId: PortId): Option[DataContent] = { \/\/ GET_VALUE\n    return ArtNative.getValue(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    ArtNative.sendOutput(eventPortIds, dataPortIds)\n  }\n\n  def logInfo(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logInfo(bridge(bridgeId).name, msg)\n  }\n\n  def logError(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logError(bridge(bridgeId).name, msg)\n  }\n\n  def logDebug(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logDebug(bridge(bridgeId).name, msg)\n  }\n\n  def connect(from: UPort, to: UPort): Unit = {\n    connections(from.id) = connections(from.id) :+ to.id\n    ArtNative.logInfo(logTitle, s\"Connected ports: ${from.name} -> ${to.name}\")\n  }\n\n  def run(system: ArchitectureDescription): Unit = {\n\n    for (component <- system.components) {\n      register(component)\n    }\n\n    for (connection <- system.connections) {\n      connect(connection.from, connection.to)\n    }\n\n    ArtNative.run()\n  }\n\n  def time(): Time = {\n    return ArtNative.time()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Clears any existing ports and bridges, then sets up ports\/bridges for the next test.\n   *\n   * Automatically called by BridgeTestSuite before each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = MNone()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n\n    \/\/ register bridge passed to this method\n    register(bridge)\n\n    \/\/ let ArtNative reset itself as well\n    ArtNative.initTest(bridge)\n  }\n\n  def executeTest(bridge: Bridge): Unit = {\n    ArtNative.executeTest(bridge)\n  }\n\n  def finalizeTest(bridge: Bridge): Unit = {\n    ArtNative.finalizeTest(bridge)\n  }\n\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    ArtNative.releaseOutput(eventPortIds, dataPortIds)\n  }\n\n  def manuallyClearOutput(): Unit = {\n    ArtNative.manuallyClearOutput()\n  }\n\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    ArtNative.insertInPortValue(dstPortId, data)\n  }\n\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    ArtNative.observeOutPortValue(portId)\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/ArtNative_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\n\nimport java.util.concurrent.CountDownLatch\nimport java.util.concurrent.atomic.AtomicBoolean\n\n\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtMessage {\n  val UNSET: Z = -1\n}\n\ncase class ArtMessage (data: DataContent,\n\n                       var srcPortId: Art.PortId = ArtMessage.UNSET,\n                       var dstPortId: Art.PortId = ArtMessage.UNSET,\n\n                       \/\/ when putValue was called by producer\n                       var putValueTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when sendOutput transferred message from out port var of producer \n                       var sendOutputTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when message arrived via transport layer\n                       var dstArrivalTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when receiveInput transferred message to in port vars of consumer\n                       var receiveInputTimestamp: Z = ArtMessage.UNSET\n                      )\n\nobject ArtNative_Ext {\n  val noTime: Art.Time = 0\n\n  val slowdown: Z = 1\n\n  val lastSporadic: MMap[Art.BridgeId, Art.Time] = concMap()\n  val eventPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val dataPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val receivedPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n  val sentPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val portIds = ISZ[Art.PortId](Art.bridge(bridgeId).ports.eventIns.elements.map(_.id).filter(eventPortVariables.get(_).nonEmpty): _*)\n    if (portIds.isEmpty) {\n      TimeTriggered()\n    } else {\n      val urgentFifo = ops.ISZOps(portIds.map(Art.port(_))).sortWith { \/\/ reverse sort\n        case (p1: UrgentPort[_], p2: UrgentPort[_]) =>\n          if(p1.urgency < p2.urgency) F\n          else if(p1.urgency > p2.urgency) T\n          else eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n        case (_: UrgentPort[_], _: Port[_]) => T \/\/ urgent ports take precedence\n        case (_: Port[_], _: UrgentPort[_]) => F \/\/ urgent ports take precedence\n        case (p1: Port[_], p2: Port[_]) =>\n          eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n      }.map(_.id)\n      EventTriggered(urgentFifo)\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (portId <- eventPortIds) {\n      receivedPortValues -= portId \/\/ remove stale events from previous dispatch\n      eventPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          eventPortVariables -= portId\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      dataPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    sentPortValues(portId) = ArtMessage(data = data, srcPortId = portId, putValueTimestamp = Art.time())\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    val data = receivedPortValues.get(portId) match {\n      case scala.Some(v) => org.sireum.Some(v.data)\n      case _ => org.sireum.None[DataContent]()\n    }\n    return data\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      sentPortValues.get(srcPortId) match {\n        case scala.Some(msg) =>\n          \/\/ todo send on emission as well as receive\n          for(dstPortId <- Art.connections(srcPortId).elements) {\n\n            \/\/ simulate sending msg via transport middleware\n\n            val _msg = msg.copy(dstPortId = dstPortId, sendOutputTimestamp = Art.time())\n\n            Art.port(dstPortId).mode match {\n              case PortMode.DataIn | PortMode.DataOut =>\n                dataPortVariables(dstPortId) = _msg\n              case PortMode.EventIn | PortMode.EventOut =>\n                eventPortVariables(dstPortId) = _msg\n            }\n\n            _msg.dstArrivalTimestamp = Art.time()\n\n            ArtDebug_Ext.outputCallback(srcPortId, dstPortId, _msg.data, _msg.dstArrivalTimestamp)\n          }\n          sentPortValues -= srcPortId\n        case _ =>\n      }\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = log(\"info\", title, msg)\n\n  def logError(title: String, msg: String): Unit = log(\"error\", title, msg)\n\n  def logDebug(title: String, msg: String): Unit = log(\"debug\", title, msg)\n\n  def time(): Art.Time = toZ(System.currentTimeMillis())\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    val b = Art.bridge(bridgeId)\n    b.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        val ls = lastSporadic.getOrElse(bridgeId, noTime)\n        if (time() - ls < minRate) {\n          return F\n        } else {\n          return b.ports.eventIns.elements.exists(port => eventPortVariables.contains(port.id))\n        }\n    }\n  }\n\n  def run(): Unit = {\n    \/\/require(Art.bridges.elements.forall(_.nonEmpty))\n\n    val bridges = {\n      var r = Vector[Bridge]()\n      for (e <- Art.bridges.elements) e match {\n        case MSome(b) => r :+= b\n        case _ =>\n      }\n      r\n    }\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n    }\n\n    val terminated = new AtomicBoolean()\n    val numTerminated = new CountDownLatch(bridges.size)\n\n    for (bridge <- bridges) {\n      val rate = bridge.dispatchProtocol match {\n        case DispatchPropertyProtocol.Periodic(period) => period\n        case DispatchPropertyProtocol.Sporadic(min) => min\n      }\n\n      new Thread(() => {\n        logInfo(Art.logTitle, s\"Thread for ${bridge.name} instantiated.\")\n        ArtNative_Ext.synchronized {\n          ArtNative_Ext.wait()\n        }\n        while (!terminated.get()) {\n          Thread.sleep((rate * slowdown).toMP.toLong)\n          if (shouldDispatch(bridge.id))\n            try {\n              bridge.synchronized {\n                bridge.entryPoints.compute()\n              }\n            }\n            catch {\n              case x : Throwable =>\n                x.printStackTrace()\n                terminated.set(true)\n            }\n        }\n        numTerminated.countDown()\n      }).start()\n    }\n\n    Thread.sleep(1000)\n\n    logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    ArtDebug_Ext.start()\n\n    ArtNative_Ext.synchronized {\n      ArtNative_Ext.notifyAll()\n    }\n\n    Console.in.readLine()\n    terminated.set(true)\n    numTerminated.await()\n    logInfo(Art.logTitle, s\"End execution...\")\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n    }\n\n    ArtTimer_Ext.finalise()\n    ArtDebug_Ext.stop()\n  }\n\n  def log(kind: String, title: String, msg: String): Unit = {\n    Console.out.println(s\"\"\"{ \"log\" : \"$kind\", \"title\" : ${escape(title)}, \"msg\" : ${escape(msg)}, \"time\" : \"${time()}\" }\"\"\")\n    Console.out.flush()\n  }\n\n  def escape(raw: String): String = {\n    import scala.reflect.runtime.universe._\n    Literal(Constant(raw.value)).toString\n  }\n\n  def toZ(value: Long): Z = Z(value)\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n\n\n\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges AND resets all inputs and outputs for all ports.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ note that all ports and bridges were deleted by Art's initTest\n\n    \/\/ delete ALL port values as well as lastSporadic tracker\n    lastSporadic.clear()\n    eventPortVariables.clear()\n    dataPortVariables.clear()\n    receivedPortValues.clear()\n    sentPortValues.clear()\n\n    \/\/ clear pending ArtTimer events (also done after a test completes)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n\n    bridge.entryPoints.initialise()\n    logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n  }\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.testCompute()\n  }\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.finalise()\n    logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n\n    \/\/ clear pending ArtTimer events (also done before a test begins)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n  }\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ testing SEND_OUTPUT\n    \/\/ note: sendOutput is usually accessed via: Art.sendOutput -> ArtNative.sendOutput -> ArtNative_Ext.sendOutput\n    \/\/ NO OP\n  }\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = {\n    sentPortValues.clear()\n  }\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    val artMessage = ArtMessage(data = data, dstPortId = dstPortId, dstArrivalTimestamp = Art.time())\n    Art.port(dstPortId).mode match {\n      case PortMode.DataIn | PortMode.DataOut =>\n        dataPortVariables(dstPortId) = artMessage\n      case PortMode.EventIn | PortMode.EventOut =>\n        eventPortVariables(dstPortId) = artMessage\n    }\n  }\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    sentPortValues.get(portId) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/DataContent.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait DataContent\n\n@datatype class Empty extends art.DataContent",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/ArtTimer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.Art.BridgeId\n\n@ext object ArtTimer {\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = $\n\n  def clearTimeout(eventId: String): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/ArtDebug.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtDebug {\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = $\n\n  def registerListener(listener: ArtListener): Unit = $\n\n  def setDebugObject[T](key: String, o: T): Unit = $\n\n  def getDebugObject[T](key: String): Option[T] = $\n}\n\n@msig trait ArtListener {\n\n  \/\/ lifecycle information\n  def start(time: Art.Time): Unit\n  def stop(time: Art.Time): Unit\n\n  \/\/ communication information\n  def output(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Art.Time): Unit\n\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/ArtDebug_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.Art.Time\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtDebug_Ext {\n  private val debugObjects: MMap[String, Any] = ArtNative_Ext.concMap()\n  private val listeners: MSet[ArtListener] = concSet()\n\n  protected[art] def start(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.start(time))\n  }\n\n  protected[art] def stop(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.stop(time))\n  }\n\n  protected[art] def outputCallback(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Time): Unit = {\n    listeners.foreach((listener: ArtListener) => listener.output(src, dst, data, time))\n  }\n\n  def setDebugObject[T](key: String, o: T): Unit = {\n    ArtNative.logDebug(Art.logTitle, s\"Set debug object for $key\")\n    debugObjects(key) = o\n  }\n\n  def getDebugObject[T](key: String): Option[T] = {\n    debugObjects.get(key) match {\n      case scala.Some(o) => Some(o.asInstanceOf[T])\n      case _ => None[T]()\n    }\n  }\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = {\n    assert(z\"0\" <= bridgeId && bridgeId < Art.maxComponents && Art.bridges(bridgeId).nonEmpty)\n\n    val bridge = Art.bridges(bridgeId).get\n    assert(bridge.ports.all.elements.map(_.id).contains(port))\n\n    if(bridge.ports.dataOuts.elements.map(_.id).contains(port) ||\n      bridge.ports.eventOuts.elements.map(_.id).contains(port)) {\n\n      ArtNative.logDebug(Art.logTitle, s\"Injecting from port ${Art.ports(port).get.name}\")\n\n      ArtNative.putValue(port, data)\n      ArtNative.sendOutput(bridge.ports.eventOuts.map(_.id), bridge.ports.dataOuts.map(_.id))\n    } else {\n      ArtNative.logDebug(Art.logTitle, s\"Injecting to port ${Art.ports(port).get.name}\")\n\n      if(bridge.ports.dataIns.elements.map(_.id).contains(port)) {\n        ArtNative_Ext.dataPortVariables(port) = ArtMessage(data)\n      } else {\n        ArtNative_Ext.eventPortVariables(port) = ArtMessage(data)\n      }\n    }\n  }\n\n  def registerListener(listener: ArtListener): Unit = {\n    listeners.add(listener)\n  }\n\n  def concSet[K](): MSet[K] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    val m: java.util.Set[K] = java.util.concurrent.ConcurrentHashMap.newKeySet()\n    m.asScala\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/src\/main\/art\/ArtNative.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtNative {\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = $\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = $\n\n  def getValue(portId: Art.PortId): Option[DataContent] = $\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def logInfo(title: String, msg: String): Unit = $\n\n  def logError(title: String, msg: String): Unit = $\n\n  def logDebug(title: String, msg: String): Unit = $\n\n  def run(): Unit = $\n\n  def time(): Art.Time = $\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = $\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = $\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = $\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/build.sc",
        {
          "type" : "TestResource",
          "content" : "import mill._\nimport scalalib._\n\n\/\/ Example Mill build -- the contents of this file will not be overwritten\n\/\/\n\/\/ To open the following project in VSCode, first follow Sireum Kekinian's\n\/\/ instructions for setting up a development environment using Scala Metals:\n\/\/\n\/\/   https:\/\/github.com\/sireum\/kekinian#scala-metals\n\/\/\n\/\/ Then open the folder containing this file in VSCode and import the\n\/\/ mill build when asked.\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   mill building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   mill building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.test\n\ntrait SlangEmbeddedModule extends ScalaModule {\n  val scalaVer = \"2.13.3\"\n\n  val sireumScalacVersion = \"4.20200915.f4b7b0e\" \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20200915.f4b7b0e\n\n  val kekinianVersion = \"4.20200915.72510af\" \/\/ https:\/\/github.com\/sireum\/kekinian\/tree\/4.20200915.72510af\n\n  val scalaTestVersion = \"3.2.2\"\n\n\n  def scalaVersion = scalaVer\n\n  override def javacOptions = T { Seq(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"utf8\") }\n\n  override def scalacOptions = T { Seq(\n    \"-target:jvm-1.8\",\n    \"-deprecation\",\n    \"-Yrangepos\",\n    \"-Ydelambdafy:method\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Xfatal-warnings\",\n    \"-language:postfixOps\"\n  ) }\n\n  override def ivyDeps = Agg(ivy\"org.sireum.kekinian::library::${kekinianVersion}\")\n\n  override def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin::${sireumScalacVersion}\")\n\n  override def repositories = super.repositories ++ Seq(\n    coursier.maven.MavenRepository(\"https:\/\/jitpack.io\/\"),\n  )\n}\n\ntrait AadlModule extends SlangEmbeddedModule {\n  override def sources = T.sources (\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"architecture\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"art\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"bridge\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"component\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"data\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"nix\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"seL4Nix\"\n  )\n}\n\ntrait AadlTestModule extends AadlModule {\n  object test extends Tests {\n\n    final override def millSourcePath =\n      super.millSourcePath \/ os.up \/ os.up \/ \"src\" \/ \"test\"\n\n    override def sources = T.sources(millSourcePath \/ \"bridge\")\n\n    override def ivyDeps = Agg(ivy\"org.scalatest::scalatest::${scalaTestVersion}\")\n\n    override def testFrameworks = T { Seq(\"org.scalatest.tools.Framework\") }\n  }\n}\n\nobject `building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes` extends AadlTestModule {\n  override def mainClass = T { Some(\"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.Demo\") }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/build.sbt",
        {
          "type" : "TestResource",
          "content" : "\/\/ Example sbt build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ To open the following project in Sireum IVE select 'File > Open ...' and\n\/\/ navigate to the directory containing this file then click 'OK'.  To install\n\/\/ Sireum IVE see https:\/\/github.com\/sireum\/kekinian#installing\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   sbt run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   sbt test\n\/\/\n\/\/ To build a runnable\/executable jar:\n\/\/   sbt assembly\n\/\/\n\/\/ To skip running the unit tests while building the executable jar:\n\/\/   sbt 'set test in assembly := {}' assembly\n\/\/ on Linux\/Mac, or\n\/\/   sbt \"set test in assembly := {}\" assembly\n\/\/ on Windows\n\/\/\n\/\/ sbt can be obtained from https:\/\/www.scala-sbt.org\/download.html\n\nlazy val BuildingControlDemo_i_Instance = slangEmbeddedTestProject(\"BuildingControlDemo_i_Instance\", \".\")\n\n\nval scalaVer = \"2.13.3\"\n\nval sireumScalacVersion = \"4.20200915.f4b7b0e\" \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20200915.f4b7b0e\n\nval kekinianVersion = \"4.20200915.72510af\" \/\/ https:\/\/github.com\/sireum\/kekinian\/tree\/4.20200915.72510af\n\nval scalaTestVersion = \"3.2.2\"\n\n\nval commonSettings = Seq(\n  organization := \"org.sireum\",\n  incOptions := incOptions.value.withLogRecompileOnMacro(false),\n  scalaVersion := scalaVer,\n  scalacOptions := Seq(\"-target:jvm-1.8\", \"-deprecation\",\n    \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-Xfatal-warnings\"),\n  Test \/ parallelExecution := true,\n  resolvers ++= Seq(Resolver.sonatypeRepo(\"public\"), \"jitpack\" at \"https:\/\/jitpack.io\"),\n  addCompilerPlugin(\"org.sireum\" %% \"scalac-plugin\" % sireumScalacVersion),\n  libraryDependencies ++= Seq(\n    \"org.sireum.kekinian\" %% \"library\" % kekinianVersion withSources() withJavadoc()\n  )\n)\n\nimport sbtassembly.AssemblyPlugin.defaultUniversalScript\nval slangEmbeddedSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/art\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/architecture\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/bridge\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/component\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/data\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/seL4Nix\",\n\n  mainClass in (Compile, run) := Some(\"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.Demo\"),\n\n  mainClass in assembly := Some(\"building_control_gen_mixed__Linux_Embed_Art_SharedMemory_Excludes.Demo\"),\n  assemblyJarName in assembly := \"BuildingControlDemo_i_Instance.jar\",\n  assemblyOption in assembly := (assemblyOption in assembly).value.copy(prependShellScript = Some(defaultUniversalScript(shebang = false))),\n\n  assemblyMergeStrategy in assembly := {\n    case PathList(\"META-INF\", xs @ _*) => MergeStrategy.discard\n    case x => MergeStrategy.first\n  }\n)\n\ndef standardProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).settings(commonSettings)\n\ndef slangEmbeddedProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings)\n\ndef slangEmbeddedTestProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings ++\n      Seq(\n        Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/bridge\",\n        libraryDependencies += \"org.scalatest\" %% \"scalatest\" % scalaTestVersion % \"test\")\n    )\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/project\/build.properties",
        {
          "type" : "TestResource",
          "content" : "sbt.version=1.3.3\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "building_control_gen_mixed--Linux-Embed-Art-SharedMemory-Excludes\/project\/plugins.sbt",
        {
          "type" : "TestResource",
          "content" : "addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.15.0\")\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
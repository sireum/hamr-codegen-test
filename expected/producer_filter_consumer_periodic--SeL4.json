{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/data\/pfc_project\/Base_Types.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project\n\nimport org.sireum._\nimport org.sireum.S8._\nimport org.sireum.S16._\nimport org.sireum.S32._\nimport org.sireum.S64._\nimport org.sireum.U8._\nimport org.sireum.U16._\nimport org.sireum.U32._\nimport org.sireum.U64._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Base_Types {\n\n  type Boolean = org.sireum.B\n\n  type Integer = org.sireum.Z\n\n  type Integer_8 = org.sireum.S8\n  type Integer_16 = org.sireum.S16\n  type Integer_32 = org.sireum.S32\n  type Integer_64 = org.sireum.S64\n\n  type Unsigned_8 = org.sireum.U8\n  type Unsigned_16 = org.sireum.U16\n  type Unsigned_32 = org.sireum.U32\n  type Unsigned_64 = org.sireum.U64\n\n  \/\/ TODO: Base_Types::Natural\n\n  type Float = org.sireum.R\n  type Float_32 = org.sireum.F32\n  type Float_64 = org.sireum.F64\n\n  type Character = org.sireum.C\n  type String = org.sireum.String\n\n  type Bits = org.sireum.ISZ[org.sireum.B]\n\n  @datatype class Boolean_Payload(value: Boolean) extends art.DataContent\n\n  @datatype class Integer_Payload(value: Integer) extends art.DataContent\n\n  @datatype class Integer_8_Payload(value: Integer_8) extends art.DataContent\n  @datatype class Integer_16_Payload(value: Integer_16) extends art.DataContent\n  @datatype class Integer_32_Payload(value: Integer_32) extends art.DataContent\n  @datatype class Integer_64_Payload(value: Integer_64) extends art.DataContent\n\n  @datatype class Unsigned_8_Payload(value: Unsigned_8) extends art.DataContent\n  @datatype class Unsigned_16_Payload(value: Unsigned_16) extends art.DataContent\n  @datatype class Unsigned_32_Payload(value: Unsigned_32) extends art.DataContent\n  @datatype class Unsigned_64_Payload(value: Unsigned_64) extends art.DataContent\n\n  @datatype class Float_Payload(value: Float) extends art.DataContent\n  @datatype class Float_32_Payload(value: Float_32) extends art.DataContent\n  @datatype class Float_64_Payload(value: Float_64) extends art.DataContent\n\n  @datatype class Character_Payload(value: Character) extends art.DataContent\n  @datatype class String_Payload(value: String) extends art.DataContent\n\n  @datatype class Bits_Payload(value: Bits) extends art.DataContent\n\n  def Boolean_empty(): Boolean = { return F }\n\n  def Integer_empty(): Integer = { return z\"0\" }\n\n  def Integer_8_empty(): Integer_8 = { return s8\"0\" }\n  def Integer_16_empty(): Integer_16 = { return s16\"0\" }\n  def Integer_32_empty(): Integer_32 = { return s32\"0\" }\n  def Integer_64_empty(): Integer_64 = { return s64\"0\" }\n\n  def Unsigned_8_empty(): Unsigned_8 = { return u8\"0\" }\n  def Unsigned_16_empty(): Unsigned_16 = { return u16\"0\" }\n  def Unsigned_32_empty(): Unsigned_32 = { return u32\"0\" }\n  def Unsigned_64_empty(): Unsigned_64 = { return u64\"0\" }\n\n  def Float_empty(): Float = { return r\"0\" }\n  def Float_32_empty(): Float_32 = { return f32\"0\" }\n  def Float_64_empty(): Float_64 = { return f64\"0\" }\n\n  def Character_empty(): Character = { return ' ' }\n  def String_empty(): String = { return \"\" }\n\n  def Bits_empty(): Bits = { return ISZ() }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/architecture\/pfc_project\/Arch.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project\n\nimport org.sireum._\nimport art._\nimport art.PortMode._\nimport art.DispatchPropertyProtocol._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Arch {\n  val PFC_Sys_Impl_Instance_proc_producer : pfc_project.PFC.Producer_proc_producer_Bridge = {\n    val to_filter = Port[Base_Types.Bits] (id = 0, name = \"PFC_Sys_Impl_Instance_proc_producer_to_filter\", mode = EventOut)\n\n    pfc_project.PFC.Producer_proc_producer_Bridge(\n      id = 0,\n      name = \"PFC_Sys_Impl_Instance_proc_producer\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      to_filter = to_filter\n    )\n  }\n  val PFC_Sys_Impl_Instance_proc_filter : pfc_project.PFC.Filter_proc_filter_Bridge = {\n    val from_producer = Port[Base_Types.Bits] (id = 1, name = \"PFC_Sys_Impl_Instance_proc_filter_from_producer\", mode = EventIn)\n    val to_consumer = Port[Base_Types.Bits] (id = 2, name = \"PFC_Sys_Impl_Instance_proc_filter_to_consumer\", mode = EventOut)\n\n    pfc_project.PFC.Filter_proc_filter_Bridge(\n      id = 1,\n      name = \"PFC_Sys_Impl_Instance_proc_filter\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      from_producer = from_producer,\n      to_consumer = to_consumer\n    )\n  }\n  val PFC_Sys_Impl_Instance_proc_consumer : pfc_project.PFC.Consumer_proc_consumer_Bridge = {\n    val from_filter = Port[Base_Types.Bits] (id = 3, name = \"PFC_Sys_Impl_Instance_proc_consumer_from_filter\", mode = EventIn)\n\n    pfc_project.PFC.Consumer_proc_consumer_Bridge(\n      id = 2,\n      name = \"PFC_Sys_Impl_Instance_proc_consumer\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      from_filter = from_filter\n    )\n  }\n\n  val ad : ArchitectureDescription = {\n\n    ArchitectureDescription(\n      components = MSZ (PFC_Sys_Impl_Instance_proc_producer, PFC_Sys_Impl_Instance_proc_filter, PFC_Sys_Impl_Instance_proc_consumer),\n\n      connections = ISZ (Connection(from = PFC_Sys_Impl_Instance_proc_producer.to_filter, to = PFC_Sys_Impl_Instance_proc_filter.from_producer),\n                         Connection(from = PFC_Sys_Impl_Instance_proc_filter.to_consumer, to = PFC_Sys_Impl_Instance_proc_consumer.from_filter))\n    )\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/architecture\/pfc_project\/Demo.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file was auto-generated.  Do not edit\npackage pfc_project\n\nobject Demo extends App {\n  art.Art.run(Arch.ad)\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/test\/bridge\/pfc_project\/PFC\/Producer_proc_producer_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package pfc_project.PFC\n\nimport art.{ArtNative_Ext, Empty}\nimport pfc_project._\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass Producer_proc_producer_Test extends BridgeTestSuite[Producer_proc_producer_Bridge](Arch.PFC_Sys_Impl_Instance_proc_producer) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ getter for out EventDataPort\n  def get_to_filter(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_filter_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_filter.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_to_filter_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_filter_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/bridge\/pfc_project\/PFC\/Producer_proc_producer_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\nimport pfc_project._\nimport pfc_project.PFC.{Producer_proc_producer => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class Producer_proc_producer_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  to_filter: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(to_filter),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(),\n\n    eventOuts = ISZ(to_filter)\n  )\n\n  val initialization_api : Producer_Initialization_Api = {\n    val api = Producer_Initialization_Api(\n      id,\n      to_filter.id\n    )\n    Producer_proc_producer_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : Producer_Operational_Api = {\n    val api = Producer_Operational_Api(\n      id,\n      to_filter.id\n    )\n    Producer_proc_producer_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    Producer_proc_producer_Bridge.EntryPoints(\n      id,\n\n      to_filter.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject Producer_proc_producer_Bridge {\n\n  var c_initialization_api: Option[Producer_Initialization_Api] = None()\n  var c_operational_api: Option[Producer_Operational_Api] = None()\n\n  @record class EntryPoints(\n    Producer_proc_producer_BridgeId : Art.BridgeId,\n\n    to_filter_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: Producer_Initialization_Api,\n    operational_api: Producer_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(to_filter_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n      component.timeTriggered(operational_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n      component.timeTriggered(operational_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/bridge\/pfc_project\/PFC\/Producer_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\nimport pfc_project._\n\n@sig trait Producer_Api {\n  def id: Art.BridgeId\n  def to_filter_Id : Art.PortId\n\n  def sendto_filter(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_filter_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class Producer_Initialization_Api (\n  val id: Art.BridgeId,\n  val to_filter_Id : Art.PortId) extends Producer_Api\n\n@datatype class Producer_Operational_Api (\n  val id: Art.BridgeId,\n  val to_filter_Id : Art.PortId) extends Producer_Api {\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/component\/pfc_project\/PFC\/Producer_proc_producer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport pfc_project._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject Producer_proc_producer {\n\n  def initialise(api: Producer_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.sendto_filter(Base_Types.Bits_empty())\n  }\n\n  def timeTriggered(api: Producer_Operational_Api): Unit = {\n    \/\/ example api usage\n\n    api.sendto_filter(Base_Types.Bits_empty())\n  }\n\n  def activate(api: Producer_Operational_Api): Unit = { }\n\n  def deactivate(api: Producer_Operational_Api): Unit = { }\n\n  def finalise(api: Producer_Operational_Api): Unit = { }\n\n  def recover(api: Producer_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/test\/bridge\/pfc_project\/PFC\/BridgeTestSuite.scala",
        {
          "type" : "TestResource",
          "content" : "package pfc_project.PFC\n\nimport art.{Art, Bridge}\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\n\n\/**\n * A test suite that provides the following functionality for unit tests:\n *  - Clears all registers bridges and ports before each test\n *  - Initializes the selected bridge and ports before each test\n *  - Finalizes the bridge after each test\n *  - Creates a new instance of the test suite class for each test\n *    -> NOTE: this is NOT the same as having a separate JVM per-test (or suite), but is useful for test-local variables\n *\n *  If automatic calls to initTest() or finalizeTest() are not desired, simply override beforeEach() or afterEach()\n *  methods to change the desired behavior.\n *\n * @param bridge the bridge being tested, see [[pfc_project.Arch]] for potential values.\n * @tparam T the type of the bridge being tested\n *\/\n\n\/\/ This file was auto-generated.  Do no edit\n\nclass BridgeTestSuite[+T <: Bridge](val bridge: T) extends AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach {\n\n  \/**\n   * Automatically called before each test. Currently calls Art.initTest for the given bridge. Override as needed.\n   *\/\n  override protected def beforeEach(): Unit = {\n    Art.initTest(bridge)\n  }\n\n  \/**\n   * Automatically called after each test. Currently calls Art.finalizeTest for the given bridge. Override as needed.\n   *\/\n  override protected def afterEach(): Unit = {\n    Art.finalizeTest(bridge)\n  }\n\n  \/**\n   * Invokes testCompute() once per registered bridge.\n   *\n   * IMPORTANT: This method also clears all bridge output BEFORE each call. This will have no effect the first time it's\n   * invoked (because all output will be empty), but it does ensure that output doesn't \"leak\" across multiple\n   * invocations.\n   *\n   *\/\n  def executeTest(): Unit = {\n    Art.manuallyClearOutput()\n    Art.executeTest(bridge)\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/test\/bridge\/pfc_project\/PFC\/Filter_proc_filter_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package pfc_project.PFC\n\nimport art.{ArtNative_Ext, Empty}\nimport pfc_project._\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass Filter_proc_filter_Test extends BridgeTestSuite[Filter_proc_filter_Bridge](Arch.PFC_Sys_Impl_Instance_proc_filter) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ setter for in EventDataPort\n  def put_from_producer(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_producer_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_to_consumer(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_consumer_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_consumer.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_to_consumer_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_consumer_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/bridge\/pfc_project\/PFC\/Filter_proc_filter_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\nimport pfc_project._\nimport pfc_project.PFC.{Filter_proc_filter => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class Filter_proc_filter_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  from_producer: Port[Base_Types.Bits],\n  to_consumer: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(from_producer,\n              to_consumer),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(from_producer),\n\n    eventOuts = ISZ(to_consumer)\n  )\n\n  val initialization_api : Filter_Initialization_Api = {\n    val api = Filter_Initialization_Api(\n      id,\n      from_producer.id,\n      to_consumer.id\n    )\n    Filter_proc_filter_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : Filter_Operational_Api = {\n    val api = Filter_Operational_Api(\n      id,\n      from_producer.id,\n      to_consumer.id\n    )\n    Filter_proc_filter_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    Filter_proc_filter_Bridge.EntryPoints(\n      id,\n\n      from_producer.id,\n      to_consumer.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject Filter_proc_filter_Bridge {\n\n  var c_initialization_api: Option[Filter_Initialization_Api] = None()\n  var c_operational_api: Option[Filter_Operational_Api] = None()\n\n  @record class EntryPoints(\n    Filter_proc_filter_BridgeId : Art.BridgeId,\n\n    from_producer_Id : Art.PortId,\n    to_consumer_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: Filter_Initialization_Api,\n    operational_api: Filter_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(from_producer_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(to_consumer_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n      component.timeTriggered(operational_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n      component.timeTriggered(operational_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/bridge\/pfc_project\/PFC\/Filter_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\nimport pfc_project._\n\n@sig trait Filter_Api {\n  def id: Art.BridgeId\n  def from_producer_Id : Art.PortId\n  def to_consumer_Id : Art.PortId\n\n  def sendto_consumer(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_consumer_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class Filter_Initialization_Api (\n  val id: Art.BridgeId,\n  val from_producer_Id : Art.PortId,\n  val to_consumer_Id : Art.PortId) extends Filter_Api\n\n@datatype class Filter_Operational_Api (\n  val id: Art.BridgeId,\n  val from_producer_Id : Art.PortId,\n  val to_consumer_Id : Art.PortId) extends Filter_Api {\n\n  def getfrom_producer() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_producer_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_producer.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/component\/pfc_project\/PFC\/Filter_proc_filter.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport pfc_project._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject Filter_proc_filter {\n\n  def initialise(api: Filter_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.sendto_consumer(Base_Types.Bits_empty())\n  }\n\n  def timeTriggered(api: Filter_Operational_Api): Unit = {\n    \/\/ example api usage\n\n    val apiUsage_from_producer: Option[Base_Types.Bits] = api.getfrom_producer()\n    api.sendto_consumer(Base_Types.Bits_empty())\n  }\n\n  def activate(api: Filter_Operational_Api): Unit = { }\n\n  def deactivate(api: Filter_Operational_Api): Unit = { }\n\n  def finalise(api: Filter_Operational_Api): Unit = { }\n\n  def recover(api: Filter_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/test\/bridge\/pfc_project\/PFC\/Consumer_proc_consumer_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package pfc_project.PFC\n\nimport art.{ArtNative_Ext, Empty}\nimport pfc_project._\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass Consumer_proc_consumer_Test extends BridgeTestSuite[Consumer_proc_consumer_Bridge](Arch.PFC_Sys_Impl_Instance_proc_consumer) {\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ HELPER FUNCTIONS \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/\/ setter for in EventDataPort\n  def put_from_filter(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_filter_Id, Base_Types.Bits_Payload(value))\n  }\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/bridge\/pfc_project\/PFC\/Consumer_proc_consumer_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\nimport pfc_project._\nimport pfc_project.PFC.{Consumer_proc_consumer => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@record class Consumer_proc_consumer_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  from_filter: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(from_filter),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(from_filter),\n\n    eventOuts = ISZ()\n  )\n\n  val initialization_api : Consumer_Initialization_Api = {\n    val api = Consumer_Initialization_Api(\n      id,\n      from_filter.id\n    )\n    Consumer_proc_consumer_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : Consumer_Operational_Api = {\n    val api = Consumer_Operational_Api(\n      id,\n      from_filter.id\n    )\n    Consumer_proc_consumer_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    Consumer_proc_consumer_Bridge.EntryPoints(\n      id,\n\n      from_filter.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject Consumer_proc_consumer_Bridge {\n\n  var c_initialization_api: Option[Consumer_Initialization_Api] = None()\n  var c_operational_api: Option[Consumer_Operational_Api] = None()\n\n  @record class EntryPoints(\n    Consumer_proc_consumer_BridgeId : Art.BridgeId,\n\n    from_filter_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: Consumer_Initialization_Api,\n    operational_api: Consumer_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(from_filter_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n      component.timeTriggered(operational_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n      component.timeTriggered(operational_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/bridge\/pfc_project\/PFC\/Consumer_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\nimport pfc_project._\n\n@sig trait Consumer_Api {\n  def id: Art.BridgeId\n  def from_filter_Id : Art.PortId\n\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class Consumer_Initialization_Api (\n  val id: Art.BridgeId,\n  val from_filter_Id : Art.PortId) extends Consumer_Api\n\n@datatype class Consumer_Operational_Api (\n  val id: Art.BridgeId,\n  val from_filter_Id : Art.PortId) extends Consumer_Api {\n\n  def getfrom_filter() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_filter_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_filter.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/component\/pfc_project\/PFC\/Consumer_proc_consumer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport pfc_project._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject Consumer_proc_consumer {\n\n  def initialise(api: Consumer_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n  }\n\n  def timeTriggered(api: Consumer_Operational_Api): Unit = {\n    \/\/ example api usage\n\n    val apiUsage_from_filter: Option[Base_Types.Bits] = api.getfrom_filter()\n  }\n\n  def activate(api: Consumer_Operational_Api): Unit = { }\n\n  def deactivate(api: Consumer_Operational_Api): Unit = { }\n\n  def finalise(api: Consumer_Operational_Api): Unit = { }\n\n  def recover(api: Consumer_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/component\/pfc_project\/TranspilerToucher.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project\n\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject TranspilerToucher {\n  def touch(): Unit = {\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/Producer_proc_producer\/producer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.Producer_proc_producer\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport pfc_project._\nimport pfc_project.PFC.Producer_proc_producer_seL4Nix\n\nobject producer extends App {\n\n  val producerBridge : pfc_project.PFC.Producer_proc_producer_Bridge = {\n    val to_filter = Port[Base_Types.Bits] (id = 0, name = \"PFC_Sys_Impl_Instance_proc_producer_to_filter\", mode = EventOut)\n\n    pfc_project.PFC.Producer_proc_producer_Bridge(\n      id = 0,\n      name = \"PFC_Sys_Impl_Instance_proc_producer\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      to_filter = to_filter\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = producerBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ to_filter: Out EventDataPort Base_Types.Bits\n  val to_filter_id: Art.PortId = producerBridge.to_filter.id\n  var to_filter_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    halt(s\"Unexpected: producer.getValue called with: ${portId}\")\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == to_filter_id) {\n      to_filter_port = Some(data)\n    } else {\n      halt(s\"Unexpected: producer.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(to_filter_port.nonEmpty) {\n      Producer_proc_producer_seL4Nix.to_filter_Send(to_filter_port.get)\n      to_filter_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = MSZ (producerBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_empty()))\n      printDataContent(art.Empty())\n\n      pfc_project.PFC.Producer_proc_producer_Bridge.c_initialization_api.get.logInfo(\"\")\n      pfc_project.PFC.Producer_proc_producer_Bridge.c_initialization_api.get.logDebug(\"\")\n      pfc_project.PFC.Producer_proc_producer_Bridge.c_initialization_api.get.logError(\"\")\n      pfc_project.PFC.Producer_proc_producer_Bridge.c_operational_api.get.logInfo(\"\")\n      pfc_project.PFC.Producer_proc_producer_Bridge.c_operational_api.get.logDebug(\"\")\n      pfc_project.PFC.Producer_proc_producer_Bridge.c_operational_api.get.logError(\"\")\n      pfc_project.PFC.Producer_proc_producer_Bridge.c_initialization_api.get.sendto_filter(Base_Types.Bits_empty())\n      pfc_project.PFC.Producer_proc_producer_Bridge.c_operational_api.get.sendto_filter(Base_Types.Bits_empty())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/PFC\/Producer_proc_producer_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\n\n@ext object Producer_proc_producer_seL4Nix {\n  \/\/ send payload 'd' to components connected to seL4's to_filter port\n  def to_filter_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/PFC\/Producer_proc_producer_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package pfc_project.PFC\n\nimport org.sireum._\nimport art._\n\nobject Producer_proc_producer_seL4Nix_Ext {\n  def to_filter_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/c\/ext-c\/ext.c",
        {
          "type" : "TestResource",
          "content" : "#include <all.h>\n#include <ext.h>\n\n\/\/ add c extension code here",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/c\/ext-c\/ext.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef EXT_H\n#define EXT_H\n\n#endif",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/Producer_proc_producer\/Producer_proc_producer_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <Producer_proc_producer_adapter.h>\n\nUnit pfc_project_PFC_Producer_proc_producer_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_adapter.c\", \"\", \"pfc_project_PFC_Producer_proc_producer_adapter_initialiseArchitecture\", 0);\n\n  pfc_project_Producer_proc_producer_producer_initialiseArchitecture(SF_LAST);\n}\n\nUnit pfc_project_PFC_Producer_proc_producer_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_adapter.c\", \"\", \"pfc_project_PFC_Producer_proc_producer_adapter_initialiseEntryPoint\", 0);\n\n  pfc_project_Producer_proc_producer_producer_initialiseEntryPoint(SF_LAST);\n}\n\nUnit pfc_project_PFC_Producer_proc_producer_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_adapter.c\", \"\", \"pfc_project_PFC_Producer_proc_producer_adapter_computeEntryPoint\", 0);\n\n  pfc_project_Producer_proc_producer_producer_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints pfc_project_PFC_Producer_proc_producer_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_adapter.c\", \"\", \"pfc_project_PFC_Producer_proc_producer_adapter_entryPoints\", 0);\n\n  return pfc_project_Producer_proc_producer_producer_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/Producer_proc_producer\/Producer_proc_producer_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef PRODUCER_PROC_PRODUCER_ADAPTER_H\n#define PRODUCER_PROC_PRODUCER_ADAPTER_H\n\n#include <all.h>\n\nUnit pfc_project_PFC_Producer_proc_producer_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit pfc_project_PFC_Producer_proc_producer_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit pfc_project_PFC_Producer_proc_producer_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints pfc_project_PFC_Producer_proc_producer_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/bin\/settings_Producer_proc_producer.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(Producer_proc_producer\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/Filter_proc_filter\/filter.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.Filter_proc_filter\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport pfc_project._\nimport pfc_project.PFC.Filter_proc_filter_seL4Nix\n\nobject filter extends App {\n\n  val filterBridge : pfc_project.PFC.Filter_proc_filter_Bridge = {\n    val from_producer = Port[Base_Types.Bits] (id = 0, name = \"PFC_Sys_Impl_Instance_proc_filter_from_producer\", mode = EventIn)\n    val to_consumer = Port[Base_Types.Bits] (id = 1, name = \"PFC_Sys_Impl_Instance_proc_filter_to_consumer\", mode = EventOut)\n\n    pfc_project.PFC.Filter_proc_filter_Bridge(\n      id = 0,\n      name = \"PFC_Sys_Impl_Instance_proc_filter\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      from_producer = from_producer,\n      to_consumer = to_consumer\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = filterBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ from_producer: In EventDataPort Base_Types.Bits\n  val from_producer_id: Art.PortId = filterBridge.from_producer.id\n  var from_producer_port: Option[DataContent] = noData\n\n  \/\/ to_consumer: Out EventDataPort Base_Types.Bits\n  val to_consumer_id: Art.PortId = filterBridge.to_consumer.id\n  var to_consumer_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == from_producer_id) {\n      return from_producer_port\n    } else {\n      halt(s\"Unexpected: filter.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    from_producer_port = Filter_proc_filter_seL4Nix.from_producer_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == to_consumer_id) {\n      to_consumer_port = Some(data)\n    } else {\n      halt(s\"Unexpected: filter.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(to_consumer_port.nonEmpty) {\n      Filter_proc_filter_seL4Nix.to_consumer_Send(to_consumer_port.get)\n      to_consumer_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = MSZ (filterBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_empty()))\n      printDataContent(art.Empty())\n\n      pfc_project.PFC.Filter_proc_filter_Bridge.c_initialization_api.get.logInfo(\"\")\n      pfc_project.PFC.Filter_proc_filter_Bridge.c_initialization_api.get.logDebug(\"\")\n      pfc_project.PFC.Filter_proc_filter_Bridge.c_initialization_api.get.logError(\"\")\n      pfc_project.PFC.Filter_proc_filter_Bridge.c_operational_api.get.logInfo(\"\")\n      pfc_project.PFC.Filter_proc_filter_Bridge.c_operational_api.get.logDebug(\"\")\n      pfc_project.PFC.Filter_proc_filter_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_from_producer: Option[Base_Types.Bits] = pfc_project.PFC.Filter_proc_filter_Bridge.c_operational_api.get.getfrom_producer()\n      pfc_project.PFC.Filter_proc_filter_Bridge.c_initialization_api.get.sendto_consumer(Base_Types.Bits_empty())\n      pfc_project.PFC.Filter_proc_filter_Bridge.c_operational_api.get.sendto_consumer(Base_Types.Bits_empty())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/PFC\/Filter_proc_filter_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\n\n@ext object Filter_proc_filter_seL4Nix {\n  \/\/ returns T if seL4's from_producer port is empty, F otherwise \n  def from_producer_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's from_producer port \n  def from_producer_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's to_consumer port\n  def to_consumer_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/PFC\/Filter_proc_filter_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package pfc_project.PFC\n\nimport org.sireum._\nimport art._\n\nobject Filter_proc_filter_seL4Nix_Ext {\n  def from_producer_IsEmpty(): B = halt(\"stub\")\n\n  def from_producer_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def to_consumer_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/Filter_proc_filter\/Filter_proc_filter_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <Filter_proc_filter_adapter.h>\n\nUnit pfc_project_PFC_Filter_proc_filter_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_adapter.c\", \"\", \"pfc_project_PFC_Filter_proc_filter_adapter_initialiseArchitecture\", 0);\n\n  pfc_project_Filter_proc_filter_filter_initialiseArchitecture(SF_LAST);\n}\n\nUnit pfc_project_PFC_Filter_proc_filter_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_adapter.c\", \"\", \"pfc_project_PFC_Filter_proc_filter_adapter_initialiseEntryPoint\", 0);\n\n  pfc_project_Filter_proc_filter_filter_initialiseEntryPoint(SF_LAST);\n}\n\nUnit pfc_project_PFC_Filter_proc_filter_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_adapter.c\", \"\", \"pfc_project_PFC_Filter_proc_filter_adapter_computeEntryPoint\", 0);\n\n  pfc_project_Filter_proc_filter_filter_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints pfc_project_PFC_Filter_proc_filter_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_adapter.c\", \"\", \"pfc_project_PFC_Filter_proc_filter_adapter_entryPoints\", 0);\n\n  return pfc_project_Filter_proc_filter_filter_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/Filter_proc_filter\/Filter_proc_filter_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef FILTER_PROC_FILTER_ADAPTER_H\n#define FILTER_PROC_FILTER_ADAPTER_H\n\n#include <all.h>\n\nUnit pfc_project_PFC_Filter_proc_filter_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit pfc_project_PFC_Filter_proc_filter_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit pfc_project_PFC_Filter_proc_filter_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints pfc_project_PFC_Filter_proc_filter_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/bin\/settings_Filter_proc_filter.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(Filter_proc_filter\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/Consumer_proc_consumer\/consumer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.Consumer_proc_consumer\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport pfc_project._\nimport pfc_project.PFC.Consumer_proc_consumer_seL4Nix\n\nobject consumer extends App {\n\n  val consumerBridge : pfc_project.PFC.Consumer_proc_consumer_Bridge = {\n    val from_filter = Port[Base_Types.Bits] (id = 0, name = \"PFC_Sys_Impl_Instance_proc_consumer_from_filter\", mode = EventIn)\n\n    pfc_project.PFC.Consumer_proc_consumer_Bridge(\n      id = 0,\n      name = \"PFC_Sys_Impl_Instance_proc_consumer\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      from_filter = from_filter\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = consumerBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ from_filter: In EventDataPort Base_Types.Bits\n  val from_filter_id: Art.PortId = consumerBridge.from_filter.id\n  var from_filter_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == from_filter_id) {\n      return from_filter_port\n    } else {\n      halt(s\"Unexpected: consumer.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    from_filter_port = Consumer_proc_consumer_seL4Nix.from_filter_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    halt(s\"Unexpected: consumer.putValue called with: ${portId}\")\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = MSZ (consumerBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_empty()))\n      printDataContent(art.Empty())\n\n      pfc_project.PFC.Consumer_proc_consumer_Bridge.c_initialization_api.get.logInfo(\"\")\n      pfc_project.PFC.Consumer_proc_consumer_Bridge.c_initialization_api.get.logDebug(\"\")\n      pfc_project.PFC.Consumer_proc_consumer_Bridge.c_initialization_api.get.logError(\"\")\n      pfc_project.PFC.Consumer_proc_consumer_Bridge.c_operational_api.get.logInfo(\"\")\n      pfc_project.PFC.Consumer_proc_consumer_Bridge.c_operational_api.get.logDebug(\"\")\n      pfc_project.PFC.Consumer_proc_consumer_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_from_filter: Option[Base_Types.Bits] = pfc_project.PFC.Consumer_proc_consumer_Bridge.c_operational_api.get.getfrom_filter()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/PFC\/Consumer_proc_consumer_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.PFC\n\nimport org.sireum._\nimport art._\n\n@ext object Consumer_proc_consumer_seL4Nix {\n  \/\/ returns T if seL4's from_filter port is empty, F otherwise \n  def from_filter_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's from_filter port \n  def from_filter_Receive(): Option[DataContent] = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/PFC\/Consumer_proc_consumer_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package pfc_project.PFC\n\nimport org.sireum._\nimport art._\n\nobject Consumer_proc_consumer_seL4Nix_Ext {\n  def from_filter_IsEmpty(): B = halt(\"stub\")\n\n  def from_filter_Receive(): Option[DataContent] = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/Consumer_proc_consumer\/Consumer_proc_consumer_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <Consumer_proc_consumer_adapter.h>\n\nUnit pfc_project_PFC_Consumer_proc_consumer_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_adapter.c\", \"\", \"pfc_project_PFC_Consumer_proc_consumer_adapter_initialiseArchitecture\", 0);\n\n  pfc_project_Consumer_proc_consumer_consumer_initialiseArchitecture(SF_LAST);\n}\n\nUnit pfc_project_PFC_Consumer_proc_consumer_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_adapter.c\", \"\", \"pfc_project_PFC_Consumer_proc_consumer_adapter_initialiseEntryPoint\", 0);\n\n  pfc_project_Consumer_proc_consumer_consumer_initialiseEntryPoint(SF_LAST);\n}\n\nUnit pfc_project_PFC_Consumer_proc_consumer_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_adapter.c\", \"\", \"pfc_project_PFC_Consumer_proc_consumer_adapter_computeEntryPoint\", 0);\n\n  pfc_project_Consumer_proc_consumer_consumer_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints pfc_project_PFC_Consumer_proc_consumer_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_adapter.c\", \"\", \"pfc_project_PFC_Consumer_proc_consumer_adapter_entryPoints\", 0);\n\n  return pfc_project_Consumer_proc_consumer_consumer_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/c\/ext-c\/adapters\/Consumer_proc_consumer\/Consumer_proc_consumer_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CONSUMER_PROC_CONSUMER_ADAPTER_H\n#define CONSUMER_PROC_CONSUMER_ADAPTER_H\n\n#include <all.h>\n\nUnit pfc_project_PFC_Consumer_proc_consumer_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit pfc_project_PFC_Consumer_proc_consumer_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit pfc_project_PFC_Consumer_proc_consumer_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints pfc_project_PFC_Consumer_proc_consumer_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/bin\/settings_Consumer_proc_consumer.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(Consumer_proc_consumer\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/seL4Nix\/pfc_project\/SlangTypeLibrary\/SlangTypeLibrary.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage pfc_project.SlangTypeLibrary\n\nimport org.sireum._\nimport art._\nimport pfc_project._\n\nobject SlangTypeLibrary extends App {\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_empty()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/bin\/settings_SlangTypeLibrary.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(SlangTypeLibrary\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/bin\/transpile-sel4.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\n\nif [ -z \"${SIREUM_HOME}\" ]; then\n  echo \"SIREUM_HOME not set. Refer to https:\/\/github.com\/sireum\/kekinian\/#installing\"\n  exit 1\nfi\n\nSCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\n\nPATH_SEP=\":\"\nif [ -n \"$COMSPEC\" -a -x \"$COMSPEC\" ]; then\n  PATH_SEP=\";\"\nfi\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/Producer_proc_producer\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/pfc_project\/PFC${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/pfc_project\/Producer_proc_producer\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"Producer_proc_producer\" \\\n  --apps \"pfc_project.Producer_proc_producer.producer\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 1 \\\n  --sequence \"MS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=1;IS[Z,art.UConnection]=1;IS[Z,B]=288\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=1\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_Producer_proc_producer.cmake\" \\\n  --forward \"art.ArtNative=pfc_project.Producer_proc_producer.producer\" \\\n  --stack-size \"61440\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/Producer_proc_producer\/Producer_proc_producer_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/Producer_proc_producer\/Producer_proc_producer_adapter.c\" \\\n  --lib-only \\\n  --verbose\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/Filter_proc_filter\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/pfc_project\/PFC${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/pfc_project\/Filter_proc_filter\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"Filter_proc_filter\" \\\n  --apps \"pfc_project.Filter_proc_filter.filter\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 2 \\\n  --sequence \"MS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=2;IS[Z,art.UConnection]=1;IS[Z,B]=288\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=2\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_Filter_proc_filter.cmake\" \\\n  --forward \"art.ArtNative=pfc_project.Filter_proc_filter.filter\" \\\n  --stack-size \"61440\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/Filter_proc_filter\/Filter_proc_filter_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/Filter_proc_filter\/Filter_proc_filter_adapter.c\" \\\n  --lib-only \\\n  --verbose\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/Consumer_proc_consumer\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/pfc_project\/PFC${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/pfc_project\/Consumer_proc_consumer\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"Consumer_proc_consumer\" \\\n  --apps \"pfc_project.Consumer_proc_consumer.consumer\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 1 \\\n  --sequence \"MS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=1;IS[Z,art.UConnection]=1;IS[Z,B]=288\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=1\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_Consumer_proc_consumer.cmake\" \\\n  --forward \"art.ArtNative=pfc_project.Consumer_proc_consumer.consumer\" \\\n  --stack-size \"61440\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/Consumer_proc_consumer\/Consumer_proc_consumer_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapters\/Consumer_proc_consumer\/Consumer_proc_consumer_adapter.c\" \\\n  --lib-only \\\n  --verbose\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/SlangTypeLibrary\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/pfc_project\/SlangTypeLibrary\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"SlangTypeLibrary\" \\\n  --apps \"pfc_project.SlangTypeLibrary.SlangTypeLibrary\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 1 \\\n  --sequence \"IS[Z,B]=288\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_SlangTypeLibrary.cmake\" \\\n  --forward \"art.ArtNative=pfc_project.SlangTypeLibrary.SlangTypeLibrary\" \\\n  --stack-size \"16777216\" \\\n  --stable-type-id \\\n  --lib-only \\\n  --verbose",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/ArtTimer_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum.{B, F, ISZ, String, T}\nimport art.Art.{BridgeId, Time}\n\nimport scala.collection.mutable.{Map => MMap}\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.util.concurrent.Executors\nimport java.util.concurrent.TimeUnit\n\nobject ArtTimer_Ext {\n\n  val m: MMap[String, AtomicBoolean] = ArtNative_Ext.concMap()\n  val executor = Executors.newSingleThreadScheduledExecutor()\n\n  def finalise(): Unit = {\n    executor.shutdownNow()\n    ArtNative.logInfo(Art.logTitle, \"Finalized ArtTimer\")\n  }\n\n  def clearTimeout(eventId: String): Unit = {\n    m.get(eventId) match {\n      case Some(b) =>\n        b.set(false)\n        m.remove(eventId)\n        ArtNative.logInfo(Art.logTitle, s\"timeout cleared for $eventId\")\n      case _ =>\n    }\n  }\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = {\n    if(m.get(eventId).nonEmpty) {\n      art.Art.logError(bridgeId, s\"callback already set for $eventId\")\n      return\n    }\n\n    if(wait < 0) {\n      art.Art.logError(bridgeId, s\"Invalid wait time: ${wait}.  Value must be non-negative.\")\n      return\n    }\n\n    var b = new AtomicBoolean(true)\n\n    val bridge = Art.bridge(bridgeId)\n    val eventOuts = bridge.ports.eventOuts.map(_.id)\n    val dataOuts = bridge.ports.dataOuts.map(_.id)\n\n    val task = new Runnable {\n      override def run(): Unit = {\n        if (b.get()) {\n          bridge.synchronized {\n            callback()\n            Art.sendOutput(eventOuts, dataOuts)\n            if(autoClear) {\n              clearTimeout(eventId)\n            }\n          }\n        }\n      }\n    }\n\n    m.put(eventId, b)\n\n    val adjusted = wait.toMP.toLong * ArtNative_Ext.slowdown.toMP.toLong\n    executor.schedule(task, adjusted, TimeUnit.MILLISECONDS)\n\n    art.Art.logInfo(bridgeId, s\"callback set for $eventId\")\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/ArchitectureDescription.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n\n@record class ArchitectureDescription(components: MSZ[Bridge],\n                                      connections: ISZ[UConnection]) {\n  @spec val allPorts: ISZ[UPort] = $\n\n  @spec def allPortsSpec(i: Z): ISZ[UPort] = $\n  \/*\n    l\"\"\"\n    = base:  ISZ[UPort](), if i == 0\n    = rec:   components(i).ports.all ++ allPorts(i - 1), if 0 < i \u2227 i < components.size\n  \"\"\"\n\n  l\"\"\" invariant\n\n         AllPorts:\n           allPorts \u2261 allPortsSpec(components.size - 1)\n\n         ComponentIdUnique:\n           \u2200i: [0, components.size)\n             \u2200j: [0, components.size)\n               i \u2260 j \u2192 components(i).id \u2260 components(j).id\n\n         PortIdUnique:\n           \u2200i: [0, allPorts.size)\n             \u2200j: [0, allPorts.size)\n               i \u2260 j \u2192 allPorts(i).id \u2260 allPorts(j).id\n   \"\"\"\n  *\/\n}\n\n@datatype trait UConnection {\n  \/*\n  l\"\"\" invariant\n         FromPortOut:   from.mode \u2261 PortMode.DataOut \u2228 from.mode \u2261 PortMode.EventOut\n         DataPort:    (from.mode \u2261 PortMode.DataOut) \u2261 (to.mode \u2261 PortMode.DataIn)\n         EventPort:  (from.mode \u2261 PortMode.EventOut) \u2261 (to.mode \u2261 PortMode.EventIn)  \"\"\"\n  *\/\n\n  def from: UPort\n\n  def to: UPort\n}\n\n@datatype class Connection(val from: UPort, val to: UPort)\n  extends UConnection\n\n\n@enum object PortMode {\n  'DataIn\n  'DataOut\n  'EventIn\n  'EventOut\n}\n\n@datatype trait UPort {\n  def id: Art.PortId\n\n  def name: String\n\n  def mode: PortMode.Type\n}\n\n@datatype class Port[T](val id: Art.PortId,\n                        val name: String,\n                        val mode: PortMode.Type)\n  extends UPort\n\n@datatype class UrgentPort[T](val id: Art.PortId,\n                              val name: String,\n                              val mode: PortMode.Type,\n                              val urgency: Z)\n  extends UPort\n\n@msig trait Bridge {\n  def id: Art.BridgeId\n\n  def name: String\n\n  def ports: Bridge.Ports\n\n  def entryPoints: Bridge.EntryPoints\n\n  def dispatchProtocol: DispatchPropertyProtocol\n}\n\n\nobject Bridge {\n\n  \/\/ initialise()  ( compute() | activate() deactivate() | recover() )* finalise()\n  @msig trait EntryPoints {\n\n    def initialise(): Unit\n\n    def activate(): Unit\n\n    def deactivate(): Unit\n\n    def compute(): Unit\n\n    def recover(): Unit\n\n    def finalise(): Unit\n\n    def testCompute(): Unit = { println(\"Default testCompute\") }\n  }\n\n  @datatype class Ports(all: ISZ[UPort],\n                        dataIns: ISZ[UPort],\n                        dataOuts: ISZ[UPort],\n                        eventIns: ISZ[UPort],\n                        eventOuts: ISZ[UPort])\n\n}\n\n\n@datatype trait DispatchPropertyProtocol\n\nobject DispatchPropertyProtocol {\n\n  @datatype class Periodic(period: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Aperiodic() extends DispatchPropertyProtocol\n\n  @datatype class Sporadic(min: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Timed() extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Hybrid() extends DispatchPropertyProtocol\n}\n\n@datatype trait DispatchStatus\n\n@datatype class TimeTriggered() extends DispatchStatus\n\n@datatype class EventTriggered(portIds: ISZ[Art.PortId]) extends DispatchStatus",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/Art.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\nobject Art {\n  type PortId = Z\n  type BridgeId = Z\n  type Time = Z\n\n  val z16max: PortId = org.sireum.conversions.Z16.toZ(Z16.Max) \/\/ 32,767\n\n  val maxComponents: BridgeId = 3\n  val maxPorts: PortId = 4\n\n  val logTitle: String = \"Art\"\n  val bridges: MS[BridgeId, MOption[Bridge]] = MS.create[BridgeId, MOption[Bridge]](maxComponents, MNone[Bridge]())\n  val connections: MS[PortId, ISZ[PortId]] = MS.create[PortId, ISZ[PortId]](maxPorts, ISZ())\n  val ports: MS[PortId, Option[UPort]] = MS.create[PortId, Option[UPort]](maxPorts, None[UPort]())\n\n  def bridge(bridgeId: BridgeId): Bridge = {\n    val MSome(r) = bridges(bridgeId)\n    return r\n  }\n\n  def port(p: PortId) : UPort = {\n    val Some(r) = ports(p)\n    return r\n  }\n\n  def register(bridge: Bridge): Unit = {\n    bridges(bridge.id) = MSome(bridge)\n    bridge.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (periodic: $period)\")\n      case DispatchPropertyProtocol.Sporadic(min) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (sporadic: $min)\")\n    }\n    for (port <- bridge.ports.all) {\n      ports(port.id) = Some(port)\n      port.mode match {\n        case PortMode.DataIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data in)\")\n        case PortMode.DataOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data out)\")\n        case PortMode.EventIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event in)\")\n        case PortMode.EventOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event out)\")\n      }\n    }\n  }\n\n  \/\/ can't find definition in the standard ??\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = { \/\/ DISPATCH_STATUS\n    return ArtNative.dispatchStatus(bridgeId)\n  }\n\n  def receiveInput(eventPortIds: ISZ[PortId], dataPortIds: ISZ[PortId]): Unit = { \/\/ RECEIVE_INPUT\n    ArtNative.receiveInput(eventPortIds, dataPortIds)\n  }\n\n  def putValue(portId: PortId, data: DataContent): Unit = { \/\/ PUT_VALUE\n    ArtNative.putValue(portId, data)\n  }\n\n  def getValue(portId: PortId): Option[DataContent] = { \/\/ GET_VALUE\n    return ArtNative.getValue(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    ArtNative.sendOutput(eventPortIds, dataPortIds)\n  }\n\n  def logInfo(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logInfo(bridge(bridgeId).name, msg)\n  }\n\n  def logError(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logError(bridge(bridgeId).name, msg)\n  }\n\n  def logDebug(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logDebug(bridge(bridgeId).name, msg)\n  }\n\n  def connect(from: UPort, to: UPort): Unit = {\n    connections(from.id) = connections(from.id) :+ to.id\n    ArtNative.logInfo(logTitle, s\"Connected ports: ${from.name} -> ${to.name}\")\n  }\n\n  def run(system: ArchitectureDescription): Unit = {\n\n    for (component <- system.components) {\n      register(component)\n    }\n\n    for (connection <- system.connections) {\n      connect(connection.from, connection.to)\n    }\n\n    ArtNative.run()\n  }\n\n  def time(): Time = {\n    return ArtNative.time()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Clears any existing ports and bridges, then sets up ports\/bridges for the next test.\n   *\n   * Automatically called by BridgeTestSuite before each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = MNone()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n\n    \/\/ register bridge passed to this method\n    register(bridge)\n\n    \/\/ let ArtNative reset itself as well\n    ArtNative.initTest(bridge)\n  }\n\n  def executeTest(bridge: Bridge): Unit = {\n    ArtNative.executeTest(bridge)\n  }\n\n  def finalizeTest(bridge: Bridge): Unit = {\n    ArtNative.finalizeTest(bridge)\n  }\n\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    ArtNative.releaseOutput(eventPortIds, dataPortIds)\n  }\n\n  def manuallyClearOutput(): Unit = {\n    ArtNative.manuallyClearOutput()\n  }\n\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    ArtNative.insertInPortValue(dstPortId, data)\n  }\n\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    ArtNative.observeOutPortValue(portId)\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/ArtNative_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\n\nimport java.util.concurrent.CountDownLatch\nimport java.util.concurrent.atomic.AtomicBoolean\n\n\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtMessage {\n  val UNSET: Z = -1\n}\n\ncase class ArtMessage (data: DataContent,\n\n                       var srcPortId: Art.PortId = ArtMessage.UNSET,\n                       var dstPortId: Art.PortId = ArtMessage.UNSET,\n\n                       \/\/ when putValue was called by producer\n                       var putValueTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when sendOutput transferred message from out port var of producer \n                       var sendOutputTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when message arrived via transport layer\n                       var dstArrivalTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when receiveInput transferred message to in port vars of consumer\n                       var receiveInputTimestamp: Z = ArtMessage.UNSET\n                      )\n\nobject ArtNative_Ext {\n  val noTime: Art.Time = 0\n\n  val slowdown: Z = 1\n\n  val lastSporadic: MMap[Art.BridgeId, Art.Time] = concMap()\n  val eventPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val dataPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val receivedPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n  val sentPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val portIds = ISZ[Art.PortId](Art.bridge(bridgeId).ports.eventIns.elements.map(_.id).filter(eventPortVariables.get(_).nonEmpty): _*)\n    if (portIds.isEmpty) {\n      TimeTriggered()\n    } else {\n      val urgentFifo = ops.ISZOps(portIds.map(Art.port(_))).sortWith { \/\/ reverse sort\n        case (p1: UrgentPort[_], p2: UrgentPort[_]) =>\n          if(p1.urgency < p2.urgency) F\n          else if(p1.urgency > p2.urgency) T\n          else eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n        case (_: UrgentPort[_], _: Port[_]) => T \/\/ urgent ports take precedence\n        case (_: Port[_], _: UrgentPort[_]) => F \/\/ urgent ports take precedence\n        case (p1: Port[_], p2: Port[_]) =>\n          eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n      }.map(_.id)\n      EventTriggered(urgentFifo)\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (portId <- eventPortIds) {\n      receivedPortValues -= portId \/\/ remove stale events from previous dispatch\n      eventPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          eventPortVariables -= portId\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      dataPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    sentPortValues(portId) = ArtMessage(data = data, srcPortId = portId, putValueTimestamp = Art.time())\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    val data = receivedPortValues.get(portId) match {\n      case scala.Some(v) => org.sireum.Some(v.data)\n      case _ => org.sireum.None[DataContent]()\n    }\n    return data\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      sentPortValues.get(srcPortId) match {\n        case scala.Some(msg) =>\n          \/\/ todo send on emission as well as receive\n          for(dstPortId <- Art.connections(srcPortId).elements) {\n\n            \/\/ simulate sending msg via transport middleware\n\n            val _msg = msg.copy(dstPortId = dstPortId, sendOutputTimestamp = Art.time())\n\n            Art.port(dstPortId).mode match {\n              case PortMode.DataIn | PortMode.DataOut =>\n                dataPortVariables(dstPortId) = _msg\n              case PortMode.EventIn | PortMode.EventOut =>\n                eventPortVariables(dstPortId) = _msg\n            }\n\n            _msg.dstArrivalTimestamp = Art.time()\n\n            ArtDebug_Ext.outputCallback(srcPortId, dstPortId, _msg.data, _msg.dstArrivalTimestamp)\n          }\n          sentPortValues -= srcPortId\n        case _ =>\n      }\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = log(\"info\", title, msg)\n\n  def logError(title: String, msg: String): Unit = log(\"error\", title, msg)\n\n  def logDebug(title: String, msg: String): Unit = log(\"debug\", title, msg)\n\n  def time(): Art.Time = toZ(System.currentTimeMillis())\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    val b = Art.bridge(bridgeId)\n    b.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        val ls = lastSporadic.getOrElse(bridgeId, noTime)\n        if (time() - ls < minRate) {\n          return F\n        } else {\n          return b.ports.eventIns.elements.exists(port => eventPortVariables.contains(port.id))\n        }\n    }\n  }\n\n  def run(): Unit = {\n    \/\/require(Art.bridges.elements.forall(_.nonEmpty))\n\n    val bridges = {\n      var r = Vector[Bridge]()\n      for (e <- Art.bridges.elements) e match {\n        case MSome(b) => r :+= b\n        case _ =>\n      }\n      r\n    }\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n    }\n\n    val terminated = new AtomicBoolean()\n    val numTerminated = new CountDownLatch(bridges.size)\n\n    for (bridge <- bridges) {\n      val rate = bridge.dispatchProtocol match {\n        case DispatchPropertyProtocol.Periodic(period) => period\n        case DispatchPropertyProtocol.Sporadic(min) => min\n      }\n\n      new Thread(() => {\n        logInfo(Art.logTitle, s\"Thread for ${bridge.name} instantiated.\")\n        ArtNative_Ext.synchronized {\n          ArtNative_Ext.wait()\n        }\n        while (!terminated.get()) {\n          Thread.sleep((rate * slowdown).toMP.toLong)\n          if (shouldDispatch(bridge.id))\n            try {\n              bridge.synchronized {\n                bridge.entryPoints.compute()\n              }\n            }\n            catch {\n              case x : Throwable =>\n                x.printStackTrace()\n                terminated.set(true)\n            }\n        }\n        numTerminated.countDown()\n      }).start()\n    }\n\n    Thread.sleep(1000)\n\n    logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    ArtDebug_Ext.start()\n\n    ArtNative_Ext.synchronized {\n      ArtNative_Ext.notifyAll()\n    }\n\n    Console.in.readLine()\n    terminated.set(true)\n    numTerminated.await()\n    logInfo(Art.logTitle, s\"End execution...\")\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n    }\n\n    ArtTimer_Ext.finalise()\n    ArtDebug_Ext.stop()\n  }\n\n  def log(kind: String, title: String, msg: String): Unit = {\n    Console.out.println(s\"\"\"{ \"log\" : \"$kind\", \"title\" : ${escape(title)}, \"msg\" : ${escape(msg)}, \"time\" : \"${time()}\" }\"\"\")\n    Console.out.flush()\n  }\n\n  def escape(raw: String): String = {\n    import scala.reflect.runtime.universe._\n    Literal(Constant(raw.value)).toString\n  }\n\n  def toZ(value: Long): Z = Z(value)\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n\n\n\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges AND resets all inputs and outputs for all ports.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ note that all ports and bridges were deleted by Art's initTest\n\n    \/\/ delete ALL port values as well as lastSporadic tracker\n    lastSporadic.clear()\n    eventPortVariables.clear()\n    dataPortVariables.clear()\n    receivedPortValues.clear()\n    sentPortValues.clear()\n\n    \/\/ clear pending ArtTimer events (also done after a test completes)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n\n    bridge.entryPoints.initialise()\n    logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n  }\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.testCompute()\n  }\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.finalise()\n    logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n\n    \/\/ clear pending ArtTimer events (also done before a test begins)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n  }\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ testing SEND_OUTPUT\n    \/\/ note: sendOutput is usually accessed via: Art.sendOutput -> ArtNative.sendOutput -> ArtNative_Ext.sendOutput\n    \/\/ NO OP\n  }\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = {\n    sentPortValues.clear()\n  }\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    val artMessage = ArtMessage(data = data, dstPortId = dstPortId, dstArrivalTimestamp = Art.time())\n    Art.port(dstPortId).mode match {\n      case PortMode.DataIn | PortMode.DataOut =>\n        dataPortVariables(dstPortId) = artMessage\n      case PortMode.EventIn | PortMode.EventOut =>\n        eventPortVariables(dstPortId) = artMessage\n    }\n  }\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    sentPortValues.get(portId) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/DataContent.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait DataContent\n\n@datatype class Empty extends art.DataContent",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/ArtTimer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.Art.BridgeId\n\n@ext object ArtTimer {\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = $\n\n  def clearTimeout(eventId: String): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/ArtDebug.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtDebug {\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = $\n\n  def registerListener(listener: ArtListener): Unit = $\n\n  def setDebugObject[T](key: String, o: T): Unit = $\n\n  def getDebugObject[T](key: String): Option[T] = $\n}\n\n@msig trait ArtListener {\n\n  \/\/ lifecycle information\n  def start(time: Art.Time): Unit\n  def stop(time: Art.Time): Unit\n\n  \/\/ communication information\n  def output(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Art.Time): Unit\n\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/ArtDebug_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.Art.Time\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtDebug_Ext {\n  private val debugObjects: MMap[String, Any] = ArtNative_Ext.concMap()\n  private val listeners: MSet[ArtListener] = concSet()\n\n  protected[art] def start(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.start(time))\n  }\n\n  protected[art] def stop(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.stop(time))\n  }\n\n  protected[art] def outputCallback(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Time): Unit = {\n    listeners.foreach((listener: ArtListener) => listener.output(src, dst, data, time))\n  }\n\n  def setDebugObject[T](key: String, o: T): Unit = {\n    ArtNative.logDebug(Art.logTitle, s\"Set debug object for $key\")\n    debugObjects(key) = o\n  }\n\n  def getDebugObject[T](key: String): Option[T] = {\n    debugObjects.get(key) match {\n      case scala.Some(o) => Some(o.asInstanceOf[T])\n      case _ => None[T]()\n    }\n  }\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = {\n    assert(z\"0\" <= bridgeId && bridgeId < Art.maxComponents && Art.bridges(bridgeId).nonEmpty)\n\n    val bridge = Art.bridges(bridgeId).get\n    assert(bridge.ports.all.elements.map(_.id).contains(port))\n\n    if(bridge.ports.dataOuts.elements.map(_.id).contains(port) ||\n      bridge.ports.eventOuts.elements.map(_.id).contains(port)) {\n\n      ArtNative.logDebug(Art.logTitle, s\"Injecting from port ${Art.ports(port).get.name}\")\n\n      ArtNative.putValue(port, data)\n      ArtNative.sendOutput(bridge.ports.eventOuts.map(_.id), bridge.ports.dataOuts.map(_.id))\n    } else {\n      ArtNative.logDebug(Art.logTitle, s\"Injecting to port ${Art.ports(port).get.name}\")\n\n      if(bridge.ports.dataIns.elements.map(_.id).contains(port)) {\n        ArtNative_Ext.dataPortVariables(port) = ArtMessage(data)\n      } else {\n        ArtNative_Ext.eventPortVariables(port) = ArtMessage(data)\n      }\n    }\n  }\n\n  def registerListener(listener: ArtListener): Unit = {\n    listeners.add(listener)\n  }\n\n  def concSet[K](): MSet[K] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    val m: java.util.Set[K] = java.util.concurrent.ConcurrentHashMap.newKeySet()\n    m.asScala\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/src\/main\/art\/ArtNative.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtNative {\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = $\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = $\n\n  def getValue(portId: Art.PortId): Option[DataContent] = $\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def logInfo(title: String, msg: String): Unit = $\n\n  def logError(title: String, msg: String): Unit = $\n\n  def logDebug(title: String, msg: String): Unit = $\n\n  def run(): Unit = $\n\n  def time(): Art.Time = $\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = $\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = $\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = $\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/build.sc",
        {
          "type" : "TestResource",
          "content" : "import mill._\nimport scalalib._\n\n\/\/ Example Mill build -- the contents of this file will not be overwritten\n\/\/\n\/\/ To open the following project in VSCode, first follow Sireum Kekinian's\n\/\/ instructions for setting up a development environment using Scala Metals:\n\/\/\n\/\/   https:\/\/github.com\/sireum\/kekinian#scala-metals\n\/\/\n\/\/ Then open the folder containing this file in VSCode and import the\n\/\/ mill build when asked.\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   mill pfc_project.run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   mill pfc_project.test\n\ntrait SlangEmbeddedModule extends ScalaModule {\n  val scalaVer = \"2.13.3\"\n\n  val sireumScalacVersion = \"4.20200915.f4b7b0e\" \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20200915.f4b7b0e\n\n  val kekinianVersion = \"4.20200915.72510af\" \/\/ https:\/\/github.com\/sireum\/kekinian\/tree\/4.20200915.72510af\n\n  val scalaTestVersion = \"3.2.2\"\n\n\n  def scalaVersion = scalaVer\n\n  override def javacOptions = T { Seq(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"utf8\") }\n\n  override def scalacOptions = T { Seq(\n    \"-target:jvm-1.8\",\n    \"-deprecation\",\n    \"-Yrangepos\",\n    \"-Ydelambdafy:method\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Xfatal-warnings\",\n    \"-language:postfixOps\"\n  ) }\n\n  override def ivyDeps = Agg(ivy\"org.sireum.kekinian::library::${kekinianVersion}\")\n\n  override def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin::${sireumScalacVersion}\")\n\n  override def repositories = super.repositories ++ Seq(\n    coursier.maven.MavenRepository(\"https:\/\/jitpack.io\/\"),\n  )\n}\n\ntrait AadlModule extends SlangEmbeddedModule {\n  override def sources = T.sources (\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"architecture\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"art\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"bridge\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"component\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"data\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"nix\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"seL4Nix\"\n  )\n}\n\ntrait AadlTestModule extends AadlModule {\n  object test extends Tests {\n\n    final override def millSourcePath =\n      super.millSourcePath \/ os.up \/ os.up \/ \"src\" \/ \"test\"\n\n    override def sources = T.sources(millSourcePath \/ \"bridge\")\n\n    override def ivyDeps = Agg(ivy\"org.scalatest::scalatest::${scalaTestVersion}\")\n\n    override def testFrameworks = T { Seq(\"org.scalatest.tools.Framework\") }\n  }\n}\n\nobject `pfc_project` extends AadlTestModule {\n  override def mainClass = T { Some(\"pfc_project.Demo\") }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/build.sbt",
        {
          "type" : "TestResource",
          "content" : "\/\/ Example sbt build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ To open the following project in Sireum IVE select 'File > Open ...' and\n\/\/ navigate to the directory containing this file then click 'OK'.  To install\n\/\/ Sireum IVE see https:\/\/github.com\/sireum\/kekinian#installing\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   sbt run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   sbt test\n\/\/\n\/\/ To build a runnable\/executable jar:\n\/\/   sbt assembly\n\/\/\n\/\/ To skip running the unit tests while building the executable jar:\n\/\/   sbt 'set test in assembly := {}' assembly\n\/\/ on Linux\/Mac, or\n\/\/   sbt \"set test in assembly := {}\" assembly\n\/\/ on Windows\n\/\/\n\/\/ sbt can be obtained from https:\/\/www.scala-sbt.org\/download.html\n\nlazy val PFC_Sys_Impl_Instance = slangEmbeddedTestProject(\"PFC_Sys_Impl_Instance\", \".\")\n\n\nval scalaVer = \"2.13.3\"\n\nval sireumScalacVersion = \"4.20200915.f4b7b0e\" \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20200915.f4b7b0e\n\nval kekinianVersion = \"4.20200915.72510af\" \/\/ https:\/\/github.com\/sireum\/kekinian\/tree\/4.20200915.72510af\n\nval scalaTestVersion = \"3.2.2\"\n\n\nval commonSettings = Seq(\n  organization := \"org.sireum\",\n  incOptions := incOptions.value.withLogRecompileOnMacro(false),\n  scalaVersion := scalaVer,\n  scalacOptions := Seq(\"-target:jvm-1.8\", \"-deprecation\",\n    \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-Xfatal-warnings\"),\n  Test \/ parallelExecution := true,\n  resolvers ++= Seq(Resolver.sonatypeRepo(\"public\"), \"jitpack\" at \"https:\/\/jitpack.io\"),\n  addCompilerPlugin(\"org.sireum\" %% \"scalac-plugin\" % sireumScalacVersion),\n  libraryDependencies ++= Seq(\n    \"org.sireum.kekinian\" %% \"library\" % kekinianVersion withSources() withJavadoc()\n  )\n)\n\nimport sbtassembly.AssemblyPlugin.defaultUniversalScript\nval slangEmbeddedSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/art\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/architecture\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/bridge\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/component\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/data\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/seL4Nix\",\n\n  mainClass in (Compile, run) := Some(\"pfc_project.Demo\"),\n\n  mainClass in assembly := Some(\"pfc_project.Demo\"),\n  assemblyJarName in assembly := \"PFC_Sys_Impl_Instance.jar\",\n  assemblyOption in assembly := (assemblyOption in assembly).value.copy(prependShellScript = Some(defaultUniversalScript(shebang = false))),\n\n  assemblyMergeStrategy in assembly := {\n    case PathList(\"META-INF\", xs @ _*) => MergeStrategy.discard\n    case x => MergeStrategy.first\n  }\n)\n\ndef standardProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).settings(commonSettings)\n\ndef slangEmbeddedProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings)\n\ndef slangEmbeddedTestProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings ++\n      Seq(\n        Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/bridge\",\n        libraryDependencies += \"org.scalatest\" %% \"scalatest\" % scalaTestVersion % \"test\")\n    )\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/project\/build.properties",
        {
          "type" : "TestResource",
          "content" : "sbt.version=1.3.3\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/slang-embedded\/project\/plugins.sbt",
        {
          "type" : "TestResource",
          "content" : "addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.15.0\")\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Producer_proc_producer\/Producer_proc_producer.camkes",
        {
          "type" : "TestResource",
          "content" : "import <std_connector.camkes>;\ncomponent Producer_proc_producer {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_to_filter_1_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_to_filter_queue_1;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Filter_proc_filter\/Filter_proc_filter.camkes",
        {
          "type" : "TestResource",
          "content" : "import <std_connector.camkes>;\ncomponent Filter_proc_filter {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_to_consumer_1_notification;\n  consumes ReceiveEvent sb_from_producer_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_from_producer_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_to_consumer_queue_1;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Consumer_proc_consumer\/Consumer_proc_consumer.camkes",
        {
          "type" : "TestResource",
          "content" : "import <std_connector.camkes>;\ncomponent Consumer_proc_consumer {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  consumes ReceiveEvent sb_from_filter_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sb_queue_union_art_DataContent_1_t sb_from_filter_queue;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/dispatch_periodic\/dispatch_periodic.camkes",
        {
          "type" : "TestResource",
          "content" : "import <global-connectors.camkes>;\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_proc_producer_periodic_dispatch_notification;\n  emits Notification sb_proc_filter_periodic_dispatch_notification;\n  emits Notification sb_proc_consumer_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/PFC_Sys_Impl_Instance.camkes",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/Producer_proc_producer\/Producer_proc_producer.camkes\";\nimport \"components\/Filter_proc_filter\/Filter_proc_filter.camkes\";\nimport \"components\/Consumer_proc_consumer\/Consumer_proc_consumer.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component Producer_proc_producer proc_producer;\n    component Filter_proc_filter proc_filter;\n    component Consumer_proc_consumer proc_consumer;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4Notification conn1(from proc_producer.sb_to_filter_1_notification, to proc_filter.sb_from_producer_notification);\n    connection seL4SharedData conn2(from proc_producer.sb_to_filter_queue_1, to proc_filter.sb_from_producer_queue);\n    connection seL4Notification conn3(from proc_filter.sb_to_consumer_1_notification, to proc_consumer.sb_from_filter_notification);\n    connection seL4SharedData conn4(from proc_filter.sb_to_consumer_queue_1, to proc_consumer.sb_from_filter_queue);\n    connection seL4Notification conn5(from dispatch_periodic_inst.sb_proc_producer_periodic_dispatch_notification, to proc_producer.sb_periodic_dispatch_notification);\n    connection seL4Notification conn6(from dispatch_periodic_inst.sb_proc_filter_periodic_dispatch_notification, to proc_filter.sb_periodic_dispatch_notification);\n    connection seL4Notification conn7(from dispatch_periodic_inst.sb_proc_consumer_periodic_dispatch_notification, to proc_consumer.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn8(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn9(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    proc_producer._stack_size = 61440;\n    proc_filter._stack_size = 61440;\n    proc_consumer._stack_size = 61440;\n    conn2.size = 4096;\n    proc_producer.sb_to_filter_queue_1_access = \"W\";\n    proc_filter.sb_from_producer_queue_access = \"R\";\n    conn4.size = 4096;\n    proc_filter.sb_to_consumer_queue_1_access = \"W\";\n    proc_consumer.sb_from_filter_queue_access = \"R\";\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/CMake_TranspilerOptions.cmake",
        {
          "type" : "TestResource",
          "content" : "option(BOUND_CHECK\n       \"Build the program with sequence bound checking.\"\n       OFF)\n\nif(BOUND_CHECK OR \"$ENV{BOUND_CHECK}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_BOUND_CHECK)\nendif()\n\noption(NO_PRINT\n       \"Build the program without console output.\"\n       OFF)\n\nif(NO_PRINT OR \"$ENV{NO_PRINT}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_NO_PRINT)\nendif()\n\noption(RANGE_CHECK\n       \"Build the program with range checking.\"\n       OFF)\n\nif(RANGE_CHECK OR \"$ENV{RANGE_CHECK}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_RANGE_CHECK)\nendif()\n\noption(WITH_LOC\n       \"Build the program with Slang location info.\"\n       OFF)\n\nif(WITH_LOC OR \"$ENV{WITH_LOC}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_LOC)\nendif()",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (PFC_Sys_Impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_TranspilerOptions.cmake)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nincludeGlobalComponents()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/Producer_proc_producer)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/Filter_proc_filter)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/Consumer_proc_consumer)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/SlangTypeLibrary)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(Producer_proc_producer\n  SOURCES components\/Producer_proc_producer\/src\/sb_Producer.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/Producer_proc_producer\/includes\/ types\/includes\n  LIBS Producer_proc_producer\n)\n\nDeclareCAmkESComponent(Filter_proc_filter\n  SOURCES components\/Filter_proc_filter\/src\/sb_Filter.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/Filter_proc_filter\/includes\/ types\/includes\n  LIBS Filter_proc_filter\n)\n\nDeclareCAmkESComponent(Consumer_proc_consumer\n  SOURCES components\/Consumer_proc_consumer\/src\/sb_Consumer.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/Consumer_proc_consumer\/includes\/ types\/includes\n  LIBS Consumer_proc_consumer\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  LIBS SB_Type_Library SlangTypeLibrary\n)\n\nDeclareCAmkESRootserver(PFC_Sys_Impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/bin\/run-camkes.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o noclobber -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:s\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"  -c, --camkes-dir      Location of CAmkES project\"\n  echo \"  -n, --non-interactive Non-interactive mode.  Will not prompt before deleting apps and build directories\"\n  echo \"  -o, --camkes-options  CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"  -s, --simulate        Simulate via QEMU\"\n  exit 2\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    rm -rf ${BUILD_DIR}\n    mkdir ${BUILD_DIR}\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\nif [ \"${SIMULATE}\" = true ]; then\n  .\/simulate\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Producer_proc_producer\/src\/sb_Producer.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_Producer.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <Producer_proc_producer_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nbool sb_to_filter_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_to_filter_queue_1, (union_art_DataContent*) data);\n  sb_to_filter_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send to_filter: Out EventDataPort PFC__Mission\nUnit pfc_project_PFC_Producer_proc_producer_seL4Nix_to_filter_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_Producer.c\", \"\", \"pfc_project_PFC_Producer_proc_producer_seL4Nix_to_filter_Send\", 0);\n\n  sb_to_filter_enqueue(d);\n}\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_Producer.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of Producer_proc_producer\\n\");\n\n  \/\/ initialise data structure for outgoing event data port to_filter\n  sb_queue_union_art_DataContent_1_init(sb_to_filter_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  pfc_project_PFC_Producer_proc_producer_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  pfc_project_PFC_Producer_proc_producer_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of Producer_proc_producer\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_Producer.c\", \"\", \"run\", 0);\n\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    \/\/ call the component's compute entrypoint\n    pfc_project_PFC_Producer_proc_producer_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Producer_proc_producer\/includes\/sb_Producer.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_PRODUCER_H\n#define SB_PRODUCER_H\n\n#include <sb_types.h>\n\nbool sb_to_filter_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_PRODUCER_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Filter_proc_filter\/src\/sb_Filter.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_Filter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <Filter_proc_filter_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nsb_queue_union_art_DataContent_1_Recv_t sb_from_producer_recv_queue;\n\n\/************************************************************************\n * sb_from_producer_dequeue_poll:\n ************************************************************************\/\nbool sb_from_producer_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_from_producer_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_from_producer_dequeue:\n ************************************************************************\/\nbool sb_from_producer_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_from_producer_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_from_producer_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_from_producer_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_from_producer_recv_queue);\n}\n\nbool sb_to_consumer_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_to_consumer_queue_1, (union_art_DataContent*) data);\n  sb_to_consumer_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send to_consumer: Out EventDataPort PFC__Mission\nUnit pfc_project_PFC_Filter_proc_filter_seL4Nix_to_consumer_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_Filter.c\", \"\", \"pfc_project_PFC_Filter_proc_filter_seL4Nix_to_consumer_Send\", 0);\n\n  sb_to_consumer_enqueue(d);\n}\n\n\/\/ is_empty from_producer: In EventDataPort\nB pfc_project_PFC_Filter_proc_filter_seL4Nix_from_producer_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_from_producer_is_empty();\n}\n\n\/\/ receive from_producer: In EventDataPort union_art_DataContent\nUnit pfc_project_PFC_Filter_proc_filter_seL4Nix_from_producer_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_Filter.c\", \"\", \"pfc_project_PFC_Filter_proc_filter_seL4Nix_from_producer_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_from_producer_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_Filter.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of Filter_proc_filter\\n\");\n\n  \/\/ initialise data structure for incoming event data port from_producer\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_from_producer_recv_queue, sb_from_producer_queue);\n\n  \/\/ initialise data structure for outgoing event data port to_consumer\n  sb_queue_union_art_DataContent_1_init(sb_to_consumer_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  pfc_project_PFC_Filter_proc_filter_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  pfc_project_PFC_Filter_proc_filter_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of Filter_proc_filter\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_Filter.c\", \"\", \"run\", 0);\n\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    \/\/ call the component's compute entrypoint\n    pfc_project_PFC_Filter_proc_filter_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Filter_proc_filter\/includes\/sb_Filter.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_FILTER_H\n#define SB_FILTER_H\n\n#include <sb_types.h>\n\nbool sb_from_producer_dequeue(union_art_DataContent *);\n\nbool sb_to_consumer_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_FILTER_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Consumer_proc_consumer\/src\/sb_Consumer.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_Consumer.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <Consumer_proc_consumer_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nsb_queue_union_art_DataContent_1_Recv_t sb_from_filter_recv_queue;\n\n\/************************************************************************\n * sb_from_filter_dequeue_poll:\n ************************************************************************\/\nbool sb_from_filter_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_from_filter_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_from_filter_dequeue:\n ************************************************************************\/\nbool sb_from_filter_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_from_filter_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_from_filter_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_from_filter_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_from_filter_recv_queue);\n}\n\n\/\/ is_empty from_filter: In EventDataPort\nB pfc_project_PFC_Consumer_proc_consumer_seL4Nix_from_filter_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_from_filter_is_empty();\n}\n\n\/\/ receive from_filter: In EventDataPort union_art_DataContent\nUnit pfc_project_PFC_Consumer_proc_consumer_seL4Nix_from_filter_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_Consumer.c\", \"\", \"pfc_project_PFC_Consumer_proc_consumer_seL4Nix_from_filter_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_from_filter_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_Consumer.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of Consumer_proc_consumer\\n\");\n\n  \/\/ initialise data structure for incoming event data port from_filter\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_from_filter_recv_queue, sb_from_filter_queue);\n\n  \/\/ initialise slang-embedded components\/ports\n  pfc_project_PFC_Consumer_proc_consumer_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  pfc_project_PFC_Consumer_proc_consumer_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of Consumer_proc_consumer\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_Consumer.c\", \"\", \"run\", 0);\n\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    \/\/ call the component's compute entrypoint\n    pfc_project_PFC_Consumer_proc_consumer_adapter_computeEntryPoint(SF_LAST);\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/Consumer_proc_consumer\/includes\/sb_Consumer.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CONSUMER_H\n#define SB_CONSUMER_H\n\n#include <sb_types.h>\n\nbool sb_from_filter_dequeue(union_art_DataContent *);\n\n#endif \/\/ SB_CONSUMER_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c",
        {
          "type" : "TestResource",
          "content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_proc_producer_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_proc_filter_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_proc_consumer_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/types\/includes\/sb_queue_union_art_DataContent_1.h",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE-1 elements.\n#define SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_union_art_DataContent_1 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type union_art_DataContent \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  union_art_DataContent elt[SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE];\n\n} sb_queue_union_art_DataContent_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue, \n  union_art_DataContent *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_union_art_DataContent_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_union_art_DataContent_1_t *queue;\n\n} sb_queue_union_art_DataContent_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_union_art_DataContent_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_union_art_DataContent_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/types\/src\/sb_queue_union_art_DataContent_1.c",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_union_art_DataContent_1.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue, \n  union_art_DataContent *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_union_art_DataContent_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/types\/includes\/sb_types.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <all.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef union art_DataContent union_art_DataContent;\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/types\/includes\/sb_event_counter.h",
        {
          "type" : "TestResource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t;\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/settings.cmake",
        {
          "type" : "TestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "producer_filter_consumer_periodic--SeL4\/types\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            src\/sb_queue_union_art_DataContent_1.c)\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           PUBLIC includes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
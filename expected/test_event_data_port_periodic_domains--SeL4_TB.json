{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/emitter_t_impl_src_process_src_thread\/emitter_t_impl_src_process_src_thread.camkes",
        {
          "type" : "TestResource",
          "content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t_1.idl4\";\nimport <std_connector.camkes>;\ncomponent emitter_t_impl_src_process_src_thread {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int8_t_1 sb_write_port0;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/sb_Monitors\/sb_dst_thread_read_port_Monitor\/sb_dst_thread_read_port_Monitor.camkes",
        {
          "type" : "TestResource",
          "content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int8_t_1.idl4\";\ncomponent sb_dst_thread_read_port_Monitor {\n\n  provides sb_Monitor_int8_t_1 mon;\n  emits QueuedData monsig;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/consumer_t_impl_dst_process_dst_thread\/consumer_t_impl_dst_process_dst_thread.camkes",
        {
          "type" : "TestResource",
          "content" : "import \"..\/..\/interfaces\/sb_Monitor_int8_t_1.idl4\";\nimport <std_connector.camkes>;\ncomponent consumer_t_impl_dst_process_dst_thread {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int8_t_1 sb_read_port;\n  consumes QueuedData sb_read_port_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/dispatch_periodic\/dispatch_periodic.camkes",
        {
          "type" : "TestResource",
          "content" : "import <global-connectors.camkes>;\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_src_process_src_thread_periodic_dispatch_notification;\n  emits Notification sb_dst_process_dst_thread_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/top_impl_Instance.camkes",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/emitter_t_impl_src_process_src_thread\/emitter_t_impl_src_process_src_thread.camkes\";\nimport \"components\/sb_Monitors\/sb_dst_thread_read_port_Monitor\/sb_dst_thread_read_port_Monitor.camkes\";\nimport \"components\/consumer_t_impl_dst_process_dst_thread\/consumer_t_impl_dst_process_dst_thread.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component emitter_t_impl_src_process_src_thread src_process_src_thread;\n    component sb_dst_thread_read_port_Monitor sb_dst_thread_read_port_monitor;\n    component consumer_t_impl_dst_process_dst_thread dst_process_dst_thread;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4RPCCall conn1(from src_process_src_thread.sb_write_port0, to sb_dst_thread_read_port_monitor.mon);\n    connection seL4RPCCall conn2(from dst_process_dst_thread.sb_read_port, to sb_dst_thread_read_port_monitor.mon);\n    connection seL4Notification conn3(from sb_dst_thread_read_port_monitor.monsig, to dst_process_dst_thread.sb_read_port_notification);\n    connection seL4Notification conn4(from dispatch_periodic_inst.sb_src_process_src_thread_periodic_dispatch_notification, to src_process_src_thread.sb_periodic_dispatch_notification);\n    connection seL4Notification conn5(from dispatch_periodic_inst.sb_dst_process_dst_thread_periodic_dispatch_notification, to dst_process_dst_thread.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn6(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn7(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/emitter_t_impl_src_process_src_thread\/src\/emitter.c",
        {
          "type" : "TestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_emitter_t_impl.h>\n\nstatic int8_t _value;\n\nvoid test_event_data_port_emitter_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_data_port_emitter_component_init called\\n\", get_instance_name());\n  _value = 0;\n}\n\nvoid test_event_data_port_emitter_time_triggered_handler(const int64_t *in_arg) {\n  printf(\"---------------------------------------\\n\");\n  if (sb_write_port_enqueue( &_value ) ) {\n    printf(\"[%s] Sent %d\\n\", get_instance_name(), _value);\n    _value = (_value + 1) % 500;\n  } else {\n    printf(\"[%s] Unable to send\\n\", get_instance_name());\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/consumer_t_impl_dst_process_dst_thread\/src\/consumer.c",
        {
          "type" : "TestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_consumer_t_impl.h>\n\nvoid test_event_data_port_consumer_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_data_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_data_port_consumer_time_triggered_handler(const int64_t * in_arg) {\n  int8_t value;\n\n  \/\/ dequeue event data port\n  while(sb_read_port_dequeue(&value)) {\n    printf(\"[%s] value {%d}\\n\", get_instance_name(), value);\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/interfaces\/sb_Monitor_int8_t_1.idl4",
        {
          "type" : "TestResource",
          "content" : "procedure sb_Monitor_int8_t_1 {\n  include <sb_types.h>;\n  bool is_empty();\n  bool enqueue(refin int8_t m);\n  bool dequeue(out int8_t m);\n};",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/sb_Monitors\/sb_dst_thread_read_port_Monitor\/src\/sb_dst_thread_read_port_Monitor.c",
        {
          "type" : "TestResource",
          "content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n\n#include <sb_types.h>\n#include <sb_dst_thread_read_port_Monitor.h>\n\nint mon_get_sender_id(void);\nint monsig_emit(void);\n\nint8_t contents[1];\nstatic uint32_t front = 0;\nstatic uint32_t length = 0;\n\nstatic bool is_full(void) {\n  return length == 1;\n}\n\nbool mon_is_empty(void) {\n  return length == 0;\n}\n\nbool mon_dequeue(int8_t * m) {\n  if (mon_is_empty()) {\n    return false;\n  } else {\n    *m = contents[front];\n    front = (front + 1) % 1;\n    length--;\n    return true;\n  }\n}\n\nbool mon_enqueue(const int8_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    contents[(front + length) % 1] = *m;\n    length++;\n    monsig_emit();\n    return true;\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/sb_Monitors\/sb_dst_thread_read_port_Monitor\/includes\/sb_dst_thread_read_port_Monitor.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_DST_THREAD_READ_PORT_MONITOR_H\n#define SB_DST_THREAD_READ_PORT_MONITOR_H\n\n\n#endif \/\/ SB_DST_THREAD_READ_PORT_MONITOR_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nincludeGlobalComponents()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(emitter_t_impl_src_process_src_thread\n  SOURCES components\/emitter_t_impl_src_process_src_thread\/\/src\/emitter.c components\/emitter_t_impl_src_process_src_thread\/src\/sb_emitter_t_impl.c\n  INCLUDES components\/emitter_t_impl_src_process_src_thread\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_t_impl_dst_process_dst_thread\n  SOURCES components\/consumer_t_impl_dst_process_dst_thread\/\/src\/consumer.c components\/consumer_t_impl_dst_process_dst_thread\/src\/sb_consumer_t_impl.c\n  INCLUDES components\/consumer_t_impl_dst_process_dst_thread\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  LIBS SB_Type_Library\n)\n\nDeclareCAmkESComponent(sb_dst_thread_read_port_Monitor\n  SOURCES components\/sb_Monitors\/sb_dst_thread_read_port_Monitor\/src\/sb_dst_thread_read_port_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_dst_thread_read_port_Monitor\/includes\/ types\/includes\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/bin\/run-camkes.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o noclobber -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:s\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"  -c, --camkes-dir      Location of CAmkES project\"\n  echo \"  -n, --non-interactive Non-interactive mode.  Will not prompt before deleting apps and build directories\"\n  echo \"  -o, --camkes-options  CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"  -s, --simulate        Simulate via QEMU\"\n  exit 2\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    rm -rf ${BUILD_DIR}\n    mkdir ${BUILD_DIR}\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\nif [ \"${SIMULATE}\" = true ]; then\n  .\/simulate\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/emitter_t_impl_src_process_src_thread\/src\/sb_emitter_t_impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_emitter_t_impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nvoid sb_entrypoint_emitter_t_impl_periodic_dispatcher(const int64_t * in_arg) {\n  test_event_data_port_emitter_time_triggered_handler((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * sb_write_port_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_write_port_enqueue(const int8_t * sb_write_port){\n  bool sb_result = true;\n  sb_result &= sb_write_port0_enqueue((int8_t *) sb_write_port);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_emitter_t_impl_src_process_src_thread_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_t_impl_src_process_src_thread_initializer(const int64_t * in_arg) {\n  test_event_data_port_emitter_component_init((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_t_impl_src_process_src_thread_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_emitter_t_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/emitter_t_impl_src_process_src_thread\/includes\/sb_emitter_t_impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_EMITTER_T_IMPL_H\n#define SB_EMITTER_T_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_write_port_enqueue(const int8_t * sb_write_port);\n\nvoid test_event_data_port_emitter_time_triggered_handler(const int64_t *);\n\nvoid test_event_data_port_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ SB_EMITTER_T_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/consumer_t_impl_dst_process_dst_thread\/src\/sb_consumer_t_impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_consumer_t_impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nvoid sb_entrypoint_consumer_t_impl_periodic_dispatcher(const int64_t * in_arg) {\n  test_event_data_port_consumer_time_triggered_handler((int64_t *) in_arg);\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_t_impl_dst_process_dst_thread_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_t_impl_dst_process_dst_thread_initializer(const int64_t * in_arg) {\n  test_event_data_port_consumer_component_init((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_t_impl_dst_process_dst_thread_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_consumer_t_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/consumer_t_impl_dst_process_dst_thread\/includes\/sb_consumer_t_impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CONSUMER_T_IMPL_H\n#define SB_CONSUMER_T_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_read_port_dequeue(int8_t * sb_read_port);\n\nvoid test_event_data_port_consumer_time_triggered_handler(const int64_t *);\n\nvoid test_event_data_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_T_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c",
        {
          "type" : "TestResource",
          "content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_src_process_src_thread_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_dst_process_dst_thread_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/types\/includes\/sb_types.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/settings.cmake",
        {
          "type" : "TestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "test_event_data_port_periodic_domains--SeL4_TB\/types\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            INTERFACE\n            )\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        INTERFACE\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        INTERFACE\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           INTERFACE\n                           includes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
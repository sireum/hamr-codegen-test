{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "periodicDispatch--SeL4_TB\/components\/Comp_A_Impl_SW_A\/Comp_A_Impl_SW_A.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/interfaces\/sb_Monitor_int32_t_1.idl4\";\nimport <std_connector.camkes>;\ncomponent Comp_A_Impl_SW_A {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int32_t_1 sb_output0;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/Comp_B_Impl_SW_B\/Comp_B_Impl_SW_B.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/interfaces\/sb_Monitor_int32_t_1.idl4\";\ncomponent Comp_B_Impl_SW_B {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_int32_t_1 sb_input;\n  consumes QueuedData sb_input_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/sb_Monitors\/sb_B_input_Monitor\/sb_B_input_Monitor.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int32_t_1.idl4\";\ncomponent sb_B_input_Monitor {\n\n  provides sb_Monitor_int32_t_1 mon;\n  emits QueuedData monsig;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/dispatch_periodic\/dispatch_periodic.camkes",
        {
          "type" : "ITestResource",
          "content" : "import <global-connectors.camkes>;\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_SW_A_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/Critical_Impl_Instance.camkes",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/Comp_A_Impl_SW_A\/Comp_A_Impl_SW_A.camkes\";\nimport \"components\/Comp_B_Impl_SW_B\/Comp_B_Impl_SW_B.camkes\";\nimport \"components\/sb_Monitors\/sb_B_input_Monitor\/sb_B_input_Monitor.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component Comp_A_Impl_SW_A SW_A;\n    component Comp_B_Impl_SW_B SW_B;\n    component sb_B_input_Monitor sb_b_input_monitor;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4RPCCall conn1(from SW_A.sb_output0, to sb_b_input_monitor.mon);\n    connection seL4RPCCall conn2(from SW_B.sb_input, to sb_b_input_monitor.mon);\n    connection seL4Notification conn3(from sb_b_input_monitor.monsig, to SW_B.sb_input_notification);\n    connection seL4Notification conn4(from dispatch_periodic_inst.sb_SW_A_periodic_dispatch_notification, to SW_A.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn5(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn6(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/Comp_A_Impl_SW_A\/src\/comp_a.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <assert.h>\n#include <sb_Comp_A_Impl.h>\n\nint32_t t = 0;\n\nvoid Comp_A_time_triggered(const int64_t *arg){\n  printf(\"Comp_A_time_triggered invoked.  Sending %i to Comp_B\\n\", t);\n  sb_output_enqueue(&t);\n  t++;  \n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/Comp_B_Impl_SW_B\/src\/comp_b.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <assert.h>\n\nvoid Comp_B_input(const int32_t * in_arg){\n  printf(\"Comp_B_input received event %i\\n\", *in_arg);\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/interfaces\/sb_Monitor_int32_t_1.idl4",
        {
          "type" : "ITestResource",
          "content" : "procedure sb_Monitor_int32_t_1 {\n  include <sb_types.h>;\n  bool is_empty();\n  bool enqueue(refin int32_t m);\n  bool dequeue(out int32_t m);\n};",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/sb_Monitors\/sb_B_input_Monitor\/src\/sb_B_input_Monitor.c",
        {
          "type" : "ITestResource",
          "content" : "#ifndef SB_VERIFY\n#include <stdio.h>\n#endif \/\/ SB_VERIFY\n\n#include <sb_types.h>\n#include <sb_B_input_Monitor.h>\n\nint mon_get_sender_id(void);\nint monsig_emit(void);\n\nint32_t contents[1];\nstatic uint32_t front = 0;\nstatic uint32_t length = 0;\n\nstatic bool is_full(void) {\n  return length == 1;\n}\n\nbool mon_is_empty(void) {\n  return length == 0;\n}\n\nbool mon_dequeue(int32_t * m) {\n  if (mon_is_empty()) {\n    return false;\n  } else {\n    *m = contents[front];\n    front = (front + 1) % 1;\n    length--;\n    return true;\n  }\n}\n\nbool mon_enqueue(const int32_t * m) {\n  if (is_full()) {\n    return false;\n  } else {\n    contents[(front + length) % 1] = *m;\n    length++;\n    monsig_emit();\n    return true;\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/sb_Monitors\/sb_B_input_Monitor\/includes\/sb_B_input_Monitor.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_B_INPUT_MONITOR_H\n#define SB_B_INPUT_MONITOR_H\n\n\n#endif \/\/ SB_B_INPUT_MONITOR_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (Critical_Impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nincludeGlobalComponents()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(Comp_A_Impl_SW_A\n  SOURCES components\/Comp_A_Impl_SW_A\/\/src\/comp_a.c components\/Comp_A_Impl_SW_A\/src\/sb_Comp_A_Impl.c\n  INCLUDES components\/Comp_A_Impl_SW_A\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(Comp_B_Impl_SW_B\n  SOURCES components\/Comp_B_Impl_SW_B\/\/src\/comp_b.c components\/Comp_B_Impl_SW_B\/src\/sb_Comp_B_Impl.c\n  INCLUDES components\/Comp_B_Impl_SW_B\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  LIBS SB_Type_Library\n)\n\nDeclareCAmkESComponent(sb_B_input_Monitor\n  SOURCES components\/sb_Monitors\/sb_B_input_Monitor\/src\/sb_B_input_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_B_input_Monitor\/includes\/ types\/includes\n)\n\nDeclareCAmkESRootserver(Critical_Impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/bin\/run-camkes.sh",
        {
          "type" : "ITestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:sh\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate,help\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"-c, --camkes-dir       Location of CAmkES project\"\n  echo \"-n, --non-interactive  Non-interactive mode.  Symlink in apps directory will be replaced\"\n  echo \"                         if present, CAmkES build directory will not be deleted\"\n  echo \"-o, --camkes-options   CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"-s, --simulate         Simulate via QEMU\"\n  echo \"-h, --help             Display this information\"\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\n    exit 2\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    -h|--help) usage; exit 0 ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\n  exit 3\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    # if the project contains VMs and USE_PRECONFIGURED_ROOTFS=OFF then\n    # deleting the build directory would force the linux image to be\n    # re-downloaded, which can take a long time\n    echo \"Non-interactive mode so not deleting existing ${BUILD_DIR}\"\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\ncat >${BUILD_DIR}\/sim << EOL\n#!\/usr\/bin\/env bash\n\nexport SCRIPT_HOME=\\$( cd \"\\$( dirname \"\\$0\" )\" &> \/dev\/null && pwd )\ncd \\${SCRIPT_HOME}\n\n# console output from simulation disappears when QEMU shuts down when run from\n# the CAmkES generated .\/simulate script. Instead call QEMU directly using the\n# default values .\/simulate would pass\n\nqemu-system-x86_64 \\\\\n    -cpu Nehalem,-vme,+pdpe1gb,-xsave,-xsaveopt,-xsavec,-fsgsbase,-invpcid,enforce \\\\\n    -nographic \\\\\n    -serial mon:stdio \\\\\n    -m size=512M \\\\\n    -kernel images\/kernel-x86_64-pc99 \\\\\n    -initrd images\/capdl-loader-image-x86_64-pc99\nEOL\n\nchmod 700 ${BUILD_DIR}\/sim\necho \"Wrote: ${BUILD_DIR}\/sim\"\n\nif [ \"${SIMULATE}\" = true ]; then\n  # ${BUILD_DIR}\/simulate\n  ${BUILD_DIR}\/sim\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/Comp_A_Impl_SW_A\/src\/sb_Comp_A_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_Comp_A_Impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nvoid sb_entrypoint_Comp_A_Impl_periodic_dispatcher(const int64_t * in_arg) {\n  Comp_A_time_triggered((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * sb_output_enqueue:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote event data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_output_enqueue(const int32_t * sb_output){\n  bool sb_result = true;\n  sb_result &= sb_output0_enqueue((int32_t *) sb_output);\n  return sb_result;\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_Comp_A_Impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/Comp_A_Impl_SW_A\/includes\/sb_Comp_A_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_COMP_A_IMPL_H\n#define SB_COMP_A_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_output_enqueue(const int32_t * sb_output);\n\nvoid Comp_A_time_triggered(const int64_t *);\n\n#endif \/\/ SB_COMP_A_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/Comp_B_Impl_SW_B\/src\/sb_Comp_B_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_Comp_B_Impl.h>\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n * sb_input_notification_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * input\n *\n ************************************************************************\/\nstatic void sb_input_notification_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_input_notification_reg_callback(sb_input_notification_handler, NULL));\n}\n\n\/************************************************************************\n * sb_entrypoint_Comp_B_Impl_input:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_Comp_B_Impl_input(const int32_t * in_arg) {\n  Comp_B_input((int32_t *) in_arg);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventDataPort port input\n  CALLBACKOP(sb_input_notification_reg_callback(sb_input_notification_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  int32_t sb_input;\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    while (sb_input_dequeue((int32_t *) &sb_input)) {\n      sb_entrypoint_Comp_B_Impl_input(&sb_input);\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/Comp_B_Impl_SW_B\/includes\/sb_Comp_B_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_COMP_B_IMPL_H\n#define SB_COMP_B_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_input_dequeue(int32_t * sb_input);\n\nvoid Comp_B_input(const int32_t * in_arg);\n\n#endif \/\/ SB_COMP_B_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c",
        {
          "type" : "ITestResource",
          "content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_SW_A_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/types\/includes\/sb_types.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/settings.cmake",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/types\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            INTERFACE\n            )\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        INTERFACE\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        INTERFACE\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           INTERFACE\n                           includes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "periodicDispatch--SeL4_TB\/proof\/smt2_case.smt2",
        {
          "type" : "ITestResource",
          "content" : "(set-logic ALL)\n\n(declare-datatypes ((Mode 0)) ((\n  (SeL4)\n  (SeL4_Only)\n  (SeL4_TB))))\n\n(declare-datatypes ((ComponentType 0)) ((\n  (AadlComponent)\n  (AadlVMComponent)\n  (PacerComponent)\n  (PeriodicDispatcher))))\n\n(declare-datatypes ((DispatchProtocol 0)) ((\n  (Periodic)\n  (Sporadic)\n  (UNSPECIFIED_DISPATCH_PROTOCOL))))\n\n(declare-datatypes ((SchedulingType 0)) ((\n  (Pacing)\n  (SelfPacing)\n  (PeriodicDispatching)\n  (UNSPECIFIED_SCHEDULING_TYPE))))\n\n(declare-datatypes ((Direction 0)) ((\n  (In)\n  (Out))))\n\n(declare-datatypes ((PortType 0)) ((\n  (AadlDataPort)\n  (AadlEventPort)\n  (AadlEventDataPort))))\n\n\n(declare-const CodegenMode Mode)\n(assert (= CodegenMode SeL4_TB))\n\n(declare-const ModelSchedulingType SchedulingType)\n(assert (= ModelSchedulingType PeriodicDispatching))\n\n(declare-datatypes ((AADLComponent 0)) ((\n  (Critical_Impl_Instance_SW_A); Instance of Periodic::Comp_A.Impl declared at \/periodicDispatch\/periodic.aadl (29, 4)\n  (Critical_Impl_Instance_SW_B); Instance of Periodic::Comp_B.Impl declared at \/periodicDispatch\/periodic.aadl (30, 4)\n)))\n(declare-const AADLComponent_count Int)\n(assert (= 2 AADLComponent_count))\n\n(declare-const AADLDispatchProtocol (Array AADLComponent DispatchProtocol))\n  (assert (= Periodic (select AADLDispatchProtocol Critical_Impl_Instance_SW_A)))\n  (assert (= Sporadic (select AADLDispatchProtocol Critical_Impl_Instance_SW_B)))\n(declare-const AADLDispatchProtocol_size Int)\n(assert (= 2 AADLDispatchProtocol_size))\n\n(define-fun altAADLDispatchProtocol ((_comp AADLComponent)) DispatchProtocol\n  (ite (= _comp Critical_Impl_Instance_SW_A) Periodic\n  (ite (= _comp Critical_Impl_Instance_SW_B) Sporadic\n  UNSPECIFIED_DISPATCH_PROTOCOL)))\n(declare-const AADLDispatchProtocol_count Int)\n(assert (= 2 AADLDispatchProtocol_count))\n\n(declare-datatypes ((AADLPort 0)) ((\n  (Critical_Impl_Instance_SW_A_output)\n  (Critical_Impl_Instance_SW_B_input))))\n(declare-const AADLPort_count Int)\n(assert (= 2 AADLPort_count))\n\n(declare-const AADLPortComponent (Array AADLPort AADLComponent))\n  (assert (= Critical_Impl_Instance_SW_A (select AADLPortComponent Critical_Impl_Instance_SW_A_output)))\n  (assert (= Critical_Impl_Instance_SW_B (select AADLPortComponent Critical_Impl_Instance_SW_B_input)))\n(declare-const AADLPortComponent_size Int)\n(assert (= 2 AADLPortComponent_size))\n\n(declare-const AADLPortType (Array AADLPort PortType))\n  (assert (= AadlEventDataPort (select AADLPortType Critical_Impl_Instance_SW_A_output)))\n  (assert (= AadlEventDataPort (select AADLPortType Critical_Impl_Instance_SW_B_input)))\n(declare-const AADLPortType_size Int)\n(assert (= 2 AADLPortType_size))\n\n(declare-const AADLPortDirection (Array AADLPort Direction))\n  (assert (= Out (select AADLPortDirection Critical_Impl_Instance_SW_A_output)))\n  (assert (= In (select AADLPortDirection Critical_Impl_Instance_SW_B_input)))\n(declare-const AADLPortDirection_size Int)\n(assert (= 2 AADLPortDirection_size))\n\n(define-fun AADLConnectionFlowTos ((p1 AADLPort) (p2 AADLPort)) Bool\n  (or\n    (and (= p1 Critical_Impl_Instance_SW_A_output) (= p2 Critical_Impl_Instance_SW_B_input))\n    false))\n(declare-const AADLConnectionFlowsTos_count Int)\n(assert (= 1 AADLConnectionFlowsTos_count))\n\n\n(declare-datatypes ((AccessType 0)) ((\n  (R)\n  (W)\n  (RW))))\n\n(declare-datatypes ((seL4PortType 0)) ((\n  (seL4GlobalAsynch)\n  (seL4GlobalAsynchCallback)\n  (seL4Notification)\n  (seL4RPCCall)\n  (seL4SharedData)\n  (seL4SharedDataWithCaps)\n  (seL4TimeServer)\n  (seL4VMDTBPassthrough)\n  (CASE_AADL_EventDataport))))\n\n(declare-datatypes ((CAmkESComponent 0)) ((\n  (SW_A)\n  (SW_B)\n  (sb_b_input_monitor)\n  (dispatch_periodic_inst)\n  (time_server))))\n(declare-const CAmkESComponent_count Int)\n(assert (= 5 CAmkESComponent_count))\n\n(define-fun isPeriodicDispatcher ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or (= _component dispatch_periodic_inst)\n           false)))\n\n(define-fun isPacer ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or \n           false)))\n\n(define-fun isTimeServer ((_component CAmkESComponent)) Bool\n  (and ; TODO - list scenarios where a time server is expected\n       (or (= _component time_server)\n           false)))\n\n(define-fun isMonitor ((_component CAmkESComponent)) Bool\n  (or (= _component sb_b_input_monitor)\n      false))\n(declare-const Monitor_count Int)\n(assert (= 1 Monitor_count))\n\n(declare-datatypes ((CAmkESPort 0)) ((\n  (SW_A_sb_output0)\n  (SW_A_sb_periodic_dispatch_notification)\n  (SW_B_sb_input)\n  (SW_B_sb_input_notification)\n  (sb_b_input_monitor_monsig)\n  (sb_b_input_monitor_mon)\n  (dispatch_periodic_inst_sb_SW_A_periodic_dispatch_notification)\n  (dispatch_periodic_inst_timer)\n  (dispatch_periodic_inst_timer_complete)\n  (time_server_timer_notification)\n  (time_server_the_timer))))\n(declare-const CAmkESPort_count Int)\n(assert (= 11 CAmkESPort_count))\n\n(declare-const CAmkESAccessRestrictions (Array CAmkESPort AccessType))\n(declare-const CAmkESAccessRestrictions_size Int)\n(assert (= 0 CAmkESAccessRestrictions_size))\n\n(declare-datatypes ((CAmkESConnection 0)) ((\n  (conn1)\n  (conn2)\n  (conn3)\n  (conn4)\n  (conn5)\n  (conn6))))\n(declare-const CAmkESConnection_count Int)\n(assert (= 6 CAmkESConnection_count))\n\n(define-fun isSelfPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType SelfPacing)\n       (or \n           false)))\n\n(define-fun isPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or \n           false)))\n\n(define-fun isPeriodicDispatchingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or (= _conn conn4)\n           (= _conn conn5)\n           (= _conn conn6)\n           false)))\n(declare-const PeriodicDispatchingConnection_count Int)\n(assert (= 3 PeriodicDispatchingConnection_count))\n\n(declare-const CAmkESConnectionType (Array CAmkESConnection seL4PortType))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn1)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn2)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn3)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn4)))\n  (assert (= seL4TimeServer (select CAmkESConnectionType conn5)))\n  (assert (= seL4GlobalAsynchCallback (select CAmkESConnectionType conn6)))\n(declare-const CAmkESConnectionType_count Int)\n(assert (= 6 CAmkESConnectionType_count))\n\n(declare-const CAmkESPortComponent (Array CAmkESPort CAmkESComponent))\n  (assert (= SW_A (select CAmkESPortComponent SW_A_sb_output0)))\n  (assert (= SW_A (select CAmkESPortComponent SW_A_sb_periodic_dispatch_notification)))\n  (assert (= SW_B (select CAmkESPortComponent SW_B_sb_input)))\n  (assert (= SW_B (select CAmkESPortComponent SW_B_sb_input_notification)))\n  (assert (= sb_b_input_monitor (select CAmkESPortComponent sb_b_input_monitor_monsig)))\n  (assert (= sb_b_input_monitor (select CAmkESPortComponent sb_b_input_monitor_mon)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_sb_SW_A_periodic_dispatch_notification)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_timer)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_timer_complete)))\n  (assert (= time_server (select CAmkESPortComponent time_server_timer_notification)))\n  (assert (= time_server (select CAmkESPortComponent time_server_the_timer)))\n(declare-const CAmkESPortComponent_size Int)\n(assert (= 11 CAmkESPortComponent_size))\n\n(define-fun CAmkESConnectionFlowTos ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort)) Bool\n  (or\n    (and (= _conn conn1) (= _p1 SW_A_sb_output0) (= _p2 sb_b_input_monitor_mon))\n    (and (= _conn conn2) (= _p1 SW_B_sb_input) (= _p2 sb_b_input_monitor_mon))\n    (and (= _conn conn3) (= _p1 sb_b_input_monitor_monsig) (= _p2 SW_B_sb_input_notification))\n    (and (= _conn conn4) (= _p1 dispatch_periodic_inst_sb_SW_A_periodic_dispatch_notification) (= _p2 SW_A_sb_periodic_dispatch_notification))\n    (and (= _conn conn5) (= _p1 dispatch_periodic_inst_timer) (= _p2 time_server_the_timer))\n    (and (= _conn conn6) (= _p1 time_server_timer_notification) (= _p2 dispatch_periodic_inst_timer_complete))\n    false))\n(declare-const CAmkESConnectionFlowTos_count Int)\n(assert (= 6 CAmkESConnectionFlowTos_count))\n\n(define-fun ComponentRefinement ((ac AADLComponent) (cc CAmkESComponent)) Bool\n  (or\n    (and (= ac Critical_Impl_Instance_SW_A) (= cc SW_A))\n    (and (= ac Critical_Impl_Instance_SW_B) (= cc SW_B))\n    false))\n(declare-const ComponentRefinement_count Int)\n(assert (= 2 ComponentRefinement_count))\n\n(define-fun PortRefinement ((ap AADLPort) (cp CAmkESPort)) Bool\n  (or\n    (and (= ap Critical_Impl_Instance_SW_A_output) (= cp SW_A_sb_output0))\n    (and (= ap Critical_Impl_Instance_SW_B_input) (= cp SW_B_sb_input))\n    (and (= ap Critical_Impl_Instance_SW_B_input) (= cp SW_B_sb_input_notification))\n    false))\n(declare-const PortRefinement_count Int)\n(assert (= 3 PortRefinement_count))\n\n\n(define-fun AADLFlowDirectionality () Bool\n  (forall ((p1 AADLPort) (p2 AADLPort))\n    (=> (AADLConnectionFlowTos p1 p2)\n        (and (= Out (select AADLPortDirection p1)) (= In (select AADLPortDirection p2))))))\n\n(define-fun AADLFlowNoSelfConnection () Bool\n  (forall ((p1 AADLPort) (p2 AADLPort))\n    (=> (AADLConnectionFlowTos p1 p2)\n        (not (= p1 p2)))))\n\n(define-fun AADLConnectedPortTypeMatch () Bool\n  (forall ((src AADLPort) (dst AADLPort))\n    (=> (AADLConnectionFlowTos src dst)\n        (or (and (= AadlDataPort (select AADLPortType src)) (= AadlDataPort (select AADLPortType dst)))\n            (and (= AadlEventPort (select AADLPortType src)) (= AadlEventPort (select AADLPortType dst)))\n            (and (= AadlEventDataPort (select AADLPortType src)) (= AadlEventDataPort (select AADLPortType dst)))\n             false))))\n(declare-const AADLConnectedPortTypeMatch_count Int)\n(assert (= 3 AADLConnectedPortTypeMatch_count))\n\n(define-fun AADLDispatchProtocolSpecified () Bool\n  (forall ((_comp AADLComponent))\n    (not (= UNSPECIFIED_DISPATCH_PROTOCOL (select AADLDispatchProtocol _comp)))))\n\n(define-fun altAADLDispatchProtocolSpecified () Bool\n  (forall ((_comp AADLComponent))\n    (not (= UNSPECIFIED_DISPATCH_PROTOCOL (altAADLDispatchProtocol _comp)))))\n\n(define-fun AADLWellFormedness () Bool\n  (and\n    (= AADLPort_count AADLPortComponent_size) ; all AADL ports belong to an AADL component\n    altAADLDispatchProtocolSpecified\n    AADLDispatchProtocolSpecified\n    AADLFlowDirectionality\n    AADLFlowNoSelfConnection\n    AADLConnectedPortTypeMatch))\n\n\n(define-fun CAmkESFlowNoSelfConnection () Bool\n  (forall ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _p1 _p2)\n        (not (= _p1 _p2)))))\n\n(define-fun CAmkESDataPortAccess () Bool\n  (forall ((_conn CAmkESConnection) (_src CAmkESPort) (_dst CAmkESPort))\n    (=> (and (CAmkESConnectionFlowTos _conn _src _dst) (= seL4SharedData (select CAmkESConnectionType _conn)))\n      (and (= W (select CAmkESAccessRestrictions _src))\n           (= R (select CAmkESAccessRestrictions _dst))))))\n\n(define-fun UniqueComponentRefinements () Bool\n  (forall ((aadlComponent1 AADLComponent) (camkesComponent CAmkESComponent))\n    (=> (ComponentRefinement aadlComponent1 camkesComponent)\n        (not (exists ((aadlComponent2 AADLComponent))\n               (and (not (= aadlComponent1 aadlComponent2))\n                    (ComponentRefinement aadlComponent2 camkesComponent)))))))\n\n(define-fun UniquePortRefinements () Bool\n  (forall ((aadlPort1 AADLPort) (camkesPort CAmkESPort))\n    (=> (PortRefinement aadlPort1 camkesPort)\n        (not (exists ((aadlPort2 AADLPort))\n               (and (not (= aadlPort1 aadlPort2))\n                    (PortRefinement aadlPort2 camkesPort)))))))\n\n(define-fun CAmkESWellFormedness () Bool\n  (and\n    (= CAmkESPort_count CAmkESPortComponent_size) ; all CAmkES ports belong to a CAmkES component\n    CAmkESDataPortAccess\n    CAmkESFlowNoSelfConnection))\n\n(define-fun SB_DataPortRefinement ((aadlSource AADLPort) (aadlDest AADLPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n      (and (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n           (= (select CAmkESConnectionType conn) seL4SharedData )\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest  camkesDest)\n           (ComponentRefinement (select AADLPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AADLPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_EventPortRefinement ((aadlSource AADLPort) (aadlDest AADLPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (and\n      (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (= (select CAmkESConnectionType conn) seL4Notification )\n      (PortRefinement aadlSource camkesSource)\n      (PortRefinement aadlDest camkesDest)\n      (ComponentRefinement (select AADLPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n      (ComponentRefinement (select AADLPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_Refinement ((aadlSource AADLPort) (aadlDest AADLPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (or\n         (and\n           (= AadlDataPort (select AADLPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)) ; payload\n         (and\n           (= AadlEventPort (select AADLPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; event counter\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         (and\n           (= AadlEventDataPort (select AADLPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; payload\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         false)))\n\n(define-fun TB_Refinement ((aadlSource AADLPort) (aadlDest AADLPort)) Bool\n  (and (= CodegenMode SeL4_TB)\n       false))\n\n(define-fun ConnectionPreservation () Bool\n  (forall ((aadlSource AADLPort) (aadlDest AADLPort))\n    (=> (AADLConnectionFlowTos aadlSource aadlDest)\n      (or (SB_Refinement aadlSource aadlDest)\n          (TB_Refinement aadlSource aadlDest)\n          false))))\n\n\n(define-fun isAADL_SB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (exists ((aadlSource AADLPort) (aadlDest AADLPort))\n         (and\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest camkesDest)\n           (ComponentRefinement (select AADLPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AADLPortComponent aadlDest) (select CAmkESPortComponent camkesDest))\n           (AADLConnectionFlowTos aadlSource aadlDest)))))\n\n(define-fun isAADL_TB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (= CodegenMode SeL4_TB)\n       false)\n)\n\n(define-fun isCAmkESSchedulingConnection ((_conn CAmkESConnection)) Bool\n  (or\n    (isSelfPacingConnection _conn)\n    (isPacingConnection _conn)\n    (isPeriodicDispatchingConnection _conn)\n    false))\n\n(define-fun NoNewConnections () Bool\n  (forall ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (=> (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (or\n        (isAADL_SB_ConnectionRefinement camkesSource camkesDest)\n        (isAADL_TB_ConnectionRefinement camkesSource camkesDest)\n        (isCAmkESSchedulingConnection conn)\n        false))))\n\n\n(echo \"RefinementProof: Shows that there is a model satisfying all the constraints (should be sat):\")\n(push)\n(assert (and\n  AADLWellFormedness\n  CAmkESWellFormedness\n  ConnectionPreservation\n  UniqueComponentRefinements\n  UniquePortRefinements\n  NoNewConnections\n))\n(check-sat)\n;(get-model)\n(pop)\n\n(echo \"AADLWellFormedness: Proves that the generated AADL evidence is well-formed (should be unsat):\")\n(push)\n(assert (not AADLWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"CAmkESWellFormedness: Proves that the generated CAmkES evidence is well-formed (should be unsat):\")\n(push)\n(assert (not CAmkESWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"ConnectionPreservation: Proves that the generated CAmkES connections preserve AADL's (should be unsat):\")\n(push)\n(assert (not ConnectionPreservation))\n(check-sat)\n(pop)\n\n(echo \"NoNewConnections: Proves that the generated CAmkES connections does not contain more than AADL's (should be unsat):\")\n(push)\n(assert (not NoNewConnections))\n(check-sat)\n(pop)\n\n\n(exit)",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ]
    ]
  }
}
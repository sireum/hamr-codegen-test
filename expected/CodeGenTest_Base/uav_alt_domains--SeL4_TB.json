{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "uav_alt_domains--SeL4_TB\/components\/RadioDriver_Impl_MCMP_PROC_SW_RADIO\/RadioDriver_Impl_MCMP_PROC_SW_RADIO.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Command_Impl.idl4\";\nimport <std_connector.camkes>;\ncomponent RadioDriver_Impl_MCMP_PROC_SW_RADIO {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_SW__Command_Impl sb_recv_map_out0;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Mission.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_bool.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_SW__Command_Impl.idl4\";\nimport <std_connector.camkes>;\ncomponent FlightPlanner_Impl_MCMP_PROC_SW_FPLN {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_SW__Mission sb_flight_plan0;\n  uses sb_Monitor_bool sb_mission_rcv;\n  uses sb_Monitor_SW__Command_Impl sb_recv_map;\n  consumes DataportWrite sb_mission_rcv_notification;\n  consumes DataportWrite sb_recv_map_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/WaypointManager_Impl_MCMP_PROC_SW_WPM\/WaypointManager_Impl_MCMP_PROC_SW_WPM.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__Mission.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_bool.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_SW__MissionWindow.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_int64_t.idl4\";\nimport <std_connector.camkes>;\ncomponent WaypointManager_Impl_MCMP_PROC_SW_WPM {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_SW__Mission sb_flight_plan;\n  uses sb_Monitor_bool sb_mission_rcv0;\n  uses sb_Monitor_SW__MissionWindow sb_mission_window0;\n  uses sb_Monitor_int64_t sb_tracking_id;\n  consumes DataportWrite sb_flight_plan_notification;\n  consumes DataportWrite sb_tracking_id_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/UARTDriver_Impl_MCMP_PROC_SW_UART\/UARTDriver_Impl_MCMP_PROC_SW_UART.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/interfaces\/sb_Monitor_SW__MissionWindow.idl4\";\nimport \"..\/..\/interfaces\/sb_Monitor_int64_t.idl4\";\nimport <std_connector.camkes>;\ncomponent UARTDriver_Impl_MCMP_PROC_SW_UART {\n  include <sb_types.h>;\n  control;\n  uses sb_Monitor_SW__MissionWindow sb_mission_window;\n  uses sb_Monitor_int64_t sb_tracking_id0;\n  consumes DataportWrite sb_mission_window_notification;\n  consumes Notification sb_periodic_dispatch_notification;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/sb_FPLN_recv_map_Monitor.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__Command_Impl.idl4\";\ncomponent sb_FPLN_recv_map_Monitor {\n\n  provides sb_Monitor_SW__Command_Impl mon;\n  emits DataportWrite monsig;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/sb_WPM_flight_plan_Monitor.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__Mission.idl4\";\ncomponent sb_WPM_flight_plan_Monitor {\n\n  provides sb_Monitor_SW__Mission mon;\n  emits DataportWrite monsig;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/sb_FPLN_mission_rcv_Monitor.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_bool.idl4\";\ncomponent sb_FPLN_mission_rcv_Monitor {\n\n  provides sb_Monitor_bool mon;\n  emits DataportWrite monsig;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/sb_UART_mission_window_Monitor.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_SW__MissionWindow.idl4\";\ncomponent sb_UART_mission_window_Monitor {\n\n  provides sb_Monitor_SW__MissionWindow mon;\n  emits DataportWrite monsig;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/sb_WPM_tracking_id_Monitor.camkes",
        {
          "type" : "ITestResource",
          "content" : "import \"..\/..\/..\/interfaces\/sb_Monitor_int64_t.idl4\";\ncomponent sb_WPM_tracking_id_Monitor {\n\n  provides sb_Monitor_int64_t mon;\n  emits DataportWrite monsig;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/dispatch_periodic\/dispatch_periodic.camkes",
        {
          "type" : "ITestResource",
          "content" : "import <global-connectors.camkes>;\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_MCMP_PROC_SW_RADIO_periodic_dispatch_notification;\n  emits Notification sb_MCMP_PROC_SW_FPLN_periodic_dispatch_notification;\n  emits Notification sb_MCMP_PROC_SW_WPM_periodic_dispatch_notification;\n  emits Notification sb_MCMP_PROC_SW_UART_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/UAV_Impl_Instance.camkes",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/RadioDriver_Impl_MCMP_PROC_SW_RADIO\/RadioDriver_Impl_MCMP_PROC_SW_RADIO.camkes\";\nimport \"components\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN.camkes\";\nimport \"components\/WaypointManager_Impl_MCMP_PROC_SW_WPM\/WaypointManager_Impl_MCMP_PROC_SW_WPM.camkes\";\nimport \"components\/UARTDriver_Impl_MCMP_PROC_SW_UART\/UARTDriver_Impl_MCMP_PROC_SW_UART.camkes\";\nimport \"components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/sb_FPLN_recv_map_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/sb_WPM_flight_plan_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/sb_FPLN_mission_rcv_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_UART_mission_window_Monitor\/sb_UART_mission_window_Monitor.camkes\";\nimport \"components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/sb_WPM_tracking_id_Monitor.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component RadioDriver_Impl_MCMP_PROC_SW_RADIO MCMP_PROC_SW_RADIO;\n    component FlightPlanner_Impl_MCMP_PROC_SW_FPLN MCMP_PROC_SW_FPLN;\n    component WaypointManager_Impl_MCMP_PROC_SW_WPM MCMP_PROC_SW_WPM;\n    component UARTDriver_Impl_MCMP_PROC_SW_UART MCMP_PROC_SW_UART;\n    component sb_FPLN_recv_map_Monitor sb_fpln_recv_map_monitor;\n    component sb_WPM_flight_plan_Monitor sb_wpm_flight_plan_monitor;\n    component sb_FPLN_mission_rcv_Monitor sb_fpln_mission_rcv_monitor;\n    component sb_UART_mission_window_Monitor sb_uart_mission_window_monitor;\n    component sb_WPM_tracking_id_Monitor sb_wpm_tracking_id_monitor;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4RPCCall conn1(from MCMP_PROC_SW_RADIO.sb_recv_map_out0, to sb_fpln_recv_map_monitor.mon);\n    connection seL4RPCCall conn2(from MCMP_PROC_SW_FPLN.sb_recv_map, to sb_fpln_recv_map_monitor.mon);\n    connection seL4Notification conn3(from sb_fpln_recv_map_monitor.monsig, to MCMP_PROC_SW_FPLN.sb_recv_map_notification);\n    connection seL4RPCCall conn4(from MCMP_PROC_SW_FPLN.sb_flight_plan0, to sb_wpm_flight_plan_monitor.mon);\n    connection seL4RPCCall conn5(from MCMP_PROC_SW_WPM.sb_flight_plan, to sb_wpm_flight_plan_monitor.mon);\n    connection seL4Notification conn6(from sb_wpm_flight_plan_monitor.monsig, to MCMP_PROC_SW_WPM.sb_flight_plan_notification);\n    connection seL4RPCCall conn7(from MCMP_PROC_SW_WPM.sb_mission_rcv0, to sb_fpln_mission_rcv_monitor.mon);\n    connection seL4RPCCall conn8(from MCMP_PROC_SW_FPLN.sb_mission_rcv, to sb_fpln_mission_rcv_monitor.mon);\n    connection seL4Notification conn9(from sb_fpln_mission_rcv_monitor.monsig, to MCMP_PROC_SW_FPLN.sb_mission_rcv_notification);\n    connection seL4RPCCall conn10(from MCMP_PROC_SW_WPM.sb_mission_window0, to sb_uart_mission_window_monitor.mon);\n    connection seL4RPCCall conn11(from MCMP_PROC_SW_UART.sb_mission_window, to sb_uart_mission_window_monitor.mon);\n    connection seL4Notification conn12(from sb_uart_mission_window_monitor.monsig, to MCMP_PROC_SW_UART.sb_mission_window_notification);\n    connection seL4RPCCall conn13(from MCMP_PROC_SW_UART.sb_tracking_id0, to sb_wpm_tracking_id_monitor.mon);\n    connection seL4RPCCall conn14(from MCMP_PROC_SW_WPM.sb_tracking_id, to sb_wpm_tracking_id_monitor.mon);\n    connection seL4Notification conn15(from sb_wpm_tracking_id_monitor.monsig, to MCMP_PROC_SW_WPM.sb_tracking_id_notification);\n    connection seL4Notification conn16(from dispatch_periodic_inst.sb_MCMP_PROC_SW_RADIO_periodic_dispatch_notification, to MCMP_PROC_SW_RADIO.sb_periodic_dispatch_notification);\n    connection seL4Notification conn17(from dispatch_periodic_inst.sb_MCMP_PROC_SW_FPLN_periodic_dispatch_notification, to MCMP_PROC_SW_FPLN.sb_periodic_dispatch_notification);\n    connection seL4Notification conn18(from dispatch_periodic_inst.sb_MCMP_PROC_SW_WPM_periodic_dispatch_notification, to MCMP_PROC_SW_WPM.sb_periodic_dispatch_notification);\n    connection seL4Notification conn19(from dispatch_periodic_inst.sb_MCMP_PROC_SW_UART_periodic_dispatch_notification, to MCMP_PROC_SW_UART.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn20(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn21(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/RadioDriver_Impl_MCMP_PROC_SW_RADIO\/src\/radiodriver.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <sb_types.h>\n#include <sb_RadioDriver_Impl.h>\n#include <assert.h>\n\nvoid init(const int64_t * in_arg) {\n\n  printf(\"RDIO: initialise entry point called\\n\");\n\n  SW__Command_Impl command = {\n    .Map = {{ .lat = 0, .longitude = 1, .alt = 2 },\n            { .lat = 1, .longitude = 2, .alt = 3 },\n            { .lat = 2, .longitude = 3, .alt = 4 },\n            { .lat = 3, .longitude = 4, .alt = 5 }},\n      .Pattern = Perimeter,\n      .HMAC = true\n  };\n\n  printf(\"RDIO:> Sending command.\\n\");\n\n  \/\/ send command to FPLN  \n  assert(sb_recv_map_out_write(&command)==true);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN\/src\/flightplanner.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <sb_types.h>\n#include <sb_FlightPlanner_Impl.h>\n#include <assert.h>\n\nstatic bool missioncommand_sent = false;\n\nvoid init(const int64_t *arg){\n}\n\nvoid printCommand(const SW__Command_Impl * command) {\n  \tprintf(\"  Map     = [\\n\");\n    for(int i = 0; i < 4; i++){\n      SW__Coordinate_Impl c = command->Map[i];\n      printf(\"             %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n    }  \t\n    printf(\"            ]\\n\");\n\t\tprintf(\"  Pattern = %i\\n\", command->Pattern);\n\t\tprintf(\"  HMAC    = %i\\n\", command->HMAC);\n}\n\nvoid recv_map(const SW__Command_Impl * command) {\n\n  \tprintf(\"FPLN:< Command.\\n\");\n  \tprintCommand(command);\n\n  \tif(!missioncommand_sent) {\n\n  \t    \/\/ simulate the creation of a new mission\n  \t\tsb_SW__Mission_container mission = { .f = {{ .lat = 0, .longitude = 1, .alt = 2},\n   \t\t                                           { .lat = 1, .longitude = 2, .alt = 3},\n  \t\t                                           { .lat = 2, .longitude = 3, .alt = 4},\n  \t\t                                           { .lat = 3, .longitude = 4, .alt = 5},\n  \t\t                                           { .lat = 4, .longitude = 5, .alt = 6},\n  \t\t                                           { .lat = 5, .longitude = 6, .alt = 7},\n  \t\t                                           { .lat = 6, .longitude = 7, .alt = 8},\n  \t\t                                           { .lat = 7, .longitude = 8, .alt = 9},\n  \t\t                                           { .lat = 8, .longitude = 9, .alt = 10},\n  \t\t                                           { .lat = 9, .longitude = 10, .alt = 11}}};\n\n  \t\tprintf(\"FPLN:> new mission notification.\\n\");\n\n  \t\t\/\/ send the flight plan to WMP\n  \t\tassert(sb_flight_plan_write(&mission) == true);\n\n    \tmissioncommand_sent = true;\n  \t}\n}\n\nvoid mission_rcv(const bool * value) {\n\tprintf(\"FPLN:< Received mission receipt confirmation: %i.\\n\", *value);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/WaypointManager_Impl_MCMP_PROC_SW_WPM\/src\/waypointmanager.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <sb_types.h>\n#include <sb_WaypointManager_Impl.h>\n#include <assert.h>\n#include <string.h>\n\n\nsb_SW__Mission_container _mission;\n\nvoid init(const int64_t * __unused__) {\n}\n\nvoid printMission(const sb_SW__Mission_container * mission){\n  printf(\"  Mission:\\n\");\n  for(int i = 0; i < 10; i++){\n    SW__Coordinate_Impl c = mission->f[i];\n    printf(\"    %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n  }\n}\n\nvoid sendWin(int i) {\n\n  \/\/ simulate creation of new mission windows\n  sb_SW__MissionWindow_container missionWindow = { \n    .f = { _mission.f[i % 10], \n           _mission.f[(i + 1) % 10],\n           _mission.f[(i + 2) % 10],\n           _mission.f[(i + 3) % 10]} \n  };\n\n  \/\/ send mission window to UART  \n  assert(sb_mission_window_write(&missionWindow) == true);\n\n  printf(\"WM:> Sent mission window\\n\");\n}\n\nvoid flight_plan(const sb_SW__Mission_container * mission){\n  printf(\"WM:< Received flight plan\\n\");\n\n  memcpy(&_mission, mission, sizeof(struct sb_SW__Mission_container));\n\n  printMission(&_mission);\n\n  sendWin(0);\n\n  \/\/ send receipt confirmation back to FPLN\n  bool dummy = true;\n  assert(sb_mission_rcv_write(&dummy) == true);\n}\n\nvoid tracking_id(const uintmax_t * nid) {\n  printf(\"WM:< Received %\" PRIu64 \" as the next id.\\n\", *nid);\n\n  sendWin(*nid);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/UARTDriver_Impl_MCMP_PROC_SW_UART\/src\/uartdriver.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <sb_types.h>\n#include <sb_UARTDriver_Impl.h>\n#include <assert.h>\n\nstatic uintmax_t i = 0;\n\nvoid init(const int64_t * in_arg) {\n}\n\nvoid printMissionWindow(const sb_SW__MissionWindow_container * missionWindow){\n  printf(\"  MissionWindow:\\n\");\n  for(int i = 0; i < 4; i++){\n    SW__Coordinate_Impl c = missionWindow->f[i];\n    printf(\"    %i: {%i, %i, %i}\\n\", i, c.lat, c.longitude, c.alt);\n  }\n}\n\nvoid mission_window(const sb_SW__MissionWindow_container * missionWindow){\n  printf(\"UART:< Received mission window\\n\");\n  printMissionWindow(missionWindow);\n\n  for(unsigned int j = 0; j < 100000000; j++){}\n\n  i++;\n\n  printf(\"UART:> Sending %\" PRIu64 \" as the next id.\\n\", i);\n\n  \/\/ send tracking id to WPM\n  assert(sb_tracking_id_write(&i) == true);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_SW__Command_Impl.idl4",
        {
          "type" : "ITestResource",
          "content" : "procedure sb_Monitor_SW__Command_Impl {\n  include <sb_types.h>;\n  bool is_empty();\n  bool read(out SW__Command_Impl m);\n  bool write(refin SW__Command_Impl m);\n};",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/src\/sb_FPLN_recv_map_Monitor.c",
        {
          "type" : "ITestResource",
          "content" : "#include <sb_types.h>\n#include <sb_FPLN_recv_map_Monitor.h>\n\nint monsig_emit(void);\n\nstatic SW__Command_Impl contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(SW__Command_Impl * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const SW__Command_Impl * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/includes\/sb_FPLN_recv_map_Monitor.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_FPLN_RECV_MAP_MONITOR_H\n#define SB_FPLN_RECV_MAP_MONITOR_H\n\n\n#endif \/\/ SB_FPLN_RECV_MAP_MONITOR_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_SW__Mission.idl4",
        {
          "type" : "ITestResource",
          "content" : "procedure sb_Monitor_SW__Mission {\n  include <sb_types.h>;\n  bool is_empty();\n  bool read(out sb_SW__Mission_container m);\n  bool write(refin sb_SW__Mission_container m);\n};",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/src\/sb_WPM_flight_plan_Monitor.c",
        {
          "type" : "ITestResource",
          "content" : "#include <sb_types.h>\n#include <sb_WPM_flight_plan_Monitor.h>\n\nint monsig_emit(void);\n\nstatic sb_SW__Mission_container contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(sb_SW__Mission_container * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const sb_SW__Mission_container * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/includes\/sb_WPM_flight_plan_Monitor.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_WPM_FLIGHT_PLAN_MONITOR_H\n#define SB_WPM_FLIGHT_PLAN_MONITOR_H\n\n\n#endif \/\/ SB_WPM_FLIGHT_PLAN_MONITOR_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_bool.idl4",
        {
          "type" : "ITestResource",
          "content" : "procedure sb_Monitor_bool {\n  include <sb_types.h>;\n  bool is_empty();\n  bool read(out bool m);\n  bool write(refin bool m);\n};",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/src\/sb_FPLN_mission_rcv_Monitor.c",
        {
          "type" : "ITestResource",
          "content" : "#include <sb_types.h>\n#include <sb_FPLN_mission_rcv_Monitor.h>\n\nint monsig_emit(void);\n\nstatic bool contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(bool * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const bool * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/includes\/sb_FPLN_mission_rcv_Monitor.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_FPLN_MISSION_RCV_MONITOR_H\n#define SB_FPLN_MISSION_RCV_MONITOR_H\n\n\n#endif \/\/ SB_FPLN_MISSION_RCV_MONITOR_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_SW__MissionWindow.idl4",
        {
          "type" : "ITestResource",
          "content" : "procedure sb_Monitor_SW__MissionWindow {\n  include <sb_types.h>;\n  bool is_empty();\n  bool read(out sb_SW__MissionWindow_container m);\n  bool write(refin sb_SW__MissionWindow_container m);\n};",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/src\/sb_UART_mission_window_Monitor.c",
        {
          "type" : "ITestResource",
          "content" : "#include <sb_types.h>\n#include <sb_UART_mission_window_Monitor.h>\n\nint monsig_emit(void);\n\nstatic sb_SW__MissionWindow_container contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(sb_SW__MissionWindow_container * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const sb_SW__MissionWindow_container * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_UART_mission_window_Monitor\/includes\/sb_UART_mission_window_Monitor.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_UART_MISSION_WINDOW_MONITOR_H\n#define SB_UART_MISSION_WINDOW_MONITOR_H\n\n\n#endif \/\/ SB_UART_MISSION_WINDOW_MONITOR_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/interfaces\/sb_Monitor_int64_t.idl4",
        {
          "type" : "ITestResource",
          "content" : "procedure sb_Monitor_int64_t {\n  include <sb_types.h>;\n  bool is_empty();\n  bool read(out int64_t m);\n  bool write(refin int64_t m);\n};",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/src\/sb_WPM_tracking_id_Monitor.c",
        {
          "type" : "ITestResource",
          "content" : "#include <sb_types.h>\n#include <sb_WPM_tracking_id_Monitor.h>\n\nint monsig_emit(void);\n\nstatic int64_t contents;\nbool receivedData = false;\n\nbool mon_is_empty() {\n  return !receivedData;\n}\n\nbool mon_read(int64_t * m) {\n  *m = contents;\n  return receivedData;\n}\n\nbool mon_write(const int64_t * m) {\n  receivedData = true;\n  contents = *m;\n  monsig_emit();\n  return receivedData;\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/includes\/sb_WPM_tracking_id_Monitor.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_WPM_TRACKING_ID_MONITOR_H\n#define SB_WPM_TRACKING_ID_MONITOR_H\n\n\n#endif \/\/ SB_WPM_TRACKING_ID_MONITOR_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (UAV_Impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nincludeGlobalComponents()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(RadioDriver_Impl_MCMP_PROC_SW_RADIO\n  SOURCES components\/RadioDriver_Impl_MCMP_PROC_SW_RADIO\/\/src\/radiodriver.c components\/RadioDriver_Impl_MCMP_PROC_SW_RADIO\/src\/sb_RadioDriver_Impl.c\n  INCLUDES components\/RadioDriver_Impl_MCMP_PROC_SW_RADIO\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(FlightPlanner_Impl_MCMP_PROC_SW_FPLN\n  SOURCES components\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN\/\/src\/flightplanner.c components\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN\/src\/sb_FlightPlanner_Impl.c\n  INCLUDES components\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(WaypointManager_Impl_MCMP_PROC_SW_WPM\n  SOURCES components\/WaypointManager_Impl_MCMP_PROC_SW_WPM\/\/src\/waypointmanager.c components\/WaypointManager_Impl_MCMP_PROC_SW_WPM\/src\/sb_WaypointManager_Impl.c\n  INCLUDES components\/WaypointManager_Impl_MCMP_PROC_SW_WPM\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(UARTDriver_Impl_MCMP_PROC_SW_UART\n  SOURCES components\/UARTDriver_Impl_MCMP_PROC_SW_UART\/\/src\/uartdriver.c components\/UARTDriver_Impl_MCMP_PROC_SW_UART\/src\/sb_UARTDriver_Impl.c\n  INCLUDES components\/UARTDriver_Impl_MCMP_PROC_SW_UART\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  LIBS SB_Type_Library\n)\n\nDeclareCAmkESComponent(sb_FPLN_recv_map_Monitor\n  SOURCES components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/src\/sb_FPLN_recv_map_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_FPLN_recv_map_Monitor\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(sb_WPM_flight_plan_Monitor\n  SOURCES components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/src\/sb_WPM_flight_plan_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_WPM_flight_plan_Monitor\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(sb_FPLN_mission_rcv_Monitor\n  SOURCES components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/src\/sb_FPLN_mission_rcv_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_FPLN_mission_rcv_Monitor\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(sb_UART_mission_window_Monitor\n  SOURCES components\/sb_Monitors\/sb_UART_mission_window_Monitor\/src\/sb_UART_mission_window_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_UART_mission_window_Monitor\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(sb_WPM_tracking_id_Monitor\n  SOURCES components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/src\/sb_WPM_tracking_id_Monitor.c\n  INCLUDES components\/sb_Monitors\/sb_WPM_tracking_id_Monitor\/includes\/ types\/includes\n)\n\nDeclareCAmkESRootserver(UAV_Impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/bin\/run-camkes.sh",
        {
          "type" : "ITestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:sh\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate,help\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"-c, --camkes-dir       Location of CAmkES project\"\n  echo \"-n, --non-interactive  Non-interactive mode.  Symlink in apps directory will be replaced\"\n  echo \"                         if present, CAmkES build directory will not be deleted\"\n  echo \"-o, --camkes-options   CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"-s, --simulate         Simulate via QEMU\"\n  echo \"-h, --help             Display this information\"\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\n    exit 2\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    -h|--help) usage; exit 0 ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\n  exit 3\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    # if the project contains VMs and USE_PRECONFIGURED_ROOTFS=OFF then\n    # deleting the build directory would force the linux image to be\n    # re-downloaded, which can take a long time\n    echo \"Non-interactive mode so not deleting existing ${BUILD_DIR}\"\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\ncat >${BUILD_DIR}\/sim << EOL\n#!\/usr\/bin\/env bash\n\nexport SCRIPT_HOME=\\$( cd \"\\$( dirname \"\\$0\" )\" &> \/dev\/null && pwd )\ncd \\${SCRIPT_HOME}\n\n# console output from simulation disappears when QEMU shuts down when run from\n# the CAmkES generated .\/simulate script. Instead call QEMU directly using the\n# default values .\/simulate would pass\n\nqemu-system-x86_64 \\\\\n    -cpu Nehalem,-vme,+pdpe1gb,-xsave,-xsaveopt,-xsavec,-fsgsbase,-invpcid,enforce \\\\\n    -nographic \\\\\n    -serial mon:stdio \\\\\n    -m size=512M \\\\\n    -kernel images\/kernel-x86_64-pc99 \\\\\n    -initrd images\/capdl-loader-image-x86_64-pc99\nEOL\n\nchmod 700 ${BUILD_DIR}\/sim\necho \"Wrote: ${BUILD_DIR}\/sim\"\n\nif [ \"${SIMULATE}\" = true ]; then\n  # ${BUILD_DIR}\/simulate\n  ${BUILD_DIR}\/sim\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/RadioDriver_Impl_MCMP_PROC_SW_RADIO\/src\/sb_RadioDriver_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_RadioDriver_Impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_recv_map_out_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_recv_map_out_write(const SW__Command_Impl * sb_recv_map_out){\n  bool sb_result = true;\n  sb_result &= sb_recv_map_out0_write((SW__Command_Impl *) sb_recv_map_out);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_RadioDriver_Impl_MCMP_PROC_SW_RADIO_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_RadioDriver_Impl_MCMP_PROC_SW_RADIO_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_RadioDriver_Impl_MCMP_PROC_SW_RADIO_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/RadioDriver_Impl_MCMP_PROC_SW_RADIO\/includes\/sb_RadioDriver_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_RADIODRIVER_IMPL_H\n#define SB_RADIODRIVER_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_recv_map_out_write(const SW__Command_Impl * sb_recv_map_out);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ SB_RADIODRIVER_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN\/src\/sb_FlightPlanner_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_FlightPlanner_Impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_flight_plan_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_flight_plan_write(const sb_SW__Mission_container * sb_flight_plan){\n  bool sb_result = true;\n  sb_result &= sb_flight_plan0_write((sb_SW__Mission_container *) sb_flight_plan);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_FlightPlanner_Impl_MCMP_PROC_SW_FPLN_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_FlightPlanner_Impl_MCMP_PROC_SW_FPLN_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_FlightPlanner_Impl_MCMP_PROC_SW_FPLN_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/FlightPlanner_Impl_MCMP_PROC_SW_FPLN\/includes\/sb_FlightPlanner_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_FLIGHTPLANNER_IMPL_H\n#define SB_FLIGHTPLANNER_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_flight_plan_write(const sb_SW__Mission_container * sb_flight_plan);\n\nbool sb_mission_rcv_read(bool * sb_mission_rcv);\n\nbool sb_recv_map_read(SW__Command_Impl * sb_recv_map);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ SB_FLIGHTPLANNER_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/WaypointManager_Impl_MCMP_PROC_SW_WPM\/src\/sb_WaypointManager_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_WaypointManager_Impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_mission_rcv_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_mission_rcv_write(const bool * sb_mission_rcv){\n  bool sb_result = true;\n  sb_result &= sb_mission_rcv0_write((bool *) sb_mission_rcv);\n  return sb_result;\n}\n\n\/************************************************************************\n * sb_mission_window_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_mission_window_write(const sb_SW__MissionWindow_container * sb_mission_window){\n  bool sb_result = true;\n  sb_result &= sb_mission_window0_write((sb_SW__MissionWindow_container *) sb_mission_window);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_WaypointManager_Impl_MCMP_PROC_SW_WPM_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_WaypointManager_Impl_MCMP_PROC_SW_WPM_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_WaypointManager_Impl_MCMP_PROC_SW_WPM_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/WaypointManager_Impl_MCMP_PROC_SW_WPM\/includes\/sb_WaypointManager_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_WAYPOINTMANAGER_IMPL_H\n#define SB_WAYPOINTMANAGER_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_flight_plan_read(sb_SW__Mission_container * sb_flight_plan);\n\nbool sb_mission_rcv_write(const bool * sb_mission_rcv);\n\nbool sb_mission_window_write(const sb_SW__MissionWindow_container * sb_mission_window);\n\nbool sb_tracking_id_read(int64_t * sb_tracking_id);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ SB_WAYPOINTMANAGER_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/UARTDriver_Impl_MCMP_PROC_SW_UART\/src\/sb_UARTDriver_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_UARTDriver_Impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\n\/************************************************************************\n * sb_tracking_id_write:\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to write to a remote data port.\n *\n * XXX: When simulating fan out, the caller of this function will only\n * receive a positive response when all enqueues are successful. When a\n * negative response is received it only indicates that at least one\n * enqueue attempt failed.\n *\n ************************************************************************\/\nbool sb_tracking_id_write(const int64_t * sb_tracking_id){\n  bool sb_result = true;\n  sb_result &= sb_tracking_id0_write((int64_t *) sb_tracking_id);\n  return sb_result;\n}\n\n\/************************************************************************\n *  sb_entrypoint_UARTDriver_Impl_MCMP_PROC_SW_UART_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_UARTDriver_Impl_MCMP_PROC_SW_UART_initializer(const int64_t * in_arg) {\n  init((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_UARTDriver_Impl_MCMP_PROC_SW_UART_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/UARTDriver_Impl_MCMP_PROC_SW_UART\/includes\/sb_UARTDriver_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_UARTDRIVER_IMPL_H\n#define SB_UARTDRIVER_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_mission_window_read(sb_SW__MissionWindow_container * sb_mission_window);\n\nbool sb_tracking_id_write(const int64_t * sb_tracking_id);\n\nvoid init(const int64_t *arg);\n\n#endif \/\/ SB_UARTDRIVER_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c",
        {
          "type" : "ITestResource",
          "content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_MCMP_PROC_SW_RADIO_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_MCMP_PROC_SW_FPLN_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_MCMP_PROC_SW_WPM_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_MCMP_PROC_SW_UART_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/types\/includes\/sb_types.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef\n  struct MC__MISSING_TYPE_Impl {\n    int32_t MISSING;\n  } MC__MISSING_TYPE_Impl;\n\ntypedef\n  enum {ZigZag, StraightLine, Perimeter} SW__FlightPattern;\n\ntypedef\n  struct SW__Coordinate_Impl {\n    int32_t lat;\n    int32_t longitude;\n    int32_t alt;\n  } SW__Coordinate_Impl;\n\ntypedef SW__Coordinate_Impl SW__Map [4];\n\ntypedef\n  struct sb_SW__Map_container {\n    SW__Map f;\n  } sb_SW__Map_container;\n\ntypedef\n  struct SW__Command_Impl {\n    SW__Map Map;\n    SW__FlightPattern Pattern;\n    bool HMAC;\n  } SW__Command_Impl;\n\ntypedef SW__Coordinate_Impl SW__Mission [10];\n\ntypedef\n  struct sb_SW__Mission_container {\n    SW__Mission f;\n  } sb_SW__Mission_container;\n\ntypedef SW__Coordinate_Impl SW__MissionWindow [4];\n\ntypedef\n  struct sb_SW__MissionWindow_container {\n    SW__MissionWindow f;\n  } sb_SW__MissionWindow_container;\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/settings.cmake",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/types\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            INTERFACE\n            )\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        INTERFACE\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        INTERFACE\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           INTERFACE\n                           includes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ],
      [
        "uav_alt_domains--SeL4_TB\/proof\/smt2_case.smt2",
        {
          "type" : "ITestResource",
          "content" : "(set-logic ALL)\n\n(declare-datatypes ((Option 1))\n  ((par (T) ((Some (value T))\n             (None)))))\n\n(declare-datatypes ((Mode 0)) ((\n  (SeL4)\n  (SeL4_Only)\n  (SeL4_TB))))\n\n(declare-datatypes ((ComponentCategory 0)) ((\n  (Abstract)\n  (Bus)\n  (Data)\n  (Device)\n  (Memory)\n  (Process)\n  (Processor)\n  (Subprogram)\n  (SubprogramGroup)\n  (System)\n  (Thread)\n  (ThreadGroup)\n  (VirtualBus)\n  (VirtualProcessor))))\n\n(declare-datatypes ((DispatchProtocol 0)) ((\n  (Periodic)\n  (Sporadic))))\n\n(declare-datatypes ((SchedulingType 0)) ((\n  (Pacing)\n  (SelfPacing)\n  (PeriodicDispatching)\n  (UNSPECIFIED_SCHEDULING_TYPE))))\n\n(declare-datatypes ((Direction 0)) ((\n  (In)\n  (Out))))\n\n(declare-datatypes ((PortType 0)) ((\n  (AadlDataPort)\n  (AadlEventPort)\n  (AadlEventDataPort))))\n\n\n(declare-const CodegenMode Mode)\n(assert (= CodegenMode SeL4_TB))\n\n(declare-const ModelSchedulingType SchedulingType)\n(assert (= ModelSchedulingType PeriodicDispatching))\n\n(declare-datatypes ((AadlComponent 0)) ((\n  (UAV_Impl_Instance_MCMP_PROC_SW_RADIO)\n  (UAV_Impl_Instance_MCMP_PROC_HW)\n  (UAV_Impl_Instance_MCMP_PROC_SW_FPLN)\n  (UAV_Impl_Instance_MCMP_PROC_SW_WPM)\n  (UAV_Impl_Instance_MCMP_PROC_SW_UART)\n)))\n(declare-const AadlComponent_count Int)\n(assert (= 5 AadlComponent_count))\n\n(declare-const AadlComponentCategory (Array AadlComponent (Option ComponentCategory)))\n  (assert (= (Some Thread) (select AadlComponentCategory UAV_Impl_Instance_MCMP_PROC_SW_RADIO)))\n  (assert (= (Some Processor) (select AadlComponentCategory UAV_Impl_Instance_MCMP_PROC_HW)))\n  (assert (= (Some Thread) (select AadlComponentCategory UAV_Impl_Instance_MCMP_PROC_SW_FPLN)))\n  (assert (= (Some Processor) (select AadlComponentCategory UAV_Impl_Instance_MCMP_PROC_HW)))\n  (assert (= (Some Thread) (select AadlComponentCategory UAV_Impl_Instance_MCMP_PROC_SW_WPM)))\n  (assert (= (Some Processor) (select AadlComponentCategory UAV_Impl_Instance_MCMP_PROC_HW)))\n  (assert (= (Some Thread) (select AadlComponentCategory UAV_Impl_Instance_MCMP_PROC_SW_UART)))\n  (assert (= (Some Processor) (select AadlComponentCategory UAV_Impl_Instance_MCMP_PROC_HW)))\n\n(declare-const ProcessorBindings (Array AadlComponent (Option AadlComponent)))\n  (assert (= (Some UAV_Impl_Instance_MCMP_PROC_HW) (select ProcessorBindings UAV_Impl_Instance_MCMP_PROC_SW_RADIO)))\n  (assert (= (Some UAV_Impl_Instance_MCMP_PROC_HW) (select ProcessorBindings UAV_Impl_Instance_MCMP_PROC_SW_FPLN)))\n  (assert (= (Some UAV_Impl_Instance_MCMP_PROC_HW) (select ProcessorBindings UAV_Impl_Instance_MCMP_PROC_SW_WPM)))\n  (assert (= (Some UAV_Impl_Instance_MCMP_PROC_HW) (select ProcessorBindings UAV_Impl_Instance_MCMP_PROC_SW_UART)))\n\n(declare-const AadlDispatchProtocol (Array AadlComponent (Option DispatchProtocol)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol UAV_Impl_Instance_MCMP_PROC_SW_RADIO)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol UAV_Impl_Instance_MCMP_PROC_SW_FPLN)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol UAV_Impl_Instance_MCMP_PROC_SW_WPM)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol UAV_Impl_Instance_MCMP_PROC_SW_UART)))\n(declare-const AadlDispatchProtocol_size Int)\n(assert (= 4 AadlDispatchProtocol_size))\n\n(declare-datatypes ((AadlPort 0)) ((\n  )))\n(declare-const AadlPort_count Int)\n(assert (= 0 AadlPort_count))\n\n(declare-const AadlPortComponent (Array AadlPort (Option AadlComponent)))\n(declare-const AadlPortComponent_size Int)\n(assert (= 0 AadlPortComponent_size))\n\n(declare-const AadlPortType (Array AadlPort PortType))\n(declare-const AadlPortType_size Int)\n(assert (= 0 AadlPortType_size))\n\n(declare-const AadlPortDirection (Array AadlPort Direction))\n(declare-const AadlPortDirection_size Int)\n(assert (= 0 AadlPortDirection_size))\n\n(define-fun AadlConnectionFlowTos ((p1 AadlPort) (p2 AadlPort)) Bool\n  (or\n    false))\n(declare-const AadlConnectionFlowsTos_count Int)\n(assert (= 0 AadlConnectionFlowsTos_count))\n\n\n(declare-datatypes ((AccessType 0)) ((\n  (R)\n  (W)\n  (RW))))\n\n(declare-datatypes ((seL4PortType 0)) ((\n  (seL4GlobalAsynch)\n  (seL4GlobalAsynchCallback)\n  (seL4Notification)\n  (seL4RPCCall)\n  (seL4SharedData)\n  (seL4SharedDataWithCaps)\n  (seL4SerialServer)\n  (seL4TimeServer)\n  (seL4VMDTBPassthrough)\n  (CASE_AADL_EventDataport))))\n\n(declare-datatypes ((CAmkESComponent 0)) ((\n  (MCMP_PROC_SW_RADIO)\n  (MCMP_PROC_SW_FPLN)\n  (MCMP_PROC_SW_WPM)\n  (MCMP_PROC_SW_UART)\n  (sb_fpln_recv_map_monitor)\n  (sb_wpm_flight_plan_monitor)\n  (sb_fpln_mission_rcv_monitor)\n  (sb_uart_mission_window_monitor)\n  (sb_wpm_tracking_id_monitor)\n  (dispatch_periodic_inst)\n  (time_server))))\n(declare-const CAmkESComponent_count Int)\n(assert (= 11 CAmkESComponent_count))\n\n(define-fun isPeriodicDispatcher ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or (= _component dispatch_periodic_inst)\n           false)))\n\n(define-fun isPacer ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or \n           false)))\n\n(define-fun isTimeServer ((_component CAmkESComponent)) Bool\n  (and ; TODO - list scenarios where a time server is expected\n       (or (= _component time_server)\n           false)))\n\n(define-fun isMonitor ((_component CAmkESComponent)) Bool\n  (or (= _component sb_fpln_recv_map_monitor)\n      (= _component sb_wpm_flight_plan_monitor)\n      (= _component sb_fpln_mission_rcv_monitor)\n      (= _component sb_uart_mission_window_monitor)\n      (= _component sb_wpm_tracking_id_monitor)\n      false))\n(declare-const Monitor_count Int)\n(assert (= 5 Monitor_count))\n\n(declare-datatypes ((CAmkESPort 0)) ((\n  (MCMP_PROC_SW_RADIO_sb_recv_map_out0)\n  (MCMP_PROC_SW_RADIO_sb_periodic_dispatch_notification)\n  (MCMP_PROC_SW_FPLN_sb_flight_plan0)\n  (MCMP_PROC_SW_FPLN_sb_mission_rcv)\n  (MCMP_PROC_SW_FPLN_sb_recv_map)\n  (MCMP_PROC_SW_FPLN_sb_mission_rcv_notification)\n  (MCMP_PROC_SW_FPLN_sb_recv_map_notification)\n  (MCMP_PROC_SW_FPLN_sb_periodic_dispatch_notification)\n  (MCMP_PROC_SW_WPM_sb_flight_plan)\n  (MCMP_PROC_SW_WPM_sb_mission_rcv0)\n  (MCMP_PROC_SW_WPM_sb_mission_window0)\n  (MCMP_PROC_SW_WPM_sb_tracking_id)\n  (MCMP_PROC_SW_WPM_sb_flight_plan_notification)\n  (MCMP_PROC_SW_WPM_sb_tracking_id_notification)\n  (MCMP_PROC_SW_WPM_sb_periodic_dispatch_notification)\n  (MCMP_PROC_SW_UART_sb_mission_window)\n  (MCMP_PROC_SW_UART_sb_tracking_id0)\n  (MCMP_PROC_SW_UART_sb_mission_window_notification)\n  (MCMP_PROC_SW_UART_sb_periodic_dispatch_notification)\n  (sb_fpln_recv_map_monitor_monsig)\n  (sb_fpln_recv_map_monitor_mon)\n  (sb_wpm_flight_plan_monitor_monsig)\n  (sb_wpm_flight_plan_monitor_mon)\n  (sb_fpln_mission_rcv_monitor_monsig)\n  (sb_fpln_mission_rcv_monitor_mon)\n  (sb_uart_mission_window_monitor_monsig)\n  (sb_uart_mission_window_monitor_mon)\n  (sb_wpm_tracking_id_monitor_monsig)\n  (sb_wpm_tracking_id_monitor_mon)\n  (dispatch_periodic_inst_sb_MCMP_PROC_SW_RADIO_periodic_dispatch_notification)\n  (dispatch_periodic_inst_sb_MCMP_PROC_SW_FPLN_periodic_dispatch_notification)\n  (dispatch_periodic_inst_sb_MCMP_PROC_SW_WPM_periodic_dispatch_notification)\n  (dispatch_periodic_inst_sb_MCMP_PROC_SW_UART_periodic_dispatch_notification)\n  (dispatch_periodic_inst_timer)\n  (dispatch_periodic_inst_timer_complete)\n  (time_server_timer_notification)\n  (time_server_the_timer))))\n(declare-const CAmkESPort_count Int)\n(assert (= 37 CAmkESPort_count))\n\n(declare-const CAmkESAccessRestrictions (Array CAmkESPort AccessType))\n(declare-const CAmkESAccessRestrictions_size Int)\n(assert (= 0 CAmkESAccessRestrictions_size))\n\n(declare-datatypes ((CAmkESConnection 0)) ((\n  (conn1)\n  (conn2)\n  (conn3)\n  (conn4)\n  (conn5)\n  (conn6)\n  (conn7)\n  (conn8)\n  (conn9)\n  (conn10)\n  (conn11)\n  (conn12)\n  (conn13)\n  (conn14)\n  (conn15)\n  (conn16)\n  (conn17)\n  (conn18)\n  (conn19)\n  (conn20)\n  (conn21))))\n(declare-const CAmkESConnection_count Int)\n(assert (= 21 CAmkESConnection_count))\n\n(define-fun isSelfPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType SelfPacing)\n       (or \n           false)))\n\n(define-fun isPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or \n           false)))\n\n(define-fun isPeriodicDispatchingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or (= _conn conn16)\n           (= _conn conn17)\n           (= _conn conn18)\n           (= _conn conn19)\n           (= _conn conn20)\n           (= _conn conn21)\n           false)))\n(declare-const PeriodicDispatchingConnection_count Int)\n(assert (= 6 PeriodicDispatchingConnection_count))\n\n; non Aadl connection refinement connections required by a VM\n(define-fun isVMAuxConnection ((_conn CAmkESConnection)) Bool\n  (or \n      false))\n\n(declare-const CAmkESConnectionType (Array CAmkESConnection seL4PortType))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn1)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn2)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn3)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn4)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn5)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn6)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn7)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn8)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn9)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn10)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn11)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn12)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn13)))\n  (assert (= seL4RPCCall (select CAmkESConnectionType conn14)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn15)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn16)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn17)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn18)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn19)))\n  (assert (= seL4TimeServer (select CAmkESConnectionType conn20)))\n  (assert (= seL4GlobalAsynchCallback (select CAmkESConnectionType conn21)))\n(declare-const CAmkESConnectionType_count Int)\n(assert (= 21 CAmkESConnectionType_count))\n\n(declare-const CAmkESPortComponent (Array CAmkESPort CAmkESComponent))\n  (assert (= MCMP_PROC_SW_RADIO (select CAmkESPortComponent MCMP_PROC_SW_RADIO_sb_recv_map_out0)))\n  (assert (= MCMP_PROC_SW_RADIO (select CAmkESPortComponent MCMP_PROC_SW_RADIO_sb_periodic_dispatch_notification)))\n  (assert (= MCMP_PROC_SW_FPLN (select CAmkESPortComponent MCMP_PROC_SW_FPLN_sb_flight_plan0)))\n  (assert (= MCMP_PROC_SW_FPLN (select CAmkESPortComponent MCMP_PROC_SW_FPLN_sb_mission_rcv)))\n  (assert (= MCMP_PROC_SW_FPLN (select CAmkESPortComponent MCMP_PROC_SW_FPLN_sb_recv_map)))\n  (assert (= MCMP_PROC_SW_FPLN (select CAmkESPortComponent MCMP_PROC_SW_FPLN_sb_mission_rcv_notification)))\n  (assert (= MCMP_PROC_SW_FPLN (select CAmkESPortComponent MCMP_PROC_SW_FPLN_sb_recv_map_notification)))\n  (assert (= MCMP_PROC_SW_FPLN (select CAmkESPortComponent MCMP_PROC_SW_FPLN_sb_periodic_dispatch_notification)))\n  (assert (= MCMP_PROC_SW_WPM (select CAmkESPortComponent MCMP_PROC_SW_WPM_sb_flight_plan)))\n  (assert (= MCMP_PROC_SW_WPM (select CAmkESPortComponent MCMP_PROC_SW_WPM_sb_mission_rcv0)))\n  (assert (= MCMP_PROC_SW_WPM (select CAmkESPortComponent MCMP_PROC_SW_WPM_sb_mission_window0)))\n  (assert (= MCMP_PROC_SW_WPM (select CAmkESPortComponent MCMP_PROC_SW_WPM_sb_tracking_id)))\n  (assert (= MCMP_PROC_SW_WPM (select CAmkESPortComponent MCMP_PROC_SW_WPM_sb_flight_plan_notification)))\n  (assert (= MCMP_PROC_SW_WPM (select CAmkESPortComponent MCMP_PROC_SW_WPM_sb_tracking_id_notification)))\n  (assert (= MCMP_PROC_SW_WPM (select CAmkESPortComponent MCMP_PROC_SW_WPM_sb_periodic_dispatch_notification)))\n  (assert (= MCMP_PROC_SW_UART (select CAmkESPortComponent MCMP_PROC_SW_UART_sb_mission_window)))\n  (assert (= MCMP_PROC_SW_UART (select CAmkESPortComponent MCMP_PROC_SW_UART_sb_tracking_id0)))\n  (assert (= MCMP_PROC_SW_UART (select CAmkESPortComponent MCMP_PROC_SW_UART_sb_mission_window_notification)))\n  (assert (= MCMP_PROC_SW_UART (select CAmkESPortComponent MCMP_PROC_SW_UART_sb_periodic_dispatch_notification)))\n  (assert (= sb_fpln_recv_map_monitor (select CAmkESPortComponent sb_fpln_recv_map_monitor_monsig)))\n  (assert (= sb_fpln_recv_map_monitor (select CAmkESPortComponent sb_fpln_recv_map_monitor_mon)))\n  (assert (= sb_wpm_flight_plan_monitor (select CAmkESPortComponent sb_wpm_flight_plan_monitor_monsig)))\n  (assert (= sb_wpm_flight_plan_monitor (select CAmkESPortComponent sb_wpm_flight_plan_monitor_mon)))\n  (assert (= sb_fpln_mission_rcv_monitor (select CAmkESPortComponent sb_fpln_mission_rcv_monitor_monsig)))\n  (assert (= sb_fpln_mission_rcv_monitor (select CAmkESPortComponent sb_fpln_mission_rcv_monitor_mon)))\n  (assert (= sb_uart_mission_window_monitor (select CAmkESPortComponent sb_uart_mission_window_monitor_monsig)))\n  (assert (= sb_uart_mission_window_monitor (select CAmkESPortComponent sb_uart_mission_window_monitor_mon)))\n  (assert (= sb_wpm_tracking_id_monitor (select CAmkESPortComponent sb_wpm_tracking_id_monitor_monsig)))\n  (assert (= sb_wpm_tracking_id_monitor (select CAmkESPortComponent sb_wpm_tracking_id_monitor_mon)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_sb_MCMP_PROC_SW_RADIO_periodic_dispatch_notification)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_sb_MCMP_PROC_SW_FPLN_periodic_dispatch_notification)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_sb_MCMP_PROC_SW_WPM_periodic_dispatch_notification)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_sb_MCMP_PROC_SW_UART_periodic_dispatch_notification)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_timer)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_timer_complete)))\n  (assert (= time_server (select CAmkESPortComponent time_server_timer_notification)))\n  (assert (= time_server (select CAmkESPortComponent time_server_the_timer)))\n(declare-const CAmkESPortComponent_size Int)\n(assert (= 37 CAmkESPortComponent_size))\n\n(define-fun CAmkESConnectionFlowTos ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort)) Bool\n  (or\n    (and (= _conn conn1) (= _p1 MCMP_PROC_SW_RADIO_sb_recv_map_out0) (= _p2 sb_fpln_recv_map_monitor_mon))\n    (and (= _conn conn2) (= _p1 MCMP_PROC_SW_FPLN_sb_recv_map) (= _p2 sb_fpln_recv_map_monitor_mon))\n    (and (= _conn conn3) (= _p1 sb_fpln_recv_map_monitor_monsig) (= _p2 MCMP_PROC_SW_FPLN_sb_recv_map_notification))\n    (and (= _conn conn4) (= _p1 MCMP_PROC_SW_FPLN_sb_flight_plan0) (= _p2 sb_wpm_flight_plan_monitor_mon))\n    (and (= _conn conn5) (= _p1 MCMP_PROC_SW_WPM_sb_flight_plan) (= _p2 sb_wpm_flight_plan_monitor_mon))\n    (and (= _conn conn6) (= _p1 sb_wpm_flight_plan_monitor_monsig) (= _p2 MCMP_PROC_SW_WPM_sb_flight_plan_notification))\n    (and (= _conn conn7) (= _p1 MCMP_PROC_SW_WPM_sb_mission_rcv0) (= _p2 sb_fpln_mission_rcv_monitor_mon))\n    (and (= _conn conn8) (= _p1 MCMP_PROC_SW_FPLN_sb_mission_rcv) (= _p2 sb_fpln_mission_rcv_monitor_mon))\n    (and (= _conn conn9) (= _p1 sb_fpln_mission_rcv_monitor_monsig) (= _p2 MCMP_PROC_SW_FPLN_sb_mission_rcv_notification))\n    (and (= _conn conn10) (= _p1 MCMP_PROC_SW_WPM_sb_mission_window0) (= _p2 sb_uart_mission_window_monitor_mon))\n    (and (= _conn conn11) (= _p1 MCMP_PROC_SW_UART_sb_mission_window) (= _p2 sb_uart_mission_window_monitor_mon))\n    (and (= _conn conn12) (= _p1 sb_uart_mission_window_monitor_monsig) (= _p2 MCMP_PROC_SW_UART_sb_mission_window_notification))\n    (and (= _conn conn13) (= _p1 MCMP_PROC_SW_UART_sb_tracking_id0) (= _p2 sb_wpm_tracking_id_monitor_mon))\n    (and (= _conn conn14) (= _p1 MCMP_PROC_SW_WPM_sb_tracking_id) (= _p2 sb_wpm_tracking_id_monitor_mon))\n    (and (= _conn conn15) (= _p1 sb_wpm_tracking_id_monitor_monsig) (= _p2 MCMP_PROC_SW_WPM_sb_tracking_id_notification))\n    (and (= _conn conn16) (= _p1 dispatch_periodic_inst_sb_MCMP_PROC_SW_RADIO_periodic_dispatch_notification) (= _p2 MCMP_PROC_SW_RADIO_sb_periodic_dispatch_notification))\n    (and (= _conn conn17) (= _p1 dispatch_periodic_inst_sb_MCMP_PROC_SW_FPLN_periodic_dispatch_notification) (= _p2 MCMP_PROC_SW_FPLN_sb_periodic_dispatch_notification))\n    (and (= _conn conn18) (= _p1 dispatch_periodic_inst_sb_MCMP_PROC_SW_WPM_periodic_dispatch_notification) (= _p2 MCMP_PROC_SW_WPM_sb_periodic_dispatch_notification))\n    (and (= _conn conn19) (= _p1 dispatch_periodic_inst_sb_MCMP_PROC_SW_UART_periodic_dispatch_notification) (= _p2 MCMP_PROC_SW_UART_sb_periodic_dispatch_notification))\n    (and (= _conn conn20) (= _p1 dispatch_periodic_inst_timer) (= _p2 time_server_the_timer))\n    (and (= _conn conn21) (= _p1 time_server_timer_notification) (= _p2 dispatch_periodic_inst_timer_complete))\n    false))\n(declare-const CAmkESConnectionFlowTos_count Int)\n(assert (= 21 CAmkESConnectionFlowTos_count))\n\n(define-fun ComponentRefinement ((ac (Option AadlComponent)) (cc CAmkESComponent)) Bool\n  (or\n    (and (= ac (Some UAV_Impl_Instance_MCMP_PROC_SW_RADIO)) (= cc MCMP_PROC_SW_RADIO))\n    (and (= ac (Some UAV_Impl_Instance_MCMP_PROC_SW_FPLN)) (= cc MCMP_PROC_SW_FPLN))\n    (and (= ac (Some UAV_Impl_Instance_MCMP_PROC_SW_WPM)) (= cc MCMP_PROC_SW_WPM))\n    (and (= ac (Some UAV_Impl_Instance_MCMP_PROC_SW_UART)) (= cc MCMP_PROC_SW_UART))\n    false))\n(declare-const ComponentRefinement_count Int)\n(assert (= 4 ComponentRefinement_count))\n\n(define-fun PortRefinement ((ap AadlPort) (cp CAmkESPort)) Bool\n  (or\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_RADIO_recv_map_out) (= cp MCMP_PROC_SW_RADIO_sb_recv_map_out0))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_FPLN_flight_plan) (= cp MCMP_PROC_SW_FPLN_sb_flight_plan0))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_FPLN_mission_rcv) (= cp MCMP_PROC_SW_FPLN_sb_mission_rcv))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_FPLN_recv_map) (= cp MCMP_PROC_SW_FPLN_sb_recv_map))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_FPLN_mission_rcv) (= cp MCMP_PROC_SW_FPLN_sb_mission_rcv_notification))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_FPLN_recv_map) (= cp MCMP_PROC_SW_FPLN_sb_recv_map_notification))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_WPM_flight_plan) (= cp MCMP_PROC_SW_WPM_sb_flight_plan))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_WPM_mission_rcv) (= cp MCMP_PROC_SW_WPM_sb_mission_rcv0))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_WPM_mission_window) (= cp MCMP_PROC_SW_WPM_sb_mission_window0))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_WPM_tracking_id) (= cp MCMP_PROC_SW_WPM_sb_tracking_id))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_WPM_flight_plan) (= cp MCMP_PROC_SW_WPM_sb_flight_plan_notification))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_WPM_tracking_id) (= cp MCMP_PROC_SW_WPM_sb_tracking_id_notification))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_UART_mission_window) (= cp MCMP_PROC_SW_UART_sb_mission_window))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_UART_tracking_id) (= cp MCMP_PROC_SW_UART_sb_tracking_id0))\n    (and (= ap UAV_Impl_Instance_MCMP_PROC_SW_UART_mission_window) (= cp MCMP_PROC_SW_UART_sb_mission_window_notification))\n    false))\n(declare-const PortRefinement_count Int)\n(assert (= 15 PortRefinement_count))\n\n(define-fun isVMComponent ((cc CAmkESComponent)) Bool\n  (exists ((ap AadlComponent))\n    (and (ComponentRefinement (Some ap) cc)                   ; cc refines ap\n         (= (Some Process) (select AadlComponentCategory ap)) ; ap is a process\n         (match (select ProcessorBindings ap) (\n           ((Some x) (= (Some VirtualProcessor) (select AadlComponentCategory x))) ; ap's bound to virtual processor\n           (None false))))))\n\n(define-fun isVMAuxPort ((cp CAmkESPort)) Bool\n  (exists ((cc CAmkESComponent))\n    (and (= cc (select CAmkESPortComponent cp))\n         (isVMComponent cc)\n         (or\n            false))))\n\n(define-fun AadlFlowDirectionality () Bool\n  (forall ((p1 AadlPort) (p2 AadlPort))\n    (=> (AadlConnectionFlowTos p1 p2)\n        (and (= Out (select AadlPortDirection p1)) (= In (select AadlPortDirection p2))))))\n\n(define-fun AadlFlowNoSelfConnection () Bool\n  (forall ((p1 AadlPort) (p2 AadlPort))\n    (=> (AadlConnectionFlowTos p1 p2)\n        (not (= p1 p2)))))\n\n(define-fun AadlConnectedPortTypeMatch () Bool\n  (forall ((src AadlPort) (dst AadlPort))\n    (=> (AadlConnectionFlowTos src dst)\n        (or (and (= AadlDataPort (select AadlPortType src)) (= AadlDataPort (select AadlPortType dst)))\n            (and (= AadlEventPort (select AadlPortType src)) (= AadlEventPort (select AadlPortType dst)))\n            (and (= AadlEventDataPort (select AadlPortType src)) (= AadlEventDataPort (select AadlPortType dst)))\n             false))))\n(declare-const AadlConnectedPortTypeMatch_count Int)\n(assert (= 3 AadlConnectedPortTypeMatch_count))\n\n(define-fun AadlDispatchProtocolSpecified () Bool\n  (forall ((_comp AadlComponent))\n    (match (select AadlComponentCategory _comp) (\n      ((Some _category_) (\n        ; threads and virtual processors must have an assigned dispatch protocol, all others are\n        ; 'don't care' (ie.\n        match _category_ (\n          (Thread (not (= (as None (Option DispatchProtocol)) (select AadlDispatchProtocol _comp))))\n          (VirtualProcessor (not (= (as None (Option DispatchProtocol)) (select AadlDispatchProtocol _comp))))\n          (_z_ true)\n        )))\n      (None false) ; sanity check: all AADL components must have an assigned component category\n      ))))\n\n(define-fun AadlAllPortsAssigned () Bool\n  (forall ((_p AadlPort))\n    (not (= (as None (Option AadlComponent)) (select AadlPortComponent _p)))))\n\n(define-fun AADLWellFormedness () Bool\n  (and\n    (= AadlPort_count AadlPortComponent_size) ; all Aadl ports belong to an Aadl component\n    AadlAllPortsAssigned\n    AadlDispatchProtocolSpecified\n    AadlFlowDirectionality\n    AadlFlowNoSelfConnection\n    AadlConnectedPortTypeMatch))\n\n\n(define-fun CAmkESFlowNoSelfConnection () Bool\n  (forall ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _p1 _p2)\n        (not (= _p1 _p2)))))\n\n(define-fun CAmkESDataPortAccess () Bool\n  (forall ((_conn CAmkESConnection) (_src CAmkESPort) (_dst CAmkESPort))\n    (=> (and (CAmkESConnectionFlowTos _conn _src _dst) (= seL4SharedData (select CAmkESConnectionType _conn)))\n      (and (= W (select CAmkESAccessRestrictions _src))\n           (= R (select CAmkESAccessRestrictions _dst))))))\n\n(define-fun UniqueComponentRefinements () Bool\n  (forall ((aadlComponent1 AadlComponent) (camkesComponent CAmkESComponent))\n    (=> (ComponentRefinement (Some aadlComponent1) camkesComponent)\n        (not (exists ((aadlComponent2 AadlComponent))\n               (and (not (= aadlComponent1 aadlComponent2))\n                    (ComponentRefinement (Some aadlComponent2) camkesComponent)))))))\n\n(define-fun UniquePortRefinements () Bool\n  (forall ((aadlPort1 AadlPort) (camkesPort CAmkESPort))\n    (=> (PortRefinement aadlPort1 camkesPort)\n        (not (exists ((aadlPort2 AadlPort))\n               (and (not (= aadlPort1 aadlPort2))\n                    (PortRefinement aadlPort2 camkesPort)))))))\n\n(define-fun CAmkESWellFormedness () Bool\n  (and\n    (= CAmkESPort_count CAmkESPortComponent_size) ; all CAmkES ports belong to a CAmkES component\n    CAmkESDataPortAccess\n    CAmkESFlowNoSelfConnection))\n\n(define-fun SB_DataPortRefinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n      (and (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n           (= (select CAmkESConnectionType conn) seL4SharedData )\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest  camkesDest)\n           (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_EventPortRefinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (and\n      (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (= (select CAmkESConnectionType conn) seL4Notification )\n      (PortRefinement aadlSource camkesSource)\n      (PortRefinement aadlDest camkesDest)\n      (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n      (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_Refinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (or\n         (and\n           (= AadlDataPort (select AadlPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)) ; payload\n         (and\n           (= AadlEventPort (select AadlPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; event counter\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         (and\n           (= AadlEventDataPort (select AadlPortType aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; payload\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         false)))\n\n(define-fun TB_Refinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (and (= CodegenMode SeL4_TB)\n       false))\n\n(define-fun ConnectionPreservation () Bool\n  (forall ((aadlSource AadlPort) (aadlDest AadlPort))\n    (=> (AadlConnectionFlowTos aadlSource aadlDest)\n      (or (SB_Refinement aadlSource aadlDest)\n          (TB_Refinement aadlSource aadlDest)\n          false))))\n\n\n(define-fun isAadl_SB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (exists ((aadlSource AadlPort) (aadlDest AadlPort))\n         (and\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest camkesDest)\n           (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest))\n           (AadlConnectionFlowTos aadlSource aadlDest)))))\n\n(define-fun isAadl_TB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (= CodegenMode SeL4_TB)\n       false)\n)\n\n(define-fun isCAmkESSchedulingConnection ((_conn CAmkESConnection)) Bool\n  (or\n    (isSelfPacingConnection _conn)\n    (isPacingConnection _conn)\n    (isPeriodicDispatchingConnection _conn)\n    false))\n\n(define-fun NoNewConnections () Bool\n  (forall ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (=> (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (or\n        (isAadl_SB_ConnectionRefinement camkesSource camkesDest)\n        (isAadl_TB_ConnectionRefinement camkesSource camkesDest)\n        (isCAmkESSchedulingConnection conn)\n        (and (isVMAuxConnection conn)\n             ; sanity check, one of the ports must belong to a vm component\n             (or (isVMAuxPort camkesSource) (isVMAuxPort camkesDest) false))\n        false))))\n\n\n(echo \"RefinementProof: Shows that there is a model satisfying all the constraints (should be sat):\")\n(push)\n(assert (and\n  AADLWellFormedness\n  CAmkESWellFormedness\n  ConnectionPreservation\n  UniqueComponentRefinements\n  UniquePortRefinements\n  NoNewConnections\n))\n(check-sat)\n;(get-model)\n(pop)\n\n(echo \"AADLWellFormedness: Proves that the generated AADL evidence is well-formed (should be unsat):\")\n(push)\n(assert (not AADLWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"CAmkESWellFormedness: Proves that the generated CAmkES evidence is well-formed (should be unsat):\")\n(push)\n(assert (not CAmkESWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"ConnectionPreservation: Proves that the generated CAmkES connections preserve AADL's (should be unsat):\")\n(push)\n(assert (not ConnectionPreservation))\n(check-sat)\n(pop)\n\n(echo \"NoNewConnections: Proves that the generated CAmkES connections does not contain more than AADL's (should be unsat):\")\n(push)\n(assert (not NoNewConnections))\n(check-sat)\n(pop)\n\n\n(exit)",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false
        }
      ]
    ]
  }
}
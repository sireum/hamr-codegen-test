{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/data\/slang_embedded\/Base_Types.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded\n\nimport org.sireum._\nimport org.sireum.S8._\nimport org.sireum.S16._\nimport org.sireum.S32._\nimport org.sireum.S64._\nimport org.sireum.U8._\nimport org.sireum.U16._\nimport org.sireum.U32._\nimport org.sireum.U64._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Base_Types {\n\n  type Boolean = B\n\n  type Integer = Z\n\n  type Integer_8 = S8\n  type Integer_16 = S16\n  type Integer_32 = S32\n  type Integer_64 = S64\n\n  type Unsigned_8 = U8\n  type Unsigned_16 = U16\n  type Unsigned_32 = U32\n  type Unsigned_64 = U64\n\n  \/\/ TODO: Base_Types::Natural\n\n  type Float = R\n  type Float_32 = F32\n  type Float_64 = F64\n\n  type Character = C\n  type String = org.sireum.String\n\n  type Bits = org.sireum.ISZ[B]\n\n  @datatype class Boolean_Payload(value: B) extends art.DataContent\n\n  @datatype class Integer_Payload(value: Z) extends art.DataContent\n\n  @datatype class Integer_8_Payload(value: S8) extends art.DataContent\n  @datatype class Integer_16_Payload(value: S16) extends art.DataContent\n  @datatype class Integer_32_Payload(value: S32) extends art.DataContent\n  @datatype class Integer_64_Payload(value: S64) extends art.DataContent\n\n  @datatype class Unsigned_8_Payload(value: U8) extends art.DataContent\n  @datatype class Unsigned_16_Payload(value: U16) extends art.DataContent\n  @datatype class Unsigned_32_Payload(value: U32) extends art.DataContent\n  @datatype class Unsigned_64_Payload(value: U64) extends art.DataContent\n\n  @datatype class Float_Payload(value: R) extends art.DataContent\n  @datatype class Float_32_Payload(value: F32) extends art.DataContent\n  @datatype class Float_64_Payload(value: F64) extends art.DataContent\n\n  @datatype class Character_Payload(value: C) extends art.DataContent\n  @datatype class String_Payload(value: String) extends art.DataContent\n\n  @datatype class Bits_Payload(value: ISZ[B]) extends art.DataContent\n\n  def Boolean_example(): Boolean = { return F }\n\n  def Integer_example(): Integer = { return z\"0\" }\n\n  def Integer_8_example(): Integer_8 = { return s8\"0\" }\n  def Integer_16_example(): Integer_16 = { return s16\"0\" }\n  def Integer_32_example(): Integer_32 = { return s32\"0\" }\n  def Integer_64_example(): Integer_64 = { return s64\"0\" }\n\n  def Unsigned_8_example(): Unsigned_8 = { return u8\"0\" }\n  def Unsigned_16_example(): Unsigned_16 = { return u16\"0\" }\n  def Unsigned_32_example(): Unsigned_32 = { return u32\"0\" }\n  def Unsigned_64_example(): Unsigned_64 = { return u64\"0\" }\n\n  def Float_example(): Float = { return r\"0\" }\n  def Float_32_example(): Float_32 = { return f32\"0\" }\n  def Float_64_example(): Float_64 = { return f64\"0\" }\n\n  def Character_example(): Character = { return ' ' }\n  def String_example(): String = { return \"\" }\n\n  def Bits_example(): Bits = { return ISZ() }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/architecture\/slang_embedded\/Arch.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded\n\nimport org.sireum._\nimport art._\nimport art.PortMode._\nimport art.DispatchPropertyProtocol._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Arch {\n  val top_Impl_Instance_uxas_UxAS_thread : slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge = {\n    val AutomationRequest = Port[Base_Types.Bits] (id = 0, name = \"top_Impl_Instance_uxas_UxAS_thread_AutomationRequest\", mode = EventIn)\n    val OperatingRegion = Port[Base_Types.Bits] (id = 1, name = \"top_Impl_Instance_uxas_UxAS_thread_OperatingRegion\", mode = EventIn)\n    val LineSearchTask = Port[Base_Types.Bits] (id = 2, name = \"top_Impl_Instance_uxas_UxAS_thread_LineSearchTask\", mode = EventIn)\n\n    slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge(\n      id = 0,\n      name = \"top_Impl_Instance_uxas_UxAS_thread\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      AutomationRequest = AutomationRequest,\n      OperatingRegion = OperatingRegion,\n      LineSearchTask = LineSearchTask\n    )\n  }\n  val top_Impl_Instance_radio_RadioDriver : slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge = {\n    val trusted_ids_out = Port[Base_Types.Bits] (id = 3, name = \"top_Impl_Instance_radio_RadioDriver_trusted_ids_out\", mode = DataOut)\n    val automation_request_out = Port[Base_Types.Bits] (id = 4, name = \"top_Impl_Instance_radio_RadioDriver_automation_request_out\", mode = EventOut)\n    val operating_region_out = Port[Base_Types.Bits] (id = 5, name = \"top_Impl_Instance_radio_RadioDriver_operating_region_out\", mode = EventOut)\n    val line_search_task_out = Port[Base_Types.Bits] (id = 6, name = \"top_Impl_Instance_radio_RadioDriver_line_search_task_out\", mode = EventOut)\n\n    slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge(\n      id = 1,\n      name = \"top_Impl_Instance_radio_RadioDriver\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      trusted_ids_out = trusted_ids_out,\n      automation_request_out = automation_request_out,\n      operating_region_out = operating_region_out,\n      line_search_task_out = line_search_task_out\n    )\n  }\n  val top_Impl_Instance_am_gate_CASE_AttestationGate : slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge = {\n    val trusted_ids = Port[Base_Types.Bits] (id = 7, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_trusted_ids\", mode = DataIn)\n    val AutomationRequest_in = Port[Base_Types.Bits] (id = 8, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_AutomationRequest_in\", mode = EventIn)\n    val AutomationRequest_out = Port[Base_Types.Bits] (id = 9, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_AutomationRequest_out\", mode = EventOut)\n    val OperatingRegion_in = Port[Base_Types.Bits] (id = 10, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_OperatingRegion_in\", mode = EventIn)\n    val OperatingRegion_out = Port[Base_Types.Bits] (id = 11, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_OperatingRegion_out\", mode = EventOut)\n    val LineSearchTask_in = Port[Base_Types.Bits] (id = 12, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_LineSearchTask_in\", mode = EventIn)\n    val LineSearchTask_out = Port[Base_Types.Bits] (id = 13, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_LineSearchTask_out\", mode = EventOut)\n\n    slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge(\n      id = 2,\n      name = \"top_Impl_Instance_am_gate_CASE_AttestationGate\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      trusted_ids = trusted_ids,\n      AutomationRequest_in = AutomationRequest_in,\n      AutomationRequest_out = AutomationRequest_out,\n      OperatingRegion_in = OperatingRegion_in,\n      OperatingRegion_out = OperatingRegion_out,\n      LineSearchTask_in = LineSearchTask_in,\n      LineSearchTask_out = LineSearchTask_out\n    )\n  }\n\n  val ad : ArchitectureDescription = {\n\n    ArchitectureDescription(\n      components = ISZ (top_Impl_Instance_uxas_UxAS_thread, top_Impl_Instance_radio_RadioDriver, top_Impl_Instance_am_gate_CASE_AttestationGate),\n\n      connections = ISZ (Connection(from = top_Impl_Instance_radio_RadioDriver.trusted_ids_out, to = top_Impl_Instance_am_gate_CASE_AttestationGate.trusted_ids),\n                         Connection(from = top_Impl_Instance_radio_RadioDriver.automation_request_out, to = top_Impl_Instance_am_gate_CASE_AttestationGate.AutomationRequest_in),\n                         Connection(from = top_Impl_Instance_radio_RadioDriver.operating_region_out, to = top_Impl_Instance_am_gate_CASE_AttestationGate.OperatingRegion_in),\n                         Connection(from = top_Impl_Instance_radio_RadioDriver.line_search_task_out, to = top_Impl_Instance_am_gate_CASE_AttestationGate.LineSearchTask_in),\n                         Connection(from = top_Impl_Instance_am_gate_CASE_AttestationGate.AutomationRequest_out, to = top_Impl_Instance_uxas_UxAS_thread.AutomationRequest),\n                         Connection(from = top_Impl_Instance_am_gate_CASE_AttestationGate.OperatingRegion_out, to = top_Impl_Instance_uxas_UxAS_thread.OperatingRegion),\n                         Connection(from = top_Impl_Instance_am_gate_CASE_AttestationGate.LineSearchTask_out, to = top_Impl_Instance_uxas_UxAS_thread.LineSearchTask))\n    )\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/architecture\/slang_embedded\/Demo.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file was auto-generated.  Do not edit\npackage slang_embedded\n\nobject Demo extends App {\n  art.Art.run(Arch.ad)\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/inspector\/slang_embedded\/InspectorDemo.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded\n\nimport art.{ArchitectureDescription, Bridge, DataContent, UPort}\nimport org.reactivestreams.Publisher\nimport org.sireum.hamr.inspector.common.{Filter, Injection, InspectionBlueprint, Msg, Rule}\nimport org.sireum.hamr.inspector.capabilities.InspectorCapabilitiesLauncher\nimport org.sireum.hamr.inspector.gui.InspectorGUILauncher\nimport org.sireum.hamr.inspector.stream.Flux\n\nobject InspectorDemo extends App {\n\n  {\n    InspectorCapabilitiesLauncher.run(Blueprint)\n\n    val filters: Set[Filter] = Set(NoFilter, EvensOnly)\n    val rules: Set[Rule] = Set(Require100OrMore)\n    val injections: Set[Injection] = Set()\n\n    InspectorGUILauncher.run(Blueprint, filters, rules, injections, args)\n  }\n\n  object Blueprint extends InspectionBlueprint {\n    override def ad(): ArchitectureDescription = Arch.ad\n    override def serializer(): DataContent => String = JSON.from_artDataContent(_, true).value\n    override def deserializer(): String => DataContent = JSON.to_artDataContent(_).left\n  }\n\n  object NoFilter extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in\n  }\n\n  object EvensOnly extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in.filter(_.sequence % 2 == 0)\n  }\n\n  object Require100OrMore extends Rule {\n    override def rule(in: Flux[Msg]): Publisher[_] = in.skip(99).next().single()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/data\/slang_embedded\/sergen.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\n# Creates serializers and deserializers for all types in the data folder of a HAMR project.\n#\n# This script should be placed in the \"<project name>\/src\/main\/data\/<your>\/<package>\/\" folder of a Sireum HAMR project.\n#\n# When run, it will create serializers and deserializers (JSON.scala and MsgPack.scala) for all user-defined types.\n# JSON.scala must exist for any HAMR-project jar that is pointed to by the Inspector-GUI.\n\n# check for conflicting files\nif [ -f 'JSON.scala' ]; then\n  echo 'Deleting stale JSON.scala'\n  rm JSON.scala\nfi\nif [ -f 'MsgPack.scala' ]; then\n  echo 'Deleting stale MsgPack.scala'\n  rm MsgPack.scala\nfi\n\n# determine OS\n# credit: https:\/\/stackoverflow.com\/questions\/394230\/how-to-detect-the-os-from-a-bash-script\/18434831\nif [[ $OSTYPE == 'linux-gnu' ]]; then\n        platform='linux'\nelif [[ $OSTYPE == 'darwin'* ]]; then\n        platform='mac'\nelif [[ $OSTYPE == 'msys' ]]; then\n        platform='win'\nelif [[ $OSTYPE == 'win32' ]]; then\n        platform='win'\nelse\n        echo 'ERROR: invalid OS'\n        exit 1\nfi\n\necho \"detected platform: '$platform' based on OS: '$OSTYPE'\"\n\ninitialDirectory=$PWD # allows script to get back to initial directory after crawling up\npathToData='' # a path to get to the data folder, which is made up of repeating '..\/'\npackage='' # the package name, which is from the child of 'data' to (and including) the initialDirectory\nuppermostDirectoryFound='' # name of the uppermost directory found, if it is not data then we cancel the script\n\n# determine package\nwhile [[ $PWD != '\/' && ${PWD##*\/} != 'data' ]]; do\n  # \"if\" check on package prevents trailing period character\n  if [[ $package == '' ]]; then package=${PWD##*\/}; else package=${PWD##*\/}.${package}; fi;\n  pathToData=..\/${pathToData};\n  cd ..;\n  uppermostDirectoryFound=${PWD##*\/}\ndone\n\n# check that data folder was found\nif [[ $uppermostDirectoryFound != 'data' ]]; then\n  echo 'ERROR: script directory is not a descendent of data\/<full_project_package>\/';\n  exit 1\nfi\n\n# check that src\/main\/data\/ path holds\ncd ..\nif [[ ${PWD##*\/} != 'main' ]]; then\n  echo \"ERROR: expected main\/ to be direct parent of data\/ but ${PWD##*\/} was found.\";\n  exit 1\nfi\n\ncd ..\nif [[ ${PWD##*\/} != 'src' ]]; then\n  echo \"ERROR: expected src\/ to be direct parent of main\/ but ${PWD##*\/} was found.\";\n  exit 1\nfi\n\n# check that main\/art\/DataContent.scala exists (from the current folder src)\n\nif [ ! -f 'main\/art\/DataContent.scala' ]; then\n  echo 'ERROR: project must contain art\/DataContent under src\/main\/ but it was not found.';\n  exit 1\nfi\n\ncd ${initialDirectory}\n\n# add -L option to find if symlinks need to be followed: files=$(find -L . -regex '.*\/[^\/]*.scala')\nfiles=$(find . -regex '.*\/[^\/]*.scala')\n\necho \"package: $package\"\necho \"files:\"\necho \"$files\"\n\nsergen=\"$SIREUM_HOME\/bin\/${platform}\/java\/bin\/java -jar $SIREUM_HOME\/bin\/sireum.jar tools sergen\"\n\neval $sergen -p $package -m \"json,msgpack\" $files ${pathToData}..\/art\/DataContent.scala",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/SysContext\/UxAS_thr_Impl_uxas_UxAS_thread_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SysContext\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class UxAS_thr_Impl_uxas_UxAS_thread_TestApi extends BridgeTestSuite[UxAS_thr_Impl_uxas_UxAS_thread_Bridge](Arch.top_Impl_Instance_uxas_UxAS_thread) {\n\n  \/** helper function to set the values of all input ports.\n   * @param AutomationRequest payloads for event data port AutomationRequest.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AutomationRequest will be used\n   * @param OperatingRegion payloads for event data port OperatingRegion.\n   *   ART currently supports single element event data queues so\n   *   only the last element of OperatingRegion will be used\n   * @param LineSearchTask payloads for event data port LineSearchTask.\n   *   ART currently supports single element event data queues so\n   *   only the last element of LineSearchTask will be used\n   *\/\n  def put_concrete_inputs(AutomationRequest : ISZ[Base_Types.Bits],\n                          OperatingRegion : ISZ[Base_Types.Bits],\n                          LineSearchTask : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- AutomationRequest){\n      put_AutomationRequest(v)\n    }\n    for(v <- OperatingRegion){\n      put_OperatingRegion(v)\n    }\n    for(v <- LineSearchTask){\n      put_LineSearchTask(v)\n    }\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_AutomationRequest(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.AutomationRequest_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_OperatingRegion(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.OperatingRegion_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_LineSearchTask(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.LineSearchTask_Id, Base_Types.Bits_Payload(value))\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/SysContext\/UxAS_thr_Impl_uxas_UxAS_thread_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SysContext\n\nimport org.sireum._\nimport slang_embedded.SysContext._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass UxAS_thr_Impl_uxas_UxAS_thread_Test extends UxAS_thr_Impl_uxas_UxAS_thread_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SysContext\/UxAS_thr_Impl_uxas_UxAS_thread_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SysContext\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.SysContext.{UxAS_thr_Impl_uxas_UxAS_thread => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class UxAS_thr_Impl_uxas_UxAS_thread_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  AutomationRequest: Port[Base_Types.Bits],\n  OperatingRegion: Port[Base_Types.Bits],\n  LineSearchTask: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(AutomationRequest,\n              OperatingRegion,\n              LineSearchTask),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(AutomationRequest,\n                   OperatingRegion,\n                   LineSearchTask),\n\n    eventOuts = ISZ()\n  )\n\n  val initialization_api : UxAS_thr_Impl_Initialization_Api = {\n    val api = UxAS_thr_Impl_Initialization_Api(\n      id,\n      AutomationRequest.id,\n      OperatingRegion.id,\n      LineSearchTask.id\n    )\n    UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : UxAS_thr_Impl_Operational_Api = {\n    val api = UxAS_thr_Impl_Operational_Api(\n      id,\n      AutomationRequest.id,\n      OperatingRegion.id,\n      LineSearchTask.id\n    )\n    UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    UxAS_thr_Impl_uxas_UxAS_thread_Bridge.EntryPoints(\n      id,\n\n      AutomationRequest.id,\n      OperatingRegion.id,\n      LineSearchTask.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject UxAS_thr_Impl_uxas_UxAS_thread_Bridge {\n\n  var c_initialization_api: Option[UxAS_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[UxAS_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    UxAS_thr_Impl_uxas_UxAS_thread_BridgeId : Art.BridgeId,\n\n    AutomationRequest_Id : Art.PortId,\n    OperatingRegion_Id : Art.PortId,\n    LineSearchTask_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: UxAS_thr_Impl_Initialization_Api,\n    operational_api: UxAS_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(AutomationRequest_Id,\n                                              OperatingRegion_Id,\n                                              LineSearchTask_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: UxAS_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: UxAS_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/SysContext\/UxAS_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SysContext\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait UxAS_thr_Impl_Api {\n  def id: Art.BridgeId\n  def AutomationRequest_Id : Art.PortId\n  def OperatingRegion_Id : Art.PortId\n  def LineSearchTask_Id : Art.PortId\n\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class UxAS_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val AutomationRequest_Id : Art.PortId,\n  val OperatingRegion_Id : Art.PortId,\n  val LineSearchTask_Id : Art.PortId) extends UxAS_thr_Impl_Api\n\n@datatype class UxAS_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val AutomationRequest_Id : Art.PortId,\n  val OperatingRegion_Id : Art.PortId,\n  val LineSearchTask_Id : Art.PortId) extends UxAS_thr_Impl_Api {\n\n  def get_AutomationRequest() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(AutomationRequest_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AutomationRequest.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_OperatingRegion() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(OperatingRegion_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port OperatingRegion.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_LineSearchTask() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(LineSearchTask_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port LineSearchTask.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/SysContext\/UxAS_thr_Impl_uxas_UxAS_thread.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SysContext\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject UxAS_thr_Impl_uxas_UxAS_thread {\n\n  def initialise(api: UxAS_thr_Impl_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n  }\n\n  def timeTriggered(api: UxAS_thr_Impl_Operational_Api): Unit = {\n    \/\/ example api usage\n\n    val apiUsage_AutomationRequest: Option[Base_Types.Bits] = api.get_AutomationRequest()\n    api.logInfo(s\"Received on AutomationRequest: ${apiUsage_AutomationRequest}\")\n    val apiUsage_OperatingRegion: Option[Base_Types.Bits] = api.get_OperatingRegion()\n    api.logInfo(s\"Received on OperatingRegion: ${apiUsage_OperatingRegion}\")\n    val apiUsage_LineSearchTask: Option[Base_Types.Bits] = api.get_LineSearchTask()\n    api.logInfo(s\"Received on LineSearchTask: ${apiUsage_LineSearchTask}\")\n  }\n\n  def activate(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: UxAS_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/BridgeTestSuite.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded\n\nimport art.{Art, Bridge}\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\n\n\/**\n * A test suite that provides the following functionality for unit tests:\n *  - Clears all registers bridges and ports before each test\n *  - Initializes the selected bridge and ports before each test\n *  - Finalizes the bridge after each test\n *  - Creates a new instance of the test suite class for each test\n *    -> NOTE: this is NOT the same as having a separate JVM per-test (or suite), but is useful for test-local variables\n *\n *  If automatic calls to initTest() or finalizeTest() are not desired, simply override beforeEach() or afterEach()\n *  methods to change the desired behavior.\n *\n * @param bridge the bridge being tested, see [[slang_embedded.Arch]] for potential values.\n * @tparam T the type of the bridge being tested\n *\/\n\n\/\/ This file was auto-generated.  Do no edit\n\nclass BridgeTestSuite[+T <: Bridge](val bridge: T) extends AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach {\n\n  \/**\n   * Automatically called before each test. Currently calls Art.initTest for the given bridge. Override as needed.\n   *\/\n  override protected def beforeEach(): Unit = {\n    Art.initTest(bridge)\n  }\n\n  \/**\n   * Automatically called after each test. Currently calls Art.finalizeTest for the given bridge. Override as needed.\n   *\/\n  override protected def afterEach(): Unit = {\n    Art.finalizeTest(bridge)\n  }\n\n  \/**\n   * Invokes testCompute() once per registered bridge.\n   *\n   * IMPORTANT: This method also clears all bridge output BEFORE each call. This will have no effect the first time it's\n   * invoked (because all output will be empty), but it does ensure that output doesn't \"leak\" across multiple\n   * invocations.\n   *\n   *\/\n  def executeTest(): Unit = {\n    Art.manuallyClearOutput()\n    Art.executeTest(bridge)\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.RadioDriver\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class RadioDriver_thr_Impl_radio_RadioDriver_TestApi extends BridgeTestSuite[RadioDriver_thr_Impl_radio_RadioDriver_Bridge](Arch.top_Impl_Instance_radio_RadioDriver) {\n\n  \/** helper function to check RadioDriver_thr_Impl_radio_RadioDriver's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param trusted_ids_out method that will be called with the value of the outgoing data\n   *        port 'trusted_ids_out'.\n   * @param automation_request_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'automation_request_out'.\n   * @param operating_region_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'operating_region_out'.\n   * @param line_search_task_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'line_search_task_out'.\n   *\/\n  def check_concrete_output(trusted_ids_out: Base_Types.Bits => B = trusted_ids_outParam => {T},\n                            automation_request_out: ISZ[Base_Types.Bits] => B = automation_request_outParam => {T},\n                            operating_region_out: ISZ[Base_Types.Bits] => B = operating_region_outParam => {T},\n                            line_search_task_out: ISZ[Base_Types.Bits] => B = line_search_task_outParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    val trusted_ids_outValue: Base_Types.Bits = get_trusted_ids_out().get\n    if(!trusted_ids_out(trusted_ids_outValue)) {\n      testFailures = testFailures :+ st\"'trusted_ids_out' did not match expected: value of the outgoing data port is ${trusted_ids_outValue}\"\n    }\n    var automation_request_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_automation_request_out().nonEmpty) automation_request_outValue = automation_request_outValue :+ get_automation_request_out().get\n    if(!automation_request_out(automation_request_outValue)) {\n      testFailures = testFailures :+ st\"'automation_request_out' did not match expected: received ${automation_request_outValue.size} events with the following payloads ${automation_request_outValue}\"\n    }\n    var operating_region_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_operating_region_out().nonEmpty) operating_region_outValue = operating_region_outValue :+ get_operating_region_out().get\n    if(!operating_region_out(operating_region_outValue)) {\n      testFailures = testFailures :+ st\"'operating_region_out' did not match expected: received ${operating_region_outValue.size} events with the following payloads ${operating_region_outValue}\"\n    }\n    var line_search_task_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_line_search_task_out().nonEmpty) line_search_task_outValue = line_search_task_outValue :+ get_line_search_task_out().get\n    if(!line_search_task_out(line_search_task_outValue)) {\n      testFailures = testFailures :+ st\"'line_search_task_out' did not match expected: received ${line_search_task_outValue.size} events with the following payloads ${line_search_task_outValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ getter for out DataPort\n  def get_trusted_ids_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_trusted_ids_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port trusted_ids_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_trusted_ids_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.trusted_ids_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_automation_request_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_automation_request_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port automation_request_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_automation_request_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.automation_request_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_operating_region_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_operating_region_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port operating_region_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_operating_region_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.operating_region_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_line_search_task_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_line_search_task_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port line_search_task_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_line_search_task_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.line_search_task_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.RadioDriver\n\nimport org.sireum._\nimport slang_embedded.RadioDriver._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass RadioDriver_thr_Impl_radio_RadioDriver_Test extends RadioDriver_thr_Impl_radio_RadioDriver_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.RadioDriver\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.RadioDriver.{RadioDriver_thr_Impl_radio_RadioDriver => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class RadioDriver_thr_Impl_radio_RadioDriver_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  trusted_ids_out: Port[Base_Types.Bits],\n  automation_request_out: Port[Base_Types.Bits],\n  operating_region_out: Port[Base_Types.Bits],\n  line_search_task_out: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(trusted_ids_out,\n              automation_request_out,\n              operating_region_out,\n              line_search_task_out),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(trusted_ids_out),\n\n    eventIns = ISZ(),\n\n    eventOuts = ISZ(automation_request_out,\n                    operating_region_out,\n                    line_search_task_out)\n  )\n\n  val initialization_api : RadioDriver_thr_Impl_Initialization_Api = {\n    val api = RadioDriver_thr_Impl_Initialization_Api(\n      id,\n      trusted_ids_out.id,\n      automation_request_out.id,\n      operating_region_out.id,\n      line_search_task_out.id\n    )\n    RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : RadioDriver_thr_Impl_Operational_Api = {\n    val api = RadioDriver_thr_Impl_Operational_Api(\n      id,\n      trusted_ids_out.id,\n      automation_request_out.id,\n      operating_region_out.id,\n      line_search_task_out.id\n    )\n    RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    RadioDriver_thr_Impl_radio_RadioDriver_Bridge.EntryPoints(\n      id,\n\n      trusted_ids_out.id,\n      automation_request_out.id,\n      operating_region_out.id,\n      line_search_task_out.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject RadioDriver_thr_Impl_radio_RadioDriver_Bridge {\n\n  var c_initialization_api: Option[RadioDriver_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[RadioDriver_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    RadioDriver_thr_Impl_radio_RadioDriver_BridgeId : Art.BridgeId,\n\n    trusted_ids_out_Id : Art.PortId,\n    automation_request_out_Id : Art.PortId,\n    operating_region_out_Id : Art.PortId,\n    line_search_task_out_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: RadioDriver_thr_Impl_Initialization_Api,\n    operational_api: RadioDriver_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ(trusted_ids_out_Id)\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(automation_request_out_Id,\n                                               operating_region_out_Id,\n                                               line_search_task_out_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: RadioDriver_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: RadioDriver_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: RadioDriver_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: RadioDriver_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: RadioDriver_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: RadioDriver_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: RadioDriver_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/RadioDriver\/RadioDriver_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.RadioDriver\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait RadioDriver_thr_Impl_Api {\n  def id: Art.BridgeId\n  def trusted_ids_out_Id : Art.PortId\n  def automation_request_out_Id : Art.PortId\n  def operating_region_out_Id : Art.PortId\n  def line_search_task_out_Id : Art.PortId\n\n  def put_trusted_ids_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(trusted_ids_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_automation_request_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(automation_request_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_operating_region_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(operating_region_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_line_search_task_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(line_search_task_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class RadioDriver_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val trusted_ids_out_Id : Art.PortId,\n  val automation_request_out_Id : Art.PortId,\n  val operating_region_out_Id : Art.PortId,\n  val line_search_task_out_Id : Art.PortId) extends RadioDriver_thr_Impl_Api\n\n@datatype class RadioDriver_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val trusted_ids_out_Id : Art.PortId,\n  val automation_request_out_Id : Art.PortId,\n  val operating_region_out_Id : Art.PortId,\n  val line_search_task_out_Id : Art.PortId) extends RadioDriver_thr_Impl_Api {\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.RadioDriver\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject RadioDriver_thr_Impl_radio_RadioDriver {\n\n  def initialise(api: RadioDriver_thr_Impl_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.put_trusted_ids_out(Base_Types.Bits_example())\n    api.put_automation_request_out(Base_Types.Bits_example())\n    api.put_operating_region_out(Base_Types.Bits_example())\n    api.put_line_search_task_out(Base_Types.Bits_example())\n  }\n\n  def timeTriggered(api: RadioDriver_thr_Impl_Operational_Api): Unit = {\n    \/\/ example api usage\n\n\n  }\n\n  def activate(api: RadioDriver_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: RadioDriver_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: RadioDriver_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: RadioDriver_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/test\/util\/slang_embedded\/CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.CASE_AttestationGate\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport slang_embedded._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_TestApi extends BridgeTestSuite[CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge](Arch.top_Impl_Instance_am_gate_CASE_AttestationGate) {\n\n  \/** helper function to set the values of all input ports.\n   * @param trusted_ids payload for data port trusted_ids\n   * @param AutomationRequest_in payloads for event data port AutomationRequest_in.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AutomationRequest_in will be used\n   * @param OperatingRegion_in payloads for event data port OperatingRegion_in.\n   *   ART currently supports single element event data queues so\n   *   only the last element of OperatingRegion_in will be used\n   * @param LineSearchTask_in payloads for event data port LineSearchTask_in.\n   *   ART currently supports single element event data queues so\n   *   only the last element of LineSearchTask_in will be used\n   *\/\n  def put_concrete_inputs(trusted_ids : Base_Types.Bits,\n                          AutomationRequest_in : ISZ[Base_Types.Bits],\n                          OperatingRegion_in : ISZ[Base_Types.Bits],\n                          LineSearchTask_in : ISZ[Base_Types.Bits]): Unit = {\n    put_trusted_ids(trusted_ids)\n    for(v <- AutomationRequest_in){\n      put_AutomationRequest_in(v)\n    }\n    for(v <- OperatingRegion_in){\n      put_OperatingRegion_in(v)\n    }\n    for(v <- LineSearchTask_in){\n      put_LineSearchTask_in(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param AutomationRequest_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AutomationRequest_out'.\n   * @param OperatingRegion_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'OperatingRegion_out'.\n   * @param LineSearchTask_out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'LineSearchTask_out'.\n   *\/\n  def check_concrete_output(AutomationRequest_out: ISZ[Base_Types.Bits] => B = AutomationRequest_outParam => {T},\n                            OperatingRegion_out: ISZ[Base_Types.Bits] => B = OperatingRegion_outParam => {T},\n                            LineSearchTask_out: ISZ[Base_Types.Bits] => B = LineSearchTask_outParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var AutomationRequest_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AutomationRequest_out().nonEmpty) AutomationRequest_outValue = AutomationRequest_outValue :+ get_AutomationRequest_out().get\n    if(!AutomationRequest_out(AutomationRequest_outValue)) {\n      testFailures = testFailures :+ st\"'AutomationRequest_out' did not match expected: received ${AutomationRequest_outValue.size} events with the following payloads ${AutomationRequest_outValue}\"\n    }\n    var OperatingRegion_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_OperatingRegion_out().nonEmpty) OperatingRegion_outValue = OperatingRegion_outValue :+ get_OperatingRegion_out().get\n    if(!OperatingRegion_out(OperatingRegion_outValue)) {\n      testFailures = testFailures :+ st\"'OperatingRegion_out' did not match expected: received ${OperatingRegion_outValue.size} events with the following payloads ${OperatingRegion_outValue}\"\n    }\n    var LineSearchTask_outValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_LineSearchTask_out().nonEmpty) LineSearchTask_outValue = LineSearchTask_outValue :+ get_LineSearchTask_out().get\n    if(!LineSearchTask_out(LineSearchTask_outValue)) {\n      testFailures = testFailures :+ st\"'LineSearchTask_out' did not match expected: received ${LineSearchTask_outValue.size} events with the following payloads ${LineSearchTask_outValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in DataPort\n  def put_trusted_ids(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.trusted_ids_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_AutomationRequest_in(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.AutomationRequest_in_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_OperatingRegion_in(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.OperatingRegion_in_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_LineSearchTask_in(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.LineSearchTask_in_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AutomationRequest_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AutomationRequest_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port AutomationRequest_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AutomationRequest_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.AutomationRequest_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_OperatingRegion_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_OperatingRegion_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port OperatingRegion_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_OperatingRegion_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.OperatingRegion_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_LineSearchTask_out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_LineSearchTask_out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port LineSearchTask_out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_LineSearchTask_out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.LineSearchTask_out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/test\/bridge\/slang_embedded\/CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.CASE_AttestationGate\n\nimport org.sireum._\nimport slang_embedded.CASE_AttestationGate._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Test extends CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.CASE_AttestationGate\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\nimport slang_embedded.CASE_AttestationGate.{CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  trusted_ids: Port[Base_Types.Bits],\n  AutomationRequest_in: Port[Base_Types.Bits],\n  AutomationRequest_out: Port[Base_Types.Bits],\n  OperatingRegion_in: Port[Base_Types.Bits],\n  OperatingRegion_out: Port[Base_Types.Bits],\n  LineSearchTask_in: Port[Base_Types.Bits],\n  LineSearchTask_out: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(trusted_ids,\n              AutomationRequest_in,\n              AutomationRequest_out,\n              OperatingRegion_in,\n              OperatingRegion_out,\n              LineSearchTask_in,\n              LineSearchTask_out),\n\n    dataIns = ISZ(trusted_ids),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(AutomationRequest_in,\n                   OperatingRegion_in,\n                   LineSearchTask_in),\n\n    eventOuts = ISZ(AutomationRequest_out,\n                    OperatingRegion_out,\n                    LineSearchTask_out)\n  )\n\n  val initialization_api : CASE_AttestationGate_thr_Impl_Initialization_Api = {\n    val api = CASE_AttestationGate_thr_Impl_Initialization_Api(\n      id,\n      trusted_ids.id,\n      AutomationRequest_in.id,\n      AutomationRequest_out.id,\n      OperatingRegion_in.id,\n      OperatingRegion_out.id,\n      LineSearchTask_in.id,\n      LineSearchTask_out.id\n    )\n    CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_AttestationGate_thr_Impl_Operational_Api = {\n    val api = CASE_AttestationGate_thr_Impl_Operational_Api(\n      id,\n      trusted_ids.id,\n      AutomationRequest_in.id,\n      AutomationRequest_out.id,\n      OperatingRegion_in.id,\n      OperatingRegion_out.id,\n      LineSearchTask_in.id,\n      LineSearchTask_out.id\n    )\n    CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.EntryPoints(\n      id,\n\n      trusted_ids.id,\n      AutomationRequest_in.id,\n      AutomationRequest_out.id,\n      OperatingRegion_in.id,\n      OperatingRegion_out.id,\n      LineSearchTask_in.id,\n      LineSearchTask_out.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge {\n\n  var c_initialization_api: Option[CASE_AttestationGate_thr_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_AttestationGate_thr_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_BridgeId : Art.BridgeId,\n\n    trusted_ids_Id : Art.PortId,\n    AutomationRequest_in_Id : Art.PortId,\n    AutomationRequest_out_Id : Art.PortId,\n    OperatingRegion_in_Id : Art.PortId,\n    OperatingRegion_out_Id : Art.PortId,\n    LineSearchTask_in_Id : Art.PortId,\n    LineSearchTask_out_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: CASE_AttestationGate_thr_Impl_Initialization_Api,\n    operational_api: CASE_AttestationGate_thr_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ(trusted_ids_Id)\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(AutomationRequest_in_Id,\n                                              OperatingRegion_in_Id,\n                                              LineSearchTask_in_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(AutomationRequest_out_Id,\n                                               OperatingRegion_out_Id,\n                                               LineSearchTask_out_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_AttestationGate_thr_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/bridge\/slang_embedded\/CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.CASE_AttestationGate\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\n@sig trait CASE_AttestationGate_thr_Impl_Api {\n  def id: Art.BridgeId\n  def trusted_ids_Id : Art.PortId\n  def AutomationRequest_in_Id : Art.PortId\n  def AutomationRequest_out_Id : Art.PortId\n  def OperatingRegion_in_Id : Art.PortId\n  def OperatingRegion_out_Id : Art.PortId\n  def LineSearchTask_in_Id : Art.PortId\n  def LineSearchTask_out_Id : Art.PortId\n\n  def put_AutomationRequest_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(AutomationRequest_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_OperatingRegion_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(OperatingRegion_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_LineSearchTask_out(value : Base_Types.Bits) : Unit = {\n    Art.putValue(LineSearchTask_out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_AttestationGate_thr_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val trusted_ids_Id : Art.PortId,\n  val AutomationRequest_in_Id : Art.PortId,\n  val AutomationRequest_out_Id : Art.PortId,\n  val OperatingRegion_in_Id : Art.PortId,\n  val OperatingRegion_out_Id : Art.PortId,\n  val LineSearchTask_in_Id : Art.PortId,\n  val LineSearchTask_out_Id : Art.PortId) extends CASE_AttestationGate_thr_Impl_Api\n\n@datatype class CASE_AttestationGate_thr_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val trusted_ids_Id : Art.PortId,\n  val AutomationRequest_in_Id : Art.PortId,\n  val AutomationRequest_out_Id : Art.PortId,\n  val OperatingRegion_in_Id : Art.PortId,\n  val OperatingRegion_out_Id : Art.PortId,\n  val LineSearchTask_in_Id : Art.PortId,\n  val LineSearchTask_out_Id : Art.PortId) extends CASE_AttestationGate_thr_Impl_Api {\n\n  def get_trusted_ids() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(trusted_ids_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port trusted_ids.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_AutomationRequest_in() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(AutomationRequest_in_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AutomationRequest_in.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_OperatingRegion_in() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(OperatingRegion_in_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port OperatingRegion_in.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_LineSearchTask_in() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(LineSearchTask_in_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port LineSearchTask_in.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.CASE_AttestationGate\n\nimport org.sireum._\nimport slang_embedded._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate {\n\n  def initialise(api: CASE_AttestationGate_thr_Impl_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.put_AutomationRequest_out(Base_Types.Bits_example())\n    api.put_OperatingRegion_out(Base_Types.Bits_example())\n    api.put_LineSearchTask_out(Base_Types.Bits_example())\n  }\n\n  def timeTriggered(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = {\n    \/\/ example api usage\n\n    val apiUsage_trusted_ids: Option[Base_Types.Bits] = api.get_trusted_ids()\n    api.logInfo(s\"Received on trusted_ids: ${apiUsage_trusted_ids}\")\n    val apiUsage_AutomationRequest_in: Option[Base_Types.Bits] = api.get_AutomationRequest_in()\n    api.logInfo(s\"Received on AutomationRequest_in: ${apiUsage_AutomationRequest_in}\")\n    val apiUsage_OperatingRegion_in: Option[Base_Types.Bits] = api.get_OperatingRegion_in()\n    api.logInfo(s\"Received on OperatingRegion_in: ${apiUsage_OperatingRegion_in}\")\n    val apiUsage_LineSearchTask_in: Option[Base_Types.Bits] = api.get_LineSearchTask_in()\n    api.logInfo(s\"Received on LineSearchTask_in: ${apiUsage_LineSearchTask_in}\")\n  }\n\n  def activate(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_AttestationGate_thr_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/component\/slang_embedded\/TranspilerToucher.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded\n\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject TranspilerToucher {\n  def touch(): Unit = {\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/UxAS_thr_Impl_uxas_UxAS_thread\/UxAS_thread.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.UxAS_thr_Impl_uxas_UxAS_thread\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix\n\nobject UxAS_thread extends App {\n\n  val UxAS_threadBridge : slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge = {\n    val AutomationRequest = Port[Base_Types.Bits] (id = 0, name = \"top_Impl_Instance_uxas_UxAS_thread_AutomationRequest\", mode = EventIn)\n    val OperatingRegion = Port[Base_Types.Bits] (id = 1, name = \"top_Impl_Instance_uxas_UxAS_thread_OperatingRegion\", mode = EventIn)\n    val LineSearchTask = Port[Base_Types.Bits] (id = 2, name = \"top_Impl_Instance_uxas_UxAS_thread_LineSearchTask\", mode = EventIn)\n\n    slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge(\n      id = 0,\n      name = \"top_Impl_Instance_uxas_UxAS_thread\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      AutomationRequest = AutomationRequest,\n      OperatingRegion = OperatingRegion,\n      LineSearchTask = LineSearchTask\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = UxAS_threadBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ AutomationRequest: In EventDataPort Base_Types.Bits\n  val AutomationRequest_id: Art.PortId = UxAS_threadBridge.AutomationRequest.id\n  var AutomationRequest_port: Option[DataContent] = noData\n\n  \/\/ OperatingRegion: In EventDataPort Base_Types.Bits\n  val OperatingRegion_id: Art.PortId = UxAS_threadBridge.OperatingRegion.id\n  var OperatingRegion_port: Option[DataContent] = noData\n\n  \/\/ LineSearchTask: In EventDataPort Base_Types.Bits\n  val LineSearchTask_id: Art.PortId = UxAS_threadBridge.LineSearchTask.id\n  var LineSearchTask_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == AutomationRequest_id) {\n      return AutomationRequest_port\n    } else if(portId == OperatingRegion_id) {\n      return OperatingRegion_port\n    } else if(portId == LineSearchTask_id) {\n      return LineSearchTask_port\n    } else {\n      halt(s\"Unexpected: UxAS_thread.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    AutomationRequest_port = UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix.AutomationRequest_Receive()\n\n    OperatingRegion_port = UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix.OperatingRegion_Receive()\n\n    LineSearchTask_port = UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix.LineSearchTask_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    halt(s\"Unexpected: UxAS_thread.putValue called with: ${portId}\")\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (UxAS_threadBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_AutomationRequest: Option[Base_Types.Bits] = slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_operational_api.get.get_AutomationRequest()\n      val apiUsage_OperatingRegion: Option[Base_Types.Bits] = slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_operational_api.get.get_OperatingRegion()\n      val apiUsage_LineSearchTask: Option[Base_Types.Bits] = slang_embedded.SysContext.UxAS_thr_Impl_uxas_UxAS_thread_Bridge.c_operational_api.get.get_LineSearchTask()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SysContext\/UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.SysContext\n\nimport org.sireum._\nimport art._\n\n@ext object UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix {\n  \/\/ returns T if seL4's AutomationRequest port is empty, F otherwise \n  def AutomationRequest_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AutomationRequest port \n  def AutomationRequest_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's OperatingRegion port is empty, F otherwise \n  def OperatingRegion_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's OperatingRegion port \n  def OperatingRegion_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's LineSearchTask port is empty, F otherwise \n  def LineSearchTask_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's LineSearchTask port \n  def LineSearchTask_Receive(): Option[DataContent] = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SysContext\/UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.SysContext\n\nimport org.sireum._\nimport art._\n\nobject UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_Ext {\n  def AutomationRequest_IsEmpty(): B = halt(\"stub\")\n\n  def AutomationRequest_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def OperatingRegion_IsEmpty(): B = halt(\"stub\")\n\n  def OperatingRegion_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def LineSearchTask_IsEmpty(): B = halt(\"stub\")\n\n  def LineSearchTask_Receive(): Option[DataContent] = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/UxAS_thr_Impl_uxas_UxAS_thread\/UxAS_thr_Impl_uxas_UxAS_thread_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <UxAS_thr_Impl_uxas_UxAS_thread_adapter.h>\n\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_uxas_UxAS_thread_adapter.c\", \"\", \"slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_UxAS_thr_Impl_uxas_UxAS_thread_UxAS_thread_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_uxas_UxAS_thread_adapter.c\", \"\", \"slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_UxAS_thr_Impl_uxas_UxAS_thread_UxAS_thread_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_uxas_UxAS_thread_adapter.c\", \"\", \"slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_UxAS_thr_Impl_uxas_UxAS_thread_UxAS_thread_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"UxAS_thr_Impl_uxas_UxAS_thread_adapter.c\", \"\", \"slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_entryPoints\", 0);\n\n  return slang_embedded_UxAS_thr_Impl_uxas_UxAS_thread_UxAS_thread_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/UxAS_thr_Impl_uxas_UxAS_thread\/UxAS_thr_Impl_uxas_UxAS_thread_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef UXAS_THR_IMPL_UXAS_UXAS_THREAD_ADAPTER_H\n#define UXAS_THR_IMPL_UXAS_UXAS_THREAD_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/bin\/settings_UxAS_thr_Impl_uxas_UxAS_thread.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(UxAS_thr_Impl_uxas_UxAS_thread\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/RadioDriver_thr_Impl_radio_RadioDriver\/RadioDriver.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.RadioDriver_thr_Impl_radio_RadioDriver\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix\n\nobject RadioDriver extends App {\n\n  val RadioDriverBridge : slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge = {\n    val trusted_ids_out = Port[Base_Types.Bits] (id = 0, name = \"top_Impl_Instance_radio_RadioDriver_trusted_ids_out\", mode = DataOut)\n    val automation_request_out = Port[Base_Types.Bits] (id = 1, name = \"top_Impl_Instance_radio_RadioDriver_automation_request_out\", mode = EventOut)\n    val operating_region_out = Port[Base_Types.Bits] (id = 2, name = \"top_Impl_Instance_radio_RadioDriver_operating_region_out\", mode = EventOut)\n    val line_search_task_out = Port[Base_Types.Bits] (id = 3, name = \"top_Impl_Instance_radio_RadioDriver_line_search_task_out\", mode = EventOut)\n\n    slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge(\n      id = 0,\n      name = \"top_Impl_Instance_radio_RadioDriver\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      trusted_ids_out = trusted_ids_out,\n      automation_request_out = automation_request_out,\n      operating_region_out = operating_region_out,\n      line_search_task_out = line_search_task_out\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = RadioDriverBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ trusted_ids_out: Out DataPort Base_Types.Bits\n  val trusted_ids_out_id: Art.PortId = RadioDriverBridge.trusted_ids_out.id\n  var trusted_ids_out_port: Option[DataContent] = noData\n\n  \/\/ automation_request_out: Out EventDataPort Base_Types.Bits\n  val automation_request_out_id: Art.PortId = RadioDriverBridge.automation_request_out.id\n  var automation_request_out_port: Option[DataContent] = noData\n\n  \/\/ operating_region_out: Out EventDataPort Base_Types.Bits\n  val operating_region_out_id: Art.PortId = RadioDriverBridge.operating_region_out.id\n  var operating_region_out_port: Option[DataContent] = noData\n\n  \/\/ line_search_task_out: Out EventDataPort Base_Types.Bits\n  val line_search_task_out_id: Art.PortId = RadioDriverBridge.line_search_task_out.id\n  var line_search_task_out_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    halt(s\"Unexpected: RadioDriver.getValue called with: ${portId}\")\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == trusted_ids_out_id) {\n      trusted_ids_out_port = Some(data)\n    } else if(portId == automation_request_out_id) {\n      automation_request_out_port = Some(data)\n    } else if(portId == operating_region_out_id) {\n      operating_region_out_port = Some(data)\n    } else if(portId == line_search_task_out_id) {\n      line_search_task_out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: RadioDriver.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(trusted_ids_out_port.nonEmpty) {\n      RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix.trusted_ids_out_Send(trusted_ids_out_port.get)\n      trusted_ids_out_port = noData\n    }\n\n    if(automation_request_out_port.nonEmpty) {\n      RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix.automation_request_out_Send(automation_request_out_port.get)\n      automation_request_out_port = noData\n    }\n\n    if(operating_region_out_port.nonEmpty) {\n      RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix.operating_region_out_Send(operating_region_out_port.get)\n      operating_region_out_port = noData\n    }\n\n    if(line_search_task_out_port.nonEmpty) {\n      RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix.line_search_task_out_Send(line_search_task_out_port.get)\n      line_search_task_out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (RadioDriverBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_operational_api.get.logError(\"\")\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_initialization_api.get.put_trusted_ids_out(Base_Types.Bits_example())\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_operational_api.get.put_trusted_ids_out(Base_Types.Bits_example())\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_initialization_api.get.put_automation_request_out(Base_Types.Bits_example())\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_operational_api.get.put_automation_request_out(Base_Types.Bits_example())\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_initialization_api.get.put_operating_region_out(Base_Types.Bits_example())\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_operational_api.get.put_operating_region_out(Base_Types.Bits_example())\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_initialization_api.get.put_line_search_task_out(Base_Types.Bits_example())\n      slang_embedded.RadioDriver.RadioDriver_thr_Impl_radio_RadioDriver_Bridge.c_operational_api.get.put_line_search_task_out(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.RadioDriver\n\nimport org.sireum._\nimport art._\n\n@ext object RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix {\n  \/\/ send payload 'd' to components connected to seL4's trusted_ids_out port\n  def trusted_ids_out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's automation_request_out port\n  def automation_request_out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's operating_region_out port\n  def operating_region_out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's line_search_task_out port\n  def line_search_task_out_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.RadioDriver\n\nimport org.sireum._\nimport art._\n\nobject RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_Ext {\n  def trusted_ids_out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def automation_request_out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def operating_region_out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def line_search_task_out_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/RadioDriver_thr_Impl_radio_RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <RadioDriver_thr_Impl_radio_RadioDriver_adapter.h>\n\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_thr_Impl_radio_RadioDriver_adapter.c\", \"\", \"slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_RadioDriver_thr_Impl_radio_RadioDriver_RadioDriver_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_thr_Impl_radio_RadioDriver_adapter.c\", \"\", \"slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_RadioDriver_thr_Impl_radio_RadioDriver_RadioDriver_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_thr_Impl_radio_RadioDriver_adapter.c\", \"\", \"slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_RadioDriver_thr_Impl_radio_RadioDriver_RadioDriver_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"RadioDriver_thr_Impl_radio_RadioDriver_adapter.c\", \"\", \"slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_entryPoints\", 0);\n\n  return slang_embedded_RadioDriver_thr_Impl_radio_RadioDriver_RadioDriver_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/RadioDriver_thr_Impl_radio_RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef RADIODRIVER_THR_IMPL_RADIO_RADIODRIVER_ADAPTER_H\n#define RADIODRIVER_THR_IMPL_RADIO_RADIODRIVER_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/bin\/settings_RadioDriver_thr_Impl_radio_RadioDriver.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(RadioDriver_thr_Impl_radio_RadioDriver\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/CASE_AttestationGate.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\n\nimport org.sireum._\nimport art._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport slang_embedded._\nimport slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix\n\nobject CASE_AttestationGate extends App {\n\n  val CASE_AttestationGateBridge : slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge = {\n    val trusted_ids = Port[Base_Types.Bits] (id = 0, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_trusted_ids\", mode = DataIn)\n    val AutomationRequest_in = Port[Base_Types.Bits] (id = 1, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_AutomationRequest_in\", mode = EventIn)\n    val AutomationRequest_out = Port[Base_Types.Bits] (id = 2, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_AutomationRequest_out\", mode = EventOut)\n    val OperatingRegion_in = Port[Base_Types.Bits] (id = 3, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_OperatingRegion_in\", mode = EventIn)\n    val OperatingRegion_out = Port[Base_Types.Bits] (id = 4, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_OperatingRegion_out\", mode = EventOut)\n    val LineSearchTask_in = Port[Base_Types.Bits] (id = 5, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_LineSearchTask_in\", mode = EventIn)\n    val LineSearchTask_out = Port[Base_Types.Bits] (id = 6, name = \"top_Impl_Instance_am_gate_CASE_AttestationGate_LineSearchTask_out\", mode = EventOut)\n\n    slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge(\n      id = 0,\n      name = \"top_Impl_Instance_am_gate_CASE_AttestationGate\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      trusted_ids = trusted_ids,\n      AutomationRequest_in = AutomationRequest_in,\n      AutomationRequest_out = AutomationRequest_out,\n      OperatingRegion_in = OperatingRegion_in,\n      OperatingRegion_out = OperatingRegion_out,\n      LineSearchTask_in = LineSearchTask_in,\n      LineSearchTask_out = LineSearchTask_out\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_AttestationGateBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ trusted_ids: In DataPort Base_Types.Bits\n  val trusted_ids_id: Art.PortId = CASE_AttestationGateBridge.trusted_ids.id\n  var trusted_ids_port: Option[DataContent] = noData\n\n  \/\/ AutomationRequest_in: In EventDataPort Base_Types.Bits\n  val AutomationRequest_in_id: Art.PortId = CASE_AttestationGateBridge.AutomationRequest_in.id\n  var AutomationRequest_in_port: Option[DataContent] = noData\n\n  \/\/ AutomationRequest_out: Out EventDataPort Base_Types.Bits\n  val AutomationRequest_out_id: Art.PortId = CASE_AttestationGateBridge.AutomationRequest_out.id\n  var AutomationRequest_out_port: Option[DataContent] = noData\n\n  \/\/ OperatingRegion_in: In EventDataPort Base_Types.Bits\n  val OperatingRegion_in_id: Art.PortId = CASE_AttestationGateBridge.OperatingRegion_in.id\n  var OperatingRegion_in_port: Option[DataContent] = noData\n\n  \/\/ OperatingRegion_out: Out EventDataPort Base_Types.Bits\n  val OperatingRegion_out_id: Art.PortId = CASE_AttestationGateBridge.OperatingRegion_out.id\n  var OperatingRegion_out_port: Option[DataContent] = noData\n\n  \/\/ LineSearchTask_in: In EventDataPort Base_Types.Bits\n  val LineSearchTask_in_id: Art.PortId = CASE_AttestationGateBridge.LineSearchTask_in.id\n  var LineSearchTask_in_port: Option[DataContent] = noData\n\n  \/\/ LineSearchTask_out: Out EventDataPort Base_Types.Bits\n  val LineSearchTask_out_id: Art.PortId = CASE_AttestationGateBridge.LineSearchTask_out.id\n  var LineSearchTask_out_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == trusted_ids_id) {\n      return trusted_ids_port\n    } else if(portId == AutomationRequest_in_id) {\n      return AutomationRequest_in_port\n    } else if(portId == OperatingRegion_in_id) {\n      return OperatingRegion_in_port\n    } else if(portId == LineSearchTask_in_id) {\n      return LineSearchTask_in_port\n    } else {\n      halt(s\"Unexpected: CASE_AttestationGate.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    trusted_ids_port = CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix.trusted_ids_Receive()\n\n    AutomationRequest_in_port = CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix.AutomationRequest_in_Receive()\n\n    OperatingRegion_in_port = CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix.OperatingRegion_in_Receive()\n\n    LineSearchTask_in_port = CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix.LineSearchTask_in_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == AutomationRequest_out_id) {\n      AutomationRequest_out_port = Some(data)\n    } else if(portId == OperatingRegion_out_id) {\n      OperatingRegion_out_port = Some(data)\n    } else if(portId == LineSearchTask_out_id) {\n      LineSearchTask_out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_AttestationGate.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(AutomationRequest_out_port.nonEmpty) {\n      CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix.AutomationRequest_out_Send(AutomationRequest_out_port.get)\n      AutomationRequest_out_port = noData\n    }\n\n    if(OperatingRegion_out_port.nonEmpty) {\n      CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix.OperatingRegion_out_Send(OperatingRegion_out_port.get)\n      OperatingRegion_out_port = noData\n    }\n\n    if(LineSearchTask_out_port.nonEmpty) {\n      CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix.LineSearchTask_out_Send(LineSearchTask_out_port.get)\n      LineSearchTask_out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    val ad = ArchitectureDescription(\n      components = ISZ (CASE_AttestationGateBridge),\n      connections = ISZ ()\n    )\n    Art.run(ad)\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logInfo(\"\")\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logDebug(\"\")\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logError(\"\")\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.logInfo(\"\")\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.logDebug(\"\")\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_trusted_ids: Option[Base_Types.Bits] = slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_trusted_ids()\n      val apiUsage_AutomationRequest_in: Option[Base_Types.Bits] = slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_AutomationRequest_in()\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_AutomationRequest_out(Base_Types.Bits_example())\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_AutomationRequest_out(Base_Types.Bits_example())\n      val apiUsage_OperatingRegion_in: Option[Base_Types.Bits] = slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_OperatingRegion_in()\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_OperatingRegion_out(Base_Types.Bits_example())\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_OperatingRegion_out(Base_Types.Bits_example())\n      val apiUsage_LineSearchTask_in: Option[Base_Types.Bits] = slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_LineSearchTask_in()\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_LineSearchTask_out(Base_Types.Bits_example())\n      slang_embedded.CASE_AttestationGate.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_LineSearchTask_out(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage slang_embedded.CASE_AttestationGate\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix {\n  \/\/ returns T if seL4's trusted_ids port is empty, F otherwise \n  def trusted_ids_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's trusted_ids port \n  def trusted_ids_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's AutomationRequest_in port is empty, F otherwise \n  def AutomationRequest_in_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AutomationRequest_in port \n  def AutomationRequest_in_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's AutomationRequest_out port\n  def AutomationRequest_out_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's OperatingRegion_in port is empty, F otherwise \n  def OperatingRegion_in_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's OperatingRegion_in port \n  def OperatingRegion_in_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's OperatingRegion_out port\n  def OperatingRegion_out_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's LineSearchTask_in port is empty, F otherwise \n  def LineSearchTask_in_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's LineSearchTask_in port \n  def LineSearchTask_in_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's LineSearchTask_out port\n  def LineSearchTask_out_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package slang_embedded.CASE_AttestationGate\n\nimport org.sireum._\nimport art._\n\nobject CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_Ext {\n  def trusted_ids_IsEmpty(): B = halt(\"stub\")\n\n  def trusted_ids_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def AutomationRequest_in_IsEmpty(): B = halt(\"stub\")\n\n  def AutomationRequest_in_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def AutomationRequest_out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def OperatingRegion_in_IsEmpty(): B = halt(\"stub\")\n\n  def OperatingRegion_in_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def OperatingRegion_out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def LineSearchTask_in_IsEmpty(): B = halt(\"stub\")\n\n  def LineSearchTask_in_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def LineSearchTask_out_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.c",
        {
          "type" : "TestResource",
          "content" : "#include <CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.h>\n\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_initialiseArchitecture\", 0);\n\n  slang_embedded_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_CASE_AttestationGate_initialiseArchitecture(SF_LAST);\n}\n\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_initialiseEntryPoint\", 0);\n\n  slang_embedded_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_CASE_AttestationGate_initialiseEntryPoint(SF_LAST);\n}\n\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_computeEntryPoint\", 0);\n\n  slang_embedded_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_CASE_AttestationGate_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_entryPoints\", 0);\n\n  return slang_embedded_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_CASE_AttestationGate_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CASE_ATTESTATIONGATE_THR_IMPL_AM_GATE_CASE_ATTESTATIONGATE_ADAPTER_H\n#define CASE_ATTESTATIONGATE_THR_IMPL_AM_GATE_CASE_ATTESTATIONGATE_ADAPTER_H\n\n#include <all.h>\n\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/bin\/settings_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/c\/ext-c\/ext.c",
        {
          "type" : "TestResource",
          "content" : "#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ add c extension code here\n\n\/\/ example method that sets the first numBits bits of byteArray to 1\nvoid byte_array_default(STACK_FRAME uint8_t* byteArray, size_t numBits, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"byte_array_default\", 0);\n\n  sfAssert(SF (numBits - 1) \/ 8  + 1 <= numBytes, \"byte_array_default: numBytes * 8 must be at least numBits\");\n\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    uint8_t v = 0;\n    for(uint8_t bit = 0; bit < 8; bit++) {\n      if(byte * 8 + bit < numBits) {\n        v |= 1UL << bit;\n      }\n    }\n    byteArray[byte] = v;\n  }\n}\n\n\/\/ example method that places the hex value of the bytes in byteArray into str\nvoid byte_array_string(STACK_FRAME String str, uint8_t* byteArray, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"byte_array_string\", 0);\n\n  sfAssert(SF (str->size + numBytes) <= MaxString, \"byte_array_string: Insufficient maximum for String characters, consider increasing the --max-string-size option\");\n\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    U8_string_(SF str, byteArray[byte]);\n    String__append(SF str, string(\" \"));\n  }\n}\n\n\/\/ example method that directly prints the hex values of the bytes in byte_array\nvoid hex_dump(STACK_FRAME uint8_t* byte_array, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"hex_dump\", 0);\n\n  printf(\"[ \");\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    if(byte != 0 && byte % 16 == 0) { printf(\"\\n  \"); }\n    printf(\"%02X \", byte_array[byte]);\n  }\n  printf(\"]\\n\");\n}",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/c\/ext-c\/ext.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef EXT_H\n#define EXT_H\n\n\/\/ This file will not be overwritten so is safe to edit\n\n#include <all.h>\n\n\/\/ bit-codec size for slang_embedded_CMASI_AutomationRequest_i\n#define numBits_slang_embedded_CMASI_AutomationRequest_i 2048\n#define numBytes_slang_embedded_CMASI_AutomationRequest_i ((numBits_slang_embedded_CMASI_AutomationRequest_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_OperatingRegion_i\n#define numBits_slang_embedded_CMASI_OperatingRegion_i 2048\n#define numBytes_slang_embedded_CMASI_OperatingRegion_i ((numBits_slang_embedded_CMASI_OperatingRegion_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_LineSearchTask_i\n#define numBits_slang_embedded_CMASI_LineSearchTask_i 65536\n#define numBytes_slang_embedded_CMASI_LineSearchTask_i ((numBits_slang_embedded_CMASI_LineSearchTask_i - 1) \/ 8 + 1)\n\nvoid byte_array_default(STACK_FRAME uint8_t* byteArray, size_t numBits, size_t numBytes);\n\nvoid byte_array_string(STACK_FRAME String str, uint8_t* byteArray, size_t numBytes);\n\nvoid hex_dump(STACK_FRAME uint8_t* byte_array, size_t numBytes);\n\n\/\/ bit-codec size for slang_embedded_CMASI_AddressArray_i\n#define numBits_slang_embedded_CMASI_AddressArray_i 96\n#define numBytes_slang_embedded_CMASI_AddressArray_i ((numBits_slang_embedded_CMASI_AddressArray_i - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for slang_embedded_CMASI_AddressAttributedMessage_i\n#define numBits_slang_embedded_CMASI_AddressAttributedMessage_i 131072\n#define numBytes_slang_embedded_CMASI_AddressAttributedMessage_i ((numBits_slang_embedded_CMASI_AddressAttributedMessage_i - 1) \/ 8 + 1)\n#endif",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/seL4Nix\/slang_embedded\/SlangTypeLibrary\/SlangTypeLibrary.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage slang_embedded.SlangTypeLibrary\n\nimport org.sireum._\nimport art._\nimport slang_embedded._\n\nobject SlangTypeLibrary extends App {\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/bin\/settings_SlangTypeLibrary.cmake",
        {
          "type" : "TestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(SlangTypeLibrary\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/bin\/transpile-sel4.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\n\nif [ -z \"${SIREUM_HOME}\" ]; then\n  echo \"SIREUM_HOME not set. Refer to https:\/\/github.com\/sireum\/kekinian\/#installing\"\n  exit 1\nfi\n\nSCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\n\nPATH_SEP=\":\"\nif [ -n \"$COMSPEC\" -a -x \"$COMSPEC\" ]; then\n  PATH_SEP=\";\"\nfi\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/UxAS_thr_Impl_uxas_UxAS_thread\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SysContext${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/UxAS_thr_Impl_uxas_UxAS_thread\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"UxAS_thr_Impl_uxas_UxAS_thread\" \\\n  --apps \"slang_embedded.UxAS_thr_Impl_uxas_UxAS_thread.UxAS_thread\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 256 \\\n  --sequence-size 3 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=3;IS[Z,art.UConnection]=1;IS[Z,B]=131072\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=3\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_UxAS_thr_Impl_uxas_UxAS_thread.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.UxAS_thr_Impl_uxas_UxAS_thread.UxAS_thread\" \\\n  --stack-size \"16777216\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/UxAS_thr_Impl_uxas_UxAS_thread\/UxAS_thr_Impl_uxas_UxAS_thread_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/UxAS_thr_Impl_uxas_UxAS_thread\/UxAS_thr_Impl_uxas_UxAS_thread_adapter.c\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/RadioDriver_thr_Impl_radio_RadioDriver\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/RadioDriver${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/RadioDriver_thr_Impl_radio_RadioDriver\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"RadioDriver_thr_Impl_radio_RadioDriver\" \\\n  --apps \"slang_embedded.RadioDriver_thr_Impl_radio_RadioDriver.RadioDriver\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 256 \\\n  --sequence-size 4 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=4;IS[Z,art.UConnection]=1;IS[Z,B]=131072\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=4\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_RadioDriver_thr_Impl_radio_RadioDriver.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.RadioDriver_thr_Impl_radio_RadioDriver.RadioDriver\" \\\n  --stack-size \"16777216\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/RadioDriver_thr_Impl_radio_RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/RadioDriver_thr_Impl_radio_RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver_adapter.c\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/CASE_AttestationGate${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\" \\\n  --apps \"slang_embedded.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate.CASE_AttestationGate\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 256 \\\n  --sequence-size 7 \\\n  --sequence \"IS[Z,art.Bridge]=1;MS[Z,MOption[art.Bridge]]=1;IS[Z,art.UPort]=7;IS[Z,art.UConnection]=1;IS[Z,B]=131072\" \\\n  --constants \"art.Art.maxComponents=1;art.Art.maxPorts=7\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate.CASE_AttestationGate\" \\\n  --stack-size \"16777216\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.c\" \\\n  --lib-only\n\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/..\/slang_libraries\/SlangTypeLibrary\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/slang_embedded\/SlangTypeLibrary\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"SlangTypeLibrary\" \\\n  --apps \"slang_embedded.SlangTypeLibrary.SlangTypeLibrary\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 256 \\\n  --sequence-size 1 \\\n  --sequence \"IS[Z,B]=131072\" \\\n  --cmake-includes \"+${SCRIPT_HOME}\/settings_SlangTypeLibrary.cmake\" \\\n  --forward \"art.ArtNative=slang_embedded.SlangTypeLibrary.SlangTypeLibrary\" \\\n  --stack-size \"16777216\" \\\n  --stable-type-id \\\n  --lib-only",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/DataContent.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait DataContent\n\n@datatype class Empty extends art.DataContent",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/ArtNative_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\n\nimport java.util.concurrent.CountDownLatch\nimport java.util.concurrent.atomic.AtomicBoolean\n\n\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtMessage {\n  val UNSET: Z = -1\n}\n\ncase class ArtMessage (data: DataContent,\n\n                       var srcPortId: Art.PortId = ArtMessage.UNSET,\n                       var dstPortId: Art.PortId = ArtMessage.UNSET,\n\n                       \/\/ when putValue was called by producer\n                       var putValueTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when sendOutput transferred message from out port var of producer \n                       var sendOutputTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when message arrived via transport layer\n                       var dstArrivalTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when receiveInput transferred message to in port vars of consumer\n                       var receiveInputTimestamp: Z = ArtMessage.UNSET\n                      )\n\nobject ArtNative_Ext {\n  val noTime: Art.Time = 0\n\n  val slowdown: Z = 1\n\n  val lastSporadic: MMap[Art.BridgeId, Art.Time] = concMap()\n  val eventPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val dataPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val receivedPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n  val sentPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val portIds = ISZ[Art.PortId](Art.bridge(bridgeId).ports.eventIns.elements.map(_.id).filter(eventPortVariables.get(_).nonEmpty): _*)\n    if (portIds.isEmpty) {\n      TimeTriggered()\n    } else {\n      val urgentFifo = ops.ISZOps(portIds.map(Art.port(_))).sortWith { \/\/ reverse sort\n        case (p1: UrgentPort[_], p2: UrgentPort[_]) =>\n          if(p1.urgency < p2.urgency) F\n          else if(p1.urgency > p2.urgency) T\n          else eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n        case (_: UrgentPort[_], _: Port[_]) => T \/\/ urgent ports take precedence\n        case (_: Port[_], _: UrgentPort[_]) => F \/\/ urgent ports take precedence\n        case (p1: Port[_], p2: Port[_]) =>\n          eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n      }.map(_.id)\n      EventTriggered(urgentFifo)\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (portId <- eventPortIds) {\n      receivedPortValues -= portId \/\/ remove stale events from previous dispatch\n      eventPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          eventPortVariables -= portId\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      dataPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    sentPortValues(portId) = ArtMessage(data = data, srcPortId = portId, putValueTimestamp = Art.time())\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    val data = receivedPortValues.get(portId) match {\n      case scala.Some(v) => org.sireum.Some(v.data)\n      case _ => org.sireum.None[DataContent]()\n    }\n    return data\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      sentPortValues.get(srcPortId) match {\n        case scala.Some(msg) =>\n          \/\/ todo send on emission as well as receive\n          for(dstPortId <- Art.connections(srcPortId).elements) {\n\n            \/\/ simulate sending msg via transport middleware\n\n            val _msg = msg.copy(dstPortId = dstPortId, sendOutputTimestamp = Art.time())\n\n            Art.port(dstPortId).mode match {\n              case PortMode.DataIn | PortMode.DataOut =>\n                dataPortVariables(dstPortId) = _msg\n              case PortMode.EventIn | PortMode.EventOut =>\n                eventPortVariables(dstPortId) = _msg\n            }\n\n            _msg.dstArrivalTimestamp = Art.time()\n\n            ArtDebug_Ext.outputCallback(srcPortId, dstPortId, _msg.data, _msg.dstArrivalTimestamp)\n          }\n          sentPortValues -= srcPortId\n        case _ =>\n      }\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = log(\"info\", title, msg)\n\n  def logError(title: String, msg: String): Unit = log(\"error\", title, msg)\n\n  def logDebug(title: String, msg: String): Unit = log(\"debug\", title, msg)\n\n  def time(): Art.Time = toZ(System.currentTimeMillis())\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    val b = Art.bridge(bridgeId)\n    b.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        val ls = lastSporadic.getOrElse(bridgeId, noTime)\n        if (time() - ls < minRate) {\n          return F\n        } else {\n          return b.ports.eventIns.elements.exists(port => eventPortVariables.contains(port.id))\n        }\n    }\n  }\n\n  def run(): Unit = {\n    \/\/require(Art.bridges.elements.forall(_.nonEmpty))\n\n    ArtDebug_Ext.start()\n\n    val bridges = {\n      var r = Vector[Bridge]()\n      for (e <- Art.bridges.elements) e match {\n        case MSome(b) => r :+= b\n        case _ =>\n      }\n      r\n    }\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n    }\n\n    val terminated = new AtomicBoolean()\n    val numTerminated = new CountDownLatch(bridges.size)\n\n    for (bridge <- bridges) {\n      val rate = bridge.dispatchProtocol match {\n        case DispatchPropertyProtocol.Periodic(period) => period\n        case DispatchPropertyProtocol.Sporadic(min) => min\n      }\n\n      new Thread(() => {\n        logInfo(Art.logTitle, s\"Thread for ${bridge.name} instantiated.\")\n        ArtNative_Ext.synchronized {\n          ArtNative_Ext.wait()\n        }\n        while (!terminated.get()) {\n          Thread.sleep((rate * slowdown).toMP.toLong)\n          if (shouldDispatch(bridge.id))\n            try {\n              bridge.synchronized {\n                bridge.entryPoints.compute()\n              }\n            }\n            catch {\n              case x : Throwable =>\n                x.printStackTrace()\n                terminated.set(true)\n            }\n        }\n        numTerminated.countDown()\n      }).start()\n    }\n\n    Thread.sleep(1000)\n\n    logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    ArtNative_Ext.synchronized {\n      ArtNative_Ext.notifyAll()\n    }\n\n    Console.in.readLine()\n    terminated.set(true)\n    numTerminated.await()\n    logInfo(Art.logTitle, s\"End execution...\")\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n    }\n\n    ArtTimer_Ext.finalise()\n    ArtDebug_Ext.stop()\n  }\n\n  def log(kind: String, title: String, msg: String): Unit = {\n    Console.out.println(s\"\"\"{ \"log\" : \"$kind\", \"title\" : ${escape(title)}, \"msg\" : ${escape(msg)}, \"time\" : \"${time()}\" }\"\"\")\n    Console.out.flush()\n  }\n\n  def escape(raw: String): String = {\n    import scala.reflect.runtime.universe._\n    Literal(Constant(raw.value)).toString\n  }\n\n  def toZ(value: Long): Z = Z(value)\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n\n\n\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges AND resets all inputs and outputs for all ports.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ note that all ports and bridges were deleted by Art's initTest\n\n    \/\/ delete ALL port values as well as lastSporadic tracker\n    lastSporadic.clear()\n    eventPortVariables.clear()\n    dataPortVariables.clear()\n    receivedPortValues.clear()\n    sentPortValues.clear()\n\n    \/\/ clear pending ArtTimer events (also done after a test completes)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n\n    bridge.entryPoints.initialise()\n    logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n  }\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.testCompute()\n  }\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.finalise()\n    logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n\n    \/\/ clear pending ArtTimer events (also done before a test begins)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n  }\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ testing SEND_OUTPUT\n    \/\/ note: sendOutput is usually accessed via: Art.sendOutput -> ArtNative.sendOutput -> ArtNative_Ext.sendOutput\n    \/\/ NO OP\n  }\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = {\n    sentPortValues.clear()\n  }\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    val artMessage = ArtMessage(data = data, dstPortId = dstPortId, dstArrivalTimestamp = Art.time())\n    Art.port(dstPortId).mode match {\n      case PortMode.DataIn | PortMode.DataOut =>\n        dataPortVariables(dstPortId) = artMessage\n      case PortMode.EventIn | PortMode.EventOut =>\n        eventPortVariables(dstPortId) = artMessage\n    }\n  }\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    sentPortValues.get(portId) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/ArtDebug_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.Art.Time\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtDebug_Ext {\n  private val debugObjects: MMap[String, Any] = ArtNative_Ext.concMap()\n  private val listeners: MSet[ArtListener] = concSet()\n\n  protected[art] def start(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.start(time))\n  }\n\n  protected[art] def stop(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.stop(time))\n  }\n\n  protected[art] def outputCallback(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Time): Unit = {\n    listeners.foreach((listener: ArtListener) => listener.output(src, dst, data, time))\n  }\n\n  def setDebugObject[T](key: String, o: T): Unit = {\n    ArtNative.logDebug(Art.logTitle, s\"Set debug object for $key\")\n    debugObjects(key) = o\n  }\n\n  def getDebugObject[T](key: String): Option[T] = {\n    debugObjects.get(key) match {\n      case scala.Some(o) => Some(o.asInstanceOf[T])\n      case _ => None[T]()\n    }\n  }\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = {\n    assert(z\"0\" <= bridgeId && bridgeId < Art.maxComponents && Art.bridges(bridgeId).nonEmpty)\n\n    val bridge = Art.bridges(bridgeId).get\n    assert(bridge.ports.all.elements.map(_.id).contains(port))\n\n    if(bridge.ports.dataOuts.elements.map(_.id).contains(port) ||\n      bridge.ports.eventOuts.elements.map(_.id).contains(port)) {\n\n      ArtNative.logDebug(Art.logTitle, s\"Injecting from port ${Art.ports(port).get.name}\")\n\n      ArtNative.putValue(port, data)\n      ArtNative.sendOutput(bridge.ports.eventOuts.map(_.id), bridge.ports.dataOuts.map(_.id))\n    } else {\n      ArtNative.logDebug(Art.logTitle, s\"Injecting to port ${Art.ports(port).get.name}\")\n\n      if(bridge.ports.dataIns.elements.map(_.id).contains(port)) {\n        ArtNative_Ext.dataPortVariables(port) = ArtMessage(data)\n      } else {\n        ArtNative_Ext.eventPortVariables(port) = ArtMessage(data)\n      }\n    }\n  }\n\n  def registerListener(listener: ArtListener): Unit = {\n    listeners.add(listener)\n  }\n\n  def concSet[K](): MSet[K] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    val m: java.util.Set[K] = java.util.concurrent.ConcurrentHashMap.newKeySet()\n    m.asScala\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/ArtDebug.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtDebug {\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = $\n\n  def registerListener(listener: ArtListener): Unit = $\n\n  def setDebugObject[T](key: String, o: T): Unit = $\n\n  def getDebugObject[T](key: String): Option[T] = $\n}\n\n@msig trait ArtListener {\n\n  \/\/ lifecycle information\n  def start(time: Art.Time): Unit\n  def stop(time: Art.Time): Unit\n\n  \/\/ communication information\n  def output(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Art.Time): Unit\n\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/ArtTimer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.Art.BridgeId\n\n@ext object ArtTimer {\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = $\n\n  def clearTimeout(eventId: String): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/ArtNative.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtNative {\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = $\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = $\n\n  def getValue(portId: Art.PortId): Option[DataContent] = $\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def logInfo(title: String, msg: String): Unit = $\n\n  def logError(title: String, msg: String): Unit = $\n\n  def logDebug(title: String, msg: String): Unit = $\n\n  def run(): Unit = $\n\n  def time(): Art.Time = $\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = $\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = $\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = $\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/Art.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\nobject Art {\n  type PortId = Z\n  type BridgeId = Z\n  type Time = Z\n\n  val z16max: PortId = org.sireum.conversions.Z16.toZ(Z16.Max) \/\/ 32,767\n\n  val maxComponents: BridgeId = 3\n  val maxPorts: PortId = 14\n\n  val logTitle: String = \"Art\"\n  val bridges: MS[BridgeId, MOption[Bridge]] = MS.create[BridgeId, MOption[Bridge]](maxComponents, MNone[Bridge]())\n  val connections: MS[PortId, ISZ[PortId]] = MS.create[PortId, ISZ[PortId]](maxPorts, ISZ())\n  val ports: MS[PortId, Option[UPort]] = MS.create[PortId, Option[UPort]](maxPorts, None[UPort]())\n\n  def bridge(bridgeId: BridgeId): Bridge = {\n    val MSome(r) = bridges(bridgeId)\n    return r\n  }\n\n  def port(p: PortId) : UPort = {\n    val Some(r) = ports(p)\n    return r\n  }\n\n  def register(bridge: Bridge): Unit = {\n    bridges(bridge.id) = MSome(bridge)\n    bridge.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (periodic: $period)\")\n      case DispatchPropertyProtocol.Sporadic(min) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (sporadic: $min)\")\n    }\n    for (port <- bridge.ports.all) {\n      ports(port.id) = Some(port)\n      port.mode match {\n        case PortMode.DataIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data in)\")\n        case PortMode.DataOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data out)\")\n        case PortMode.EventIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event in)\")\n        case PortMode.EventOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event out)\")\n      }\n    }\n  }\n\n  \/\/ can't find definition in the standard ??\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = { \/\/ DISPATCH_STATUS\n    return ArtNative.dispatchStatus(bridgeId)\n  }\n\n  def receiveInput(eventPortIds: ISZ[PortId], dataPortIds: ISZ[PortId]): Unit = { \/\/ RECEIVE_INPUT\n    ArtNative.receiveInput(eventPortIds, dataPortIds)\n  }\n\n  def putValue(portId: PortId, data: DataContent): Unit = { \/\/ PUT_VALUE\n    ArtNative.putValue(portId, data)\n  }\n\n  def getValue(portId: PortId): Option[DataContent] = { \/\/ GET_VALUE\n    return ArtNative.getValue(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    ArtNative.sendOutput(eventPortIds, dataPortIds)\n  }\n\n  def logInfo(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logInfo(bridge(bridgeId).name, msg)\n  }\n\n  def logError(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logError(bridge(bridgeId).name, msg)\n  }\n\n  def logDebug(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logDebug(bridge(bridgeId).name, msg)\n  }\n\n  def connect(from: UPort, to: UPort): Unit = {\n    connections(from.id) = connections(from.id) :+ to.id\n    ArtNative.logInfo(logTitle, s\"Connected ports: ${from.name} -> ${to.name}\")\n  }\n\n  def run(system: ArchitectureDescription): Unit = {\n\n    for (component <- system.components) {\n      register(component)\n    }\n\n    for (connection <- system.connections) {\n      connect(connection.from, connection.to)\n    }\n\n    ArtNative.run()\n  }\n\n  def time(): Time = {\n    return ArtNative.time()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Clears any existing ports and bridges, then sets up ports\/bridges for the next test.\n   *\n   * Automatically called by BridgeTestSuite before each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = MNone()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n\n    \/\/ register bridge passed to this method\n    register(bridge)\n\n    \/\/ let ArtNative reset itself as well\n    ArtNative.initTest(bridge)\n  }\n\n  def executeTest(bridge: Bridge): Unit = {\n    ArtNative.executeTest(bridge)\n  }\n\n  def finalizeTest(bridge: Bridge): Unit = {\n    ArtNative.finalizeTest(bridge)\n  }\n\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    ArtNative.releaseOutput(eventPortIds, dataPortIds)\n  }\n\n  def manuallyClearOutput(): Unit = {\n    ArtNative.manuallyClearOutput()\n  }\n\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    ArtNative.insertInPortValue(dstPortId, data)\n  }\n\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    ArtNative.observeOutPortValue(portId)\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/ArtTimer_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum.{B, F, ISZ, String, T}\nimport art.Art.{BridgeId, Time}\n\nimport scala.collection.mutable.{Map => MMap}\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.util.concurrent.Executors\nimport java.util.concurrent.TimeUnit\n\nobject ArtTimer_Ext {\n\n  val m: MMap[String, AtomicBoolean] = ArtNative_Ext.concMap()\n  val executor = Executors.newSingleThreadScheduledExecutor()\n\n  def finalise(): Unit = {\n    executor.shutdownNow()\n    ArtNative.logInfo(Art.logTitle, \"Finalized ArtTimer\")\n  }\n\n  def clearTimeout(eventId: String): Unit = {\n    m.get(eventId) match {\n      case Some(b) =>\n        b.set(false)\n        m.remove(eventId)\n        ArtNative.logInfo(Art.logTitle, s\"timeout cleared for $eventId\")\n      case _ =>\n    }\n  }\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = {\n    if(m.get(eventId).nonEmpty) {\n      art.Art.logError(bridgeId, s\"callback already set for $eventId\")\n      return\n    }\n\n    if(wait < 0) {\n      art.Art.logError(bridgeId, s\"Invalid wait time: ${wait}.  Value must be non-negative.\")\n      return\n    }\n\n    var b = new AtomicBoolean(true)\n\n    val bridge = Art.bridge(bridgeId)\n    val eventOuts = bridge.ports.eventOuts.map(_.id)\n    val dataOuts = bridge.ports.dataOuts.map(_.id)\n\n    val task = new Runnable {\n      override def run(): Unit = {\n        if (b.get()) {\n          bridge.synchronized {\n            callback()\n            Art.sendOutput(eventOuts, dataOuts)\n            if(autoClear) {\n              clearTimeout(eventId)\n            }\n          }\n        }\n      }\n    }\n\n    m.put(eventId, b)\n\n    val adjusted = wait.toMP.toLong * ArtNative_Ext.slowdown.toMP.toLong\n    executor.schedule(task, adjusted, TimeUnit.MILLISECONDS)\n\n    art.Art.logInfo(bridgeId, s\"callback set for $eventId\")\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/src\/main\/art\/ArchitectureDescription.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n\n@datatype class ArchitectureDescription(components: ISZ[Bridge],\n                                        connections: ISZ[UConnection]) {\n  @spec val allPorts: ISZ[UPort] = $\n\n  @spec def allPortsSpec(i: Z): ISZ[UPort] = $\n  \/*\n    l\"\"\"\n    = base:  ISZ[UPort](), if i == 0\n    = rec:   components(i).ports.all ++ allPorts(i - 1), if 0 < i \u2227 i < components.size\n  \"\"\"\n\n  l\"\"\" invariant\n\n         AllPorts:\n           allPorts \u2261 allPortsSpec(components.size - 1)\n\n         ComponentIdUnique:\n           \u2200i: [0, components.size)\n             \u2200j: [0, components.size)\n               i \u2260 j \u2192 components(i).id \u2260 components(j).id\n\n         PortIdUnique:\n           \u2200i: [0, allPorts.size)\n             \u2200j: [0, allPorts.size)\n               i \u2260 j \u2192 allPorts(i).id \u2260 allPorts(j).id\n   \"\"\"\n  *\/\n}\n\n@datatype trait UConnection {\n  \/*\n  l\"\"\" invariant\n         FromPortOut:   from.mode \u2261 PortMode.DataOut \u2228 from.mode \u2261 PortMode.EventOut\n         DataPort:    (from.mode \u2261 PortMode.DataOut) \u2261 (to.mode \u2261 PortMode.DataIn)\n         EventPort:  (from.mode \u2261 PortMode.EventOut) \u2261 (to.mode \u2261 PortMode.EventIn)  \"\"\"\n  *\/\n\n  def from: UPort\n\n  def to: UPort\n}\n\n@datatype class Connection(val from: UPort, val to: UPort)\n  extends UConnection\n\n\n@enum object PortMode {\n  'DataIn\n  'DataOut\n  'EventIn\n  'EventOut\n}\n\n@datatype trait UPort {\n  def id: Art.PortId\n\n  def name: String\n\n  def mode: PortMode.Type\n}\n\n@datatype class Port[T](val id: Art.PortId,\n                        val name: String,\n                        val mode: PortMode.Type)\n  extends UPort\n\n@datatype class UrgentPort[T](val id: Art.PortId,\n                              val name: String,\n                              val mode: PortMode.Type,\n                              val urgency: Z)\n  extends UPort\n\n@sig trait Bridge {\n  def id: Art.BridgeId\n\n  def name: String\n\n  def ports: Bridge.Ports\n\n  def entryPoints: Bridge.EntryPoints\n\n  def dispatchProtocol: DispatchPropertyProtocol\n}\n\n\nobject Bridge {\n\n  \/\/ initialise()  ( compute() | activate() deactivate() | recover() )* finalise()\n  @sig trait EntryPoints {\n\n    def initialise(): Unit\n\n    def activate(): Unit\n\n    def deactivate(): Unit\n\n    def compute(): Unit\n\n    def recover(): Unit\n\n    def finalise(): Unit\n\n    def testCompute(): Unit = { println(\"Default testCompute\") }\n  }\n\n  @datatype class Ports(all: ISZ[UPort],\n                        dataIns: ISZ[UPort],\n                        dataOuts: ISZ[UPort],\n                        eventIns: ISZ[UPort],\n                        eventOuts: ISZ[UPort])\n\n}\n\n\n@datatype trait DispatchPropertyProtocol\n\nobject DispatchPropertyProtocol {\n\n  @datatype class Periodic(period: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Aperiodic() extends DispatchPropertyProtocol\n\n  @datatype class Sporadic(min: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Timed() extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Hybrid() extends DispatchPropertyProtocol\n}\n\n@datatype trait DispatchStatus\n\n@datatype class TimeTriggered() extends DispatchStatus\n\n@datatype class EventTriggered(portIds: ISZ[Art.PortId]) extends DispatchStatus",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/build.sc",
        {
          "type" : "TestResource",
          "content" : "import mill._\nimport scalalib._\nimport ammonite.ops._\n\n\/\/ Example mill build -- the contents of this file will not be overwritten.\n\/\/\n\/\/ mill can be obtained following instructions at https:\/\/github.com\/sireum\/kekinian#slang-app-example-mill-project\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   $SIREUM_HOME\/bin\/mill slang_embedded.run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   $SIREUM_HOME\/bin\/mill slang_embedded.tests\n\/\/\n\/\/ Sireum IVE:\n\/\/   First cd to the directory containing this file and execute the following:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/sireum tools ivegen -f -m mill -n slang-embedded ..\/\n\/\/\n\/\/   Then in IVE select 'File > Open ...' and navigate to the directory\n\/\/   containing this file then click 'OK'.  To have the codebase and its\n\/\/   test suites recompiled upon changes, run:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/mill -w slang_embedded.tests.compile\n\/\/\n\/\/ Visual Studio Code:\n\/\/   Follow Sireum Kekinian's instructions for setting up a development\n\/\/   environment using Scala Metals: https:\/\/github.com\/sireum\/kekinian#scala-metals\n\/\/   Then open the folder containing this file in VS Code and import the\n\/\/   mill build when asked.\n\n\nobject `slang_embedded` extends slangEmbeddedProject\n\ntrait SlangEmbeddedModule extends ScalaModule {\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n  \/\/ to get the most recent versions of the following dependencies\n\n  \/\/ versions.properties key: org.scala-lang%scala-library%\n  val scalaVer = \"2.13.5\"\n\n  \/\/ versions.properties key: org.scalatest%%scalatest%%\n  val scalaTestVersion = \"3.2.8\"\n\n  \/\/ versions.properties key: org.sireum%%scalac-plugin%\n  \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20210422.4fc8eee\n  val sireumScalacVersion = \"4.20210422.4fc8eee\"\n\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n  \/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/4.20210427.9cd2a8a\n  val kekinianVersion = \"4.20210427.9cd2a8a\"\n\n\n  val inspectorVersion = \"0.6-SNAPSHOT\"\n\n  val formsRtVersion = \"7.0.3\"\n\n\n  def scalaVersion = scalaVer\n\n  override def javacOptions = T { Seq(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"utf8\") }\n\n  override def scalacOptions = T { Seq(\n    \"-target:jvm-1.8\",\n    \"-deprecation\",\n    \"-Yrangepos\",\n    \"-Ydelambdafy:method\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Xfatal-warnings\",\n    \"-language:postfixOps\"\n  ) }\n\n  override def ivyDeps = Agg(\n    ivy\"org.sireum.kekinian::library::${kekinianVersion}\",\n\n    \/\/ Jetbrains UI Designer\n    ivy\"com.intellij:forms_rt:${formsRtVersion}\"\n  )\n\n  override def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin::${sireumScalacVersion}\")\n\n  override def repositories = super.repositories :+ coursier.Repositories.jitpack\n\n  override def mainClass = T { Some(\"slang_embedded.Demo\") }\n\n  implicit def osPath2PathRef(p: os.Path): PathRef = PathRef(p)\n}\n\ntrait slangEmbeddedProject extends SlangEmbeddedModule {\n\n  def contributedSources: Seq[PathRef] = Seq(\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"architecture\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"art\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"bridge\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"component\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"data\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"nix\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"seL4Nix\"\n  )\n\n  override def sources = T.sources(contributedSources)\n\n  object tests extends Tests {\n\n    final override def millSourcePath = super.millSourcePath \/ os.up \/ os.up \/ \"src\" \/ \"test\"\n\n    override def sources = T.sources( millSourcePath \/ \"bridge\",\n                                      millSourcePath \/ \"util\" )\n\n    override def ivyDeps = Agg(ivy\"org.scalatest::scalatest::${scalaTestVersion}\")\n\n    override def testFrameworks = T { Seq(\"org.scalatest.tools.Framework\") }\n  }\n}\n\ntrait slangEmbeddedInspectorProject extends slangEmbeddedProject {\n\n  override def mainClass = T { Some(\"slang_embedded.InspectorDemo\") }\n\n  override def contributedSources =\n    super.contributedSources :+ millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"inspector\"\n\n  \/\/ FIXME: 2021.01.04 - the following doesn't work due to javafx\/mill resolution issue\n  \/\/        -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767\n  \/\/ override def ivyDeps = Agg(\n  \/\/   ivy\"org.sireum::inspector-capabilities::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-gui::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-services-jvm::${inspectorVersion}\"\n\n  \/\/ workaround to #767 -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767#issuecomment-652799588\n  override def unmanagedClasspath = T {\n    import coursier._\n\n    val files = Fetch().addDependencies(\n      dep\"org.sireum:inspector-capabilities:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-gui:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-services-jvm:0.6-SNAPSHOT\"\n    ).addRepositories(\n      Repositories.sonatype(\"releases\"),\n      Repositories.jitpack\n    ).run()\n    val pathRefs = files.map(f => PathRef(Path(f)))\n    Agg(pathRefs : _*)\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/build.sbt",
        {
          "type" : "TestResource",
          "content" : "\/\/ Example sbt build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ sbt can be obtained from https:\/\/www.scala-sbt.org\/download.html\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   sbt run\n\/\/\n\/\/ To run the example unit tests from the command line:\n\/\/   sbt test\n\/\/\n\/\/ To build a runnable\/executable jar:\n\/\/   sbt assembly\n\/\/\n\/\/ To skip running the unit tests while building the executable jar:\n\/\/   sbt 'set test in assembly := {}' assembly\n\/\/ on Linux\/Mac, or\n\/\/   sbt \"set test in assembly := {}\" assembly\n\/\/ on Windows\n\/\/\n\/\/ Sireum IVE:\n\/\/   In IVE select 'File > Open ...' and navigate to the directory containing\n\/\/   this file then click 'OK'.  To install Sireum IVE see https:\/\/github.com\/sireum\/kekinian#installing\n\/\/\n\/\/   To run the demo from within Sireum IVE:\n\/\/     Right click src\/main\/architecture\/slang_embedded\/Demo.scala and choose \"Run 'Demo'\"\n\/\/\n\/\/   To run the unit test cases from within Sireum IVE:\n\/\/     Right click the src\/test\/bridge directory and choose \"Run ScalaTests in bridge\"\n\/\/\n\/\/   NOTE: A ClassNotFoundException may be raised the first time you try to\n\/\/         run the demo or unit tests.  If this occurs simply delete the directory\n\/\/         named 'target' and retry\n\n\nlazy val top_Impl_Instance = slangEmbeddedProject(\"top_Impl_Instance\", \".\")\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n\/\/ to get the most recent versions of the following dependencies\n\n\/\/ versions.properties key: org.scala-lang%scala-library%\nval scalaVer = \"2.13.5\"\n\n\/\/ versions.properties key: org.scalatest%%scalatest%%\nval scalaTestVersion = \"3.2.8\"\n\n\/\/ versions.properties key: org.sireum%%scalac-plugin%\n\/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20210422.4fc8eee\nval sireumScalacVersion = \"4.20210422.4fc8eee\"\n\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n\/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/4.20210427.9cd2a8a\nval kekinianVersion = \"4.20210427.9cd2a8a\"\n\n\nval inspectorVersion = \"0.6-SNAPSHOT\"\n\nval formsRtVersion = \"7.0.3\"\n\n\n\nval commonSettings = Seq(\n  organization := \"org.sireum\",\n  incOptions := incOptions.value.withLogRecompileOnMacro(false),\n  scalaVersion := scalaVer,\n  scalacOptions := Seq(\"-target:jvm-1.8\", \"-deprecation\",\n    \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-Xfatal-warnings\"),\n  Test \/ parallelExecution := true,\n  resolvers ++= Seq(Resolver.sonatypeRepo(\"public\"), \"jitpack\" at \"https:\/\/jitpack.io\"),\n  addCompilerPlugin(\"org.sireum\" %% \"scalac-plugin\" % sireumScalacVersion),\n  libraryDependencies ++= Seq(\n    \"org.sireum.kekinian\" %% \"library\" % kekinianVersion withSources() withJavadoc()\n  )\n)\n\nimport sbtassembly.AssemblyPlugin.defaultUniversalScript\nval slangEmbeddedSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/art\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/architecture\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/bridge\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/component\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/data\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/seL4Nix\",\n\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/bridge\",\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/util\",\n\n  libraryDependencies += \"org.scalatest\" %% \"scalatest\" % scalaTestVersion % \"test\",\n\n  \/\/ Jetbrains UI Designer\n  libraryDependencies += \"com.intellij\" % \"forms_rt\" % formsRtVersion,\n\n  mainClass in (Compile, run) := Some(\"slang_embedded.Demo\"),\n\n  mainClass in assembly := Some(\"slang_embedded.Demo\"),\n  assemblyJarName in assembly := \"top_Impl_Instance.jar\",\n  assemblyOption in assembly := (assemblyOption in assembly).value.copy(prependShellScript = Some(defaultUniversalScript(shebang = false))),\n\n  assemblyMergeStrategy in assembly := {\n    case PathList(\"META-INF\", xs @ _*) => MergeStrategy.discard\n    case x => MergeStrategy.first\n  }\n)\n\nval slangEmbeddedInspectorSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/inspector\",\n\n  libraryDependencies += \"org.sireum\" % \"inspector-capabilities\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-gui\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-services-jvm\" % inspectorVersion withSources(),\n\n  mainClass in (Compile, run) := Some(\"slang_embedded.InspectorDemo\"),\n)\n\ndef slangEmbeddedProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings)\n\ndef slangEmbeddedInspectorProject(projId: String, projectDirectory: String) = {\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings ++ slangEmbeddedInspectorSettings)\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/project\/build.properties",
        {
          "type" : "TestResource",
          "content" : "sbt.version=1.3.3\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/slang-embedded\/project\/plugins.sbt",
        {
          "type" : "TestResource",
          "content" : "addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.15.0\")\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/UxAS_thr_Impl_uxas_UxAS_thread\/UxAS_thr_Impl_uxas_UxAS_thread.camkes",
        {
          "type" : "TestResource",
          "content" : "component UxAS_thr_Impl_uxas_UxAS_thread {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_AutomationRequest_notification;\n  consumes ReceiveEvent sb_OperatingRegion_notification;\n  consumes ReceiveEvent sb_LineSearchTask_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationRequest_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_OperatingRegion_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_LineSearchTask_queue;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/RadioDriver_thr_Impl_radio_RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver.camkes",
        {
          "type" : "TestResource",
          "content" : "component RadioDriver_thr_Impl_radio_RadioDriver {\n  include <sb_types.h>;\n  include <sp_union_art_DataContent.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_automation_request_out_1_notification;\n  emits ReceiveEvent sb_operating_region_out_1_notification;\n  emits ReceiveEvent sb_line_search_task_out_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sp_union_art_DataContent_t sb_trusted_ids_out;\n  dataport sb_queue_union_art_DataContent_1_t sb_automation_request_out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_operating_region_out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_line_search_task_out_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate.camkes",
        {
          "type" : "TestResource",
          "content" : "component CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate {\n  include <sb_types.h>;\n  include <sp_union_art_DataContent.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_AutomationRequest_out_1_notification;\n  emits ReceiveEvent sb_OperatingRegion_out_1_notification;\n  emits ReceiveEvent sb_LineSearchTask_out_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_AutomationRequest_in_notification;\n  consumes ReceiveEvent sb_OperatingRegion_in_notification;\n  consumes ReceiveEvent sb_LineSearchTask_in_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sp_union_art_DataContent_t sb_trusted_ids;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationRequest_in_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_AutomationRequest_out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_OperatingRegion_in_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_OperatingRegion_out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_LineSearchTask_in_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_LineSearchTask_out_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/top_Impl_Instance.camkes",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport \"components\/UxAS_thr_Impl_uxas_UxAS_thread\/UxAS_thr_Impl_uxas_UxAS_thread.camkes\";\nimport \"components\/RadioDriver_thr_Impl_radio_RadioDriver\/RadioDriver_thr_Impl_radio_RadioDriver.camkes\";\nimport \"components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate.camkes\";\n\nassembly {\n  composition {\n    component UxAS_thr_Impl_uxas_UxAS_thread uxas_UxAS_thread;\n    component RadioDriver_thr_Impl_radio_RadioDriver radio_RadioDriver;\n    component CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate am_gate_CASE_AttestationGate;\n\n    connection seL4SharedData conn1(from radio_RadioDriver.sb_trusted_ids_out, to am_gate_CASE_AttestationGate.sb_trusted_ids);\n    connection seL4Notification conn2(from radio_RadioDriver.sb_automation_request_out_1_notification, to am_gate_CASE_AttestationGate.sb_AutomationRequest_in_notification);\n    connection seL4SharedData conn3(from radio_RadioDriver.sb_automation_request_out_queue_1, to am_gate_CASE_AttestationGate.sb_AutomationRequest_in_queue);\n    connection seL4Notification conn4(from radio_RadioDriver.sb_operating_region_out_1_notification, to am_gate_CASE_AttestationGate.sb_OperatingRegion_in_notification);\n    connection seL4SharedData conn5(from radio_RadioDriver.sb_operating_region_out_queue_1, to am_gate_CASE_AttestationGate.sb_OperatingRegion_in_queue);\n    connection seL4Notification conn6(from radio_RadioDriver.sb_line_search_task_out_1_notification, to am_gate_CASE_AttestationGate.sb_LineSearchTask_in_notification);\n    connection seL4SharedData conn7(from radio_RadioDriver.sb_line_search_task_out_queue_1, to am_gate_CASE_AttestationGate.sb_LineSearchTask_in_queue);\n    connection seL4Notification conn8(from am_gate_CASE_AttestationGate.sb_AutomationRequest_out_1_notification, to uxas_UxAS_thread.sb_AutomationRequest_notification);\n    connection seL4SharedData conn9(from am_gate_CASE_AttestationGate.sb_AutomationRequest_out_queue_1, to uxas_UxAS_thread.sb_AutomationRequest_queue);\n    connection seL4Notification conn10(from am_gate_CASE_AttestationGate.sb_OperatingRegion_out_1_notification, to uxas_UxAS_thread.sb_OperatingRegion_notification);\n    connection seL4SharedData conn11(from am_gate_CASE_AttestationGate.sb_OperatingRegion_out_queue_1, to uxas_UxAS_thread.sb_OperatingRegion_queue);\n    connection seL4Notification conn12(from am_gate_CASE_AttestationGate.sb_LineSearchTask_out_1_notification, to uxas_UxAS_thread.sb_LineSearchTask_notification);\n    connection seL4SharedData conn13(from am_gate_CASE_AttestationGate.sb_LineSearchTask_out_queue_1, to uxas_UxAS_thread.sb_LineSearchTask_queue);\n    connection seL4Notification conn14(from uxas_UxAS_thread.sb_self_pacer_tick, to uxas_UxAS_thread.sb_self_pacer_tock);\n    connection seL4Notification conn15(from radio_RadioDriver.sb_self_pacer_tick, to radio_RadioDriver.sb_self_pacer_tock);\n    connection seL4Notification conn16(from am_gate_CASE_AttestationGate.sb_self_pacer_tick, to am_gate_CASE_AttestationGate.sb_self_pacer_tock);\n  }\n\n  configuration {\n    uxas_UxAS_thread._stack_size = 16777216;\n    uxas_UxAS_thread._domain = 9;\n    radio_RadioDriver._stack_size = 16777216;\n    radio_RadioDriver._domain = 2;\n    am_gate_CASE_AttestationGate._stack_size = 16777216;\n    am_gate_CASE_AttestationGate._domain = 5;\n    conn1.size = 131072;\n    radio_RadioDriver.sb_trusted_ids_out_access = \"W\";\n    am_gate_CASE_AttestationGate.sb_trusted_ids_access = \"R\";\n    conn3.size = 131072;\n    radio_RadioDriver.sb_automation_request_out_queue_1_access = \"W\";\n    am_gate_CASE_AttestationGate.sb_AutomationRequest_in_queue_access = \"R\";\n    conn5.size = 131072;\n    radio_RadioDriver.sb_operating_region_out_queue_1_access = \"W\";\n    am_gate_CASE_AttestationGate.sb_OperatingRegion_in_queue_access = \"R\";\n    conn7.size = 131072;\n    radio_RadioDriver.sb_line_search_task_out_queue_1_access = \"W\";\n    am_gate_CASE_AttestationGate.sb_LineSearchTask_in_queue_access = \"R\";\n    conn9.size = 131072;\n    am_gate_CASE_AttestationGate.sb_AutomationRequest_out_queue_1_access = \"W\";\n    uxas_UxAS_thread.sb_AutomationRequest_queue_access = \"R\";\n    conn11.size = 131072;\n    am_gate_CASE_AttestationGate.sb_OperatingRegion_out_queue_1_access = \"W\";\n    uxas_UxAS_thread.sb_OperatingRegion_queue_access = \"R\";\n    conn13.size = 131072;\n    am_gate_CASE_AttestationGate.sb_LineSearchTask_out_queue_1_access = \"W\";\n    uxas_UxAS_thread.sb_LineSearchTask_queue_access = \"R\";\n\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/types\/includes\/seqNum.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef _SEQNUM_H_\n#define _SEQNUM_H_\n\n\/\/ Typedef for seqNum to make it easy to change the type. Keep these consistent!\ntypedef uintmax_t seqNum_t;\n#define SEQNUM_MAX UINTMAX_MAX\n#define PRIseqNum PRIuMAX\n\n\/\/ DIRTY_SEQ_NUM is used to mark a sampling port message as dirty while it is\n\/\/ being writen. DIRTY_SEQ_NUM is not a valid sequence number. Valid sequence\n\/\/ numbers are from 0 to DIRTY_SEQ_NUM-1 is never a valid sequence number.\nstatic const seqNum_t DIRTY_SEQ_NUM = SEQNUM_MAX;\n\n#endif",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/types\/includes\/sp_union_art_DataContent.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef SP_UNION_ART_DATACONTENT_H\n#define SP_UNION_ART_DATACONTENT_H\n\n#include <sb_types.h>\n#include <seqNum.h>\n\n\/\/ Sampling port message with bool data\ntypedef struct sp_union_art_DataContent {\n\n  \/\/ The sampling port message data.\n  \/\/\n  union_art_DataContent data;\n\n  \/\/ Sequence number incremented by the writer every time the sampling port is\n  \/\/ written. Read by the receiver to detect dropped messages and incoherent\n  \/\/ message reads.  An incoherent message is one that is formed of parts of\n  \/\/ more than one message.  An incoherent message can occur when writing\n  \/\/ happens during read. If the component runs long enough, this counter\n  \/\/ will wrap back to zero.  This causes no problems unless the receiver is\n  \/\/ delayed for the wrap time. In that case the receiver may not detect\n  \/\/ dropped or incoherent message. But if the receiver is delayed for that\n  \/\/ long the system is probably in a very bad state. Also see DIRTY_SEQ_NUM\n  \/\/ above.\n  \/\/\n  \/\/ TODO: Currently using ggc builtin _Atomic. Would like to use c11 std, but\n  \/\/ have not figured out how to do this int the seL4 cmake build environment.\n  _Atomic seqNum_t seqNum;  \n\n} sp_union_art_DataContent_t;\n\nvoid init_sp_union_art_DataContent(sp_union_art_DataContent_t *port, seqNum_t *seqNum);\n\nbool write_sp_union_art_DataContent(sp_union_art_DataContent_t *port, const union_art_DataContent *data, seqNum_t *seqNum);\n\nbool read_sp_union_art_DataContent(sp_union_art_DataContent_t *port, union_art_DataContent *data, seqNum_t *seqNum);\n\nbool is_empty_sp_union_art_DataContent(sp_union_art_DataContent_t *port);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/types\/src\/sp_union_art_DataContent.c",
        {
          "type" : "TestResource",
          "content" : "#include <sp_union_art_DataContent.h>\n\nvoid init_sp_union_art_DataContent(sp_union_art_DataContent_t *port, seqNum_t *seqNum) {\n  *seqNum = 0; \/\/ First message sequence number will be 1.\n  port->seqNum = DIRTY_SEQ_NUM;\n}\n\n\/\/ Write message to a sampling port (data type: int)\n\/\/\n\/\/ Returns true when successful. Otherwise returns false. Currently there is no\n\/\/ way to fail and true is always returned. But this may change in the\n\/\/ future. seqNum is incremented when a message is successfully sent. seqNum\n\/\/ should not be modified otherwise.\n\/\/\n\/\/ TODO: Encapsulate this better. seqNum state should be maintained internally. Possible solutions:\n\/\/\n\/\/    - Allow write to have read access to dataport. Then seqNum is simply in the data port.\n\/\/\n\/\/    - Create a wrapper struct.\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_RELEASE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool write_sp_union_art_DataContent(sp_union_art_DataContent_t *port, const union_art_DataContent *data, seqNum_t *seqNum) {\n  \/\/ Mark the message dirty BEFORE we start writing.\n  port->seqNum = DIRTY_SEQ_NUM;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Write the data\n  port->data = *data;\n  \/\/ Increment the sequence number. We are the only writer of seqNum, so\n  \/\/ increment does not have to be atomic.\n  *seqNum = (*seqNum + 1) % DIRTY_SEQ_NUM;\n  port->seqNum = *seqNum;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE continuing\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Can't fail for now.\n  return true;\n}\n\n\/\/ Read a message from a sampling port (data type: int)\n\/\/\n\/\/ Return true upon successful read. Data is updated with the read\n\/\/ message. The sequence number of the message is also returned. The message,\n\/\/ might be tha same previously read. The sequences number can be used to\n\/\/ detect rereading the same message or dropped messages.\n\/\/\n\/\/ Return false if we fail to read a message. For now the only way to fail is\n\/\/ when we detect the possibility of a write during read. In this case data\n\/\/ may be incoherent and should not be used. Sequence number is set to\n\/\/ DIRTY_SEQ_NUM;\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_ACQUIRE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool read_sp_union_art_DataContent(sp_union_art_DataContent_t *port, union_art_DataContent *data, seqNum_t *seqNum) {\n  seqNum_t newSeqNum = port->seqNum;\n  \/\/ Acquire memory fence - Read seqNum BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  *data = port->data;\n  \/\/ Acquire memory fence - Read data BEFORE reading seqNum again \n  \/\/atomic_thread_fence(memory_order_acquire);\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  \/\/ The following logic will NOT catch case where the writer wrapped\n  \/\/ sequence numbers since our last read. For this to happen, this reader\n  \/\/ would have to be delayed for the entire time to wrap. \n  if (newSeqNum != DIRTY_SEQ_NUM && newSeqNum == port->seqNum) {\n    \/\/ Message data is good.  Write did not occur during read. \n    *seqNum = newSeqNum;\n    return true;\n  } else {\n    \/\/ Writer may have updated data while we were reading. Do not use possibly incoherent data.\n    *seqNum = DIRTY_SEQ_NUM;\n    return false;\n  }\n}\n\nbool is_empty_sp_union_art_DataContent(sp_union_art_DataContent_t *port) {\n  return port->seqNum == DIRTY_SEQ_NUM;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/CMake_CakeMLOptions.cmake",
        {
          "type" : "TestResource",
          "content" : "option(CAKEML_DUMP_BUFFERS\n       \"Print the contents of byte-arrays being sent to CakeML\"\n       OFF)\n\nif(CAKEML_DUMP_BUFFERS OR \"$ENV{CAKEML_DUMP_BUFFERS}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_DUMP_BUFFERS)\nendif()\n\noption(CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n       \"Print warning messages if byte-arrays being sent to CakeML are larger than expected\"\n       OFF)\n\nif(CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS OR \"$ENV{CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS)\nendif()\n\noption(CAKEML_ASSEMBLIES_PRESENT\n       \"Enable if CakeML assembly files have been included\"\n       OFF)\n\nif(CAKEML_ASSEMBLIES_PRESENT OR \"$ENV{CAKEML_ASSEMBLIES_PRESENT}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_ASSEMBLIES_PRESENT)\nendif()",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/CMake_TranspilerOptions.cmake",
        {
          "type" : "TestResource",
          "content" : "option(BOUND_CHECK\n       \"Build the program with sequence bound checking.\"\n       OFF)\n\nif(BOUND_CHECK OR \"$ENV{BOUND_CHECK}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_BOUND_CHECK)\nendif()\n\noption(NO_PRINT\n       \"Build the program without console output.\"\n       OFF)\n\nif(NO_PRINT OR \"$ENV{NO_PRINT}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_NO_PRINT)\nendif()\n\noption(RANGE_CHECK\n       \"Build the program with range checking.\"\n       OFF)\n\nif(RANGE_CHECK OR \"$ENV{RANGE_CHECK}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_RANGE_CHECK)\nendif()\n\noption(WITH_LOC\n       \"Build the program with Slang location info.\"\n       OFF)\n\nif(WITH_LOC OR \"$ENV{WITH_LOC}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_LOC)\nendif()",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (top_Impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_CakeMLOptions.cmake)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_TranspilerOptions.cmake)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/UxAS_thr_Impl_uxas_UxAS_thread)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/RadioDriver_thr_Impl_radio_RadioDriver)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/SlangTypeLibrary)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(UxAS_thr_Impl_uxas_UxAS_thread\n  SOURCES components\/UxAS_thr_Impl_uxas_UxAS_thread\/src\/sb_UxAS_thr_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/UxAS_thr_Impl_uxas_UxAS_thread\/includes\/ types\/includes\n  LIBS UxAS_thr_Impl_uxas_UxAS_thread\n)\n\nDeclareCAmkESComponent(RadioDriver_thr_Impl_radio_RadioDriver\n  SOURCES components\/RadioDriver_thr_Impl_radio_RadioDriver\/src\/sb_RadioDriver_thr_Impl.c types\/src\/sp_union_art_DataContent.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/RadioDriver_thr_Impl_radio_RadioDriver\/includes\/ types\/includes types\/includes\n  LIBS RadioDriver_thr_Impl_radio_RadioDriver\n)\n\nDeclareCAmkESComponent(CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\n  SOURCES components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl_ffi.c components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl.S components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl.c types\/src\/sp_union_art_DataContent.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/includes\/ types\/includes types\/includes\n  LIBS CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\n)\n\nDeclareCAmkESRootserver(top_Impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/bin\/run-camkes.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o noclobber -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:s\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"  -c, --camkes-dir      Location of CAmkES project\"\n  echo \"  -n, --non-interactive Non-interactive mode.  Symlink in apps directory will be replaced\"\n  echo \"                        if present, CAmkES build directory will not be deleted\"\n  echo \"  -o, --camkes-options  CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"  -s, --simulate        Simulate via QEMU\"\n  exit 2\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    # if the project contains VMs and USE_PRECONFIGURED_ROOTFS=OFF then\n    # deleting the build directory would force the linux image to be\n    # re-downloaded, which can take a long time\n    echo \"Non-interactive mode so not deleting existing ${BUILD_DIR}\"\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\nif [ \"${SIMULATE}\" = true ]; then\n  # .\/simulate\n\n  # console output from simulation disappears when QEMU shuts down when run from\n  # generated .\/simulate script. Instead call QEMU directly using the default\n  # values .\/simulate would pass\n\n  qemu-system-x86_64 \\\n      -cpu Nehalem,-vme,+pdpe1gb,-xsave,-xsaveopt,-xsavec,-fsgsbase,-invpcid,enforce \\\n      -nographic \\\n      -serial mon:stdio \\\n      -m size=512M \\\n      -kernel images\/kernel-x86_64-pc99 \\\n      -initrd images\/capdl-loader-image-x86_64-pc99\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/UxAS_thr_Impl_uxas_UxAS_thread\/src\/sb_UxAS_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_UxAS_thr_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <UxAS_thr_Impl_uxas_UxAS_thread_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_AutomationRequest_recv_queue;\n\n\/************************************************************************\n * sb_AutomationRequest_dequeue_poll:\n ************************************************************************\/\nbool sb_AutomationRequest_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_AutomationRequest_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_AutomationRequest_dequeue:\n ************************************************************************\/\nbool sb_AutomationRequest_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_AutomationRequest_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_AutomationRequest_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_AutomationRequest_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_AutomationRequest_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_OperatingRegion_recv_queue;\n\n\/************************************************************************\n * sb_OperatingRegion_dequeue_poll:\n ************************************************************************\/\nbool sb_OperatingRegion_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_OperatingRegion_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_OperatingRegion_dequeue:\n ************************************************************************\/\nbool sb_OperatingRegion_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_OperatingRegion_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_OperatingRegion_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_OperatingRegion_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_OperatingRegion_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_LineSearchTask_recv_queue;\n\n\/************************************************************************\n * sb_LineSearchTask_dequeue_poll:\n ************************************************************************\/\nbool sb_LineSearchTask_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_LineSearchTask_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_LineSearchTask_dequeue:\n ************************************************************************\/\nbool sb_LineSearchTask_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_LineSearchTask_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_LineSearchTask_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_LineSearchTask_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_LineSearchTask_recv_queue);\n}\n\n\/\/ is_empty AutomationRequest: In EventDataPort\nB slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_AutomationRequest_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_AutomationRequest_is_empty();\n}\n\n\/\/ receive AutomationRequest: In EventDataPort union_art_DataContent\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_AutomationRequest_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_UxAS_thr_Impl.c\", \"\", \"slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_AutomationRequest_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_AutomationRequest_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty OperatingRegion: In EventDataPort\nB slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_OperatingRegion_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_OperatingRegion_is_empty();\n}\n\n\/\/ receive OperatingRegion: In EventDataPort union_art_DataContent\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_OperatingRegion_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_UxAS_thr_Impl.c\", \"\", \"slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_OperatingRegion_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_OperatingRegion_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty LineSearchTask: In EventDataPort\nB slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_LineSearchTask_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_LineSearchTask_is_empty();\n}\n\n\/\/ receive LineSearchTask: In EventDataPort union_art_DataContent\nUnit slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_LineSearchTask_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_UxAS_thr_Impl.c\", \"\", \"slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_seL4Nix_LineSearchTask_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_LineSearchTask_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_UxAS_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of UxAS_thr_Impl_uxas_UxAS_thread\\n\");\n\n  \/\/ initialise data structure for incoming event data port AutomationRequest\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_AutomationRequest_recv_queue, sb_AutomationRequest_queue);\n\n  \/\/ initialise data structure for incoming event data port OperatingRegion\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_OperatingRegion_recv_queue, sb_OperatingRegion_queue);\n\n  \/\/ initialise data structure for incoming event data port LineSearchTask\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_LineSearchTask_recv_queue, sb_LineSearchTask_queue);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of UxAS_thr_Impl_uxas_UxAS_thread\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_UxAS_thr_Impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_SysContext_UxAS_thr_Impl_uxas_UxAS_thread_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/UxAS_thr_Impl_uxas_UxAS_thread\/includes\/sb_UxAS_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_UXAS_THR_IMPL_H\n#define SB_UXAS_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_AutomationRequest_dequeue(union_art_DataContent *);\n\nbool sb_OperatingRegion_dequeue(union_art_DataContent *);\n\nbool sb_LineSearchTask_dequeue(union_art_DataContent *);\n\n#endif \/\/ SB_UXAS_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/RadioDriver_thr_Impl_radio_RadioDriver\/src\/sb_RadioDriver_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_RadioDriver_thr_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <RadioDriver_thr_Impl_radio_RadioDriver_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nseqNum_t sb_trusted_ids_out_seqNum;\n\nbool sb_trusted_ids_out_write(const union_art_DataContent * value) {\n  return write_sp_union_art_DataContent(sb_trusted_ids_out, value, &sb_trusted_ids_out_seqNum);\n}\n\nbool sb_automation_request_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_automation_request_out_queue_1, (union_art_DataContent*) data);\n  sb_automation_request_out_1_notification_emit();\n\n  return true;\n}\n\nbool sb_operating_region_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_operating_region_out_queue_1, (union_art_DataContent*) data);\n  sb_operating_region_out_1_notification_emit();\n\n  return true;\n}\n\nbool sb_line_search_task_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_line_search_task_out_queue_1, (union_art_DataContent*) data);\n  sb_line_search_task_out_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send trusted_ids_out: Out DataPort CMASI__AddressArray_i\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_trusted_ids_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_RadioDriver_thr_Impl.c\", \"\", \"slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_trusted_ids_out_Send\", 0);\n\n  sb_trusted_ids_out_write(d);\n}\n\n\/\/ send automation_request_out: Out EventDataPort CMASI__AddressAttributedMessage_i\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_automation_request_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_RadioDriver_thr_Impl.c\", \"\", \"slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_automation_request_out_Send\", 0);\n\n  sb_automation_request_out_enqueue(d);\n}\n\n\/\/ send operating_region_out: Out EventDataPort CMASI__AddressAttributedMessage_i\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_operating_region_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_RadioDriver_thr_Impl.c\", \"\", \"slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_operating_region_out_Send\", 0);\n\n  sb_operating_region_out_enqueue(d);\n}\n\n\/\/ send line_search_task_out: Out EventDataPort CMASI__AddressAttributedMessage_i\nUnit slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_line_search_task_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_RadioDriver_thr_Impl.c\", \"\", \"slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_seL4Nix_line_search_task_out_Send\", 0);\n\n  sb_line_search_task_out_enqueue(d);\n}\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_RadioDriver_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of RadioDriver_thr_Impl_radio_RadioDriver\\n\");\n\n  \/\/ initialise data structure for data port trusted_ids_out\n  init_sp_union_art_DataContent(sb_trusted_ids_out, &sb_trusted_ids_out_seqNum);\n\n  \/\/ initialise data structure for outgoing event data port automation_request_out\n  sb_queue_union_art_DataContent_1_init(sb_automation_request_out_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port operating_region_out\n  sb_queue_union_art_DataContent_1_init(sb_operating_region_out_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port line_search_task_out\n  sb_queue_union_art_DataContent_1_init(sb_line_search_task_out_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of RadioDriver_thr_Impl_radio_RadioDriver\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_RadioDriver_thr_Impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_RadioDriver_RadioDriver_thr_Impl_radio_RadioDriver_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/RadioDriver_thr_Impl_radio_RadioDriver\/includes\/sb_RadioDriver_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_RADIODRIVER_THR_IMPL_H\n#define SB_RADIODRIVER_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_trusted_ids_out_write(const union_art_DataContent * value);\n\nbool sb_automation_request_out_enqueue(const union_art_DataContent *);\n\nbool sb_operating_region_out_enqueue(const union_art_DataContent *);\n\nbool sb_line_search_task_out_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_RADIODRIVER_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl_ffi.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <all.h>\n#include <camkes.h>\n#include <stdbool.h>\n#include <CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_api.h>\n#include <CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.h>\n\nslang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints entryPoints;\nIS_82ABD8 event_in_port_ids;\nIS_82ABD8 data_in_port_ids;\nIS_82ABD8 event_out_port_ids;\nIS_82ABD8 data_out_port_ids;\nbool initialized = false;\n\nvoid init(STACK_FRAME_ONLY) {\n  if(!initialized) {\n    DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"init\", 0);\n\n    entryPoints = (slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_entryPoints(SF_LAST);\n    event_in_port_ids = (IS_82ABD8) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n    data_in_port_ids = (IS_82ABD8) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n    event_out_port_ids = (IS_82ABD8) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n    data_out_port_ids = (IS_82ABD8) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n    initialized = true;\n  }\n}\n\nvoid ffiinitializeComponent(unsigned char *parameter, long parameterSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiinitializeComponent\", 0);\n\n  entryPoints = (slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_entryPoints(SF_LAST);\n  event_in_port_ids = (IS_82ABD8) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n  data_in_port_ids = (IS_82ABD8) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n  event_out_port_ids = (IS_82ABD8) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n  data_out_port_ids = (IS_82ABD8) slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n}\n\nvoid checkAndReportBufferOverrun(STACK_FRAME long bytesWritten, long bufferSizeBytes) {\n  #ifdef CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"checkAndReportBufferOverrun\", 0);\n\n  init(SF_LAST);\n  if (bytesWritten > bufferSizeBytes) {\n    DeclNewString(_str);\n    String str = (String)&_str;\n    String__append(SF str, string(\"Wrote too many bytes to buffer\"));\n    api_logInfo__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF str);\n  }\n  #endif\n}\n\nvoid dumpBuffer(STACK_FRAME size_t numBits, U8* buffer) {\n  #ifdef CAKEML_DUMP_BUFFERS\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"dumpBuffer\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  String__append(SF str, string(\"[\"));\n  size_t end = ((numBits \/ 8) > 80) ? 80 : (numBits \/ 8);\n  for (int i = 0 ; i < end ; ++i) {\n    U8_string_(SF str, buffer[i]);\n  }\n  String__append(SF str, string(\"]\"));\n  api_logInfo__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF str);\n  #endif\n}\n\nvoid ffiapi_receiveInput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_receiveInput\", 0);\n\n  init(SF_LAST);\n  art_Art_receiveInput(SF event_in_port_ids, data_in_port_ids);\n}\n\nvoid ffiapi_sendOutput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_sendOutput\", 0);\n\n  init(SF_LAST);\n  art_Art_sendOutput(SF event_out_port_ids, data_out_port_ids);\n}\n\nvoid ffiapi_logInfo(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_logInfo\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logInfo__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_logDebug(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_logDebug\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logDebug__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_logError(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_logError\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logError__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_get_trusted_ids(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_get_trusted_ids\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  api_get_trusted_ids__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF &numBits, (U8 *)(output));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_get_AutomationRequest_in(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_get_AutomationRequest_in\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_AutomationRequest_in__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_AutomationRequest_out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_send_AutomationRequest_out\", 0);\n\n  init(SF_LAST);\n  api_put_AutomationRequest_out__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffiapi_get_OperatingRegion_in(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_get_OperatingRegion_in\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_OperatingRegion_in__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_OperatingRegion_out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_send_OperatingRegion_out\", 0);\n\n  init(SF_LAST);\n  api_put_OperatingRegion_out__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffiapi_get_LineSearchTask_in(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_get_LineSearchTask_in\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_LineSearchTask_in__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_LineSearchTask_out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl_ffi.c\", \"\", \"ffiapi_send_LineSearchTask_out\", 0);\n\n  init(SF_LAST);\n  api_put_LineSearchTask_out__slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffisb_pacer_notification_wait(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tock_wait();\n  output[0] = 1;\n}\n\nvoid ffisb_pacer_notification_emit(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tick_emit();\n  output[0] = 1;\n}\n\n\/**\n * Required by the FFI framework\n *\/\n\nvoid ffiwrite (unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n}\n\nvoid cml_exit(int arg) {\n  #ifdef DEBUG_FFI\n  {\n    fprintf(stderr,\"GCNum: %d, GCTime(us): %ld\\n\",numGC,microsecs);\n  }\n  #endif\n  exit(arg);\n}\n\n\/\/ convert big-endian 32-bit float to little-endian 64 bit double\nvoid ffifloat2double(unsigned char *parameter, long parameterSizeBytes,\n                     unsigned char *output,    long outputSizeBytes) {\n  char bytes [4];\n  assert (4 == parameterSizeBytes);\n  bytes[3] = parameter[0];\n  bytes[2] = parameter[1];\n  bytes[1] = parameter[2];\n  bytes[0] = parameter[3];\n\n  double result = *((float*)bytes);\n  memcpy(output, (unsigned char*) &result, sizeof(double));\n}\n\nvoid ffiraw_print_buffer(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n\n  int elideAfter = 20; \/\/ stop printing after this many consecutive 0's seen\n  int stopAfter = 50; \/\/ exit after this many consecutive 0's seen, lessens 'busy-wait'\n\n  U8* buffer = (U8 *) parameter;\n\n  printf(\"%i bytes\\n\", parameterSizeBytes); \/\/ doesn't include the bool byte\n\n  if(parameterSizeBytes > 0) {\n    int numZerosSeen = 0;\n    printf(\"[%02x\\n\", buffer[0]); \/\/ first byte is a bool\n    for(int i = 1; i < parameterSizeBytes + 1; i++) {\n      numZerosSeen = buffer[i] == 0 ? (numZerosSeen + 1) : 0;\n      if(numZerosSeen >= elideAfter) {\n        if(numZerosSeen % stopAfter == 0) { printf(\"...\"); break; }\n      } else {\n      \tprintf(\"%02x \", buffer[i]);\n      \tif(i % 16 == 0) printf(\"\\n\");\n      }\n    }\n    printf(\"]\\n\");\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl.S",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ placeholder for CakeML assembly",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_thr_Impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_AttestationGate_thr_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nseqNum_t sb_trusted_ids_seqNum;\n\n\/*****************************************************************\n * sb_trusted_ids_is_empty:\n *\n * Helper method to determine if the data infrastructure port has\n * received data\n *\n ****************************************************************\/\nbool sb_trusted_ids_is_empty() {\n  return is_empty_sp_union_art_DataContent(sb_trusted_ids);\n}\n\nbool sb_trusted_ids_read(union_art_DataContent * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_union_art_DataContent(sb_trusted_ids, value, &new_seqNum) ) {\n    sb_trusted_ids_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_AutomationRequest_in_recv_queue;\n\n\/************************************************************************\n * sb_AutomationRequest_in_dequeue_poll:\n ************************************************************************\/\nbool sb_AutomationRequest_in_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_AutomationRequest_in_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_AutomationRequest_in_dequeue:\n ************************************************************************\/\nbool sb_AutomationRequest_in_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_AutomationRequest_in_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_AutomationRequest_in_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_AutomationRequest_in_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_AutomationRequest_in_recv_queue);\n}\n\nbool sb_AutomationRequest_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_AutomationRequest_out_queue_1, (union_art_DataContent*) data);\n  sb_AutomationRequest_out_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_OperatingRegion_in_recv_queue;\n\n\/************************************************************************\n * sb_OperatingRegion_in_dequeue_poll:\n ************************************************************************\/\nbool sb_OperatingRegion_in_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_OperatingRegion_in_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_OperatingRegion_in_dequeue:\n ************************************************************************\/\nbool sb_OperatingRegion_in_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_OperatingRegion_in_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_OperatingRegion_in_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_OperatingRegion_in_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_OperatingRegion_in_recv_queue);\n}\n\nbool sb_OperatingRegion_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_OperatingRegion_out_queue_1, (union_art_DataContent*) data);\n  sb_OperatingRegion_out_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_LineSearchTask_in_recv_queue;\n\n\/************************************************************************\n * sb_LineSearchTask_in_dequeue_poll:\n ************************************************************************\/\nbool sb_LineSearchTask_in_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_LineSearchTask_in_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_LineSearchTask_in_dequeue:\n ************************************************************************\/\nbool sb_LineSearchTask_in_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_LineSearchTask_in_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_LineSearchTask_in_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_LineSearchTask_in_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_LineSearchTask_in_recv_queue);\n}\n\nbool sb_LineSearchTask_out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_LineSearchTask_out_queue_1, (union_art_DataContent*) data);\n  sb_LineSearchTask_out_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send AutomationRequest_out: Out EventDataPort CMASI__AutomationRequest_i\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_AutomationRequest_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_AutomationRequest_out_Send\", 0);\n\n  sb_AutomationRequest_out_enqueue(d);\n}\n\n\/\/ send OperatingRegion_out: Out EventDataPort CMASI__OperatingRegion_i\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_OperatingRegion_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_OperatingRegion_out_Send\", 0);\n\n  sb_OperatingRegion_out_enqueue(d);\n}\n\n\/\/ send LineSearchTask_out: Out EventDataPort CMASI__LineSearchTask_i\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_LineSearchTask_out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_LineSearchTask_out_Send\", 0);\n\n  sb_LineSearchTask_out_enqueue(d);\n}\n\n\/\/ is_empty trusted_ids: In DataPort\nB slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_trusted_ids_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_trusted_ids_is_empty();\n}\n\n\/\/ receive trusted_ids: In DataPort union_art_DataContent\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_trusted_ids_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_trusted_ids_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_trusted_ids_read((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty AutomationRequest_in: In EventDataPort\nB slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_AutomationRequest_in_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_AutomationRequest_in_is_empty();\n}\n\n\/\/ receive AutomationRequest_in: In EventDataPort union_art_DataContent\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_AutomationRequest_in_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_AutomationRequest_in_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_AutomationRequest_in_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty OperatingRegion_in: In EventDataPort\nB slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_OperatingRegion_in_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_OperatingRegion_in_is_empty();\n}\n\n\/\/ receive OperatingRegion_in: In EventDataPort union_art_DataContent\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_OperatingRegion_in_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_OperatingRegion_in_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_OperatingRegion_in_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty LineSearchTask_in: In EventDataPort\nB slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_LineSearchTask_in_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_LineSearchTask_in_is_empty();\n}\n\n\/\/ receive LineSearchTask_in: In EventDataPort union_art_DataContent\nUnit slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_LineSearchTask_in_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_seL4Nix_LineSearchTask_in_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_LineSearchTask_in_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\\n\");\n\n  \/\/ initialise data structure for incoming event data port AutomationRequest_in\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_AutomationRequest_in_recv_queue, sb_AutomationRequest_in_queue);\n\n  \/\/ initialise data structure for outgoing event data port AutomationRequest_out\n  sb_queue_union_art_DataContent_1_init(sb_AutomationRequest_out_queue_1);\n\n  \/\/ initialise data structure for incoming event data port OperatingRegion_in\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_OperatingRegion_in_recv_queue, sb_OperatingRegion_in_queue);\n\n  \/\/ initialise data structure for outgoing event data port OperatingRegion_out\n  sb_queue_union_art_DataContent_1_init(sb_OperatingRegion_out_queue_1);\n\n  \/\/ initialise data structure for incoming event data port LineSearchTask_in\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_LineSearchTask_in_recv_queue, sb_LineSearchTask_in_queue);\n\n  \/\/ initialise data structure for outgoing event data port LineSearchTask_out\n  sb_queue_union_art_DataContent_1_init(sb_LineSearchTask_out_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\\n\");\n}\n\n#ifndef CAKEML_ASSEMBLIES_PRESENT\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_thr_Impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    slang_embedded_CASE_AttestationGate_CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/components\/CASE_AttestationGate_thr_Impl_am_gate_CASE_AttestationGate\/includes\/sb_CASE_AttestationGate_thr_Impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_ATTESTATIONGATE_THR_IMPL_H\n#define SB_CASE_ATTESTATIONGATE_THR_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_trusted_ids_read(union_art_DataContent * value);\n\nbool sb_AutomationRequest_in_dequeue(union_art_DataContent *);\n\nbool sb_AutomationRequest_out_enqueue(const union_art_DataContent *);\n\nbool sb_OperatingRegion_in_dequeue(union_art_DataContent *);\n\nbool sb_OperatingRegion_out_enqueue(const union_art_DataContent *);\n\nbool sb_LineSearchTask_in_dequeue(union_art_DataContent *);\n\nbool sb_LineSearchTask_out_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_CASE_ATTESTATIONGATE_THR_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/types\/includes\/sb_queue_union_art_DataContent_1.h",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h> \n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain \n\/\/ SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE-1 elements.\n#define SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_union_art_DataContent_1 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type union_art_DataContent \n  \/\/ (see sb_types.h) implemented as a ring buffer. \n  \/\/ No initialization necessary.\n  union_art_DataContent elt[SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE];\n\n} sb_queue_union_art_DataContent_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue, \n  union_art_DataContent *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_union_art_DataContent_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_union_art_DataContent_1_t *queue;\n\n} sb_queue_union_art_DataContent_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time. \n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_union_art_DataContent_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_union_art_DataContent_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/types\/src\/sb_queue_union_art_DataContent_1.c",
        {
          "type" : "TestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_union_art_DataContent_1.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue, \n  union_art_DataContent *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization. \n  \/\/ elt[queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_queue_union_art_DataContent_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue, \n  sb_event_counter_t *numDropped, \n  union_art_DataContent *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_union_art_DataContent_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again \n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped); \n    return false;\n  }\n}\n\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/types\/includes\/sb_types.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <all.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef union art_DataContent union_art_DataContent;\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/types\/includes\/sb_event_counter.h",
        {
          "type" : "TestResource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t;\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/kernel\/domain_schedule.c",
        {
          "type" : "TestResource",
          "content" : "#include <config.h>\n#include <object\/structures.h>\n#include <model\/statedata.h>\n\n\/\/ this file will not be overwritten and is safe to edit\n\n\/************************************************************\n\n   This is a kernel data structure containing an example schedule.\n   The length is in seL4 ticks (2 ms). \n   This schedule should be generated from the AADL model\n   using execution time and data flow latency specifications.\n\n   Pacer runs at highest rate and should always be in domain 1\n\n   Properties from AADL Model\n   --------------------------\n\n     Timing_Properties::Clock_Period : 2 ms \n     Timing_Properties::Frame_Period : 1000 ms\n\n     flightPlanner_thread\n     --------------------\n\n       CASE_Scheduling::Domain : 3\n       Timing_Properties::Compute_Execution_Time : 10 ms\n       Timing_Properties::Period : 1000 ms\n\n     flyZoneDatabase_thread\n     ----------------------\n\n       CASE_Scheduling::Domain : 4\n       Timing_Properties::Compute_Execution_Time : 10 ms\n       Timing_Properties::Period : 1000 ms\n\n     mockWaypointManager_thread\n     --------------------------\n\n       CASE_Scheduling::Domain : 5\n       Timing_Properties::Compute_Execution_Time : 10 ms\n       Timing_Properties::Period : 1000 ms\n\n     monitor_thread\n     --------------\n\n       CASE_Scheduling::Domain : 2\n       Timing_Properties::Compute_Execution_Time : 10 ms\n       Timing_Properties::Period : 1000 ms\n\n *********************************************************\/\n\nconst dschedule_t ksDomSchedule[] = {\n  { .domain = 0, .length = 10 },\n  { .domain = 0, .length = 10 },\n  { .domain = 2, .length = 10 },\n  { .domain = 0, .length = 10 },\n  { .domain = 5, .length = 10 },\n  { .domain = 0, .length = 10 },\n  { .domain = 9, .length = 10 },\n  { .domain = 0, .length = 500 } \/\/ slow things down a bit\n};\n\nconst word_t ksDomScheduleLength = sizeof(ksDomSchedule) \/ sizeof(dschedule_t);\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/settings.cmake",
        {
          "type" : "TestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nset(KernelDomainSchedule \"${CMAKE_CURRENT_LIST_DIR}\/kernel\/domain_schedule.c\" CACHE INTERNAL \"\")\nset(KernelNumDomains 16 CACHE STRING \"\" FORCE)\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "HamrTranspileTests_attestation-gate--SeL4\/types\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            src\/sb_queue_union_art_DataContent_1.c\n            src\/sp_union_art_DataContent.c)\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           PUBLIC includes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
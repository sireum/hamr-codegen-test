{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "test_data_port_periodic--SeL4_Only\/components\/source_t_impl_test_data_port_periodic_src\/source_t_impl_test_data_port_periodic_src.camkes",
        {
          "type" : "TestResource",
          "content" : "import <std_connector.camkes>;\ncomponent source_t_impl_test_data_port_periodic_src {\n  include <sb_types.h>;\n  include <sp_int8_t.h>;\n  control;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sp_int8_t_t sb_write_port;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/destination_t_impl_test_data_port_periodic_dest\/destination_t_impl_test_data_port_periodic_dest.camkes",
        {
          "type" : "TestResource",
          "content" : "import <std_connector.camkes>;\ncomponent destination_t_impl_test_data_port_periodic_dest {\n  include <sb_types.h>;\n  include <sp_int8_t.h>;\n  control;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sp_int8_t_t sb_read_port;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/dispatch_periodic\/dispatch_periodic.camkes",
        {
          "type" : "TestResource",
          "content" : "import <global-connectors.camkes>;\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_test_data_port_periodic_src_periodic_dispatch_notification;\n  emits Notification sb_test_data_port_periodic_dest_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/top_impl_Instance.camkes",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/source_t_impl_test_data_port_periodic_src\/source_t_impl_test_data_port_periodic_src.camkes\";\nimport \"components\/destination_t_impl_test_data_port_periodic_dest\/destination_t_impl_test_data_port_periodic_dest.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component source_t_impl_test_data_port_periodic_src test_data_port_periodic_src;\n    component destination_t_impl_test_data_port_periodic_dest test_data_port_periodic_dest;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4SharedData conn1(from test_data_port_periodic_src.sb_write_port, to test_data_port_periodic_dest.sb_read_port);\n    connection seL4Notification conn2(from dispatch_periodic_inst.sb_test_data_port_periodic_src_periodic_dispatch_notification, to test_data_port_periodic_src.sb_periodic_dispatch_notification);\n    connection seL4Notification conn3(from dispatch_periodic_inst.sb_test_data_port_periodic_dest_periodic_dispatch_notification, to test_data_port_periodic_dest.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn4(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn5(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    test_data_port_periodic_src.write_port_access = \"W\";\n    test_data_port_periodic_dest.read_port_access = \"R\";\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/source_t_impl_test_data_port_periodic_src\/src\/source.c",
        {
          "type" : "TestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_source_t_impl.h>\n\nstatic int8_t _value;\n\nvoid test_data_port_periodic_source_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_data_port_periodic_source_component_init called\\n\", get_instance_name());\n  _value = 0;\n}\n\nvoid test_data_port_periodic_source_component_time_triggered(const int64_t *arg) {\n  if (sb_write_port_write( &_value ) ) {\n    printf(\"---------------------------------------\\n\");\n    printf(\"[%s] Sent %d\\n\", get_instance_name(), _value );\n    _value = (_value + 1) % 500;\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/destination_t_impl_test_data_port_periodic_dest\/src\/destination.c",
        {
          "type" : "TestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_destination_t_impl.h>\n\nvoid test_data_port_periodic_destination_component_init(const int64_t *arg) {\n  printf(\"[%s] test_data_port_periodic_destination_component_init called\\n\", get_instance_name());\n}\n\nvoid test_data_port_periodic_destination_component_time_triggered(const int64_t *arg) {\n  int8_t value;\n\n  if(sb_read_port_read(&value)){\n    printf(\"[%s] value {%d}\\n\", get_instance_name(), value);\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/types\/includes\/seqNum.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef _SEQNUM_H_\n#define _SEQNUM_H_\n\n\/\/ Typedef for seqNum to make it easy to change the type. Keep these consistent!\ntypedef uintmax_t seqNum_t;\n#define SEQNUM_MAX UINTMAX_MAX\n#define PRIseqNum PRIuMAX\n\n\/\/ DIRTY_SEQ_NUM is used to mark a sampling port message as dirty while it is\n\/\/ being writen. DIRTY_SEQ_NUM is not a valid sequence number. Valid sequence\n\/\/ numbers are from 0 to DIRTY_SEQ_NUM-1 is never a valid sequence number.\nstatic const seqNum_t DIRTY_SEQ_NUM = SEQNUM_MAX;\n\n#endif",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/types\/includes\/sp_int8_t.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef SP_INT8_T_H\n#define SP_INT8_T_H\n\n#include <sb_types.h>\n#include <seqNum.h>\n\n\/\/ Sampling port message with bool data\ntypedef struct sp_int8_t {\n\n  \/\/ The sampling port message data.\n  \/\/\n  int8_t data;\n\n  \/\/ Sequence number incremented by the writer every time the sampling port is\n  \/\/ written. Read by the receiver to detect dropped messages and incoherent\n  \/\/ message reads.  An incoherent message is one that is formed of parts of\n  \/\/ more than one message.  An incoherent message can occur when writing\n  \/\/ happens during read. If the component runs long enough, this counter\n  \/\/ will wrap back to zero.  This causes no problems unless the receiver is\n  \/\/ delayed for the wrap time. In that case the receiver may not detect\n  \/\/ dropped or incoherent message. But if the receiver is delayed for that\n  \/\/ long the system is probably in a very bad state. Also see DIRTY_SEQ_NUM\n  \/\/ above.\n  \/\/\n  \/\/ TODO: Currently using ggc builtin _Atomic. Would like to use c11 std, but\n  \/\/ have not figured out how to do this int the seL4 cmake build environment.\n  _Atomic seqNum_t seqNum;  \n\n} sp_int8_t_t;\n\nvoid init_sp_int8_t(sp_int8_t_t *port, seqNum_t *seqNum);\n\nbool write_sp_int8_t(sp_int8_t_t *port, const int8_t *data, seqNum_t *seqNum);\n\nbool read_sp_int8_t(sp_int8_t_t *port, int8_t *data, seqNum_t *seqNum);\n\nbool is_empty_sp_int8_t(sp_int8_t_t *port);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/types\/src\/sp_int8_t.c",
        {
          "type" : "TestResource",
          "content" : "#include <sp_int8_t.h>\n\nvoid init_sp_int8_t(sp_int8_t_t *port, seqNum_t *seqNum) {\n  *seqNum = 0; \/\/ First message sequence number will be 1.\n  port->seqNum = DIRTY_SEQ_NUM;\n}\n\n\/\/ Write message to a sampling port (data type: int)\n\/\/\n\/\/ Returns true when successful. Otherwise returns false. Currently there is no\n\/\/ way to fail and true is always returned. But this may change in the\n\/\/ future. seqNum is incremented when a message is successfully sent. seqNum\n\/\/ should not be modified otherwise.\n\/\/\n\/\/ TODO: Encapsulate this better. seqNum state should be maintained internally. Possible solutions:\n\/\/\n\/\/    - Allow write to have read access to dataport. Then seqNum is simply in the data port.\n\/\/\n\/\/    - Create a wrapper struct.\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_RELEASE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool write_sp_int8_t(sp_int8_t_t *port, const int8_t *data, seqNum_t *seqNum) {\n  \/\/ Mark the message dirty BEFORE we start writing.\n  port->seqNum = DIRTY_SEQ_NUM;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Write the data\n  port->data = *data;\n  \/\/ Increment the sequence number. We are the only writer of seqNum, so\n  \/\/ increment does not have to be atomic.\n  *seqNum = (*seqNum + 1) % DIRTY_SEQ_NUM;\n  port->seqNum = *seqNum;\n  \/\/ Release memory fence - ensure write above to seqNum happens BEFORE continuing\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n  \/\/ Can't fail for now.\n  return true;\n}\n\n\/\/ Read a message from a sampling port (data type: int)\n\/\/\n\/\/ Return true upon successful read. Data is updated with the read\n\/\/ message. The sequence number of the message is also returned. The message,\n\/\/ might be tha same previously read. The sequences number can be used to\n\/\/ detect rereading the same message or dropped messages.\n\/\/\n\/\/ Return false if we fail to read a message. For now the only way to fail is\n\/\/ when we detect the possibility of a write during read. In this case data\n\/\/ may be incoherent and should not be used. Sequence number is set to\n\/\/ DIRTY_SEQ_NUM;\n\/\/\n\/\/ TODO: Currently using ggc builtin __atomic_thread_fence(__ATOMIC_ACQUIRE).\n\/\/ Would like to use c11 std, but have not figured out how to do this int the\n\/\/ seL4 cmake build environment.\nbool read_sp_int8_t(sp_int8_t_t *port, int8_t *data, seqNum_t *seqNum) {\n  seqNum_t newSeqNum = port->seqNum;\n  \/\/ Acquire memory fence - Read seqNum BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  *data = port->data;\n  \/\/ Acquire memory fence - Read data BEFORE reading seqNum again \n  \/\/atomic_thread_fence(memory_order_acquire);\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n  \/\/ The following logic will NOT catch case where the writer wrapped\n  \/\/ sequence numbers since our last read. For this to happen, this reader\n  \/\/ would have to be delayed for the entire time to wrap. \n  if (newSeqNum != DIRTY_SEQ_NUM && newSeqNum == port->seqNum) {\n    \/\/ Message data is good.  Write did not occur during read. \n    *seqNum = newSeqNum;\n    return true;\n  } else {\n    \/\/ Writer may have updated data while we were reading. Do not use possibly incoherent data.\n    *seqNum = DIRTY_SEQ_NUM;\n    return false;\n  }\n}\n\nbool is_empty_sp_int8_t(sp_int8_t_t *port) {\n  return port->seqNum == DIRTY_SEQ_NUM;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nincludeGlobalComponents()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(source_t_impl_test_data_port_periodic_src\n  SOURCES components\/source_t_impl_test_data_port_periodic_src\/\/src\/source.c components\/source_t_impl_test_data_port_periodic_src\/src\/sb_source_t_impl.c types\/src\/sp_int8_t.c\n  INCLUDES components\/source_t_impl_test_data_port_periodic_src\/includes\/ types\/includes types\/includes\n)\n\nDeclareCAmkESComponent(destination_t_impl_test_data_port_periodic_dest\n  SOURCES components\/destination_t_impl_test_data_port_periodic_dest\/\/src\/destination.c components\/destination_t_impl_test_data_port_periodic_dest\/src\/sb_destination_t_impl.c types\/src\/sp_int8_t.c\n  INCLUDES components\/destination_t_impl_test_data_port_periodic_dest\/includes\/ types\/includes types\/includes\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  LIBS SB_Type_Library\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/bin\/run-camkes.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o noclobber -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:s\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"  -c, --camkes-dir      Location of CAmkES project\"\n  echo \"  -n, --non-interactive Non-interactive mode.  Will not prompt before deleting apps and build directories\"\n  echo \"  -o, --camkes-options  CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"  -s, --simulate        Simulate via QEMU\"\n  exit 2\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    rm -rf ${BUILD_DIR}\n    mkdir ${BUILD_DIR}\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\nif [ \"${SIMULATE}\" = true ]; then\n  .\/simulate\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/source_t_impl_test_data_port_periodic_src\/src\/sb_source_t_impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_source_t_impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nvoid sb_entrypoint_source_t_impl_periodic_dispatcher(const int64_t * in_arg) {\n  test_data_port_periodic_source_component_time_triggered((int64_t *) in_arg);\n}\n\nseqNum_t sb_write_port_seqNum;\n\nbool sb_write_port_write(const int8_t * value) {\n  return write_sp_int8_t(sb_write_port, value, &sb_write_port_seqNum);\n}\n\n\/************************************************************************\n *  sb_entrypoint_source_t_impl_test_data_port_periodic_src_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_source_t_impl_test_data_port_periodic_src_initializer(const int64_t * in_arg) {\n  test_data_port_periodic_source_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise data structure for data port write_port\n  init_sp_int8_t(sb_write_port, &sb_write_port_seqNum);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_source_t_impl_test_data_port_periodic_src_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_source_t_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/source_t_impl_test_data_port_periodic_src\/includes\/sb_source_t_impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_SOURCE_T_IMPL_H\n#define SB_SOURCE_T_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_write_port_write(const int8_t * value);\n\nvoid test_data_port_periodic_source_component_time_triggered(const int64_t *);\n\nvoid test_data_port_periodic_source_component_init(const int64_t *arg);\n\n#endif \/\/ SB_SOURCE_T_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/destination_t_impl_test_data_port_periodic_dest\/src\/sb_destination_t_impl.c",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_destination_t_impl.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nvoid sb_entrypoint_destination_t_impl_periodic_dispatcher(const int64_t * in_arg) {\n  test_data_port_periodic_destination_component_time_triggered((int64_t *) in_arg);\n}\n\nseqNum_t sb_read_port_seqNum;\n\n\/*****************************************************************\n * sb_read_port_is_empty:\n *\n * Helper method to determine if the data infrastructure port has\n * received data\n *\n ****************************************************************\/\nbool sb_read_port_is_empty() {\n  return is_empty_sp_int8_t(sb_read_port);\n}\n\nbool sb_read_port_read(int8_t * value) {\n  seqNum_t new_seqNum;\n  if ( read_sp_int8_t(sb_read_port, value, &new_seqNum) ) {\n    sb_read_port_seqNum = new_seqNum;\n    return true;\n  } else {\n    return false;\n  } \n}\n\n\/************************************************************************\n *  sb_entrypoint_destination_t_impl_test_data_port_periodic_dest_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_destination_t_impl_test_data_port_periodic_dest_initializer(const int64_t * in_arg) {\n  test_data_port_periodic_destination_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise data structure for data port read_port\n  init_sp_int8_t(sb_read_port, &sb_read_port_seqNum);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_destination_t_impl_test_data_port_periodic_dest_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_destination_t_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/destination_t_impl_test_data_port_periodic_dest\/includes\/sb_destination_t_impl.h",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_DESTINATION_T_IMPL_H\n#define SB_DESTINATION_T_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_read_port_read(int8_t * value);\n\nvoid test_data_port_periodic_destination_component_time_triggered(const int64_t *);\n\nvoid test_data_port_periodic_destination_component_init(const int64_t *arg);\n\n#endif \/\/ SB_DESTINATION_T_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c",
        {
          "type" : "TestResource",
          "content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (1000 \/ aadl_tick_interval)) == 0) {\n    sb_test_data_port_periodic_src_periodic_dispatch_notification_emit();\n  }\n  if ((aadl_calendar_counter % (2000 \/ aadl_tick_interval)) == 0) {\n    sb_test_data_port_periodic_dest_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/types\/includes\/sb_types.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/settings.cmake",
        {
          "type" : "TestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "test_data_port_periodic--SeL4_Only\/types\/CMakeLists.txt",
        {
          "type" : "TestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            src\/sp_int8_t.c)\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           PUBLIC includes)\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
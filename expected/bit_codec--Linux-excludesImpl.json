{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/data\/bit_codec\/Base_Types.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport org.sireum.S8._\nimport org.sireum.S16._\nimport org.sireum.S32._\nimport org.sireum.S64._\nimport org.sireum.U8._\nimport org.sireum.U16._\nimport org.sireum.U32._\nimport org.sireum.U64._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Base_Types {\n\n  type Boolean = B\n\n  type Integer = Z\n\n  type Integer_8 = S8\n  type Integer_16 = S16\n  type Integer_32 = S32\n  type Integer_64 = S64\n\n  type Unsigned_8 = U8\n  type Unsigned_16 = U16\n  type Unsigned_32 = U32\n  type Unsigned_64 = U64\n\n  \/\/ TODO: Base_Types::Natural\n\n  type Float = R\n  type Float_32 = F32\n  type Float_64 = F64\n\n  type Character = C\n  type String = org.sireum.String\n\n  type Bits = org.sireum.ISZ[B]\n\n  @datatype class Boolean_Payload(value: B) extends art.DataContent\n\n  @datatype class Integer_Payload(value: Z) extends art.DataContent\n\n  @datatype class Integer_8_Payload(value: S8) extends art.DataContent\n  @datatype class Integer_16_Payload(value: S16) extends art.DataContent\n  @datatype class Integer_32_Payload(value: S32) extends art.DataContent\n  @datatype class Integer_64_Payload(value: S64) extends art.DataContent\n\n  @datatype class Unsigned_8_Payload(value: U8) extends art.DataContent\n  @datatype class Unsigned_16_Payload(value: U16) extends art.DataContent\n  @datatype class Unsigned_32_Payload(value: U32) extends art.DataContent\n  @datatype class Unsigned_64_Payload(value: U64) extends art.DataContent\n\n  @datatype class Float_Payload(value: R) extends art.DataContent\n  @datatype class Float_32_Payload(value: F32) extends art.DataContent\n  @datatype class Float_64_Payload(value: F64) extends art.DataContent\n\n  @datatype class Character_Payload(value: C) extends art.DataContent\n  @datatype class String_Payload(value: String) extends art.DataContent\n\n  @datatype class Bits_Payload(value: ISZ[B]) extends art.DataContent\n\n  def Boolean_example(): Boolean = { return F }\n\n  def Integer_example(): Integer = { return z\"0\" }\n\n  def Integer_8_example(): Integer_8 = { return s8\"0\" }\n  def Integer_16_example(): Integer_16 = { return s16\"0\" }\n  def Integer_32_example(): Integer_32 = { return s32\"0\" }\n  def Integer_64_example(): Integer_64 = { return s64\"0\" }\n\n  def Unsigned_8_example(): Unsigned_8 = { return u8\"0\" }\n  def Unsigned_16_example(): Unsigned_16 = { return u16\"0\" }\n  def Unsigned_32_example(): Unsigned_32 = { return u32\"0\" }\n  def Unsigned_64_example(): Unsigned_64 = { return u64\"0\" }\n\n  def Float_example(): Float = { return r\"0\" }\n  def Float_32_example(): Float_32 = { return f32\"0\" }\n  def Float_64_example(): Float_64 = { return f64\"0\" }\n\n  def Character_example(): Character = { return ' ' }\n  def String_example(): String = { return \"\" }\n\n  def Bits_example(): Bits = { return ISZ() }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/architecture\/bit_codec\/Arch.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\nimport art.PortMode._\nimport art.DispatchPropertyProtocol._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Arch {\n  val Bit_Codec_Sys_Impl_Instance_proc_producer : bit_codec.Bit_Codec.Producer_proc_producer_Bridge = {\n    val to_filter_u32 = Port[Base_Types.Bits] (id = 0, name = \"Bit_Codec_Sys_Impl_Instance_proc_producer_to_filter_u32\", mode = DataOut)\n    val to_filter_latitude = Port[Base_Types.Bits] (id = 1, name = \"Bit_Codec_Sys_Impl_Instance_proc_producer_to_filter_latitude\", mode = DataOut)\n    val to_filter_longitude = Port[Base_Types.Bits] (id = 2, name = \"Bit_Codec_Sys_Impl_Instance_proc_producer_to_filter_longitude\", mode = DataOut)\n    val to_filter_coordinate = Port[Base_Types.Bits] (id = 3, name = \"Bit_Codec_Sys_Impl_Instance_proc_producer_to_filter_coordinate\", mode = DataOut)\n    val to_filter_mission = Port[Base_Types.Bits] (id = 4, name = \"Bit_Codec_Sys_Impl_Instance_proc_producer_to_filter_mission\", mode = EventOut)\n    val to_filter_event = Port[art.Empty] (id = 5, name = \"Bit_Codec_Sys_Impl_Instance_proc_producer_to_filter_event\", mode = EventOut)\n\n    bit_codec.Bit_Codec.Producer_proc_producer_Bridge(\n      id = 0,\n      name = \"Bit_Codec_Sys_Impl_Instance_proc_producer\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      to_filter_u32 = to_filter_u32,\n      to_filter_latitude = to_filter_latitude,\n      to_filter_longitude = to_filter_longitude,\n      to_filter_coordinate = to_filter_coordinate,\n      to_filter_mission = to_filter_mission,\n      to_filter_event = to_filter_event\n    )\n  }\n  val Bit_Codec_Sys_Impl_Instance_proc_filter : bit_codec.Bit_Codec.Filter_proc_filter_Bridge = {\n    val from_producer_u32 = Port[Base_Types.Bits] (id = 6, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_from_producer_u32\", mode = DataIn)\n    val from_producer_latitude = Port[Base_Types.Bits] (id = 7, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_from_producer_latitude\", mode = DataIn)\n    val from_producer_longitude = Port[Base_Types.Bits] (id = 8, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_from_producer_longitude\", mode = DataIn)\n    val from_producer_coordinate = Port[Base_Types.Bits] (id = 9, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_from_producer_coordinate\", mode = DataIn)\n    val to_consumer_u32 = Port[Base_Types.Bits] (id = 10, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_to_consumer_u32\", mode = DataOut)\n    val to_consumer_latitude = Port[Base_Types.Bits] (id = 11, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_to_consumer_latitude\", mode = DataOut)\n    val to_consumer_longitude = Port[Base_Types.Bits] (id = 12, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_to_consumer_longitude\", mode = DataOut)\n    val to_consumer_coordinate = Port[Base_Types.Bits] (id = 13, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_to_consumer_coordinate\", mode = DataOut)\n    val from_producer_mission = Port[Base_Types.Bits] (id = 14, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_from_producer_mission\", mode = EventIn)\n    val to_consumer_mission = Port[Base_Types.Bits] (id = 15, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_to_consumer_mission\", mode = EventOut)\n    val from_producer_event = Port[art.Empty] (id = 16, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_from_producer_event\", mode = EventIn)\n    val to_consumer_event = Port[art.Empty] (id = 17, name = \"Bit_Codec_Sys_Impl_Instance_proc_filter_to_consumer_event\", mode = EventOut)\n\n    bit_codec.Bit_Codec.Filter_proc_filter_Bridge(\n      id = 1,\n      name = \"Bit_Codec_Sys_Impl_Instance_proc_filter\",\n      dispatchProtocol = Sporadic(min = 1000),\n      dispatchTriggers = None(),\n\n      from_producer_u32 = from_producer_u32,\n      from_producer_latitude = from_producer_latitude,\n      from_producer_longitude = from_producer_longitude,\n      from_producer_coordinate = from_producer_coordinate,\n      to_consumer_u32 = to_consumer_u32,\n      to_consumer_latitude = to_consumer_latitude,\n      to_consumer_longitude = to_consumer_longitude,\n      to_consumer_coordinate = to_consumer_coordinate,\n      from_producer_mission = from_producer_mission,\n      to_consumer_mission = to_consumer_mission,\n      from_producer_event = from_producer_event,\n      to_consumer_event = to_consumer_event\n    )\n  }\n  val Bit_Codec_Sys_Impl_Instance_proc_consumer : bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge = {\n    val from_filter_u32 = Port[Base_Types.Bits] (id = 18, name = \"Bit_Codec_Sys_Impl_Instance_proc_consumer_from_filter_u32\", mode = DataIn)\n    val from_filter_latitude = Port[Base_Types.Bits] (id = 19, name = \"Bit_Codec_Sys_Impl_Instance_proc_consumer_from_filter_latitude\", mode = DataIn)\n    val from_filter_longitude = Port[Base_Types.Bits] (id = 20, name = \"Bit_Codec_Sys_Impl_Instance_proc_consumer_from_filter_longitude\", mode = DataIn)\n    val from_filter_coordinate = Port[Base_Types.Bits] (id = 21, name = \"Bit_Codec_Sys_Impl_Instance_proc_consumer_from_filter_coordinate\", mode = DataIn)\n    val from_filter_mission = Port[Base_Types.Bits] (id = 22, name = \"Bit_Codec_Sys_Impl_Instance_proc_consumer_from_filter_mission\", mode = EventIn)\n    val from_filter_event = Port[art.Empty] (id = 23, name = \"Bit_Codec_Sys_Impl_Instance_proc_consumer_from_filter_event\", mode = EventIn)\n\n    bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge(\n      id = 2,\n      name = \"Bit_Codec_Sys_Impl_Instance_proc_consumer\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      from_filter_u32 = from_filter_u32,\n      from_filter_latitude = from_filter_latitude,\n      from_filter_longitude = from_filter_longitude,\n      from_filter_coordinate = from_filter_coordinate,\n      from_filter_mission = from_filter_mission,\n      from_filter_event = from_filter_event\n    )\n  }\n\n  val ad : ArchitectureDescription = {\n\n    ArchitectureDescription(\n      components = ISZ (Bit_Codec_Sys_Impl_Instance_proc_producer, Bit_Codec_Sys_Impl_Instance_proc_filter, Bit_Codec_Sys_Impl_Instance_proc_consumer),\n\n      connections = ISZ (Connection(from = Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_u32, to = Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_u32),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_latitude, to = Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_latitude),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_longitude, to = Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_longitude),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_coordinate, to = Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_coordinate),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_mission, to = Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_mission),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_event, to = Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_event),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_u32, to = Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_u32),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_latitude, to = Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_latitude),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_longitude, to = Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_longitude),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_coordinate, to = Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_coordinate),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_mission, to = Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_mission),\n                         Connection(from = Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_event, to = Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_event))\n    )\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/architecture\/bit_codec\/Demo.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ This file was auto-generated.  Do not edit\npackage bit_codec\n\nobject Demo extends App {\n  art.Art.run(Arch.ad)\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/inspector\/bit_codec\/InspectorDemo.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec\n\nimport art.{ArchitectureDescription, Bridge, DataContent, UPort}\nimport org.reactivestreams.Publisher\nimport org.sireum.hamr.inspector.common.{Filter, Injection, InspectionBlueprint, Msg, Rule}\nimport org.sireum.hamr.inspector.capabilities.InspectorCapabilitiesLauncher\nimport org.sireum.hamr.inspector.gui.InspectorGUILauncher\nimport org.sireum.hamr.inspector.stream.Flux\n\nobject InspectorDemo extends App {\n\n  {\n    InspectorCapabilitiesLauncher.run(Blueprint)\n\n    val filters: Set[Filter] = Set(NoFilter, EvensOnly)\n    val rules: Set[Rule] = Set(Require100OrMore)\n    val injections: Set[Injection] = Set()\n\n    InspectorGUILauncher.run(Blueprint, filters, rules, injections, args)\n  }\n\n  object Blueprint extends InspectionBlueprint {\n    override def ad(): ArchitectureDescription = Arch.ad\n    override def serializer(): DataContent => String = JSON.from_artDataContent(_, true).value\n    override def deserializer(): String => DataContent = JSON.to_artDataContent(_).left\n  }\n\n  object NoFilter extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in\n  }\n\n  object EvensOnly extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in.filter(_.sequence % 2 == 0)\n  }\n\n  object Require100OrMore extends Rule {\n    override def rule(in: Flux[Msg]): Publisher[_] = in.skip(99).next().single()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/data\/bit_codec\/sergen.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n\n# Creates serializers and deserializers for all types in the data folder of a HAMR project.\n#\n# This script should be placed in the \"<project name>\/src\/main\/data\/<your>\/<package>\/\" folder of a Sireum HAMR project.\n#\n# When run, it will create serializers and deserializers (JSON.scala and MsgPack.scala) for all user-defined types.\n# JSON.scala must exist for any HAMR-project jar that is pointed to by the Inspector-GUI.\n\n# check for conflicting files\nif [ -f 'JSON.scala' ]; then\n  echo 'Deleting stale JSON.scala'\n  rm JSON.scala\nfi\nif [ -f 'MsgPack.scala' ]; then\n  echo 'Deleting stale MsgPack.scala'\n  rm MsgPack.scala\nfi\n\n# determine OS\n# credit: https:\/\/stackoverflow.com\/questions\/394230\/how-to-detect-the-os-from-a-bash-script\/18434831\nif [[ $OSTYPE == 'linux-gnu' ]]; then\n        platform='linux'\nelif [[ $OSTYPE == 'darwin'* ]]; then\n        platform='mac'\nelif [[ $OSTYPE == 'msys' ]]; then\n        platform='win'\nelif [[ $OSTYPE == 'win32' ]]; then\n        platform='win'\nelse\n        echo 'ERROR: invalid OS'\n        exit 1\nfi\n\necho \"detected platform: '$platform' based on OS: '$OSTYPE'\"\n\ninitialDirectory=$PWD # allows script to get back to initial directory after crawling up\npathToData='' # a path to get to the data folder, which is made up of repeating '..\/'\npackage='' # the package name, which is from the child of 'data' to (and including) the initialDirectory\nuppermostDirectoryFound='' # name of the uppermost directory found, if it is not data then we cancel the script\n\n# determine package\nwhile [[ $PWD != '\/' && ${PWD##*\/} != 'data' ]]; do\n  # \"if\" check on package prevents trailing period character\n  if [[ $package == '' ]]; then package=${PWD##*\/}; else package=${PWD##*\/}.${package}; fi;\n  pathToData=..\/${pathToData};\n  cd ..;\n  uppermostDirectoryFound=${PWD##*\/}\ndone\n\n# check that data folder was found\nif [[ $uppermostDirectoryFound != 'data' ]]; then\n  echo 'ERROR: script directory is not a descendent of data\/<full_project_package>\/';\n  exit 1\nfi\n\n# check that src\/main\/data\/ path holds\ncd ..\nif [[ ${PWD##*\/} != 'main' ]]; then\n  echo \"ERROR: expected main\/ to be direct parent of data\/ but ${PWD##*\/} was found.\";\n  exit 1\nfi\n\ncd ..\nif [[ ${PWD##*\/} != 'src' ]]; then\n  echo \"ERROR: expected src\/ to be direct parent of main\/ but ${PWD##*\/} was found.\";\n  exit 1\nfi\n\n# check that main\/art\/DataContent.scala exists (from the current folder src)\n\nif [ ! -f 'main\/art\/DataContent.scala' ]; then\n  echo 'ERROR: project must contain art\/DataContent under src\/main\/ but it was not found.';\n  exit 1\nfi\n\ncd ${initialDirectory}\n\n# add -L option to find if symlinks need to be followed: files=$(find -L . -regex '.*\/[^\/]*.scala')\nfiles=$(find . -regex '.*\/[^\/]*.scala')\n\necho \"package: $package\"\necho \"files:\"\necho \"$files\"\n\nsergen=\"$SIREUM_HOME\/bin\/${platform}\/java\/bin\/java -jar $SIREUM_HOME\/bin\/sireum.jar tools sergen\"\n\neval $sergen -p $package -m \"json,msgpack\" $files ${pathToData}..\/art\/DataContent.scala",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/test\/util\/bit_codec\/Bit_Codec\/Producer_proc_producer_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport bit_codec._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class Producer_proc_producer_TestApi extends BridgeTestSuite[Producer_proc_producer_Bridge](Arch.Bit_Codec_Sys_Impl_Instance_proc_producer) {\n\n  \/** helper function to check Producer_proc_producer's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param to_filter_u32 method that will be called with the value of the outgoing data\n   *        port 'to_filter_u32'.\n   * @param to_filter_latitude method that will be called with the value of the outgoing data\n   *        port 'to_filter_latitude'.\n   * @param to_filter_longitude method that will be called with the value of the outgoing data\n   *        port 'to_filter_longitude'.\n   * @param to_filter_coordinate method that will be called with the value of the outgoing data\n   *        port 'to_filter_coordinate'.\n   * @param to_filter_mission method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'to_filter_mission'.\n   * @param to_filter_event method that will be called with the number of events to be sent\n   *        on the outgoing event port 'to_filter_event'.\n   *\/\n  def check_concrete_output(to_filter_u32: Base_Types.Bits => B = to_filter_u32Param => {T},\n                            to_filter_latitude: Base_Types.Bits => B = to_filter_latitudeParam => {T},\n                            to_filter_longitude: Base_Types.Bits => B = to_filter_longitudeParam => {T},\n                            to_filter_coordinate: Base_Types.Bits => B = to_filter_coordinateParam => {T},\n                            to_filter_mission: ISZ[Base_Types.Bits] => B = to_filter_missionParam => {T},\n                            to_filter_event: Z => B = to_filter_eventParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    val to_filter_u32Value: Base_Types.Bits = get_to_filter_u32().get\n    if(!to_filter_u32(to_filter_u32Value)) {\n      testFailures = testFailures :+ st\"'to_filter_u32' did not match expected: value of the outgoing data port is ${to_filter_u32Value}\"\n    }\n    val to_filter_latitudeValue: Base_Types.Bits = get_to_filter_latitude().get\n    if(!to_filter_latitude(to_filter_latitudeValue)) {\n      testFailures = testFailures :+ st\"'to_filter_latitude' did not match expected: value of the outgoing data port is ${to_filter_latitudeValue}\"\n    }\n    val to_filter_longitudeValue: Base_Types.Bits = get_to_filter_longitude().get\n    if(!to_filter_longitude(to_filter_longitudeValue)) {\n      testFailures = testFailures :+ st\"'to_filter_longitude' did not match expected: value of the outgoing data port is ${to_filter_longitudeValue}\"\n    }\n    val to_filter_coordinateValue: Base_Types.Bits = get_to_filter_coordinate().get\n    if(!to_filter_coordinate(to_filter_coordinateValue)) {\n      testFailures = testFailures :+ st\"'to_filter_coordinate' did not match expected: value of the outgoing data port is ${to_filter_coordinateValue}\"\n    }\n    var to_filter_missionValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_to_filter_mission().nonEmpty) to_filter_missionValue = to_filter_missionValue :+ get_to_filter_mission().get\n    if(!to_filter_mission(to_filter_missionValue)) {\n      testFailures = testFailures :+ st\"'to_filter_mission' did not match expected: received ${to_filter_missionValue.size} events with the following payloads ${to_filter_missionValue}\"\n    }\n    \/\/ TODO: event port getter should return the number of events in\n    \/\/       the output queue when queue sizes > 1 support is added to ART\n    val to_filter_eventValue: Z = if(get_to_filter_event().nonEmpty) z\"1\" else z\"0\"\n    if(!to_filter_event(to_filter_eventValue)) {\n      testFailures = testFailures :+ st\"'to_filter_event' did not match expected: ${to_filter_eventValue} events were in the outgoing event queue\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ getter for out DataPort\n  def get_to_filter_u32(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_filter_u32_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_filter_u32.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_to_filter_u32_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_filter_u32_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out DataPort\n  def get_to_filter_latitude(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_filter_latitude_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_filter_latitude.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_to_filter_latitude_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_filter_latitude_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out DataPort\n  def get_to_filter_longitude(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_filter_longitude_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_filter_longitude.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_to_filter_longitude_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_filter_longitude_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out DataPort\n  def get_to_filter_coordinate(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_filter_coordinate_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_filter_coordinate.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_to_filter_coordinate_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_filter_coordinate_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_to_filter_mission(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_filter_mission_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_filter_mission.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_to_filter_mission_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_filter_mission_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventPort\n  def get_to_filter_event(): Option[art.Empty] = {\n    val value: Option[art.Empty] = get_to_filter_event_payload() match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) => fail(s\"Unexpected payload on port to_filter_event.  Expecting 'Empty' but received ${v}\")\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventPort\n  def get_to_filter_event_payload(): Option[Empty] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_filter_event_Id).asInstanceOf[Option[Empty]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/test\/bridge\/bit_codec\/Bit_Codec\/Producer_proc_producer_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec.Bit_Codec\n\nimport org.sireum._\nimport bit_codec.Bit_Codec._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass Producer_proc_producer_Test extends Producer_proc_producer_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/bridge\/bit_codec\/Bit_Codec\/Producer_proc_producer_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art._\nimport bit_codec._\nimport bit_codec.Bit_Codec.{Producer_proc_producer => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class Producer_proc_producer_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  to_filter_u32: Port[Base_Types.Bits],\n  to_filter_latitude: Port[Base_Types.Bits],\n  to_filter_longitude: Port[Base_Types.Bits],\n  to_filter_coordinate: Port[Base_Types.Bits],\n  to_filter_mission: Port[Base_Types.Bits],\n  to_filter_event: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(to_filter_u32,\n              to_filter_latitude,\n              to_filter_longitude,\n              to_filter_coordinate,\n              to_filter_mission,\n              to_filter_event),\n\n    dataIns = ISZ(),\n\n    dataOuts = ISZ(to_filter_u32,\n                   to_filter_latitude,\n                   to_filter_longitude,\n                   to_filter_coordinate),\n\n    eventIns = ISZ(),\n\n    eventOuts = ISZ(to_filter_mission,\n                    to_filter_event)\n  )\n\n  val initialization_api : Producer_Initialization_Api = {\n    val api = Producer_Initialization_Api(\n      id,\n      to_filter_u32.id,\n      to_filter_latitude.id,\n      to_filter_longitude.id,\n      to_filter_coordinate.id,\n      to_filter_mission.id,\n      to_filter_event.id\n    )\n    Producer_proc_producer_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : Producer_Operational_Api = {\n    val api = Producer_Operational_Api(\n      id,\n      to_filter_u32.id,\n      to_filter_latitude.id,\n      to_filter_longitude.id,\n      to_filter_coordinate.id,\n      to_filter_mission.id,\n      to_filter_event.id\n    )\n    Producer_proc_producer_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    Producer_proc_producer_Bridge.EntryPoints(\n      id,\n\n      to_filter_u32.id,\n      to_filter_latitude.id,\n      to_filter_longitude.id,\n      to_filter_coordinate.id,\n      to_filter_mission.id,\n      to_filter_event.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject Producer_proc_producer_Bridge {\n\n  var c_initialization_api: Option[Producer_Initialization_Api] = None()\n  var c_operational_api: Option[Producer_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    Producer_proc_producer_BridgeId : Art.BridgeId,\n\n    to_filter_u32_Id : Art.PortId,\n    to_filter_latitude_Id : Art.PortId,\n    to_filter_longitude_Id : Art.PortId,\n    to_filter_coordinate_Id : Art.PortId,\n    to_filter_mission_Id : Art.PortId,\n    to_filter_event_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: Producer_Initialization_Api,\n    operational_api: Producer_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ()\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ(to_filter_u32_Id,\n                                              to_filter_latitude_Id,\n                                              to_filter_longitude_Id,\n                                              to_filter_coordinate_Id)\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(to_filter_mission_Id,\n                                               to_filter_event_Id)\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: Producer_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: Producer_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: Producer_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: Producer_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: Producer_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: Producer_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: Producer_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/bridge\/bit_codec\/Bit_Codec\/Producer_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art._\nimport bit_codec._\n\n@sig trait Producer_Api {\n  def id: Art.BridgeId\n  def to_filter_u32_Id : Art.PortId\n  def to_filter_latitude_Id : Art.PortId\n  def to_filter_longitude_Id : Art.PortId\n  def to_filter_coordinate_Id : Art.PortId\n  def to_filter_mission_Id : Art.PortId\n  def to_filter_event_Id : Art.PortId\n\n  def put_to_filter_u32(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_filter_u32_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_filter_latitude(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_filter_latitude_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_filter_longitude(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_filter_longitude_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_filter_coordinate(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_filter_coordinate_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_filter_mission(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_filter_mission_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_filter_event() : Unit = {\n    Art.putValue(to_filter_event_Id, art.Empty())\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class Producer_Initialization_Api (\n  val id: Art.BridgeId,\n  val to_filter_u32_Id : Art.PortId,\n  val to_filter_latitude_Id : Art.PortId,\n  val to_filter_longitude_Id : Art.PortId,\n  val to_filter_coordinate_Id : Art.PortId,\n  val to_filter_mission_Id : Art.PortId,\n  val to_filter_event_Id : Art.PortId) extends Producer_Api\n\n@datatype class Producer_Operational_Api (\n  val id: Art.BridgeId,\n  val to_filter_u32_Id : Art.PortId,\n  val to_filter_latitude_Id : Art.PortId,\n  val to_filter_longitude_Id : Art.PortId,\n  val to_filter_coordinate_Id : Art.PortId,\n  val to_filter_mission_Id : Art.PortId,\n  val to_filter_event_Id : Art.PortId) extends Producer_Api {\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/component\/bit_codec\/Bit_Codec\/Producer_proc_producer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport bit_codec._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject Producer_proc_producer {\n\n  def initialise(api: Producer_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: Producer_Operational_Api): Unit = { }\n\n  def activate(api: Producer_Operational_Api): Unit = { }\n\n  def deactivate(api: Producer_Operational_Api): Unit = { }\n\n  def finalise(api: Producer_Operational_Api): Unit = { }\n\n  def recover(api: Producer_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/test\/util\/bit_codec\/BridgeTestSuite.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec\n\nimport art.{Art, Bridge}\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\n\n\/**\n * A test suite that provides the following functionality for unit tests:\n *  - Clears all registers bridges and ports before each test\n *  - Initializes the selected bridge and ports before each test\n *  - Finalizes the bridge after each test\n *  - Creates a new instance of the test suite class for each test\n *    -> NOTE: this is NOT the same as having a separate JVM per-test (or suite), but is useful for test-local variables\n *\n *  If automatic calls to initTest() or finalizeTest() are not desired, simply override beforeEach() or afterEach()\n *  methods to change the desired behavior.\n *\n * @param bridge the bridge being tested, see [[bit_codec.Arch]] for potential values.\n * @tparam T the type of the bridge being tested\n *\/\n\n\/\/ This file was auto-generated.  Do no edit\n\nclass BridgeTestSuite[+T <: Bridge](val bridge: T) extends AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach {\n\n  \/**\n   * Automatically called before each test. Currently calls Art.initTest for the given bridge. Override as needed.\n   *\/\n  override protected def beforeEach(): Unit = {\n    Art.initTest(bridge)\n  }\n\n  \/**\n   * Automatically called after each test. Currently calls Art.finalizeTest for the given bridge. Override as needed.\n   *\/\n  override protected def afterEach(): Unit = {\n    Art.finalizeTest(bridge)\n  }\n\n  \/**\n   * Invokes testCompute() once per registered bridge.\n   *\n   * IMPORTANT: This method also clears all bridge output BEFORE each call. This will have no effect the first time it's\n   * invoked (because all output will be empty), but it does ensure that output doesn't \"leak\" across multiple\n   * invocations.\n   *\n   *\/\n  def executeTest(): Unit = {\n    Art.manuallyClearOutput()\n    Art.executeTest(bridge)\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/test\/util\/bit_codec\/Bit_Codec\/Filter_proc_filter_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport bit_codec._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class Filter_proc_filter_TestApi extends BridgeTestSuite[Filter_proc_filter_Bridge](Arch.Bit_Codec_Sys_Impl_Instance_proc_filter) {\n\n  \/** helper function to set the values of all input ports.\n   * @param from_producer_u32 payload for data port from_producer_u32\n   * @param from_producer_latitude payload for data port from_producer_latitude\n   * @param from_producer_longitude payload for data port from_producer_longitude\n   * @param from_producer_coordinate payload for data port from_producer_coordinate\n   * @param from_producer_mission payloads for event data port from_producer_mission.\n   *   ART currently supports single element event data queues so\n   *   only the last element of from_producer_mission will be used\n   * @param from_producer_event the number of events to place in the from_producer_event event port queue.\n   *   ART currently supports single element event queues so at most\n   *   one event will be placed in the queue.\n   *\/\n  def put_concrete_inputs(from_producer_u32 : Base_Types.Bits,\n                          from_producer_latitude : Base_Types.Bits,\n                          from_producer_longitude : Base_Types.Bits,\n                          from_producer_coordinate : Base_Types.Bits,\n                          from_producer_mission : ISZ[Base_Types.Bits],\n                          from_producer_event : Z): Unit = {\n    put_from_producer_u32(from_producer_u32)\n    put_from_producer_latitude(from_producer_latitude)\n    put_from_producer_longitude(from_producer_longitude)\n    put_from_producer_coordinate(from_producer_coordinate)\n    for(v <- from_producer_mission){\n      put_from_producer_mission(v)\n    }\n    for(i <- 0 until from_producer_event) {\n      put_from_producer_event()\n    }\n  }\n\n\n  \/** helper function to check Filter_proc_filter's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param to_consumer_u32 method that will be called with the value of the outgoing data\n   *        port 'to_consumer_u32'.\n   * @param to_consumer_latitude method that will be called with the value of the outgoing data\n   *        port 'to_consumer_latitude'.\n   * @param to_consumer_longitude method that will be called with the value of the outgoing data\n   *        port 'to_consumer_longitude'.\n   * @param to_consumer_coordinate method that will be called with the value of the outgoing data\n   *        port 'to_consumer_coordinate'.\n   * @param to_consumer_mission method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'to_consumer_mission'.\n   * @param to_consumer_event method that will be called with the number of events to be sent\n   *        on the outgoing event port 'to_consumer_event'.\n   *\/\n  def check_concrete_output(to_consumer_u32: Base_Types.Bits => B = to_consumer_u32Param => {T},\n                            to_consumer_latitude: Base_Types.Bits => B = to_consumer_latitudeParam => {T},\n                            to_consumer_longitude: Base_Types.Bits => B = to_consumer_longitudeParam => {T},\n                            to_consumer_coordinate: Base_Types.Bits => B = to_consumer_coordinateParam => {T},\n                            to_consumer_mission: ISZ[Base_Types.Bits] => B = to_consumer_missionParam => {T},\n                            to_consumer_event: Z => B = to_consumer_eventParam => {T}): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    val to_consumer_u32Value: Base_Types.Bits = get_to_consumer_u32().get\n    if(!to_consumer_u32(to_consumer_u32Value)) {\n      testFailures = testFailures :+ st\"'to_consumer_u32' did not match expected: value of the outgoing data port is ${to_consumer_u32Value}\"\n    }\n    val to_consumer_latitudeValue: Base_Types.Bits = get_to_consumer_latitude().get\n    if(!to_consumer_latitude(to_consumer_latitudeValue)) {\n      testFailures = testFailures :+ st\"'to_consumer_latitude' did not match expected: value of the outgoing data port is ${to_consumer_latitudeValue}\"\n    }\n    val to_consumer_longitudeValue: Base_Types.Bits = get_to_consumer_longitude().get\n    if(!to_consumer_longitude(to_consumer_longitudeValue)) {\n      testFailures = testFailures :+ st\"'to_consumer_longitude' did not match expected: value of the outgoing data port is ${to_consumer_longitudeValue}\"\n    }\n    val to_consumer_coordinateValue: Base_Types.Bits = get_to_consumer_coordinate().get\n    if(!to_consumer_coordinate(to_consumer_coordinateValue)) {\n      testFailures = testFailures :+ st\"'to_consumer_coordinate' did not match expected: value of the outgoing data port is ${to_consumer_coordinateValue}\"\n    }\n    var to_consumer_missionValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_to_consumer_mission().nonEmpty) to_consumer_missionValue = to_consumer_missionValue :+ get_to_consumer_mission().get\n    if(!to_consumer_mission(to_consumer_missionValue)) {\n      testFailures = testFailures :+ st\"'to_consumer_mission' did not match expected: received ${to_consumer_missionValue.size} events with the following payloads ${to_consumer_missionValue}\"\n    }\n    \/\/ TODO: event port getter should return the number of events in\n    \/\/       the output queue when queue sizes > 1 support is added to ART\n    val to_consumer_eventValue: Z = if(get_to_consumer_event().nonEmpty) z\"1\" else z\"0\"\n    if(!to_consumer_event(to_consumer_eventValue)) {\n      testFailures = testFailures :+ st\"'to_consumer_event' did not match expected: ${to_consumer_eventValue} events were in the outgoing event queue\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in DataPort\n  def put_from_producer_u32(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_producer_u32_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in DataPort\n  def put_from_producer_latitude(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_producer_latitude_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in DataPort\n  def put_from_producer_longitude(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_producer_longitude_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in DataPort\n  def put_from_producer_coordinate(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_producer_coordinate_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_from_producer_mission(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_producer_mission_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventPort\n  def put_from_producer_event(): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_producer_event_Id, Empty())\n  }\n\n  \/\/ getter for out DataPort\n  def get_to_consumer_u32(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_consumer_u32_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_consumer_u32.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_to_consumer_u32_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_consumer_u32_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out DataPort\n  def get_to_consumer_latitude(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_consumer_latitude_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_consumer_latitude.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_to_consumer_latitude_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_consumer_latitude_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out DataPort\n  def get_to_consumer_longitude(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_consumer_longitude_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_consumer_longitude.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_to_consumer_longitude_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_consumer_longitude_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out DataPort\n  def get_to_consumer_coordinate(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_consumer_coordinate_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_consumer_coordinate.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_to_consumer_coordinate_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_consumer_coordinate_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_to_consumer_mission(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_to_consumer_mission_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => fail(s\"Unexpected payload on port to_consumer_mission.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_to_consumer_mission_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_consumer_mission_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventPort\n  def get_to_consumer_event(): Option[art.Empty] = {\n    val value: Option[art.Empty] = get_to_consumer_event_payload() match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) => fail(s\"Unexpected payload on port to_consumer_event.  Expecting 'Empty' but received ${v}\")\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventPort\n  def get_to_consumer_event_payload(): Option[Empty] = {\n    return ArtNative_Ext.observeOutPortValue(bridge.initialization_api.to_consumer_event_Id).asInstanceOf[Option[Empty]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/test\/bridge\/bit_codec\/Bit_Codec\/Filter_proc_filter_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec.Bit_Codec\n\nimport org.sireum._\nimport bit_codec.Bit_Codec._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass Filter_proc_filter_Test extends Filter_proc_filter_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/bridge\/bit_codec\/Bit_Codec\/Filter_proc_filter_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art._\nimport bit_codec._\nimport bit_codec.Bit_Codec.{Filter_proc_filter => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class Filter_proc_filter_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  from_producer_u32: Port[Base_Types.Bits],\n  from_producer_latitude: Port[Base_Types.Bits],\n  from_producer_longitude: Port[Base_Types.Bits],\n  from_producer_coordinate: Port[Base_Types.Bits],\n  to_consumer_u32: Port[Base_Types.Bits],\n  to_consumer_latitude: Port[Base_Types.Bits],\n  to_consumer_longitude: Port[Base_Types.Bits],\n  to_consumer_coordinate: Port[Base_Types.Bits],\n  from_producer_mission: Port[Base_Types.Bits],\n  to_consumer_mission: Port[Base_Types.Bits],\n  from_producer_event: Port[art.Empty],\n  to_consumer_event: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(from_producer_u32,\n              from_producer_latitude,\n              from_producer_longitude,\n              from_producer_coordinate,\n              to_consumer_u32,\n              to_consumer_latitude,\n              to_consumer_longitude,\n              to_consumer_coordinate,\n              from_producer_mission,\n              to_consumer_mission,\n              from_producer_event,\n              to_consumer_event),\n\n    dataIns = ISZ(from_producer_u32,\n                  from_producer_latitude,\n                  from_producer_longitude,\n                  from_producer_coordinate),\n\n    dataOuts = ISZ(to_consumer_u32,\n                   to_consumer_latitude,\n                   to_consumer_longitude,\n                   to_consumer_coordinate),\n\n    eventIns = ISZ(from_producer_mission,\n                   from_producer_event),\n\n    eventOuts = ISZ(to_consumer_mission,\n                    to_consumer_event)\n  )\n\n  val initialization_api : Filter_Initialization_Api = {\n    val api = Filter_Initialization_Api(\n      id,\n      from_producer_u32.id,\n      from_producer_latitude.id,\n      from_producer_longitude.id,\n      from_producer_coordinate.id,\n      to_consumer_u32.id,\n      to_consumer_latitude.id,\n      to_consumer_longitude.id,\n      to_consumer_coordinate.id,\n      from_producer_mission.id,\n      to_consumer_mission.id,\n      from_producer_event.id,\n      to_consumer_event.id\n    )\n    Filter_proc_filter_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : Filter_Operational_Api = {\n    val api = Filter_Operational_Api(\n      id,\n      from_producer_u32.id,\n      from_producer_latitude.id,\n      from_producer_longitude.id,\n      from_producer_coordinate.id,\n      to_consumer_u32.id,\n      to_consumer_latitude.id,\n      to_consumer_longitude.id,\n      to_consumer_coordinate.id,\n      from_producer_mission.id,\n      to_consumer_mission.id,\n      from_producer_event.id,\n      to_consumer_event.id\n    )\n    Filter_proc_filter_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    Filter_proc_filter_Bridge.EntryPoints(\n      id,\n\n      from_producer_u32.id,\n      from_producer_latitude.id,\n      from_producer_longitude.id,\n      from_producer_coordinate.id,\n      to_consumer_u32.id,\n      to_consumer_latitude.id,\n      to_consumer_longitude.id,\n      to_consumer_coordinate.id,\n      from_producer_mission.id,\n      to_consumer_mission.id,\n      from_producer_event.id,\n      to_consumer_event.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject Filter_proc_filter_Bridge {\n\n  var c_initialization_api: Option[Filter_Initialization_Api] = None()\n  var c_operational_api: Option[Filter_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    Filter_proc_filter_BridgeId : Art.BridgeId,\n\n    from_producer_u32_Id : Art.PortId,\n    from_producer_latitude_Id : Art.PortId,\n    from_producer_longitude_Id : Art.PortId,\n    from_producer_coordinate_Id : Art.PortId,\n    to_consumer_u32_Id : Art.PortId,\n    to_consumer_latitude_Id : Art.PortId,\n    to_consumer_longitude_Id : Art.PortId,\n    to_consumer_coordinate_Id : Art.PortId,\n    from_producer_mission_Id : Art.PortId,\n    to_consumer_mission_Id : Art.PortId,\n    from_producer_event_Id : Art.PortId,\n    to_consumer_event_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: Filter_Initialization_Api,\n    operational_api: Filter_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ(from_producer_u32_Id,\n                                             from_producer_latitude_Id,\n                                             from_producer_longitude_Id,\n                                             from_producer_coordinate_Id)\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(from_producer_mission_Id,\n                                              from_producer_event_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ(to_consumer_u32_Id,\n                                              to_consumer_latitude_Id,\n                                              to_consumer_longitude_Id,\n                                              to_consumer_coordinate_Id)\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ(to_consumer_mission_Id,\n                                               to_consumer_event_Id)\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(Filter_proc_filter_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == from_producer_mission_Id){\n          val Some(Base_Types.Bits_Payload(value)) = Art.getValue(from_producer_mission_Id)\n\n          \/\/ implement the following in 'component':  def handle_from_producer_mission(api: Filter_Operational_Api, value: Base_Types.Bits): Unit = {}\n          component.handle_from_producer_mission(operational_api, value)\n        }\n        else if(portId == from_producer_event_Id) {\n          \/\/ implement the following in 'component':  def handle_from_producer_event(api: Filter_Operational_Api): Unit = {}\n          component.handle_from_producer_event(operational_api)\n        }\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(Filter_proc_filter_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == from_producer_mission_Id){\n          val Some(Base_Types.Bits_Payload(value)) = Art.getValue(from_producer_mission_Id)\n\n          \/\/ implement the following in 'component':  def handle_from_producer_mission(api: Filter_Operational_Api, value: Base_Types.Bits): Unit = {}\n          component.handle_from_producer_mission(operational_api, value)\n        }\n        else if(portId == from_producer_event_Id) {\n          \/\/ implement the following in 'component':  def handle_from_producer_event(api: Filter_Operational_Api): Unit = {}\n          component.handle_from_producer_event(operational_api)\n        }\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: Filter_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: Filter_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: Filter_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: Filter_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: Filter_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/bridge\/bit_codec\/Bit_Codec\/Filter_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art._\nimport bit_codec._\n\n@sig trait Filter_Api {\n  def id: Art.BridgeId\n  def from_producer_u32_Id : Art.PortId\n  def from_producer_latitude_Id : Art.PortId\n  def from_producer_longitude_Id : Art.PortId\n  def from_producer_coordinate_Id : Art.PortId\n  def to_consumer_u32_Id : Art.PortId\n  def to_consumer_latitude_Id : Art.PortId\n  def to_consumer_longitude_Id : Art.PortId\n  def to_consumer_coordinate_Id : Art.PortId\n  def from_producer_mission_Id : Art.PortId\n  def to_consumer_mission_Id : Art.PortId\n  def from_producer_event_Id : Art.PortId\n  def to_consumer_event_Id : Art.PortId\n\n  def put_to_consumer_u32(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_consumer_u32_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_consumer_latitude(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_consumer_latitude_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_consumer_longitude(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_consumer_longitude_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_consumer_coordinate(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_consumer_coordinate_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_consumer_mission(value : Base_Types.Bits) : Unit = {\n    Art.putValue(to_consumer_mission_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def put_to_consumer_event() : Unit = {\n    Art.putValue(to_consumer_event_Id, art.Empty())\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class Filter_Initialization_Api (\n  val id: Art.BridgeId,\n  val from_producer_u32_Id : Art.PortId,\n  val from_producer_latitude_Id : Art.PortId,\n  val from_producer_longitude_Id : Art.PortId,\n  val from_producer_coordinate_Id : Art.PortId,\n  val to_consumer_u32_Id : Art.PortId,\n  val to_consumer_latitude_Id : Art.PortId,\n  val to_consumer_longitude_Id : Art.PortId,\n  val to_consumer_coordinate_Id : Art.PortId,\n  val from_producer_mission_Id : Art.PortId,\n  val to_consumer_mission_Id : Art.PortId,\n  val from_producer_event_Id : Art.PortId,\n  val to_consumer_event_Id : Art.PortId) extends Filter_Api\n\n@datatype class Filter_Operational_Api (\n  val id: Art.BridgeId,\n  val from_producer_u32_Id : Art.PortId,\n  val from_producer_latitude_Id : Art.PortId,\n  val from_producer_longitude_Id : Art.PortId,\n  val from_producer_coordinate_Id : Art.PortId,\n  val to_consumer_u32_Id : Art.PortId,\n  val to_consumer_latitude_Id : Art.PortId,\n  val to_consumer_longitude_Id : Art.PortId,\n  val to_consumer_coordinate_Id : Art.PortId,\n  val from_producer_mission_Id : Art.PortId,\n  val to_consumer_mission_Id : Art.PortId,\n  val from_producer_event_Id : Art.PortId,\n  val to_consumer_event_Id : Art.PortId) extends Filter_Api {\n\n  def get_from_producer_u32() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_producer_u32_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_producer_u32.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_producer_latitude() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_producer_latitude_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_producer_latitude.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_producer_longitude() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_producer_longitude_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_producer_longitude.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_producer_coordinate() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_producer_coordinate_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_producer_coordinate.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_producer_mission() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_producer_mission_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_producer_mission.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_producer_event() : Option[art.Empty] = {\n    val value : Option[art.Empty] = Art.getValue(from_producer_event_Id) match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_producer_event.  Expecting 'Empty' but received ${v}\")\n        None[art.Empty]()\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/component\/bit_codec\/Bit_Codec\/Filter_proc_filter.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport bit_codec._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject Filter_proc_filter {\n\n  def initialise(api: Filter_Initialization_Api): Unit = { }\n\n  def handle_from_producer_mission(api: Filter_Operational_Api, value : Base_Types.Bits): Unit = { }\n\n  def handle_from_producer_event(api: Filter_Operational_Api): Unit = { }\n\n  def activate(api: Filter_Operational_Api): Unit = { }\n\n  def deactivate(api: Filter_Operational_Api): Unit = { }\n\n  def finalise(api: Filter_Operational_Api): Unit = { }\n\n  def recover(api: Filter_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/test\/util\/bit_codec\/Bit_Codec\/Consumer_proc_consumer_TestApi.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art.{ArtNative_Ext, Empty}\nimport bit_codec._\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class Consumer_proc_consumer_TestApi extends BridgeTestSuite[Consumer_proc_consumer_Bridge](Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer) {\n\n  \/** helper function to set the values of all input ports.\n   * @param from_filter_u32 payload for data port from_filter_u32\n   * @param from_filter_latitude payload for data port from_filter_latitude\n   * @param from_filter_longitude payload for data port from_filter_longitude\n   * @param from_filter_coordinate payload for data port from_filter_coordinate\n   * @param from_filter_mission payloads for event data port from_filter_mission.\n   *   ART currently supports single element event data queues so\n   *   only the last element of from_filter_mission will be used\n   * @param from_filter_event the number of events to place in the from_filter_event event port queue.\n   *   ART currently supports single element event queues so at most\n   *   one event will be placed in the queue.\n   *\/\n  def put_concrete_inputs(from_filter_u32 : Base_Types.Bits,\n                          from_filter_latitude : Base_Types.Bits,\n                          from_filter_longitude : Base_Types.Bits,\n                          from_filter_coordinate : Base_Types.Bits,\n                          from_filter_mission : ISZ[Base_Types.Bits],\n                          from_filter_event : Z): Unit = {\n    put_from_filter_u32(from_filter_u32)\n    put_from_filter_latitude(from_filter_latitude)\n    put_from_filter_longitude(from_filter_longitude)\n    put_from_filter_coordinate(from_filter_coordinate)\n    for(v <- from_filter_mission){\n      put_from_filter_mission(v)\n    }\n    for(i <- 0 until from_filter_event) {\n      put_from_filter_event()\n    }\n  }\n\n\n  \/\/ setter for in DataPort\n  def put_from_filter_u32(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_filter_u32_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in DataPort\n  def put_from_filter_latitude(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_filter_latitude_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in DataPort\n  def put_from_filter_longitude(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_filter_longitude_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in DataPort\n  def put_from_filter_coordinate(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_filter_coordinate_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_from_filter_mission(value : Base_Types.Bits): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_filter_mission_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventPort\n  def put_from_filter_event(): Unit = {\n    ArtNative_Ext.insertInPortValue(bridge.operational_api.from_filter_event_Id, Empty())\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/test\/bridge\/bit_codec\/Bit_Codec\/Consumer_proc_consumer_Test.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec.Bit_Codec\n\nimport org.sireum._\nimport bit_codec.Bit_Codec._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass Consumer_proc_consumer_Test extends Consumer_proc_consumer_TestApi {\n\n  test(\"Example Unit Test\"){\n    executeTest()\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/bridge\/bit_codec\/Bit_Codec\/Consumer_proc_consumer_Bridge.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art._\nimport bit_codec._\nimport bit_codec.Bit_Codec.{Consumer_proc_consumer => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class Consumer_proc_consumer_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  from_filter_u32: Port[Base_Types.Bits],\n  from_filter_latitude: Port[Base_Types.Bits],\n  from_filter_longitude: Port[Base_Types.Bits],\n  from_filter_coordinate: Port[Base_Types.Bits],\n  from_filter_mission: Port[Base_Types.Bits],\n  from_filter_event: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    all = ISZ(from_filter_u32,\n              from_filter_latitude,\n              from_filter_longitude,\n              from_filter_coordinate,\n              from_filter_mission,\n              from_filter_event),\n\n    dataIns = ISZ(from_filter_u32,\n                  from_filter_latitude,\n                  from_filter_longitude,\n                  from_filter_coordinate),\n\n    dataOuts = ISZ(),\n\n    eventIns = ISZ(from_filter_mission,\n                   from_filter_event),\n\n    eventOuts = ISZ()\n  )\n\n  val initialization_api : Consumer_Initialization_Api = {\n    val api = Consumer_Initialization_Api(\n      id,\n      from_filter_u32.id,\n      from_filter_latitude.id,\n      from_filter_longitude.id,\n      from_filter_coordinate.id,\n      from_filter_mission.id,\n      from_filter_event.id\n    )\n    Consumer_proc_consumer_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : Consumer_Operational_Api = {\n    val api = Consumer_Operational_Api(\n      id,\n      from_filter_u32.id,\n      from_filter_latitude.id,\n      from_filter_longitude.id,\n      from_filter_coordinate.id,\n      from_filter_mission.id,\n      from_filter_event.id\n    )\n    Consumer_proc_consumer_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    Consumer_proc_consumer_Bridge.EntryPoints(\n      id,\n\n      from_filter_u32.id,\n      from_filter_latitude.id,\n      from_filter_longitude.id,\n      from_filter_coordinate.id,\n      from_filter_mission.id,\n      from_filter_event.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject Consumer_proc_consumer_Bridge {\n\n  var c_initialization_api: Option[Consumer_Initialization_Api] = None()\n  var c_operational_api: Option[Consumer_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    Consumer_proc_consumer_BridgeId : Art.BridgeId,\n\n    from_filter_u32_Id : Art.PortId,\n    from_filter_latitude_Id : Art.PortId,\n    from_filter_longitude_Id : Art.PortId,\n    from_filter_coordinate_Id : Art.PortId,\n    from_filter_mission_Id : Art.PortId,\n    from_filter_event_Id : Art.PortId,\n\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n\n    initialization_api: Consumer_Initialization_Api,\n    operational_api: Consumer_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = ISZ(from_filter_u32_Id,\n                                             from_filter_latitude_Id,\n                                             from_filter_longitude_Id,\n                                             from_filter_coordinate_Id)\n\n    val eventInPortIds: ISZ[Art.PortId] = ISZ(from_filter_mission_Id,\n                                              from_filter_event_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    val eventOutPortIds: ISZ[Art.PortId] = ISZ()\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: Consumer_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: Consumer_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: Consumer_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: Consumer_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: Consumer_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: Consumer_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: Consumer_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/bridge\/bit_codec\/Bit_Codec\/Consumer_Api.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport art._\nimport bit_codec._\n\n@sig trait Consumer_Api {\n  def id: Art.BridgeId\n  def from_filter_u32_Id : Art.PortId\n  def from_filter_latitude_Id : Art.PortId\n  def from_filter_longitude_Id : Art.PortId\n  def from_filter_coordinate_Id : Art.PortId\n  def from_filter_mission_Id : Art.PortId\n  def from_filter_event_Id : Art.PortId\n\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class Consumer_Initialization_Api (\n  val id: Art.BridgeId,\n  val from_filter_u32_Id : Art.PortId,\n  val from_filter_latitude_Id : Art.PortId,\n  val from_filter_longitude_Id : Art.PortId,\n  val from_filter_coordinate_Id : Art.PortId,\n  val from_filter_mission_Id : Art.PortId,\n  val from_filter_event_Id : Art.PortId) extends Consumer_Api\n\n@datatype class Consumer_Operational_Api (\n  val id: Art.BridgeId,\n  val from_filter_u32_Id : Art.PortId,\n  val from_filter_latitude_Id : Art.PortId,\n  val from_filter_longitude_Id : Art.PortId,\n  val from_filter_coordinate_Id : Art.PortId,\n  val from_filter_mission_Id : Art.PortId,\n  val from_filter_event_Id : Art.PortId) extends Consumer_Api {\n\n  def get_from_filter_u32() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_filter_u32_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_filter_u32.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_filter_latitude() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_filter_latitude_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_filter_latitude.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_filter_longitude() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_filter_longitude_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_filter_longitude.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_filter_coordinate() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_filter_coordinate_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_filter_coordinate.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_filter_mission() : Option[Base_Types.Bits] = {\n    val value : Option[Base_Types.Bits] = Art.getValue(from_filter_mission_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_filter_mission.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  def get_from_filter_event() : Option[art.Empty] = {\n    val value : Option[art.Empty] = Art.getValue(from_filter_event_Id) match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port from_filter_event.  Expecting 'Empty' but received ${v}\")\n        None[art.Empty]()\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/component\/bit_codec\/Bit_Codec\/Consumer_proc_consumer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec.Bit_Codec\n\nimport org.sireum._\nimport bit_codec._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject Consumer_proc_consumer {\n\n  def initialise(api: Consumer_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: Consumer_Operational_Api): Unit = { }\n\n  def activate(api: Consumer_Operational_Api): Unit = { }\n\n  def deactivate(api: Consumer_Operational_Api): Unit = { }\n\n  def finalise(api: Consumer_Operational_Api): Unit = { }\n\n  def recover(api: Consumer_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/component\/bit_codec\/TranspilerToucher.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject TranspilerToucher {\n  def touch(): Unit = {\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/Producer_proc_producer_App.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Producer_proc_producer_App extends App {\n\n  val entryPoints: Bridge.EntryPoints = Arch.Bit_Codec_Sys_Impl_Instance_proc_producer.entryPoints\n  val appPortId: Art.PortId = IPCPorts.Producer_proc_producer_App\n  val appPortIdOpt: Option[Art.PortId] = Some(appPortId)\n\n  def initialiseArchitecture(seed: Z): Unit = {\n    Platform.initialise(seed, appPortIdOpt)\n\n    Art.run(Arch.ad)\n  }\n\n  def initialise(): Unit = {\n    entryPoints.initialise()\n  }\n\n  def compute(): Unit = {\n\n    entryPoints.compute()\n    Process.sleep(1000)\n  }\n\n  def finalise(): Unit = {\n    entryPoints.finalise()\n  }\n\n  def main(args: ISZ[String]): Z = {\n\n    val seed: Z = if (args.size == z\"1\") {\n      val n = Z(args(0)).get\n      if (n == z\"0\") 1 else n\n    } else {\n      1\n    }\n\n    initialiseArchitecture(seed)\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after setting up component\n\n    initialise()\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after component init\n\n    println(\"Producer_proc_producer_App starting ...\")\n\n    ArtNix.timeDispatch()\n\n    var terminated = F\n    while (!terminated) {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(appPortIdOpt, out)\n      if (out.value2.isEmpty) {\n        compute()\n      } else {\n        terminated = T\n      }\n    }\n    exit()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.logInfo(\"\")\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.logDebug(\"\")\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.logError(\"\")\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.logInfo(\"\")\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.logDebug(\"\")\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.logError(\"\")\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.put_to_filter_u32(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.put_to_filter_u32(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.put_to_filter_latitude(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.put_to_filter_latitude(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.put_to_filter_longitude(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.put_to_filter_longitude(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.put_to_filter_coordinate(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.put_to_filter_coordinate(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.put_to_filter_mission(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.put_to_filter_mission(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_initialization_api.get.put_to_filter_event()\n      bit_codec.Bit_Codec.Producer_proc_producer_Bridge.c_operational_api.get.put_to_filter_event()\n    }\n  }\n\n  def exit(): Unit = {\n    finalise()\n    Platform.finalise()\n  }\n\n  override def atExit(): Unit = {\n    exit()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Producer_proc_producer\/Producer_proc_producer.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef PRODUCER_PROC_PRODUCER_H\n#define PRODUCER_PROC_PRODUCER_H\n\n#include <all.h>\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_initialise_(STACK_FRAME_ONLY);\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_finalise_(STACK_FRAME_ONLY);\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Producer_proc_producer\/Producer_proc_producer.c",
        {
          "type" : "TestResource",
          "content" : "#include <Producer_proc_producer_api.h>\n#include <Producer_proc_producer.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer.c\", \"\", \"bit_codec_Bit_Codec_Producer_proc_producer_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_U32];\n  byte_array_default(SF t0, numBits_U32, numBytes_U32);\n  api_put_to_filter_u32__bit_codec_Bit_Codec_Producer_proc_producer(SF numBits_U32, t0);\n\n  uint8_t t1[numBytes_bit_codec_Bit_Codec_Latitude];\n  byte_array_default(SF t1, numBits_bit_codec_Bit_Codec_Latitude, numBytes_bit_codec_Bit_Codec_Latitude);\n  api_put_to_filter_latitude__bit_codec_Bit_Codec_Producer_proc_producer(SF numBits_bit_codec_Bit_Codec_Latitude, t1);\n\n  uint8_t t2[numBytes_bit_codec_Bit_Codec_Longitude];\n  byte_array_default(SF t2, numBits_bit_codec_Bit_Codec_Longitude, numBytes_bit_codec_Bit_Codec_Longitude);\n  api_put_to_filter_longitude__bit_codec_Bit_Codec_Producer_proc_producer(SF numBits_bit_codec_Bit_Codec_Longitude, t2);\n\n  uint8_t t3[numBytes_bit_codec_Bit_Codec_Coordinate_Impl];\n  byte_array_default(SF t3, numBits_bit_codec_Bit_Codec_Coordinate_Impl, numBytes_bit_codec_Bit_Codec_Coordinate_Impl);\n  api_put_to_filter_coordinate__bit_codec_Bit_Codec_Producer_proc_producer(SF numBits_bit_codec_Bit_Codec_Coordinate_Impl, t3);\n\n  uint8_t t4[numBytes_bit_codec_Bit_Codec_Mission];\n  byte_array_default(SF t4, numBits_bit_codec_Bit_Codec_Mission, numBytes_bit_codec_Bit_Codec_Mission);\n  api_put_to_filter_mission__bit_codec_Bit_Codec_Producer_proc_producer(SF numBits_bit_codec_Bit_Codec_Mission, t4);\n\n  api_put_to_filter_event__bit_codec_Bit_Codec_Producer_proc_producer(SF_LAST);\n\n  api_logInfo__bit_codec_Bit_Codec_Producer_proc_producer(SF string(\"Example logInfo\"));\n\n  api_logDebug__bit_codec_Bit_Codec_Producer_proc_producer(SF string(\"Example logDebug\"));\n\n  api_logError__bit_codec_Bit_Codec_Producer_proc_producer(SF string(\"Example logError\"));\n}\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer.c\", \"\", \"bit_codec_Bit_Codec_Producer_proc_producer_finalise_\", 0);\n}\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer.c\", \"\", \"bit_codec_Bit_Codec_Producer_proc_producer_timeTriggered_\", 0);\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Producer_proc_producer\/Producer_proc_producer_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef PRODUCER_PROC_PRODUCER_API_H\n#define PRODUCER_PROC_PRODUCER_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nvoid api_put_to_filter_u32__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_filter_latitude__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_filter_longitude__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_filter_coordinate__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_filter_mission__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_filter_event__bit_codec_Bit_Codec_Producer_proc_producer(STACK_FRAME_ONLY);\n\nvoid api_logInfo__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Producer_proc_producer\/Producer_proc_producer_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <Producer_proc_producer_api.h>\n#include <Producer_proc_producer.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nvoid api_put_to_filter_u32__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_put_to_filter_u32__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_put_to_filter_u32_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_to_filter_latitude__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_put_to_filter_latitude__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_put_to_filter_latitude_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_to_filter_longitude__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_put_to_filter_longitude__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_put_to_filter_longitude_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_to_filter_coordinate__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_put_to_filter_coordinate__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_put_to_filter_coordinate_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_to_filter_mission__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_put_to_filter_mission__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_put_to_filter_mission_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_to_filter_event__bit_codec_Bit_Codec_Producer_proc_producer(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_put_to_filter_event__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_put_to_filter_event_(\n    SF\n    &api);\n}\n\nvoid api_logInfo__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_logInfo__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_logDebug__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__bit_codec_Bit_Codec_Producer_proc_producer(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"api_logError__bit_codec_Bit_Codec_Producer_proc_producer\", 0);\n\n  \/\/ Option_04250B = Option[bit_codec.Bit_Codec.Producer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Producer_Initialization_Api(api);\n  Option_04250B_get_(SF (bit_codec_Bit_Codec_Producer_Initialization_Api) &api, bit_codec_Bit_Codec_Producer_proc_producer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Producer_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_initialise(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Producer_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"bit_codec_Bit_Codec_Producer_proc_producer_initialise\", 0);\n\n  bit_codec_Bit_Codec_Producer_proc_producer_initialise_(SF_LAST);\n}\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_finalise(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Producer_Operational_Api api) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"bit_codec_Bit_Codec_Producer_proc_producer_finalise\", 0);\n\n  bit_codec_Bit_Codec_Producer_proc_producer_finalise_(SF_LAST);\n}\n\nUnit bit_codec_Bit_Codec_Producer_proc_producer_timeTriggered(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Producer_Operational_Api api) {\n  DeclNewStackFrame(caller, \"Producer_proc_producer_api.c\", \"\", \"bit_codec_Bit_Codec_Producer_proc_producer_timeTriggered\", 0);\n\n  bit_codec_Bit_Codec_Producer_proc_producer_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/Filter_proc_filter_App.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Filter_proc_filter_App extends App {\n\n  val entryPoints: Bridge.EntryPoints = Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.entryPoints\n  val appPortId: Art.PortId = IPCPorts.Filter_proc_filter_App\n  val appPortIdOpt: Option[Art.PortId] = Some(appPortId)\n  val from_producer_u32PortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_u32.id\n  val from_producer_u32PortIdOpt: Option[Art.PortId] = Some(from_producer_u32PortId)\n  val from_producer_latitudePortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_latitude.id\n  val from_producer_latitudePortIdOpt: Option[Art.PortId] = Some(from_producer_latitudePortId)\n  val from_producer_longitudePortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_longitude.id\n  val from_producer_longitudePortIdOpt: Option[Art.PortId] = Some(from_producer_longitudePortId)\n  val from_producer_coordinatePortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_coordinate.id\n  val from_producer_coordinatePortIdOpt: Option[Art.PortId] = Some(from_producer_coordinatePortId)\n  val from_producer_missionPortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_mission.id\n  val from_producer_missionPortIdOpt: Option[Art.PortId] = Some(from_producer_missionPortId)\n  val from_producer_eventPortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_event.id\n  val from_producer_eventPortIdOpt: Option[Art.PortId] = Some(from_producer_eventPortId)\n\n  def initialiseArchitecture(seed: Z): Unit = {\n    Platform.initialise(seed, appPortIdOpt)\n    Platform.initialise(seed, from_producer_u32PortIdOpt)\n    Platform.initialise(seed, from_producer_latitudePortIdOpt)\n    Platform.initialise(seed, from_producer_longitudePortIdOpt)\n    Platform.initialise(seed, from_producer_coordinatePortIdOpt)\n    Platform.initialise(seed, from_producer_missionPortIdOpt)\n    Platform.initialise(seed, from_producer_eventPortIdOpt)\n\n    Art.run(Arch.ad)\n  }\n\n  def initialise(): Unit = {\n    entryPoints.initialise()\n  }\n\n  def compute(): Unit = {\n    var dispatch = F\n\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_producer_u32PortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_producer_u32PortId, v); dispatch = F\n        case Some(v) => halt(s\"Unexpected payload on port from_producer_u32.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_producer_latitudePortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_producer_latitudePortId, v); dispatch = F\n        case Some(v) => halt(s\"Unexpected payload on port from_producer_latitude.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_producer_longitudePortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_producer_longitudePortId, v); dispatch = F\n        case Some(v) => halt(s\"Unexpected payload on port from_producer_longitude.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_producer_coordinatePortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_producer_coordinatePortId, v); dispatch = F\n        case Some(v) => halt(s\"Unexpected payload on port from_producer_coordinate.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_producer_missionPortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_producer_missionPortId, v); dispatch = T\n        case Some(v) => halt(s\"Unexpected payload on port from_producer_mission.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_producer_eventPortIdOpt, out)\n      out.value2 match {\n        case Some(v: art.Empty) => ArtNix.updateData(from_producer_eventPortId, v); dispatch = T\n        case Some(v) => halt(s\"Unexpected payload on port from_producer_event.  Expecting something of type art.Empty but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    if (dispatch) {\n      entryPoints.compute()\n      Process.sleep(1000)\n    } else {\n      Process.sleep(10)\n    }\n  }\n\n  def finalise(): Unit = {\n    entryPoints.finalise()\n  }\n\n  def main(args: ISZ[String]): Z = {\n\n    val seed: Z = if (args.size == z\"1\") {\n      val n = Z(args(0)).get\n      if (n == z\"0\") 1 else n\n    } else {\n      1\n    }\n\n    initialiseArchitecture(seed)\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after setting up component\n\n    initialise()\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after component init\n\n    println(\"Filter_proc_filter_App starting ...\")\n\n    ArtNix.eventDispatch()\n\n    var terminated = F\n    while (!terminated) {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(appPortIdOpt, out)\n      if (out.value2.isEmpty) {\n        compute()\n      } else {\n        terminated = T\n      }\n    }\n    exit()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.logInfo(\"\")\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.logDebug(\"\")\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.logError(\"\")\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.logInfo(\"\")\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.logDebug(\"\")\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_from_producer_u32: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.get_from_producer_u32()\n      val apiUsage_from_producer_latitude: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.get_from_producer_latitude()\n      val apiUsage_from_producer_longitude: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.get_from_producer_longitude()\n      val apiUsage_from_producer_coordinate: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.get_from_producer_coordinate()\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.put_to_consumer_u32(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.put_to_consumer_u32(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.put_to_consumer_latitude(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.put_to_consumer_latitude(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.put_to_consumer_longitude(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.put_to_consumer_longitude(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.put_to_consumer_coordinate(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.put_to_consumer_coordinate(Base_Types.Bits_example())\n      val apiUsage_from_producer_mission: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.get_from_producer_mission()\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.put_to_consumer_mission(Base_Types.Bits_example())\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.put_to_consumer_mission(Base_Types.Bits_example())\n      val apiUsage_from_producer_event: Option[art.Empty] = bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.get_from_producer_event()\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_initialization_api.get.put_to_consumer_event()\n      bit_codec.Bit_Codec.Filter_proc_filter_Bridge.c_operational_api.get.put_to_consumer_event()\n    }\n  }\n\n  def exit(): Unit = {\n    finalise()\n    Platform.finalise()\n  }\n\n  override def atExit(): Unit = {\n    exit()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Filter_proc_filter\/Filter_proc_filter.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef FILTER_PROC_FILTER_H\n#define FILTER_PROC_FILTER_H\n\n#include <all.h>\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_initialise_(STACK_FRAME_ONLY);\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_finalise_(STACK_FRAME_ONLY);\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission_(\n  STACK_FRAME\n  IS_C4F575 value);\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_event_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Filter_proc_filter\/Filter_proc_filter.c",
        {
          "type" : "TestResource",
          "content" : "#include <Filter_proc_filter_api.h>\n#include <Filter_proc_filter.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  uint8_t t0[numBytes_U32];\n  byte_array_default(SF t0, numBits_U32, numBytes_U32);\n  api_put_to_consumer_u32__bit_codec_Bit_Codec_Filter_proc_filter(SF numBits_U32, t0);\n\n  uint8_t t1[numBytes_bit_codec_Bit_Codec_Latitude];\n  byte_array_default(SF t1, numBits_bit_codec_Bit_Codec_Latitude, numBytes_bit_codec_Bit_Codec_Latitude);\n  api_put_to_consumer_latitude__bit_codec_Bit_Codec_Filter_proc_filter(SF numBits_bit_codec_Bit_Codec_Latitude, t1);\n\n  uint8_t t2[numBytes_bit_codec_Bit_Codec_Longitude];\n  byte_array_default(SF t2, numBits_bit_codec_Bit_Codec_Longitude, numBytes_bit_codec_Bit_Codec_Longitude);\n  api_put_to_consumer_longitude__bit_codec_Bit_Codec_Filter_proc_filter(SF numBits_bit_codec_Bit_Codec_Longitude, t2);\n\n  uint8_t t3[numBytes_bit_codec_Bit_Codec_Coordinate_Impl];\n  byte_array_default(SF t3, numBits_bit_codec_Bit_Codec_Coordinate_Impl, numBytes_bit_codec_Bit_Codec_Coordinate_Impl);\n  api_put_to_consumer_coordinate__bit_codec_Bit_Codec_Filter_proc_filter(SF numBits_bit_codec_Bit_Codec_Coordinate_Impl, t3);\n\n  uint8_t t4[numBytes_bit_codec_Bit_Codec_Mission];\n  byte_array_default(SF t4, numBits_bit_codec_Bit_Codec_Mission, numBytes_bit_codec_Bit_Codec_Mission);\n  api_put_to_consumer_mission__bit_codec_Bit_Codec_Filter_proc_filter(SF numBits_bit_codec_Bit_Codec_Mission, t4);\n\n  api_put_to_consumer_event__bit_codec_Bit_Codec_Filter_proc_filter(SF_LAST);\n\n  api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(SF string(\"Example logInfo\"));\n\n  api_logDebug__bit_codec_Bit_Codec_Filter_proc_filter(SF string(\"Example logDebug\"));\n\n  api_logError__bit_codec_Bit_Codec_Filter_proc_filter(SF string(\"Example logError\"));\n}\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_finalise_\", 0);\n}\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission_raw(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission_raw\", 0);\n\n  size_t numBytes = numBits == 0 ? 0 : (numBits - 1) \/ 8 + 1;\n  DeclNewString(from_producer_missionString);\n  String__append(SF (String) &from_producer_missionString, string(\"bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission_raw called\"));\n  byte_array_string(SF (String) &from_producer_missionString, byteArray, numBytes);\n  api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter (SF (String) &from_producer_missionString);\n}\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission_(\n  STACK_FRAME\n  IS_C4F575 value) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission_\", 0);\n\n  bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission_raw(SF value->size, value->value);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_U32];\n  size_t t0_numBits;\n  if(api_get_from_producer_u32__bit_codec_Bit_Codec_Filter_proc_filter(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_U32, \"numBits received does not match expected\");\n\n    DeclNewString(from_producer_u32_str);\n    String__append(SF (String) &from_producer_u32_str, string(\"Received on from_producer_u32: \"));\n    byte_array_string(SF (String) &from_producer_u32_str, t0, numBytes_U32);\n    api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(SF (String) &from_producer_u32_str);\n  }\n\n  uint8_t t1[numBytes_bit_codec_Bit_Codec_Latitude];\n  size_t t1_numBits;\n  if(api_get_from_producer_latitude__bit_codec_Bit_Codec_Filter_proc_filter(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t1_numBits == numBits_bit_codec_Bit_Codec_Latitude, \"numBits received does not match expected\");\n\n    DeclNewString(from_producer_latitude_str);\n    String__append(SF (String) &from_producer_latitude_str, string(\"Received on from_producer_latitude: \"));\n    byte_array_string(SF (String) &from_producer_latitude_str, t1, numBytes_bit_codec_Bit_Codec_Latitude);\n    api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(SF (String) &from_producer_latitude_str);\n  }\n\n  uint8_t t2[numBytes_bit_codec_Bit_Codec_Longitude];\n  size_t t2_numBits;\n  if(api_get_from_producer_longitude__bit_codec_Bit_Codec_Filter_proc_filter(SF &t2_numBits, t2)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t2_numBits == numBits_bit_codec_Bit_Codec_Longitude, \"numBits received does not match expected\");\n\n    DeclNewString(from_producer_longitude_str);\n    String__append(SF (String) &from_producer_longitude_str, string(\"Received on from_producer_longitude: \"));\n    byte_array_string(SF (String) &from_producer_longitude_str, t2, numBytes_bit_codec_Bit_Codec_Longitude);\n    api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(SF (String) &from_producer_longitude_str);\n  }\n\n  uint8_t t3[numBytes_bit_codec_Bit_Codec_Coordinate_Impl];\n  size_t t3_numBits;\n  if(api_get_from_producer_coordinate__bit_codec_Bit_Codec_Filter_proc_filter(SF &t3_numBits, t3)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t3_numBits == numBits_bit_codec_Bit_Codec_Coordinate_Impl, \"numBits received does not match expected\");\n\n    DeclNewString(from_producer_coordinate_str);\n    String__append(SF (String) &from_producer_coordinate_str, string(\"Received on from_producer_coordinate: \"));\n    byte_array_string(SF (String) &from_producer_coordinate_str, t3, numBytes_bit_codec_Bit_Codec_Coordinate_Impl);\n    api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(SF (String) &from_producer_coordinate_str);\n  }\n\n  uint8_t t4[numBytes_bit_codec_Bit_Codec_Mission];\n  size_t t4_numBits;\n  if(api_get_from_producer_mission__bit_codec_Bit_Codec_Filter_proc_filter(SF &t4_numBits, t4)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t4_numBits == numBits_bit_codec_Bit_Codec_Mission, \"numBits received does not match expected\");\n\n    DeclNewString(from_producer_mission_str);\n    String__append(SF (String) &from_producer_mission_str, string(\"Received on from_producer_mission: \"));\n    byte_array_string(SF (String) &from_producer_mission_str, t4, numBytes_bit_codec_Bit_Codec_Mission);\n    api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(SF (String) &from_producer_mission_str);\n  }\n\n  if(api_get_from_producer_event__bit_codec_Bit_Codec_Filter_proc_filter(SF_LAST )){\n    String from_producer_event_str = string(\"Received event on from_producer_event\");\n    api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(SF from_producer_event_str);\n  }\n}\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_event_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_event_\", 0);\n\n  DeclNewString(from_producer_eventString);\n  String__append(SF (String) &from_producer_eventString, string(\"bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_event called\"));\n  api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter (SF (String) &from_producer_eventString);\n\n  String str = string(\"Received event on from_producer_event\");\n  api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(SF str);\n\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Filter_proc_filter\/Filter_proc_filter_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef FILTER_PROC_FILTER_API_H\n#define FILTER_PROC_FILTER_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_from_producer_u32__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_producer_latitude__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_producer_longitude__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_producer_coordinate__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_consumer_u32__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_consumer_latitude__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_consumer_longitude__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_consumer_coordinate__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_producer_mission__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_to_consumer_mission__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_producer_event__bit_codec_Bit_Codec_Filter_proc_filter(STACK_FRAME_ONLY);\n\nvoid api_put_to_consumer_event__bit_codec_Bit_Codec_Filter_proc_filter(STACK_FRAME_ONLY);\n\nvoid api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Filter_proc_filter\/Filter_proc_filter_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <Filter_proc_filter_api.h>\n#include <Filter_proc_filter.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_from_producer_u32__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_get_from_producer_u32__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_2C7884 = Option[bit_codec.Bit_Codec.Filter_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Operational_Api(api);\n  Option_2C7884_get_(SF (bit_codec_Bit_Codec_Filter_Operational_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Operational_Api_get_from_producer_u32_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_from_producer_latitude__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_get_from_producer_latitude__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_2C7884 = Option[bit_codec.Bit_Codec.Filter_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Operational_Api(api);\n  Option_2C7884_get_(SF (bit_codec_Bit_Codec_Filter_Operational_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Operational_Api_get_from_producer_latitude_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_from_producer_longitude__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_get_from_producer_longitude__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_2C7884 = Option[bit_codec.Bit_Codec.Filter_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Operational_Api(api);\n  Option_2C7884_get_(SF (bit_codec_Bit_Codec_Filter_Operational_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Operational_Api_get_from_producer_longitude_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_from_producer_coordinate__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_get_from_producer_coordinate__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_2C7884 = Option[bit_codec.Bit_Codec.Filter_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Operational_Api(api);\n  Option_2C7884_get_(SF (bit_codec_Bit_Codec_Filter_Operational_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Operational_Api_get_from_producer_coordinate_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_to_consumer_u32__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_put_to_consumer_u32__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_put_to_consumer_u32_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_to_consumer_latitude__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_put_to_consumer_latitude__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_put_to_consumer_latitude_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_to_consumer_longitude__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_put_to_consumer_longitude__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_put_to_consumer_longitude_(\n    SF\n    &api,\n    &t_0);\n}\n\nvoid api_put_to_consumer_coordinate__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_put_to_consumer_coordinate__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_put_to_consumer_coordinate_(\n    SF\n    &api,\n    &t_0);\n}\n\nbool api_get_from_producer_mission__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_get_from_producer_mission__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_2C7884 = Option[bit_codec.Bit_Codec.Filter_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Operational_Api(api);\n  Option_2C7884_get_(SF (bit_codec_Bit_Codec_Filter_Operational_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Operational_Api_get_from_producer_mission_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_to_consumer_mission__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_put_to_consumer_mission__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  sfAssert(SF (Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\");\n  sfAssert(SF (Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\");\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_put_to_consumer_mission_(\n    SF\n    &api,\n    &t_0);\n}\n\nbool api_get_from_producer_event__bit_codec_Bit_Codec_Filter_proc_filter(STACK_FRAME_ONLY){\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_get_from_producer_event__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_2C7884 = Option[bit_codec.Bit_Codec.Filter_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Operational_Api(api);\n  Option_2C7884_get_(SF (bit_codec_Bit_Codec_Filter_Operational_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_operational_api(SF_LAST));\n\n  \/\/ Option_C622DB = Option[art.Empty]\n  \/\/ Some_4782C6 = Some[art.Empty]\n  DeclNewOption_C622DB(t_0);\n  bit_codec_Bit_Codec_Filter_Operational_Api_get_from_producer_event_(\n    SF\n    (Option_C622DB) &t_0,\n    &api);\n\n  if(t_0.type == TSome_4782C6){\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_to_consumer_event__bit_codec_Bit_Codec_Filter_proc_filter(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_put_to_consumer_event__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_put_to_consumer_event_(\n    SF\n    &api);\n}\n\nvoid api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_logInfo__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_logDebug__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__bit_codec_Bit_Codec_Filter_proc_filter(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"api_logError__bit_codec_Bit_Codec_Filter_proc_filter\", 0);\n\n  \/\/ Option_21F319 = Option[bit_codec.Bit_Codec.Filter_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Filter_Initialization_Api(api);\n  Option_21F319_get_(SF (bit_codec_Bit_Codec_Filter_Initialization_Api) &api, bit_codec_Bit_Codec_Filter_proc_filter_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Filter_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_initialise(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Filter_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_initialise\", 0);\n\n  bit_codec_Bit_Codec_Filter_proc_filter_initialise_(SF_LAST);\n}\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_finalise(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Filter_Operational_Api api) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_finalise\", 0);\n\n  bit_codec_Bit_Codec_Filter_proc_filter_finalise_(SF_LAST);\n}\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Filter_Operational_Api api,\n  IS_C4F575 value) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission\", 0);\n\n  bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_mission_(SF value);\n}\n\nUnit bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_event(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Filter_Operational_Api api) {\n  DeclNewStackFrame(caller, \"Filter_proc_filter_api.c\", \"\", \"bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_event\", 0);\n\n  bit_codec_Bit_Codec_Filter_proc_filter_handle_from_producer_event_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/Consumer_proc_consumer_App.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Consumer_proc_consumer_App extends App {\n\n  val entryPoints: Bridge.EntryPoints = Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.entryPoints\n  val appPortId: Art.PortId = IPCPorts.Consumer_proc_consumer_App\n  val appPortIdOpt: Option[Art.PortId] = Some(appPortId)\n  val from_filter_u32PortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_u32.id\n  val from_filter_u32PortIdOpt: Option[Art.PortId] = Some(from_filter_u32PortId)\n  val from_filter_latitudePortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_latitude.id\n  val from_filter_latitudePortIdOpt: Option[Art.PortId] = Some(from_filter_latitudePortId)\n  val from_filter_longitudePortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_longitude.id\n  val from_filter_longitudePortIdOpt: Option[Art.PortId] = Some(from_filter_longitudePortId)\n  val from_filter_coordinatePortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_coordinate.id\n  val from_filter_coordinatePortIdOpt: Option[Art.PortId] = Some(from_filter_coordinatePortId)\n  val from_filter_missionPortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_mission.id\n  val from_filter_missionPortIdOpt: Option[Art.PortId] = Some(from_filter_missionPortId)\n  val from_filter_eventPortId: Art.PortId = Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_event.id\n  val from_filter_eventPortIdOpt: Option[Art.PortId] = Some(from_filter_eventPortId)\n\n  def initialiseArchitecture(seed: Z): Unit = {\n    Platform.initialise(seed, appPortIdOpt)\n    Platform.initialise(seed, from_filter_u32PortIdOpt)\n    Platform.initialise(seed, from_filter_latitudePortIdOpt)\n    Platform.initialise(seed, from_filter_longitudePortIdOpt)\n    Platform.initialise(seed, from_filter_coordinatePortIdOpt)\n    Platform.initialise(seed, from_filter_missionPortIdOpt)\n    Platform.initialise(seed, from_filter_eventPortIdOpt)\n\n    Art.run(Arch.ad)\n  }\n\n  def initialise(): Unit = {\n    entryPoints.initialise()\n  }\n\n  def compute(): Unit = {\n\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_filter_u32PortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_filter_u32PortId, v)\n        case Some(v) => halt(s\"Unexpected payload on port from_filter_u32.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_filter_latitudePortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_filter_latitudePortId, v)\n        case Some(v) => halt(s\"Unexpected payload on port from_filter_latitude.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_filter_longitudePortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_filter_longitudePortId, v)\n        case Some(v) => halt(s\"Unexpected payload on port from_filter_longitude.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_filter_coordinatePortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_filter_coordinatePortId, v)\n        case Some(v) => halt(s\"Unexpected payload on port from_filter_coordinate.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_filter_missionPortIdOpt, out)\n      out.value2 match {\n        case Some(v: Base_Types.Bits_Payload) => ArtNix.updateData(from_filter_missionPortId, v)\n        case Some(v) => halt(s\"Unexpected payload on port from_filter_mission.  Expecting something of type Base_Types.Bits_Payload but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(from_filter_eventPortIdOpt, out)\n      out.value2 match {\n        case Some(v: art.Empty) => ArtNix.updateData(from_filter_eventPortId, v)\n        case Some(v) => halt(s\"Unexpected payload on port from_filter_event.  Expecting something of type art.Empty but received ${v}\")\n        case None() => \/\/ do nothing\n      }\n    }\n    entryPoints.compute()\n    Process.sleep(1000)\n  }\n\n  def finalise(): Unit = {\n    entryPoints.finalise()\n  }\n\n  def main(args: ISZ[String]): Z = {\n\n    val seed: Z = if (args.size == z\"1\") {\n      val n = Z(args(0)).get\n      if (n == z\"0\") 1 else n\n    } else {\n      1\n    }\n\n    initialiseArchitecture(seed)\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after setting up component\n\n    initialise()\n\n    Platform.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) \/\/ pause after component init\n\n    println(\"Consumer_proc_consumer_App starting ...\")\n\n    ArtNix.timeDispatch()\n\n    var terminated = F\n    while (!terminated) {\n      val out = IPCPorts.emptyReceiveAsyncOut\n      Platform.receiveAsync(appPortIdOpt, out)\n      if (out.value2.isEmpty) {\n        compute()\n      } else {\n        terminated = T\n      }\n    }\n    exit()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_initialization_api.get.logInfo(\"\")\n      bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_initialization_api.get.logDebug(\"\")\n      bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_initialization_api.get.logError(\"\")\n      bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.logInfo(\"\")\n      bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.logDebug(\"\")\n      bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_from_filter_u32: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.get_from_filter_u32()\n      val apiUsage_from_filter_latitude: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.get_from_filter_latitude()\n      val apiUsage_from_filter_longitude: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.get_from_filter_longitude()\n      val apiUsage_from_filter_coordinate: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.get_from_filter_coordinate()\n      val apiUsage_from_filter_mission: Option[Base_Types.Bits] = bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.get_from_filter_mission()\n      val apiUsage_from_filter_event: Option[art.Empty] = bit_codec.Bit_Codec.Consumer_proc_consumer_Bridge.c_operational_api.get.get_from_filter_event()\n    }\n  }\n\n  def exit(): Unit = {\n    finalise()\n    Platform.finalise()\n  }\n\n  override def atExit(): Unit = {\n    exit()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Consumer_proc_consumer\/Consumer_proc_consumer.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CONSUMER_PROC_CONSUMER_H\n#define CONSUMER_PROC_CONSUMER_H\n\n#include <all.h>\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_initialise_(STACK_FRAME_ONLY);\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_finalise_(STACK_FRAME_ONLY);\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Consumer_proc_consumer\/Consumer_proc_consumer.c",
        {
          "type" : "TestResource",
          "content" : "#include <Consumer_proc_consumer_api.h>\n#include <Consumer_proc_consumer.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer.c\", \"\", \"bit_codec_Bit_Codec_Consumer_proc_consumer_initialise_\", 0);\n\n  \/\/ examples of api setter and logging usage\n\n  api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(SF string(\"Example logInfo\"));\n\n  api_logDebug__bit_codec_Bit_Codec_Consumer_proc_consumer(SF string(\"Example logDebug\"));\n\n  api_logError__bit_codec_Bit_Codec_Consumer_proc_consumer(SF string(\"Example logError\"));\n}\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer.c\", \"\", \"bit_codec_Bit_Codec_Consumer_proc_consumer_finalise_\", 0);\n}\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer.c\", \"\", \"bit_codec_Bit_Codec_Consumer_proc_consumer_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_U32];\n  size_t t0_numBits;\n  if(api_get_from_filter_u32__bit_codec_Bit_Codec_Consumer_proc_consumer(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t0_numBits == numBits_U32, \"numBits received does not match expected\");\n\n    DeclNewString(from_filter_u32_str);\n    String__append(SF (String) &from_filter_u32_str, string(\"Received on from_filter_u32: \"));\n    byte_array_string(SF (String) &from_filter_u32_str, t0, numBytes_U32);\n    api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(SF (String) &from_filter_u32_str);\n  }\n\n  uint8_t t1[numBytes_bit_codec_Bit_Codec_Latitude];\n  size_t t1_numBits;\n  if(api_get_from_filter_latitude__bit_codec_Bit_Codec_Consumer_proc_consumer(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t1_numBits == numBits_bit_codec_Bit_Codec_Latitude, \"numBits received does not match expected\");\n\n    DeclNewString(from_filter_latitude_str);\n    String__append(SF (String) &from_filter_latitude_str, string(\"Received on from_filter_latitude: \"));\n    byte_array_string(SF (String) &from_filter_latitude_str, t1, numBytes_bit_codec_Bit_Codec_Latitude);\n    api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(SF (String) &from_filter_latitude_str);\n  }\n\n  uint8_t t2[numBytes_bit_codec_Bit_Codec_Longitude];\n  size_t t2_numBits;\n  if(api_get_from_filter_longitude__bit_codec_Bit_Codec_Consumer_proc_consumer(SF &t2_numBits, t2)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t2_numBits == numBits_bit_codec_Bit_Codec_Longitude, \"numBits received does not match expected\");\n\n    DeclNewString(from_filter_longitude_str);\n    String__append(SF (String) &from_filter_longitude_str, string(\"Received on from_filter_longitude: \"));\n    byte_array_string(SF (String) &from_filter_longitude_str, t2, numBytes_bit_codec_Bit_Codec_Longitude);\n    api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(SF (String) &from_filter_longitude_str);\n  }\n\n  uint8_t t3[numBytes_bit_codec_Bit_Codec_Coordinate_Impl];\n  size_t t3_numBits;\n  if(api_get_from_filter_coordinate__bit_codec_Bit_Codec_Consumer_proc_consumer(SF &t3_numBits, t3)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t3_numBits == numBits_bit_codec_Bit_Codec_Coordinate_Impl, \"numBits received does not match expected\");\n\n    DeclNewString(from_filter_coordinate_str);\n    String__append(SF (String) &from_filter_coordinate_str, string(\"Received on from_filter_coordinate: \"));\n    byte_array_string(SF (String) &from_filter_coordinate_str, t3, numBytes_bit_codec_Bit_Codec_Coordinate_Impl);\n    api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(SF (String) &from_filter_coordinate_str);\n  }\n\n  uint8_t t4[numBytes_bit_codec_Bit_Codec_Mission];\n  size_t t4_numBits;\n  if(api_get_from_filter_mission__bit_codec_Bit_Codec_Consumer_proc_consumer(SF &t4_numBits, t4)) {\n    \/\/ sanity check\n    sfAssert(SF (Z) t4_numBits == numBits_bit_codec_Bit_Codec_Mission, \"numBits received does not match expected\");\n\n    DeclNewString(from_filter_mission_str);\n    String__append(SF (String) &from_filter_mission_str, string(\"Received on from_filter_mission: \"));\n    byte_array_string(SF (String) &from_filter_mission_str, t4, numBytes_bit_codec_Bit_Codec_Mission);\n    api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(SF (String) &from_filter_mission_str);\n  }\n\n  if(api_get_from_filter_event__bit_codec_Bit_Codec_Consumer_proc_consumer(SF_LAST )){\n    String from_filter_event_str = string(\"Received event on from_filter_event\");\n    api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(SF from_filter_event_str);\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Consumer_proc_consumer\/Consumer_proc_consumer_api.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef CONSUMER_PROC_CONSUMER_API_H\n#define CONSUMER_PROC_CONSUMER_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_from_filter_u32__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_filter_latitude__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_filter_longitude__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_filter_coordinate__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_filter_mission__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_from_filter_event__bit_codec_Bit_Codec_Consumer_proc_consumer(STACK_FRAME_ONLY);\n\nvoid api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/Consumer_proc_consumer\/Consumer_proc_consumer_api.c",
        {
          "type" : "TestResource",
          "content" : "#include <Consumer_proc_consumer_api.h>\n#include <Consumer_proc_consumer.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_from_filter_u32__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_get_from_filter_u32__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_3F2E13 = Option[bit_codec.Bit_Codec.Consumer_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Operational_Api(api);\n  Option_3F2E13_get_(SF (bit_codec_Bit_Codec_Consumer_Operational_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Consumer_Operational_Api_get_from_filter_u32_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_from_filter_latitude__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_get_from_filter_latitude__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_3F2E13 = Option[bit_codec.Bit_Codec.Consumer_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Operational_Api(api);\n  Option_3F2E13_get_(SF (bit_codec_Bit_Codec_Consumer_Operational_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Consumer_Operational_Api_get_from_filter_latitude_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_from_filter_longitude__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_get_from_filter_longitude__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_3F2E13 = Option[bit_codec.Bit_Codec.Consumer_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Operational_Api(api);\n  Option_3F2E13_get_(SF (bit_codec_Bit_Codec_Consumer_Operational_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Consumer_Operational_Api_get_from_filter_longitude_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_from_filter_coordinate__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_get_from_filter_coordinate__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_3F2E13 = Option[bit_codec.Bit_Codec.Consumer_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Operational_Api(api);\n  Option_3F2E13_get_(SF (bit_codec_Bit_Codec_Consumer_Operational_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Consumer_Operational_Api_get_from_filter_coordinate_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_from_filter_mission__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_get_from_filter_mission__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  \/\/ Option_3F2E13 = Option[bit_codec.Bit_Codec.Consumer_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Operational_Api(api);\n  Option_3F2E13_get_(SF (bit_codec_Bit_Codec_Consumer_Operational_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_operational_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Consumer_Operational_Api_get_from_filter_mission_(\n    SF\n    (Option_30119F) &t_0,\n    &api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_from_filter_event__bit_codec_Bit_Codec_Consumer_proc_consumer(STACK_FRAME_ONLY){\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_get_from_filter_event__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_3F2E13 = Option[bit_codec.Bit_Codec.Consumer_Operational_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Operational_Api(api);\n  Option_3F2E13_get_(SF (bit_codec_Bit_Codec_Consumer_Operational_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_operational_api(SF_LAST));\n\n  \/\/ Option_C622DB = Option[art.Empty]\n  \/\/ Some_4782C6 = Some[art.Empty]\n  DeclNewOption_C622DB(t_0);\n  bit_codec_Bit_Codec_Consumer_Operational_Api_get_from_filter_event_(\n    SF\n    (Option_C622DB) &t_0,\n    &api);\n\n  if(t_0.type == TSome_4782C6){\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_logInfo__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_D48929 = Option[bit_codec.Bit_Codec.Consumer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Initialization_Api(api);\n  Option_D48929_get_(SF (bit_codec_Bit_Codec_Consumer_Initialization_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Consumer_Initialization_Api_logInfo_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logDebug__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_logDebug__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_D48929 = Option[bit_codec.Bit_Codec.Consumer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Initialization_Api(api);\n  Option_D48929_get_(SF (bit_codec_Bit_Codec_Consumer_Initialization_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Consumer_Initialization_Api_logDebug_(\n    SF\n    &api,\n    str);\n}\n\nvoid api_logError__bit_codec_Bit_Codec_Consumer_proc_consumer(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"api_logError__bit_codec_Bit_Codec_Consumer_proc_consumer\", 0);\n\n  \/\/ Option_D48929 = Option[bit_codec.Bit_Codec.Consumer_Initialization_Api]\n  DeclNewbit_codec_Bit_Codec_Consumer_Initialization_Api(api);\n  Option_D48929_get_(SF (bit_codec_Bit_Codec_Consumer_Initialization_Api) &api, bit_codec_Bit_Codec_Consumer_proc_consumer_Bridge_c_initialization_api(SF_LAST));\n\n  bit_codec_Bit_Codec_Consumer_Initialization_Api_logError_(\n    SF\n    &api,\n    str);\n}\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_initialise(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Consumer_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"bit_codec_Bit_Codec_Consumer_proc_consumer_initialise\", 0);\n\n  bit_codec_Bit_Codec_Consumer_proc_consumer_initialise_(SF_LAST);\n}\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_finalise(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Consumer_Operational_Api api) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"bit_codec_Bit_Codec_Consumer_proc_consumer_finalise\", 0);\n\n  bit_codec_Bit_Codec_Consumer_proc_consumer_finalise_(SF_LAST);\n}\n\nUnit bit_codec_Bit_Codec_Consumer_proc_consumer_timeTriggered(\n  STACK_FRAME\n  bit_codec_Bit_Codec_Consumer_Operational_Api api) {\n  DeclNewStackFrame(caller, \"Consumer_proc_consumer_api.c\", \"\", \"bit_codec_Bit_Codec_Consumer_proc_consumer_timeTriggered\", 0);\n\n  bit_codec_Bit_Codec_Consumer_proc_consumer_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/ext.c",
        {
          "type" : "TestResource",
          "content" : "#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ add c extension code here\n\n\/\/ example method that sets the first numBits bits of byteArray to 1\nvoid byte_array_default(STACK_FRAME uint8_t* byteArray, size_t numBits, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"byte_array_default\", 0);\n\n  sfAssert(SF (numBits - 1) \/ 8  + 1 <= numBytes, \"byte_array_default: numBytes * 8 must be at least numBits\");\n\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    uint8_t v = 0;\n    for(uint8_t bit = 0; bit < 8; bit++) {\n      if(byte * 8 + bit < numBits) {\n        v |= 1UL << bit;\n      }\n    }\n    byteArray[byte] = v;\n  }\n}\n\n\/\/ example method that places the hex value of the bytes in byteArray into str\nvoid byte_array_string(STACK_FRAME String str, uint8_t* byteArray, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"byte_array_string\", 0);\n\n  sfAssert(SF (str->size + numBytes) <= MaxString, \"byte_array_string: Insufficient maximum for String characters, consider increasing the --max-string-size option\");\n\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    U8_string_(SF str, byteArray[byte]);\n    String__append(SF str, string(\" \"));\n  }\n}\n\n\/\/ example method that directly prints the hex values of the bytes in byte_array\nvoid hex_dump(STACK_FRAME uint8_t* byte_array, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"hex_dump\", 0);\n\n  printf(\"[ \");\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    if(byte != 0 && byte % 16 == 0) { printf(\"\\n  \"); }\n    printf(\"%02X \", byte_array[byte]);\n  }\n  printf(\"]\\n\");\n}",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/ext-c\/ext.h",
        {
          "type" : "TestResource",
          "content" : "#ifndef EXT_H\n#define EXT_H\n\n\/\/ This file will not be overwritten so is safe to edit\n\n#include <all.h>\n\n\/\/ bit-codec size for U32\n#define numBits_U32 32\n#define numBytes_U32 ((numBits_U32 - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for bit_codec_Bit_Codec_Latitude\n#define numBits_bit_codec_Bit_Codec_Latitude 32\n#define numBytes_bit_codec_Bit_Codec_Latitude ((numBits_bit_codec_Bit_Codec_Latitude - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for bit_codec_Bit_Codec_Longitude\n#define numBits_bit_codec_Bit_Codec_Longitude 30\n#define numBytes_bit_codec_Bit_Codec_Longitude ((numBits_bit_codec_Bit_Codec_Longitude - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for bit_codec_Bit_Codec_Coordinate_Impl\n#define numBits_bit_codec_Bit_Codec_Coordinate_Impl 60\n#define numBytes_bit_codec_Bit_Codec_Coordinate_Impl ((numBits_bit_codec_Bit_Codec_Coordinate_Impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for bit_codec_Bit_Codec_Mission\n#define numBits_bit_codec_Bit_Codec_Mission 288\n#define numBytes_bit_codec_Bit_Codec_Mission ((numBits_bit_codec_Bit_Codec_Mission - 1) \/ 8 + 1)\n\nvoid byte_array_default(STACK_FRAME uint8_t* byteArray, size_t numBits, size_t numBytes);\n\nvoid byte_array_string(STACK_FRAME String str, uint8_t* byteArray, size_t numBytes);\n\nvoid hex_dump(STACK_FRAME uint8_t* byte_array, size_t numBytes);\n#endif",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/SharedMemory.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@ext object SharedMemory {\n  def create(id: Z): Z = $\n  def get(id: Z): Z = $\n  def send(id: Z, port: Art.PortId, d: DataContent): Unit = $\n  def receive(port: Art.PortId, out: MBox2[Art.PortId, DataContent]): Unit = $\n  def sendAsync(id: Z, port: Art.PortId, d: DataContent): B = $\n  def receiveAsync(port: Art.PortId, out: MBox2[Art.PortId, Option[DataContent]]): Unit = $\n  def remove(id: Z): Unit = $\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/SharedMemory_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject SharedMemory_Ext {\n  def create(id: Z): Z = halt(\"stub\")\n  def get(id: Z): Z = halt(\"stub\")\n  def send(id: Z, port: Art.PortId, d: DataContent): Unit = halt(\"stub\")\n  def receive(port: Art.PortId, out: MBox2[Art.PortId, DataContent]): Unit = halt(\"stub\")\n  def sendAsync(id: Z, port: Art.PortId, d: DataContent): B = halt(\"stub\")\n  def receiveAsync(port: Art.PortId, out: MBox2[Art.PortId, Option[DataContent]]): Unit = halt(\"stub\")\n  def remove(id: Z): Unit = halt(\"stub\")\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/IPC.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject IPCPorts {\n  val Producer_proc_producer_App: Art.PortId = 24\n  val Filter_proc_filter_App: Art.PortId = 25\n  val Consumer_proc_consumer_App: Art.PortId = 26\n  val Main: Art.PortId = 27\n\n  def emptyReceiveOut: MBox2[Art.PortId, DataContent] = {\n    return MBox2(-1, art.Empty())\n  }\n\n  def emptyReceiveAsyncOut: MBox2[Art.PortId, Option[DataContent]] = {\n    return MBox2(-1, None())\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/ArtNix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject ArtNix {\n\n  val maxPortIds: Art.PortId = IPCPorts.Main + 1\n  val timeTriggered: TimeTriggered = TimeTriggered()\n  val noData: Option[DataContent] = None()\n  val data: MS[Art.PortId, Option[DataContent]] = MS.create(maxPortIds, noData)\n  val connection: MS[Art.PortId, ISZ[(Art.PortId, Art.PortId)]] = {\n    val r = MS.create[Art.PortId, ISZ[(Art.PortId, Art.PortId)]](maxPortIds, ISZ())\n\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_u32.id) = ISZ(\n      (IPCPorts.Filter_proc_filter_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_u32.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_latitude.id) = ISZ(\n      (IPCPorts.Filter_proc_filter_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_latitude.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_longitude.id) = ISZ(\n      (IPCPorts.Filter_proc_filter_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_longitude.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_coordinate.id) = ISZ(\n      (IPCPorts.Filter_proc_filter_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_coordinate.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_mission.id) = ISZ(\n      (IPCPorts.Filter_proc_filter_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_mission.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_producer.to_filter_event.id) = ISZ(\n      (IPCPorts.Filter_proc_filter_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_event.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_u32.id) = ISZ(\n      (IPCPorts.Consumer_proc_consumer_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_u32.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_latitude.id) = ISZ(\n      (IPCPorts.Consumer_proc_consumer_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_latitude.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_longitude.id) = ISZ(\n      (IPCPorts.Consumer_proc_consumer_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_longitude.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_coordinate.id) = ISZ(\n      (IPCPorts.Consumer_proc_consumer_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_coordinate.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_mission.id) = ISZ(\n      (IPCPorts.Consumer_proc_consumer_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_mission.id)\n    )\n    r(Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.to_consumer_event.id) = ISZ(\n      (IPCPorts.Consumer_proc_consumer_App, Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_event.id)\n    )\n\n    r\n  }\n  val eventInPorts: MS[Z, Art.PortId] = MSZ(\n    Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_mission.id,\n    Arch.Bit_Codec_Sys_Impl_Instance_proc_filter.from_producer_event.id,\n    Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_mission.id,\n    Arch.Bit_Codec_Sys_Impl_Instance_proc_consumer.from_filter_event.id\n  )\n  var frozen: MS[Art.PortId, Option[DataContent]] = MS.create(maxPortIds, noData)\n  var outgoing: MS[Art.PortId, Option[DataContent]] = MS.create(maxPortIds, noData)\n  var isTimeDispatch: B = F\n\n  def updateData(port: Art.PortId, d: DataContent): Unit = {\n    data(port) = Some(d)\n  }\n\n  def timeDispatch(): Unit = {\n    isTimeDispatch = T\n  }\n\n  def eventDispatch(): Unit = {\n    isTimeDispatch = F\n  }\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    if (isTimeDispatch) {\n      return timeTriggered\n    } else {\n      var r = ISZ[Art.PortId]()\n      for (i <- eventInPorts if data(i).nonEmpty) {\n        r = r :+ i\n      }\n      return EventTriggered(r)\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    frozen = data\n    for (i <- eventPortIds) {\n      data(i) = noData\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    outgoing(portId) = Some(data)\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    return frozen(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (p <- dataPortIds) {\n      outgoing(p) match {\n        case Some(d) =>\n          outgoing(p) = noData\n          for(e <- connection(p)){\n            Platform.sendAsync(e._1, e._2, d)\n          }\n        case _ =>\n      }\n    }\n\n    for (p <- eventPortIds) {\n      outgoing(p) match {\n        case Some(d) =>\n          outgoing(p) = noData\n          for(e <- connection(p)){\n            Platform.sendAsync(e._1, e._2, d)\n          }\n        case _ =>\n      }\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {\n  }\n\n  def time(): Art.Time = {\n    return Process.time()\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/Main.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Main extends App {\n  def main(args: ISZ[String]): Z = {\n\n    val seed: Z = if (args.size == z\"1\") {\n      val n = Z(args(0)).get\n      if (n == z\"0\") 1 else n\n    } else {\n      1\n    }\n\n    Platform.initialise(seed, None())\n\n    val empty = art.Empty()\n\n    Platform.sendAsync(IPCPorts.Producer_proc_producer_App, IPCPorts.Producer_proc_producer_App, empty)\n    Platform.sendAsync(IPCPorts.Filter_proc_filter_App, IPCPorts.Filter_proc_filter_App, empty)\n    Platform.sendAsync(IPCPorts.Consumer_proc_consumer_App, IPCPorts.Consumer_proc_consumer_App, empty)\n\n    Platform.finalise()\n    return 0\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/Platform.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\n@ext object Platform {\n  def initialise(seed: Z, portOpt: Option[Art.PortId]): Unit = $\n  def receive(portOpt: Option[Art.PortId],  out: MBox2[Art.PortId, DataContent]): Unit = $\n  def send(app: Art.PortId, port: Art.PortId, data: DataContent): Unit = $\n  def sendAsync(app: Art.PortId, port: Art.PortId, data: DataContent): B = $\n  def receiveAsync(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, Option[DataContent]]): Unit = $\n  def finalise(): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/Platform_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Platform_Ext {\n  def initialise(seed: Z, portOpt: Option[Art.PortId]): Unit = halt(\"stub\")\n  def receive(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, DataContent]) = halt(\"stub\")\n  def send(app: Art.PortId, port: Art.PortId, data: DataContent): Unit = halt(\"stub\")\n  def sendAsync(app: Art.PortId, port: Art.PortId, data: DataContent): B = halt(\"stub\")\n  def receiveAsync(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, Option[DataContent]]): Unit = halt(\"stub\")\n  def finalise(): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/PlatformNix.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\npackage bit_codec\n\nimport org.sireum._\nimport art._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject PlatformNix {\n\n  var seed: Z = 0\n  var ids: ISZ[Z] = ISZ()\n\n  def initialise(seed: Z, portOpt: Option[Art.PortId]): Unit = {\n    PlatformNix.seed = seed\n    portOpt match {\n      case Some(port) =>\n        val id = seed + port\n        SharedMemory.create(id)\n        ids = ids :+ id\n      case _ =>\n    }\n  }\n\n  def receive(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, DataContent]): Unit = {\n    portOpt match {\n      case Some(port) =>\n        out.value1 = port\n        SharedMemory.receive(seed + port, out)\n      case _ => halt(\"Unsupported receive operation without port.\")\n    }\n  }\n\n  def send(app: Art.PortId, port: Art.PortId, data: DataContent): Unit = {\n    SharedMemory.send(port, seed + port, data)\n  }\n\n  def sendAsync(app: Art.PortId, port: Art.PortId, data: DataContent): B = {\n    val r = SharedMemory.sendAsync(port, seed + port, data)\n    return r\n  }\n\n  def receiveAsync(portOpt: Option[Art.PortId], out: MBox2[Art.PortId, Option[DataContent]]): Unit = {\n    portOpt match {\n      case Some(port) => SharedMemory.receiveAsync(seed + port, out)\n      case _ => halt(\"Unsupported receive operation without port.\")\n    }\n  }\n\n  def finalise(): Unit = {\n    for (id <- ids) {\n      SharedMemory.remove(id)\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/Process.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\npackage bit_codec\n\nimport org.sireum._\nimport art.Art\n\n\/\/ This file was auto-generated.  Do not edit\n\n@ext object Process {\n  def sleep(n: Z): Unit = $\n\n  def time(): Art.Time = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/nix\/bit_codec\/Process_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package bit_codec\n\nimport org.sireum._\nimport art.Art\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Process_Ext {\n  def sleep(millis: Z): Unit = halt(\"stub\")\n\n  def time(): Art.Time = halt(\"stub\")\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/bin\/compile-linux.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\ncd ${SCRIPT_HOME}\nmkdir -p linux-build\nmkdir -p ${SCRIPT_HOME}\/..\/src\/c\/nix\/linux-build\ncd ${SCRIPT_HOME}\/..\/src\/c\/nix\/linux-build\nBOUND_CHECK=${BOUND_CHECK:-OFF}\nNO_PRINT=${NO_PRINT:-OFF}\nRANGE_CHECK=${RANGE_CHECK:-OFF}\nWITH_LOC=${WITH_LOC:-OFF}\ncmake -DBOUND_CHECK=$BOUND_CHECK -DNO_PRINT=$NO_PRINT -DRANGE_CHECK=$RANGE_CHECK -DWITH_LOC=$WITH_LOC -DCMAKE_BUILD_TYPE=Release ..\nmake $MAKE_ARGS\nmv *_App ${SCRIPT_HOME}\/linux-build\/\nmv Main ${SCRIPT_HOME}\/linux-build\/",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/bin\/run-linux.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\ncd $SCRIPT_HOME\n\n# Uncomment the following to prevent terminal from closing if app crashes\n#PREVENT_CLOSE=\"; bash -i\"\n\nx-terminal-emulator -T Producer_proc_producer_App -e sh -c \"linux-build\/Producer_proc_producer_App${PREVENT_CLOSE}\" &\nx-terminal-emulator -T Filter_proc_filter_App -e sh -c \"linux-build\/Filter_proc_filter_App${PREVENT_CLOSE}\" &\nx-terminal-emulator -T Consumer_proc_consumer_App -e sh -c \"linux-build\/Consumer_proc_consumer_App${PREVENT_CLOSE}\" &\nread -p \"Press enter to initialise components ...\"\nlinux-build\/Main\nread -p \"Press enter again to start ...\"\nlinux-build\/Main",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/bin\/compile-macOS.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\ncd ${SCRIPT_HOME}\nmkdir -p macOS-build\nmkdir -p ${SCRIPT_HOME}\/..\/src\/c\/nix\/macOS-build\ncd ${SCRIPT_HOME}\/..\/src\/c\/nix\/macOS-build\nBOUND_CHECK=${BOUND_CHECK:-OFF}\nNO_PRINT=${NO_PRINT:-OFF}\nRANGE_CHECK=${RANGE_CHECK:-OFF}\nWITH_LOC=${WITH_LOC:-OFF}\ncmake -DBOUND_CHECK=$BOUND_CHECK -DNO_PRINT=$NO_PRINT -DRANGE_CHECK=$RANGE_CHECK -DWITH_LOC=$WITH_LOC -DCMAKE_BUILD_TYPE=Release ..\nmake $MAKE_ARGS\nmv *_App ${SCRIPT_HOME}\/macOS-build\/\nmv Main ${SCRIPT_HOME}\/macOS-build\/",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/bin\/run-macOS.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\ncd $SCRIPT_HOME\n\n# Uncomment the following to prevent terminal from closing if app crashes\n#PREVENT_CLOSE=\"; bash -i\"\n\nopen -a Terminal \"macOS-build\/Producer_proc_producer_App${PREVENT_CLOSE}\" &\nopen -a Terminal \"macOS-build\/Filter_proc_filter_App${PREVENT_CLOSE}\" &\nopen -a Terminal \"macOS-build\/Consumer_proc_consumer_App${PREVENT_CLOSE}\" &\nread -p \"Press enter to initialise components ...\"\nmacOS-build\/Main\nread -p \"Press enter again to start ...\"\nmacOS-build\/Main",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/bin\/compile-cygwin.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\ncd ${SCRIPT_HOME}\nmkdir -p cygwin-build\nmkdir -p ${SCRIPT_HOME}\/..\/src\/c\/nix\/cygwin-build\ncd ${SCRIPT_HOME}\/..\/src\/c\/nix\/cygwin-build\nBOUND_CHECK=${BOUND_CHECK:-OFF}\nNO_PRINT=${NO_PRINT:-OFF}\nRANGE_CHECK=${RANGE_CHECK:-OFF}\nWITH_LOC=${WITH_LOC:-OFF}\ncmake -DBOUND_CHECK=$BOUND_CHECK -DNO_PRINT=$NO_PRINT -DRANGE_CHECK=$RANGE_CHECK -DWITH_LOC=$WITH_LOC -DCMAKE_BUILD_TYPE=Release ..\nmake $MAKE_ARGS\nmv *.exe ${SCRIPT_HOME}\/cygwin-build\/",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/bin\/run-cygwin.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\ncd $SCRIPT_HOME\n\n# Uncomment the following to prevent terminal from closing if app crashes\n#PREVENT_CLOSE=\"; bash -i\"\n\ncygstart mintty \/bin\/bash \"cygwin-build\/Producer_proc_producer_App.exe${PREVENT_CLOSE}\" &\ncygstart mintty \/bin\/bash \"cygwin-build\/Filter_proc_filter_App.exe${PREVENT_CLOSE}\" &\ncygstart mintty \/bin\/bash \"cygwin-build\/Consumer_proc_consumer_App.exe${PREVENT_CLOSE}\" &\nread -p \"Press enter to initialise components ...\"\ncygwin-build\/Main.exe\nread -p \"Press enter again to start ...\"\ncygwin-build\/Main.exe",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/bin\/stop.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nAPPS=\"Producer_proc_producer_App Filter_proc_filter_App Consumer_proc_consumer_App\"\nfor APP in ${APPS}; do\n  pkill -f $APP\n  pkill -9 -f $APP\ndone\nME=`whoami`\n\n# message queue\nIPCS_Q=`ipcs -q | egrep \"[0-9a-f]+[0-9]+\" | grep $ME | awk '{print $2}'`\nfor id in $IPCS_Q; do\n  ipcrm -q $id;\ndone\n\n# shared memory\nIPCS_Q=`ipcs -m | egrep \"[0-9a-f]+[0-9]+\" | grep $ME | awk '{print $2}'`\nfor id in $IPCS_Q; do\n  ipcrm -m $id;\ndone\n\n# semaphores\nIPCS_Q=`ipcs -s | egrep \"[0-9a-f]+[0-9]+\" | grep $ME | awk '{print $2}'`\nfor id in $IPCS_Q; do\n  ipcrm -s $id;\ndone\n",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/c\/etc\/ipc.c",
        {
          "type" : "TestResource",
          "content" : "#include <all.h>\n#include <sys\/types.h>\n#include <sys\/shm.h>\n#include <sys\/sem.h>\n#include <unistd.h>\n\n\/\/ This file is auto-generated.  Do not edit\n\nstatic inline void sem_op(int sid, short val) {\n    struct sembuf sem_op;\n    sem_op.sem_num = 0;\n    sem_op.sem_op = val;\n    sem_op.sem_flg = 0;\n    semop(sid, &sem_op, 1);\n}\n\nstatic inline void lock(int sid) {\n    sem_op(sid, -1);\n}\n\nstatic inline void unlock(int sid) {\n    sem_op(sid, 1);\n}\n\nstatic inline int create_sem(Z msgid) {\n    unsigned int permission = 0666;\n    unsigned int mask = IPC_CREAT;\n    int sem_set_id = semget((key_t) msgid, 1, mask | permission);\n\n    if (sem_set_id >= 0) {\n        union semun {\n            int val;\n            struct semid_ds *buf;\n            ushort *array;\n        } sem_val;\n        sem_val.val = 1;\n        semctl(sem_set_id, 0, SETVAL, sem_val);\n    }\n    return sem_set_id;\n}\n\nZ bit_codec_SharedMemory_create(STACK_FRAME Z id) {\n    unsigned int permission = 0666;\n    unsigned int mask = IPC_CREAT;\n\n    create_sem(id);\n\n    int shmid = shmget((key_t) id, sizeof(union Option_8E9F45), (int) (permission | mask));\n    void *p = shmat(shmid, (void *) 0, 0);\n    memset(p, 0, sizeof(union Option_8E9F45));\n    shmdt(p);\n\n    return (Z) shmid;\n}\n\nUnit bit_codec_SharedMemory_receive(STACK_FRAME Z port, MBox2_1CBFC4 out) {\n    int sid = semget((key_t) port, 1, 0666);\n\n    lock(sid);\n\n    int shmid = shmget((key_t) port, sizeof(union Option_8E9F45), 0666);\n\n    Option_8E9F45 p = (Option_8E9F45) shmat(shmid, (void *) 0, 0);\n\n    while (p->type != TSome_D29615) { \/\/ wait until there is a data\n        unlock(sid);\n        usleep((useconds_t) 10 * 1000);\n        lock(sid);\n    }\n\n    art_DataContent d = &p->Some_D29615.value;\n    Type_assign(&(out->value2), d, sizeOf((Type) d));\n    memset(p, 0, sizeof(union Option_8E9F45));\n    shmdt(p);\n\n    unlock(sid);\n}\n\nUnit bit_codec_SharedMemory_receiveAsync(STACK_FRAME Z port, MBox2_1029D1 out) {\n    int sid = semget((key_t) port, 1, 0666);\n\n    lock(sid);\n\n    int shmid = shmget((key_t) port, sizeof(union Option_8E9F45), 0666);\n\n    Option_8E9F45 p = (Option_8E9F45) shmat(shmid, (void *) 0, 0);\n\n    if (p->type == TSome_D29615) {\n        Type_assign(&(out->value2), p, sizeOf((Type) p));\n        memset(p, 0, sizeof(union Option_8E9F45));\n    } else {\n        out->value2.type = TNone_964667;\n    }\n\n    shmdt(p);\n\n    unlock(sid);\n}\n\nUnit bit_codec_SharedMemory_send(STACK_FRAME Z destid, Z port, art_DataContent d) {\n    int sid = semget((key_t) port, 1, 0666);\n\n    lock(sid);\n\n    int shmid = shmget((key_t) port, sizeof(union Option_8E9F45), 0666);\n\n    Option_8E9F45 p = (Option_8E9F45) shmat(shmid, (void *) 0, 0);\n\n    while (p->type == TSome_D29615) {\n        unlock(sid);\n        usleep((useconds_t) 10 * 1000);\n        lock(sid);\n    }\n\n    p->type = TSome_D29615;\n    Type_assign(&(p->Some_D29615.value), d, sizeOf((Type) d));\n\n    shmdt(p);\n\n    unlock(sid);\n}\n\nB bit_codec_SharedMemory_sendAsync(STACK_FRAME Z destid, Z port, art_DataContent d) {\n    int sid = semget((key_t) port, 1, 0666);\n\n    lock(sid);\n\n    int shmid = shmget((key_t) port, sizeof(union Option_8E9F45), 0666);\n\n    Option_8E9F45 p = (Option_8E9F45) shmat(shmid, (void *) 0, 0);\n    p->type = TSome_D29615;\n    Type_assign(&(p->Some_D29615.value), d, sizeOf((Type) d));\n\n    shmdt(p);\n\n    unlock(sid);\n    return T;\n}\n\nUnit bit_codec_SharedMemory_remove(STACK_FRAME Z id) {\n    semctl(semget((key_t) id, 1, 0666), 0, IPC_RMID);\n    shmctl(shmget((key_t) id, sizeof(union Option_8E9F45), 0666), IPC_RMID, NULL);\n}\n\nUnit bit_codec_Process_sleep(STACK_FRAME Z n) {\n    usleep((useconds_t) n * 1000);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/bin\/transpile.sh",
        {
          "type" : "TestResource",
          "content" : "#!\/usr\/bin\/env bash\n#\n# This file is autogenerated.  Do not edit\n#\nset -e\n\nif [ -z \"${SIREUM_HOME}\" ]; then\n  echo \"SIREUM_HOME not set. Refer to https:\/\/github.com\/sireum\/kekinian\/#installing\"\n  exit 1\nfi\n\nPATH_SEP=\":\"\nif [ -n \"$COMSPEC\" -a -x \"$COMSPEC\" ]; then\n  PATH_SEP=\";\"\nfi\n\nSCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nOUTPUT_DIR=\"${SCRIPT_HOME}\/..\/src\/c\/nix\"\n\n${SIREUM_HOME}\/bin\/sireum slang transpilers c \\\n  --sourcepath \"${SCRIPT_HOME}\/..\/src\/main\" \\\n  --output-dir \"${OUTPUT_DIR}\" \\\n  --name \"main\" \\\n  --apps \"bit_codec.Producer_proc_producer_App,bit_codec.Filter_proc_filter_App,bit_codec.Consumer_proc_consumer_App,bit_codec.Main\" \\\n  --fingerprint 3 \\\n  --bits 64 \\\n  --string-size 300 \\\n  --sequence-size 28 \\\n  --sequence \"IS[Z,art.Bridge]=3;MS[Z,Option[art.Bridge]]=3;IS[Z,art.UPort]=12;IS[Z,art.UConnection]=12;IS[Z,B]=288\" \\\n  --constants \"art.Art.maxComponents=3;art.Art.maxPorts=28\" \\\n  --forward \"art.ArtNative=bit_codec.ArtNix,bit_codec.Platform=bit_codec.PlatformNix\" \\\n  --stack-size \"131072\" \\\n  --stable-type-id \\\n  --exts \"${SCRIPT_HOME}\/..\/src\/c\/ext-c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc\" \\\n  --exclude-build \"bit_codec.Bit_Codec.Producer_proc_producer,bit_codec.Bit_Codec.Filter_proc_filter,bit_codec.Bit_Codec.Consumer_proc_consumer\"",
          "overwrite" : true,
          "makeExecutable" : true
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/DataContent.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait DataContent\n\n@datatype class Empty extends art.DataContent",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/ArtNative_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\n\nimport java.util.concurrent.CountDownLatch\nimport java.util.concurrent.atomic.AtomicBoolean\n\n\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtMessage {\n  val UNSET: Z = -1\n}\n\ncase class ArtMessage (data: DataContent,\n\n                       var srcPortId: Art.PortId = ArtMessage.UNSET,\n                       var dstPortId: Art.PortId = ArtMessage.UNSET,\n\n                       \/\/ when putValue was called by producer\n                       var putValueTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when sendOutput transferred message from out port var of producer \n                       var sendOutputTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when message arrived via transport layer\n                       var dstArrivalTimestamp: Z = ArtMessage.UNSET,\n\n                       \/\/ when receiveInput transferred message to in port vars of consumer\n                       var receiveInputTimestamp: Z = ArtMessage.UNSET\n                      )\n\nobject ArtNative_Ext {\n  val noTime: Art.Time = 0\n\n  val slowdown: Z = 1\n\n  val lastSporadic: MMap[Art.BridgeId, Art.Time] = concMap()\n  val eventPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val dataPortVariables: MMap[Art.PortId, ArtMessage] = concMap()\n  val receivedPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n  val sentPortValues: MMap[Art.PortId, ArtMessage] = concMap()\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val portIds = ISZ[Art.PortId](Art.bridge(bridgeId).ports.eventIns.elements.map(_.id).filter(eventPortVariables.get(_).nonEmpty): _*)\n    if (portIds.isEmpty) {\n      TimeTriggered()\n    } else {\n      val urgentFifo = ops.ISZOps(portIds.map(Art.port(_))).sortWith { \/\/ reverse sort\n        case (p1: UrgentPort[_], p2: UrgentPort[_]) =>\n          if(p1.urgency < p2.urgency) F\n          else if(p1.urgency > p2.urgency) T\n          else eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n        case (_: UrgentPort[_], _: Port[_]) => T \/\/ urgent ports take precedence\n        case (_: Port[_], _: UrgentPort[_]) => F \/\/ urgent ports take precedence\n        case (p1: Port[_], p2: Port[_]) =>\n          eventPortVariables(p1.id).dstArrivalTimestamp < eventPortVariables(p2.id).dstArrivalTimestamp\n      }.map(_.id)\n      EventTriggered(urgentFifo)\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (portId <- eventPortIds) {\n      receivedPortValues -= portId \/\/ remove stale events from previous dispatch\n      eventPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          eventPortVariables -= portId\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      dataPortVariables.get(portId) match {\n        case scala.Some(data) =>\n          receivedPortValues(portId) = data\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    sentPortValues(portId) = ArtMessage(data = data, srcPortId = portId, putValueTimestamp = Art.time())\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    val data = receivedPortValues.get(portId) match {\n      case scala.Some(v) => org.sireum.Some(v.data)\n      case _ => org.sireum.None[DataContent]()\n    }\n    return data\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      sentPortValues.get(srcPortId) match {\n        case scala.Some(msg) =>\n          \/\/ todo send on emission as well as receive\n          for(dstPortId <- Art.connections(srcPortId).elements) {\n\n            \/\/ simulate sending msg via transport middleware\n\n            val _msg = msg.copy(dstPortId = dstPortId, sendOutputTimestamp = Art.time())\n\n            Art.port(dstPortId).mode match {\n              case PortMode.DataIn | PortMode.DataOut =>\n                dataPortVariables(dstPortId) = _msg\n              case PortMode.EventIn | PortMode.EventOut =>\n                eventPortVariables(dstPortId) = _msg\n            }\n\n            _msg.dstArrivalTimestamp = Art.time()\n\n            ArtDebug_Ext.outputCallback(srcPortId, dstPortId, _msg.data, _msg.dstArrivalTimestamp)\n          }\n          sentPortValues -= srcPortId\n        case _ =>\n      }\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = log(\"info\", title, msg)\n\n  def logError(title: String, msg: String): Unit = log(\"error\", title, msg)\n\n  def logDebug(title: String, msg: String): Unit = log(\"debug\", title, msg)\n\n  def time(): Art.Time = toZ(System.currentTimeMillis())\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    val b = Art.bridge(bridgeId)\n    b.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        val ls = lastSporadic.getOrElse(bridgeId, noTime)\n        if (time() - ls < minRate) {\n          return F\n        } else {\n          return b.ports.eventIns.elements.exists(port => eventPortVariables.contains(port.id))\n        }\n    }\n  }\n\n  def run(): Unit = {\n    \/\/require(Art.bridges.elements.forall(_.nonEmpty))\n\n    ArtDebug_Ext.start()\n\n    val bridges = {\n      var r = Vector[Bridge]()\n      for (e <- Art.bridges.elements) e match {\n        case Some(b) => r :+= b\n        case _ =>\n      }\n      r\n    }\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n    }\n\n    val terminated = new AtomicBoolean()\n    val numTerminated = new CountDownLatch(bridges.size)\n\n    for (bridge <- bridges) {\n      val rate = bridge.dispatchProtocol match {\n        case DispatchPropertyProtocol.Periodic(period) => period\n        case DispatchPropertyProtocol.Sporadic(min) => min\n      }\n\n      new Thread(() => {\n        logInfo(Art.logTitle, s\"Thread for ${bridge.name} instantiated.\")\n        ArtNative_Ext.synchronized {\n          ArtNative_Ext.wait()\n        }\n        while (!terminated.get()) {\n          Thread.sleep((rate * slowdown).toMP.toLong)\n          if (shouldDispatch(bridge.id))\n            try {\n              bridge.synchronized {\n                bridge.entryPoints.compute()\n              }\n            }\n            catch {\n              case x : Throwable =>\n                x.printStackTrace()\n                terminated.set(true)\n            }\n        }\n        numTerminated.countDown()\n      }).start()\n    }\n\n    Thread.sleep(1000)\n\n    logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    ArtNative_Ext.synchronized {\n      ArtNative_Ext.notifyAll()\n    }\n\n    Console.in.readLine()\n    terminated.set(true)\n    numTerminated.await()\n    logInfo(Art.logTitle, s\"End execution...\")\n\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n    }\n\n    ArtTimer_Ext.finalise()\n    ArtDebug_Ext.stop()\n  }\n\n  def log(kind: String, title: String, msg: String): Unit = {\n    Console.out.println(s\"\"\"{ \"log\" : \"$kind\", \"title\" : ${escape(title)}, \"msg\" : ${escape(msg)}, \"time\" : \"${time()}\" }\"\"\")\n    Console.out.flush()\n  }\n\n  def escape(raw: String): String = {\n    import scala.reflect.runtime.universe._\n    Literal(Constant(raw.value)).toString\n  }\n\n  def toZ(value: Long): Z = Z(value)\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n\n\n\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges AND resets all inputs and outputs for all ports.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ note that all ports and bridges were deleted by Art's initTest\n\n    \/\/ delete ALL port values as well as lastSporadic tracker\n    lastSporadic.clear()\n    eventPortVariables.clear()\n    dataPortVariables.clear()\n    receivedPortValues.clear()\n    sentPortValues.clear()\n\n    \/\/ clear pending ArtTimer events (also done after a test completes)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n\n    bridge.entryPoints.initialise()\n    logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n  }\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.testCompute()\n  }\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.finalise()\n    logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n\n    \/\/ clear pending ArtTimer events (also done before a test begins)\n    ArtTimer_Ext.m.keys.foreach(ArtTimer_Ext.clearTimeout)\n  }\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ testing SEND_OUTPUT\n    \/\/ note: sendOutput is usually accessed via: Art.sendOutput -> ArtNative.sendOutput -> ArtNative_Ext.sendOutput\n    \/\/ NO OP\n  }\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = {\n    sentPortValues.clear()\n  }\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    val artMessage = ArtMessage(data = data, dstPortId = dstPortId, dstArrivalTimestamp = Art.time())\n    Art.port(dstPortId).mode match {\n      case PortMode.DataIn | PortMode.DataOut =>\n        dataPortVariables(dstPortId) = artMessage\n      case PortMode.EventIn | PortMode.EventOut =>\n        eventPortVariables(dstPortId) = artMessage\n    }\n  }\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    sentPortValues.get(portId) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/ArtDebug_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.Art.Time\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtDebug_Ext {\n  private val debugObjects: MMap[String, Any] = ArtNative_Ext.concMap()\n  private val listeners: MSet[ArtListener] = concSet()\n\n  protected[art] def start(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.start(time))\n  }\n\n  protected[art] def stop(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.stop(time))\n  }\n\n  protected[art] def outputCallback(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Time): Unit = {\n    listeners.foreach((listener: ArtListener) => listener.output(src, dst, data, time))\n  }\n\n  def setDebugObject[T](key: String, o: T): Unit = {\n    ArtNative.logDebug(Art.logTitle, s\"Set debug object for $key\")\n    debugObjects(key) = o\n  }\n\n  def getDebugObject[T](key: String): Option[T] = {\n    debugObjects.get(key) match {\n      case scala.Some(o) => Some(o.asInstanceOf[T])\n      case _ => None[T]()\n    }\n  }\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = {\n    assert(z\"0\" <= bridgeId && bridgeId < Art.maxComponents && Art.bridges(bridgeId).nonEmpty)\n\n    val bridge = Art.bridges(bridgeId).get\n    assert(bridge.ports.all.elements.map(_.id).contains(port))\n\n    if(bridge.ports.dataOuts.elements.map(_.id).contains(port) ||\n      bridge.ports.eventOuts.elements.map(_.id).contains(port)) {\n\n      ArtNative.logDebug(Art.logTitle, s\"Injecting from port ${Art.ports(port).get.name}\")\n\n      ArtNative.putValue(port, data)\n      ArtNative.sendOutput(bridge.ports.eventOuts.map(_.id), bridge.ports.dataOuts.map(_.id))\n    } else {\n      ArtNative.logDebug(Art.logTitle, s\"Injecting to port ${Art.ports(port).get.name}\")\n\n      if(bridge.ports.dataIns.elements.map(_.id).contains(port)) {\n        ArtNative_Ext.dataPortVariables(port) = ArtMessage(data)\n      } else {\n        ArtNative_Ext.eventPortVariables(port) = ArtMessage(data)\n      }\n    }\n  }\n\n  def registerListener(listener: ArtListener): Unit = {\n    listeners.add(listener)\n  }\n\n  def concSet[K](): MSet[K] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    val m: java.util.Set[K] = java.util.concurrent.ConcurrentHashMap.newKeySet()\n    m.asScala\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/ArtDebug.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtDebug {\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = $\n\n  def registerListener(listener: ArtListener): Unit = $\n\n  def setDebugObject[T](key: String, o: T): Unit = $\n\n  def getDebugObject[T](key: String): Option[T] = $\n}\n\n@msig trait ArtListener {\n\n  \/\/ lifecycle information\n  def start(time: Art.Time): Unit\n  def stop(time: Art.Time): Unit\n\n  \/\/ communication information\n  def output(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Art.Time): Unit\n\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/ArtTimer.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.Art.BridgeId\n\n@ext object ArtTimer {\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = $\n\n  def clearTimeout(eventId: String): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/ArtNative.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtNative {\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = $\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = $\n\n  def getValue(portId: Art.PortId): Option[DataContent] = $\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def logInfo(title: String, msg: String): Unit = $\n\n  def logError(title: String, msg: String): Unit = $\n\n  def logDebug(title: String, msg: String): Unit = $\n\n  def run(): Unit = $\n\n  def time(): Art.Time = $\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method before each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def initTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Precondition: executeInit() has been called prior.\n   *\n   * Executes the testCompute() method one time for each registered bridge.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def executeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   * (note: BridgeTestSuite exists only in the test scope)\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = $\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = $\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = $\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = $\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/Art.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\nobject Art {\n  type PortId = Z\n  type BridgeId = Z\n  type Time = Z\n\n  val z16max: PortId = org.sireum.conversions.Z16.toZ(Z16.Max) \/\/ 32,767\n\n  val maxComponents: BridgeId = 3\n  val maxPorts: PortId = 28\n\n  val logTitle: String = \"Art\"\n  val bridges: MS[BridgeId, Option[Bridge]] = MS.create[BridgeId, Option[Bridge]](maxComponents, None[Bridge]())\n  val connections: MS[PortId, ISZ[PortId]] = MS.create[PortId, ISZ[PortId]](maxPorts, ISZ())\n  val ports: MS[PortId, Option[UPort]] = MS.create[PortId, Option[UPort]](maxPorts, None[UPort]())\n\n  def bridge(bridgeId: BridgeId): Bridge = {\n    val Some(r) = bridges(bridgeId)\n    return r\n  }\n\n  def port(p: PortId) : UPort = {\n    val Some(r) = ports(p)\n    return r\n  }\n\n  def register(bridge: Bridge): Unit = {\n    bridges(bridge.id) = Some(bridge)\n    bridge.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (periodic: $period)\")\n      case DispatchPropertyProtocol.Sporadic(min) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (sporadic: $min)\")\n    }\n    for (port <- bridge.ports.all) {\n      ports(port.id) = Some(port)\n      port.mode match {\n        case PortMode.DataIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data in)\")\n        case PortMode.DataOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data out)\")\n        case PortMode.EventIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event in)\")\n        case PortMode.EventOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event out)\")\n      }\n    }\n  }\n\n  \/\/ can't find definition in the standard ??\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = { \/\/ DISPATCH_STATUS\n    return ArtNative.dispatchStatus(bridgeId)\n  }\n\n  def receiveInput(eventPortIds: ISZ[PortId], dataPortIds: ISZ[PortId]): Unit = { \/\/ RECEIVE_INPUT\n    ArtNative.receiveInput(eventPortIds, dataPortIds)\n  }\n\n  def putValue(portId: PortId, data: DataContent): Unit = { \/\/ PUT_VALUE\n    ArtNative.putValue(portId, data)\n  }\n\n  def getValue(portId: PortId): Option[DataContent] = { \/\/ GET_VALUE\n    return ArtNative.getValue(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    ArtNative.sendOutput(eventPortIds, dataPortIds)\n  }\n\n  def logInfo(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logInfo(bridge(bridgeId).name, msg)\n  }\n\n  def logError(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logError(bridge(bridgeId).name, msg)\n  }\n\n  def logDebug(bridgeId: Art.BridgeId, msg: String): Unit = {\n    ArtNative.logDebug(bridge(bridgeId).name, msg)\n  }\n\n  def connect(from: UPort, to: UPort): Unit = {\n    connections(from.id) = connections(from.id) :+ to.id\n    ArtNative.logInfo(logTitle, s\"Connected ports: ${from.name} -> ${to.name}\")\n  }\n\n  def run(system: ArchitectureDescription): Unit = {\n\n    for (component <- system.components) {\n      register(component)\n    }\n\n    for (connection <- system.connections) {\n      connect(connection.from, connection.to)\n    }\n\n    ArtNative.run()\n  }\n\n  def time(): Time = {\n    return ArtNative.time()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Clears any existing ports and bridges, then sets up ports\/bridges for the next test.\n   *\n   * Automatically called by BridgeTestSuite before each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = None()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n\n    \/\/ register bridge passed to this method\n    register(bridge)\n\n    \/\/ let ArtNative reset itself as well\n    ArtNative.initTest(bridge)\n  }\n\n  def executeTest(bridge: Bridge): Unit = {\n    ArtNative.executeTest(bridge)\n  }\n\n  def finalizeTest(bridge: Bridge): Unit = {\n    ArtNative.finalizeTest(bridge)\n  }\n\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    ArtNative.releaseOutput(eventPortIds, dataPortIds)\n  }\n\n  def manuallyClearOutput(): Unit = {\n    ArtNative.manuallyClearOutput()\n  }\n\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    ArtNative.insertInPortValue(dstPortId, data)\n  }\n\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    ArtNative.observeOutPortValue(portId)\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/ArtTimer_Ext.scala",
        {
          "type" : "TestResource",
          "content" : "package art\n\nimport org.sireum.{B, F, ISZ, String, T}\nimport art.Art.{BridgeId, Time}\n\nimport scala.collection.mutable.{Map => MMap}\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.util.concurrent.Executors\nimport java.util.concurrent.TimeUnit\n\nobject ArtTimer_Ext {\n\n  val m: MMap[String, AtomicBoolean] = ArtNative_Ext.concMap()\n  val executor = Executors.newSingleThreadScheduledExecutor()\n\n  def finalise(): Unit = {\n    executor.shutdownNow()\n    ArtNative.logInfo(Art.logTitle, \"Finalized ArtTimer\")\n  }\n\n  def clearTimeout(eventId: String): Unit = {\n    m.get(eventId) match {\n      case Some(b) =>\n        b.set(false)\n        m.remove(eventId)\n        ArtNative.logInfo(Art.logTitle, s\"timeout cleared for $eventId\")\n      case _ =>\n    }\n  }\n\n  def setTimeout(bridgeId: BridgeId, eventId: String, wait: Art.Time, autoClear: B, callback: () => Unit): Unit = {\n    if(m.get(eventId).nonEmpty) {\n      art.Art.logError(bridgeId, s\"callback already set for $eventId\")\n      return\n    }\n\n    if(wait < 0) {\n      art.Art.logError(bridgeId, s\"Invalid wait time: ${wait}.  Value must be non-negative.\")\n      return\n    }\n\n    var b = new AtomicBoolean(true)\n\n    val bridge = Art.bridge(bridgeId)\n    val eventOuts = bridge.ports.eventOuts.map(_.id)\n    val dataOuts = bridge.ports.dataOuts.map(_.id)\n\n    val task = new Runnable {\n      override def run(): Unit = {\n        if (b.get()) {\n          bridge.synchronized {\n            callback()\n            Art.sendOutput(eventOuts, dataOuts)\n            if(autoClear) {\n              clearTimeout(eventId)\n            }\n          }\n        }\n      }\n    }\n\n    m.put(eventId, b)\n\n    val adjusted = wait.toMP.toLong * ArtNative_Ext.slowdown.toMP.toLong\n    executor.schedule(task, adjusted, TimeUnit.MILLISECONDS)\n\n    art.Art.logInfo(bridgeId, s\"callback set for $eventId\")\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/src\/main\/art\/ArchitectureDescription.scala",
        {
          "type" : "TestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n\n@datatype class ArchitectureDescription(components: ISZ[Bridge],\n                                        connections: ISZ[UConnection]) {\n  @spec val allPorts: ISZ[UPort] = $\n\n  @spec def allPortsSpec(i: Z): ISZ[UPort] = $\n  \/*\n    l\"\"\"\n    = base:  ISZ[UPort](), if i == 0\n    = rec:   components(i).ports.all ++ allPorts(i - 1), if 0 < i \u2227 i < components.size\n  \"\"\"\n\n  l\"\"\" invariant\n\n         AllPorts:\n           allPorts \u2261 allPortsSpec(components.size - 1)\n\n         ComponentIdUnique:\n           \u2200i: [0, components.size)\n             \u2200j: [0, components.size)\n               i \u2260 j \u2192 components(i).id \u2260 components(j).id\n\n         PortIdUnique:\n           \u2200i: [0, allPorts.size)\n             \u2200j: [0, allPorts.size)\n               i \u2260 j \u2192 allPorts(i).id \u2260 allPorts(j).id\n   \"\"\"\n  *\/\n}\n\n@datatype trait UConnection {\n  \/*\n  l\"\"\" invariant\n         FromPortOut:   from.mode \u2261 PortMode.DataOut \u2228 from.mode \u2261 PortMode.EventOut\n         DataPort:    (from.mode \u2261 PortMode.DataOut) \u2261 (to.mode \u2261 PortMode.DataIn)\n         EventPort:  (from.mode \u2261 PortMode.EventOut) \u2261 (to.mode \u2261 PortMode.EventIn)  \"\"\"\n  *\/\n\n  def from: UPort\n\n  def to: UPort\n}\n\n@datatype class Connection(val from: UPort, val to: UPort)\n  extends UConnection\n\n\n@enum object PortMode {\n  'DataIn\n  'DataOut\n  'EventIn\n  'EventOut\n}\n\n@datatype trait UPort {\n  def id: Art.PortId\n\n  def name: String\n\n  def mode: PortMode.Type\n}\n\n@datatype class Port[T](val id: Art.PortId,\n                        val name: String,\n                        val mode: PortMode.Type)\n  extends UPort\n\n@datatype class UrgentPort[T](val id: Art.PortId,\n                              val name: String,\n                              val mode: PortMode.Type,\n                              val urgency: Z)\n  extends UPort\n\n@sig trait Bridge {\n  def id: Art.BridgeId\n\n  def name: String\n\n  def ports: Bridge.Ports\n\n  def entryPoints: Bridge.EntryPoints\n\n  def dispatchProtocol: DispatchPropertyProtocol\n}\n\n\nobject Bridge {\n\n  \/\/ initialise()  ( compute() | activate() deactivate() | recover() )* finalise()\n  @sig trait EntryPoints {\n\n    def initialise(): Unit\n\n    def activate(): Unit\n\n    def deactivate(): Unit\n\n    def compute(): Unit\n\n    def recover(): Unit\n\n    def finalise(): Unit\n\n    def testCompute(): Unit = { println(\"Default testCompute\") }\n  }\n\n  @datatype class Ports(all: ISZ[UPort],\n                        dataIns: ISZ[UPort],\n                        dataOuts: ISZ[UPort],\n                        eventIns: ISZ[UPort],\n                        eventOuts: ISZ[UPort])\n\n}\n\n\n@datatype trait DispatchPropertyProtocol\n\nobject DispatchPropertyProtocol {\n\n  @datatype class Periodic(period: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Aperiodic() extends DispatchPropertyProtocol\n\n  @datatype class Sporadic(min: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Timed() extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Hybrid() extends DispatchPropertyProtocol\n}\n\n@datatype trait DispatchStatus\n\n@datatype class TimeTriggered() extends DispatchStatus\n\n@datatype class EventTriggered(portIds: ISZ[Art.PortId]) extends DispatchStatus",
          "overwrite" : true,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/build.sc",
        {
          "type" : "TestResource",
          "content" : "import mill._\nimport scalalib._\nimport ammonite.ops._\n\n\/\/ Example mill build -- the contents of this file will not be overwritten.\n\/\/\n\/\/ mill can be obtained following instructions at https:\/\/github.com\/sireum\/kekinian#slang-app-example-mill-project\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   $SIREUM_HOME\/bin\/mill bit_codec.run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   $SIREUM_HOME\/bin\/mill bit_codec.tests\n\/\/\n\/\/ Sireum IVE:\n\/\/   First cd to the directory containing this file and execute the following:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/sireum tools ivegen -f -m mill -n bit_codec--Linux-excludesImpl ..\/\n\/\/\n\/\/   Then in IVE select 'File > Open ...' and navigate to the directory\n\/\/   containing this file then click 'OK'.  To have the codebase and its\n\/\/   test suites recompiled upon changes, run:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/mill -w bit_codec.tests.compile\n\/\/\n\/\/ Visual Studio Code:\n\/\/   Follow Sireum Kekinian's instructions for setting up a development\n\/\/   environment using Scala Metals: https:\/\/github.com\/sireum\/kekinian#scala-metals\n\/\/   Then open the folder containing this file in VS Code and import the\n\/\/   mill build when asked.\n\n\nobject `bit_codec` extends slangEmbeddedProject\n\ntrait SlangEmbeddedModule extends ScalaModule {\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n  \/\/ to get the most recent versions of the following dependencies\n\n  \/\/ versions.properties key: org.scala-lang%scala-library%\n  val scalaVer = \"2.13.5\"\n\n  \/\/ versions.properties key: org.scalatest%%scalatest%%\n  val scalaTestVersion = \"3.2.8\"\n\n  \/\/ versions.properties key: org.sireum%%scalac-plugin%\n  \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20210430.0cf092f\n  val sireumScalacVersion = \"4.20210430.0cf092f\"\n\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n  \/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/4.20210427.9cd2a8a\n  val kekinianVersion = \"4.20210427.9cd2a8a\"\n\n\n  val inspectorVersion = \"0.6-SNAPSHOT\"\n\n  val formsRtVersion = \"7.0.3\"\n\n\n  def scalaVersion = scalaVer\n\n  override def javacOptions = T { Seq(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"utf8\") }\n\n  override def scalacOptions = T { Seq(\n    \"-target:jvm-1.8\",\n    \"-deprecation\",\n    \"-Yrangepos\",\n    \"-Ydelambdafy:method\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Xfatal-warnings\",\n    \"-language:postfixOps\"\n  ) }\n\n  override def ivyDeps = Agg(\n    ivy\"org.sireum.kekinian::library::${kekinianVersion}\",\n\n    \/\/ Jetbrains UI Designer\n    ivy\"com.intellij:forms_rt:${formsRtVersion}\"\n  )\n\n  override def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin::${sireumScalacVersion}\")\n\n  override def repositories = super.repositories :+ coursier.Repositories.jitpack\n\n  override def mainClass = T { Some(\"bit_codec.Demo\") }\n\n  implicit def osPath2PathRef(p: os.Path): PathRef = PathRef(p)\n}\n\ntrait slangEmbeddedProject extends SlangEmbeddedModule {\n\n  def contributedSources: Seq[PathRef] = Seq(\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"architecture\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"art\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"bridge\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"component\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"data\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"nix\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"seL4Nix\"\n  )\n\n  override def sources = T.sources(contributedSources)\n\n  object tests extends Tests {\n\n    final override def millSourcePath = super.millSourcePath \/ os.up \/ os.up \/ \"src\" \/ \"test\"\n\n    override def sources = T.sources( millSourcePath \/ \"bridge\",\n                                      millSourcePath \/ \"util\" )\n\n    override def ivyDeps = Agg(ivy\"org.scalatest::scalatest::${scalaTestVersion}\")\n\n    override def testFrameworks = T { Seq(\"org.scalatest.tools.Framework\") }\n  }\n}\n\ntrait slangEmbeddedInspectorProject extends slangEmbeddedProject {\n\n  override def mainClass = T { Some(\"bit_codec.InspectorDemo\") }\n\n  override def contributedSources =\n    super.contributedSources :+ millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"inspector\"\n\n  \/\/ FIXME: 2021.01.04 - the following doesn't work due to javafx\/mill resolution issue\n  \/\/        -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767\n  \/\/ override def ivyDeps = Agg(\n  \/\/   ivy\"org.sireum::inspector-capabilities::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-gui::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-services-jvm::${inspectorVersion}\"\n\n  \/\/ workaround to #767 -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767#issuecomment-652799588\n  override def unmanagedClasspath = T {\n    import coursier._\n\n    val files = Fetch().addDependencies(\n      dep\"org.sireum:inspector-capabilities:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-gui:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-services-jvm:0.6-SNAPSHOT\"\n    ).addRepositories(\n      Repositories.sonatype(\"releases\"),\n      Repositories.jitpack\n    ).run()\n    val pathRefs = files.map(f => PathRef(Path(f)))\n    Agg(pathRefs : _*)\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/build.sbt",
        {
          "type" : "TestResource",
          "content" : "\/\/ Example sbt build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ sbt can be obtained from https:\/\/www.scala-sbt.org\/download.html\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   sbt run\n\/\/\n\/\/ To run the example unit tests from the command line:\n\/\/   sbt test\n\/\/\n\/\/ To build a runnable\/executable jar:\n\/\/   sbt assembly\n\/\/\n\/\/ To skip running the unit tests while building the executable jar:\n\/\/   sbt 'set test in assembly := {}' assembly\n\/\/ on Linux\/Mac, or\n\/\/   sbt \"set test in assembly := {}\" assembly\n\/\/ on Windows\n\/\/\n\/\/ Sireum IVE:\n\/\/   In IVE select 'File > Open ...' and navigate to the directory containing\n\/\/   this file then click 'OK'.  To install Sireum IVE see https:\/\/github.com\/sireum\/kekinian#installing\n\/\/\n\/\/   To run the demo from within Sireum IVE:\n\/\/     Right click src\/main\/architecture\/bit_codec\/Demo.scala and choose \"Run 'Demo'\"\n\/\/\n\/\/   To run the unit test cases from within Sireum IVE:\n\/\/     Right click the src\/test\/bridge directory and choose \"Run ScalaTests in bridge\"\n\/\/\n\/\/   NOTE: A ClassNotFoundException may be raised the first time you try to\n\/\/         run the demo or unit tests.  If this occurs simply delete the directory\n\/\/         named 'target' and retry\n\n\nlazy val Bit_Codec_Sys_Impl_Instance = slangEmbeddedProject(\"Bit_Codec_Sys_Impl_Instance\", \".\")\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n\/\/ to get the most recent versions of the following dependencies\n\n\/\/ versions.properties key: org.scala-lang%scala-library%\nval scalaVer = \"2.13.5\"\n\n\/\/ versions.properties key: org.scalatest%%scalatest%%\nval scalaTestVersion = \"3.2.8\"\n\n\/\/ versions.properties key: org.sireum%%scalac-plugin%\n\/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20210430.0cf092f\nval sireumScalacVersion = \"4.20210430.0cf092f\"\n\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n\/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/4.20210427.9cd2a8a\nval kekinianVersion = \"4.20210427.9cd2a8a\"\n\n\nval inspectorVersion = \"0.6-SNAPSHOT\"\n\nval formsRtVersion = \"7.0.3\"\n\n\n\nval commonSettings = Seq(\n  organization := \"org.sireum\",\n  incOptions := incOptions.value.withLogRecompileOnMacro(false),\n  scalaVersion := scalaVer,\n  scalacOptions := Seq(\"-target:jvm-1.8\", \"-deprecation\",\n    \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-Xfatal-warnings\"),\n  Test \/ parallelExecution := true,\n  resolvers ++= Seq(Resolver.sonatypeRepo(\"public\"), \"jitpack\" at \"https:\/\/jitpack.io\"),\n  addCompilerPlugin(\"org.sireum\" %% \"scalac-plugin\" % sireumScalacVersion),\n  libraryDependencies ++= Seq(\n    \"org.sireum.kekinian\" %% \"library\" % kekinianVersion withSources() withJavadoc()\n  )\n)\n\nimport sbtassembly.AssemblyPlugin.defaultUniversalScript\nval slangEmbeddedSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/art\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/architecture\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/bridge\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/component\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/data\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/seL4Nix\",\n\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/bridge\",\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/util\",\n\n  libraryDependencies += \"org.scalatest\" %% \"scalatest\" % scalaTestVersion % \"test\",\n\n  \/\/ Jetbrains UI Designer\n  libraryDependencies += \"com.intellij\" % \"forms_rt\" % formsRtVersion,\n\n  mainClass in (Compile, run) := Some(\"bit_codec.Demo\"),\n\n  mainClass in assembly := Some(\"bit_codec.Demo\"),\n  assemblyJarName in assembly := \"Bit_Codec_Sys_Impl_Instance.jar\",\n  assemblyOption in assembly := (assemblyOption in assembly).value.copy(prependShellScript = Some(defaultUniversalScript(shebang = false))),\n\n  assemblyMergeStrategy in assembly := {\n    case PathList(\"META-INF\", xs @ _*) => MergeStrategy.discard\n    case x => MergeStrategy.first\n  }\n)\n\nval slangEmbeddedInspectorSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/inspector\",\n\n  libraryDependencies += \"org.sireum\" % \"inspector-capabilities\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-gui\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-services-jvm\" % inspectorVersion withSources(),\n\n  mainClass in (Compile, run) := Some(\"bit_codec.InspectorDemo\"),\n)\n\ndef slangEmbeddedProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings)\n\ndef slangEmbeddedInspectorProject(projId: String, projectDirectory: String) = {\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings ++ slangEmbeddedInspectorSettings)\n}\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/project\/build.properties",
        {
          "type" : "TestResource",
          "content" : "sbt.version=1.3.3\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ],
      [
        "bit_codec--Linux-excludesImpl\/project\/plugins.sbt",
        {
          "type" : "TestResource",
          "content" : "addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.15.0\")\n",
          "overwrite" : false,
          "makeExecutable" : false
        }
      ]
    ]
  }
}
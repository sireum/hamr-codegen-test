package Compute_Entrypoint
public
	with Data_Model;
	with Base_Types;
	
  data Temperature
    properties
      -- Indicate that the temperature info will be a struct (record)
      -- For structs, use of the type must refer to the data component implementation (Temperature.i),
      --  which defines the fields and associated types of the struct.
      Data_Model::Data_Representation => Struct;
  end Temperature;

  data implementation Temperature.i
    subcomponents
      -- temperature message contains degrees, which is represented using an AADL Base Type
      -- defined in the AADL Data Modeling annex.
      degrees: data Base_Types::Float_64;

    annex GUMBO
    {**
      -- data invariant
      --  data invariants are assumed whenever value of the datatype is consumed
      --                  and must be proved whenever a value of the data type is constructed
      invariants
        inv i1 "Temperature Data Invariant":
          degrees >= (-459.67); 
    **};
  end Temperature.i;


 data SetPoint
        -- Indicate that the set point info will be a struct (record)
    -- For structs, use of the type must refer to the data component implementation (SetPoint.i),
    --  which defines the fields and associated types of the struct.
    properties
      Data_Model::Data_Representation => Struct;
  end SetPoint;

  data implementation SetPoint.i
    subcomponents
      low: data Temperature.i;
      high: data Temperature.i;
      annex GUMBO {**       
      invariants
        inv i1 "SetPoint Data Invariant":
           low.degrees >= 70.0  &&
           high.degrees <= 100.0  &&
           low.degrees <= high.degrees ;
      **};
  end SetPoint.i;
  
  system s
  	
  end s;
  
  system implementation s.impl
  	subcomponents
  		p: process p.impl;
  end s.impl;
  
  process p  	
  end p;
  
  process implementation p.impl
  	subcomponents
  		tempControl: thread TempControl;
  		tempSensor: thread TempSensor;
  	connections
  		c1: port tempSensor.currentTemp -> tempControl.currentTemp;
  end p.impl;
  
  thread TempControl
  	features
  		setPoint: in event data port SetPoint.i;
  		currentTemp: in event data port Temperature.i;
  	properties
  		Dispatch_Protocol => Sporadic;
  	annex
  		gumbo {**
			state
				currentSetPoint: SetPoint.i;
  			integration
  				assume i1 "currentTemp Range":
  					 currentTemp.degrees >= (-70.0)  &&  currentTemp.degrees <= 180.0 ;
  				assume a1 "setPoint Range":
  					 setPoint.low.degrees >= 40.0  &&  setPoint.high.degrees <= 110.0 ;
 			initialize
				modifies currentSetPoint;
				guarantee g1 "defaultSetPoint":
					 currentSetPoint.low.degrees == 70.0  &&  currentSetPoint.high.degrees == 80.0 ;
				
				guarantee litInter "Make sure all lit interpolations are supported (i.e. they are imported in the generated code)
				                   |Do half here and the rest in the compute entrypoint" :
				   z"1" > z"0" && z8"8" > z8"7" && z16"16" > z16"15" && z32"32" > z32"31" && z64"64" > z64"63" &&
           
		           n"1" > n"0" && n8"8" > n8"7" && n16"16" > n16"15" && n32"32" > n32"31" && n64"64" > n64"63" &&
		        
		           s8"9" > s8"8"  &&  s16"16" > s16"15"  &&  s32"32" > s32"31"  &&  s64"64" > s64"63"  && 
		           
		           u1"1" > u1"0" && u2"1" > u2"0" && u3"1" > u3"0" && u4"1" > u4"0" && u5"1" > u5"0" && u6"1" > u6"0" && 
		           u7"1" > u7"0" && u8"1" > u8"0" && u9"1" > u9"0" && u10"1" > u10"0" && u11"1" > u11"0" && u12"1" > u12"0" && 
		           u13"1" > u13"0" && u14"1" > u14"0" && u15"1" > u15"0" && u16"1" > u16"0" && u17"1" > u17"0" && u18"1" > u18"0" && 
		           u19"1" > u19"0" && u20"1" > u20"0" && u21"1" > u21"0" && u22"1" > u22"0" && u23"1" > u23"0" && u24"1" > u24"0";
			compute
				guarantee litInter "The rest ...":
				   u25"1" > u25"0" && u26"1" > u26"0" && u27"1" > u27"0" && u28"1" > u28"0" && u29"1" > u29"0" && u30"1" > u30"0" && 
		           u31"1" > u31"0" && u32"1" > u32"0" && u33"1" > u33"0" && u34"1" > u34"0" && u35"1" > u35"0" && u36"1" > u36"0" && 
		           u37"1" > u37"0" && u38"1" > u38"0" && u39"1" > u39"0" && u40"1" > u40"0" && u41"1" > u41"0" && u42"1" > u42"0" && 
		           u43"1" > u43"0" && u44"1" > u44"0" && u45"1" > u45"0" && u46"1" > u46"0" && u47"1" > u47"0" && u48"1" > u48"0" && 
		           u49"1" > u49"0" && u50"1" > u50"0" && u51"1" > u51"0" && u52"1" > u52"0" && u53"1" > u53"0" && u54"1" > u54"0" && 
		           u55"1" > u55"0" && u56"1" > u56"0" && u57"1" > u57"0" && u58"1" > u58"0" && u59"1" > u59"0" && u60"1" > u60"0" && 
		           u61"1" > u61"0" && u62"1" > u62"0" && u63"1" > u63"0" && u64"1" > u64"0" &&
		                       
		            
		           f32"1.0" > f32"0.0"  &&  f64"1.0" > f64"0.0"  &&
		           
		           r"1.0" > r"0.0"  &&
		
		           "bbbbb" != "aaaaa"  &&
		           
		           (-f32"1.0") == f32"-1.0";
  		**}; 			
  end TempControl;
  
  thread tempSensor
  	features
  		currentTemp: out event data port Temperature.i;
  	properties
  		Dispatch_Protocol => Periodic;
  		Timing_Properties::Period => 1000ms;
	annex
  		gumbo {**
  			integration
  				guarantee g1 "currentTemp Range":
  					 currentTemp.degrees >= (-70.0)  &&  currentTemp.degrees <= 180.0 ;
  					
				--assume "INVALID: must use guarantee for outgoing ports":
  				--	currentTemp.degrees >= -70.0 and currentTemp.degrees <= 180.0;  					
  		**};  		
  end tempSensor;
  
end Compute_Entrypoint;
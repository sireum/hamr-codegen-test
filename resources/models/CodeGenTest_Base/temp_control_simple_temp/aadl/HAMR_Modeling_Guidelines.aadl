package HAMR_Modeling_Guidelines

public
  
  annex resolute {**

    -- Level 1 compliance indicates the end of development phase in which the architecture of the software of the system is built out.
    -- Thus, compliance rules focus on the software elements of AADL, not hardware elements or association between hardware and software.
    -- Level 1 compliance is sufficient for applying Awas, but not for applying HAMR code generation.
    -- In particular, the rules below allow ports to be untyped (warning issued) and ports to be unconnected (warning issued).
    -- TODO: Determine if we want to allow thread components without dispatch protocols.
    -- TODO: We currently allow multiple threads per process (which is fine for HAMR in general and JVM platform, but not for seL4 platform).      
    ruleset HAMR_Level_1 {
      
      info (print("Linting HAMR_Level_1 ruleset"))
      
      -- Only one processor-bound process can contain thread or thread-group subcomponents
      -- error (one_process())
      
      -- AADL modes are not currently supported by HAMR tools
      warning (modes_ignored())

   
      -- AADL flows are not currently supported by CASE tools
      -- warning (flows_ignored())
          
      -- === Threading Structure ===
                
      -- Threads should have the Dispatch_Protocol property specified
      error (dispatch_protocol_specified())
      
      -- Threads can only specify a dispatch_protocol property of periodic or sporadic
      error (valid_dispatch_protocol())
      
      -- === Ports and Connections ===

      -- Data types should be specified on ports, but can be omitted in Level 1 (warning instead of error)
      warning (data_type_specified())
      -- Subcomponent types should be specified, but can be omitted in Level 1 (warning instead of error)
      warning (subcomponent_type_specified())
      -- All ports should be connected
      warning (ports_connected())
      -- Ports must be in or out, but not both
      error (unidirectional_ports())
      -- Connections between thread components must be uni-directional
      error (unidirectional_connections())      
      -- Multiple incoming connections to a single port are not allowed
      error (no_fan_in())
      
      -- === Data Type Well-formedness ===
      
      -- Integer types must be bounded (cannot use Base_Types::Integer)
      error (bounded_integers())
      -- Float types must be bounded (cannot use Base_Types::Float)
      error (bounded_floats())
      -- Array dimensions must be specified
      error (array_dimension())
      -- Arrays can only have one dimension
      error (one_dimensional_arrays())
      -- The array base type should be specified
      error (array_base_type())
      -- Enumeration data components must be non-empty
      error (non_empty_enums())
      
      -- === Other Strutural Properties ===
      
      -- Components bound to a virtual processor may only communicate with components bound to other processors via event data ports
      -- error (event_data_ports_on_vm())
      
      -- A processor's subcomponents may be ignored
      warning (no_processor_subcomponents())
      
      -- Thread implementations must indicate location of source code or binary
      --error (threads_have_source())
      
      -- All processes must be bound to a processor
      -- error (processes_bound())
    }

  **};
  
private
  
  
  annex resolute {**

    one_process() <=
      ** "Only one processor-bound process can contain thread or thread-group subcomponents" **
      let procs : {process} = {p for (p : process) | (exists(pr : processor) . is_bound_to(p, pr)) and size(subcomponents(p)) > 0};
      lint_check_set(procs, size(procs) <= 1)
      
    dispatch_protocol_specified() <=
      ** "Threads should have the Dispatch_Protocol property specified" **
      forall (t : thread) . lint_check(t, has_property(t, Thread_Properties::Dispatch_Protocol))
      
    valid_dispatch_protocol() <=
      ** "Threads can only specify a dispatch_protocol property of periodic or sporadic" **
      forall (t : thread) . lint_check(t, has_property(t, Thread_Properties::Dispatch_Protocol) => 
        (property(t, Thread_Properties::Dispatch_Protocol) = "Sporadic" or property(t, Thread_Properties::Dispatch_Protocol) = "Periodic"))
      
    bounded_integers() <=
      ** "Integer types must be bounded (cannot use Base_Types::Integer)" **
      forall (a : aadl) . lint_check(a, has_type(a) => not contains_unbounded_nums(type(a), Base_Types::Integer))
      
    bounded_floats() <=
      ** "Float types must be bounded (cannot use Base_Types::Float)" **
      forall (a : aadl) . lint_check(a, has_type(a) => not contains_unbounded_nums(type(a), Base_Types::Float))
      
    contains_unbounded_nums(a : aadl, num_type : aadl) : bool = 
      let all_data_types : {component} = get_all_data_types(subcomponents(a));
      a = num_type or
      exists (c : all_data_types) . (has_type(c) and (type(c) = num_type))
      
    get_all_data_types(curr : {component}) : {component} = 
      let next : {component} = union(curr, {s for (c : curr) (s : subcomponents(c))});
      if next = curr then 
        curr
      else
        get_all_data_types(next)
      
    data_type_specified() <=
      ** "Data types should be specified on process, thread, and thread group ports" **
      forall (f : feature) . lint_check(f, (is_data_port(f) and (is_process(containing_component(f)) or is_thread(containing_component(f)) or is_thread_group(containing_component(f)))) => has_type(f))
      
    subcomponent_type_specified() <=
      ** "Subcomponent types should be specified" **
      forall (c : component) . forall (s : subcomponents(c)) . lint_check(s, has_type(s))
      
    array_dimension() <=
      ** "Array dimensions must be specified" **
      forall (d : data) . lint_check(d, (has_property(d, Data_Model::Data_Representation) and property(d, Data_Model::Data_Representation) = "Array") => has_property(d, Data_Model::Dimension))
      
    one_dimensional_arrays() <=
      ** "Arrays can only have one dimension" **
      forall (d : data) . lint_check(d, (has_property(d, Data_Model::Data_Representation) and property(d, Data_Model::Data_Representation) = "Array") => (has_property(d, Data_Model::Dimension) and size(property(d, Data_Model::Dimension)) = 1))
      
    array_base_type() <=
      ** "The array base type should be specified" **
      forall (d : data) . lint_check(d, (has_property(d, Data_Model::Data_Representation) and property(d, Data_Model::Data_Representation) = "Array") => has_property(d, Data_Model::Base_Type))
      
    non_empty_enums() <=
      ** "Enumeration data components must be non-empty" **
      forall (d : data) . lint_check(d, (has_property(d, Data_Model::Data_Representation) and property(d, Data_Model::Data_Representation) = "Enum") => (has_property(d, Data_Model::Enumerators) and size(property(d, Data_Model::Enumerators)) > 0))
      
    unidirectional_connections() <=
      ** "Connections between thread components must be uni-directional" **
      forall (c : connection) . lint_check(c, not is_bidirectional(c) or is_bus_access(c))
      
    event_data_ports_on_vm() <=
      ** "Components bound to a virtual processor may only communicate with components bound to other processors via event data ports" **
      let conns : {connection} = {c for (c : connection) | (not is_event_data_port_connection(c)) and diff_proc_binding(c)};
      forall(c : conns)(vp : virtual_processor) . lint_check(source_component(c), not is_bound_to(source_component(c), vp)) and lint_check(destination_component(c), not is_bound_to(destination_component(c), vp))
            
    unidirectional_ports() <=
      ** "Ports must be in or out, but not both" **
      forall (p : port) . lint_check(p, not (direction(p) = "in out"))
    
    processes_bound() <=
      ** "All processes must be bound to a processor" **
      forall (p : process) . exists (proc : component) . (is_proc(proc) and lint_check(p, is_bound_to(p, proc)))
      
    ports_connected() <=
      ** "All ports should be connected" **
      forall (p : port) . lint_check(p, length(connections(p)) > 0)
      
    diff_proc_binding(c : connection) : bool =
      exists(p1 : component)(p2 : component) . is_proc(p1) and is_proc(p2) and is_bound_to(source_component(c), p1) and is_bound_to(destination_component(c), p2) and not (p1 = p2)
      
    is_proc(p : component) : bool =
      is_processor(p) or is_virtual_processor(p)
      
    no_processor_subcomponents() <=
      ** "A processor's subcomponents may be ignored" **
      forall (p : processor) . lint_check(p, size(subcomponents(p)) = 0)
      
    modes_ignored() <=
      ** "AADL modes are not currently supported by HAMR tools" **
      forall (c : component) . lint_check(c, not has_modes(c))
      
    -- flows_ignored() <=
    --   ** "AADL flows are not currently supported by CASE tools" **
    --   forall (c : component) . lint_check(c, not (size(flow_specifications(c)) + size(end_to_end_flows(c)) > 0))
      
    -- NOT REQUIRED BY HAMR  
    -- threads_have_source() <=
    --   ** "Thread implementations must indicate location of source code or binary" **
    --   forall (t : thread) . lint_check(t, has_property(t, Programming_Properties::Source_Text))
      
    no_fan_in() <=
      ** "Multiple incoming connections to a single port are not allowed" **
      forall (p : port) . lint_check(p, (direction(p) = "in") => (size(connections(p)) <= 1))
    
  **};
  
end HAMR_Modeling_Guidelines;

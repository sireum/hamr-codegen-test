// #Sireum

package tc.GUMBO_Definitions

import org.sireum._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object GUMBO__Library {
  @strictpure def absoluteZeroF(): Base_Types.Float_32 = -459.67f

  @strictpure def atLeastAbsoluteZero(temp: TempSensor.Temperature_i): Base_Types.Boolean = GUMBO_Definitions.GUMBO__Library.atLeastAbsoluteZeroRaw(temp.degrees, temp.unit)

  @strictpure def atLeastAbsoluteZeroRaw(value: Base_Types.Float_32, unit: TempSensor.Unit.Type): Base_Types.Boolean = if (unit == TempSensor.Unit.Kelvin) value >= 0.0f else if (unit == TempSensor.Unit.Celsius) value >= -273.0f else value >= -459.67f

  @strictpure def inRange(temp: TempSensor.Temperature_i): Base_Types.Boolean = GUMBO_Definitions.GUMBO__Library.isFahrenheit(temp) &&
    temp.degrees >= -50.0f &&
    temp.degrees <= 150.0f &&
    temp.degrees >= TempSensor.GUMBO__Library.gminTempDegrees() &&
    temp.degrees <= TempSensor.GUMBO__Library.gmaxTempDegrees()

  @pure def toFahrenheit(temp: TempSensor.Temperature_i): TempSensor.Temperature_i = {
    Contract(
      Ensures(GUMBO_Definitions.GUMBO__Library.isFahrenheit(Res[TempSensor.Temperature_i]),if (temp.unit == TempSensor.Unit.Kelvin) 1.8f * (temp.degrees - 273.0f) + 32.0f == Res[TempSensor.Temperature_i].degrees else if (temp.unit == TempSensor.Unit.Celsius) temp.degrees * 1.8f + 32.0f == Res[TempSensor.Temperature_i].degrees else temp.degrees == Res[TempSensor.Temperature_i].degrees)
    )
    return if (temp.unit == TempSensor.Unit.Kelvin) TempSensor.Temperature_i(1.8f * (temp.degrees - 273.0f) + 32.0f, TempSensor.Unit.Fahrenheit) else if (temp.unit == TempSensor.Unit.Celsius) TempSensor.Temperature_i(temp.degrees * 1.8f + 32.0f, TempSensor.Unit.Fahrenheit) else temp
  }

  @strictpure def isFahrenheit(temp: TempSensor.Temperature_i): Base_Types.Boolean = temp.unit == TempSensor.Unit.Fahrenheit
}

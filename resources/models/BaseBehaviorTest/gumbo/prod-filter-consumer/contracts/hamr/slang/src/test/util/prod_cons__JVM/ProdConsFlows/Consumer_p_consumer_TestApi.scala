// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import art.{Art, ArtNative, Empty}
import prod_cons__JVM._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Consumer_p_consumer_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.s_i_Instance_p_consumer)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.s_i_Instance_p_consumer)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.s_i_Instance_p_consumer)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.s_i_Instance_p_consumer)
  }

  /** helper function to set the values of all input ports.
   * @param e_data_in payload for data port e_data_in
   * @param f_event_data_in payloads for event data port f_event_data_in.
   *   ART currently supports single element event data queues so
   *   only the last element of f_event_data_in will be used
   * @param g_event_data_in payloads for event data port g_event_data_in.
   *   ART currently supports single element event data queues so
   *   only the last element of g_event_data_in will be used
   * @param h_event_in the number of events to place in the h_event_in event port queue.
   *   ART currently supports single element event queues so at most
   *   one event will be placed in the queue.
   */
  def put_concrete_inputs(e_data_in : ProdConsFlows.Container_i,
                          f_event_data_in : ISZ[ProdConsFlows.Container_i],
                          g_event_data_in : ISZ[ProdConsFlows.Container_i],
                          h_event_in : Z): Unit = {
    put_e_data_in(e_data_in)
    for(v <- f_event_data_in){
      put_f_event_data_in(v)
    }
    for(v <- g_event_data_in){
      put_g_event_data_in(v)
    }
    for(i <- 0 until h_event_in) {
      put_h_event_in()
    }
  }


  // setter for in DataPort
  def put_e_data_in(value : ProdConsFlows.Container_i): Unit = {
    ArtNative.insertInPortValue(Arch.s_i_Instance_p_consumer.operational_api.e_data_in_Id, ProdConsFlows.Container_i_Payload(value))
  }

  // setter for in EventDataPort
  def put_f_event_data_in(value : ProdConsFlows.Container_i): Unit = {
    ArtNative.insertInPortValue(Arch.s_i_Instance_p_consumer.operational_api.f_event_data_in_Id, ProdConsFlows.Container_i_Payload(value))
  }

  // setter for in EventDataPort
  def put_g_event_data_in(value : ProdConsFlows.Container_i): Unit = {
    ArtNative.insertInPortValue(Arch.s_i_Instance_p_consumer.operational_api.g_event_data_in_Id, ProdConsFlows.Container_i_Payload(value))
  }

  // setter for in EventPort
  def put_h_event_in(): Unit = {
    ArtNative.insertInPortValue(Arch.s_i_Instance_p_consumer.operational_api.h_event_in_Id, Empty())
  }

}

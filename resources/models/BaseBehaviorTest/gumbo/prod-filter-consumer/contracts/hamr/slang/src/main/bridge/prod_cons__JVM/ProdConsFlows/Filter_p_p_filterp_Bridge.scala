// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import art._
import prod_cons__JVM._
import prod_cons__JVM.ProdConsFlows.{Filter_p_p_filterp => component}

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

@datatype class Filter_p_p_filterp_Bridge(
  val id: Art.BridgeId,
  val name: String,
  val dispatchProtocol: DispatchPropertyProtocol,
  val dispatchTriggers: Option[ISZ[Art.PortId]],

  a_data_in: Port[ProdConsFlows.Container_i],
  e_data_out: Port[ProdConsFlows.Container_i],
  b_event_data_in: Port[ProdConsFlows.Container_i],
  c_event_data_in: Port[ProdConsFlows.Container_i],
  f_event_data_out: Port[ProdConsFlows.Container_i],
  g_event_data_out: Port[ProdConsFlows.Container_i],
  d_event_in: Port[art.Empty],
  h_event_out: Port[art.Empty]
  ) extends Bridge {

  val ports : Bridge.Ports = Bridge.Ports(
    dataIns = ISZ[art.UPort](a_data_in),

    dataOuts = ISZ[art.UPort](e_data_out),

    eventIns = ISZ[art.UPort](b_event_data_in,
                              c_event_data_in,
                              d_event_in),

    eventOuts = ISZ[art.UPort](f_event_data_out,
                               g_event_data_out,
                               h_event_out)
  )

  val initialization_api : Filter_p_Initialization_Api = {
    val api = Filter_p_Initialization_Api(
      id,
      a_data_in.id,
      e_data_out.id,
      b_event_data_in.id,
      c_event_data_in.id,
      f_event_data_out.id,
      g_event_data_out.id,
      d_event_in.id,
      h_event_out.id
    )
    Filter_p_p_filterp_Bridge.c_initialization_api = Some(api)
    api
  }

  val operational_api : Filter_p_Operational_Api = {
    val api = Filter_p_Operational_Api(
      id,
      a_data_in.id,
      e_data_out.id,
      b_event_data_in.id,
      c_event_data_in.id,
      f_event_data_out.id,
      g_event_data_out.id,
      d_event_in.id,
      h_event_out.id
    )
    Filter_p_p_filterp_Bridge.c_operational_api = Some(api)
    api
  }

  val entryPoints : Bridge.EntryPoints =
    Filter_p_p_filterp_Bridge.EntryPoints(
      id,

      a_data_in.id,
      e_data_out.id,
      b_event_data_in.id,
      c_event_data_in.id,
      f_event_data_out.id,
      g_event_data_out.id,
      d_event_in.id,
      h_event_out.id,

      dispatchTriggers,

      initialization_api,
      operational_api)
}

object Filter_p_p_filterp_Bridge {

  var c_initialization_api: Option[Filter_p_Initialization_Api] = None()
  var c_operational_api: Option[Filter_p_Operational_Api] = None()

  @datatype class EntryPoints(
    Filter_p_p_filterp_BridgeId : Art.BridgeId,
    a_data_in_Id : Art.PortId,
    e_data_out_Id : Art.PortId,
    b_event_data_in_Id : Art.PortId,
    c_event_data_in_Id : Art.PortId,
    f_event_data_out_Id : Art.PortId,
    g_event_data_out_Id : Art.PortId,
    d_event_in_Id : Art.PortId,
    h_event_out_Id : Art.PortId,
    dispatchTriggers : Option[ISZ[Art.PortId]],
    initialization_api: Filter_p_Initialization_Api,
    operational_api: Filter_p_Operational_Api) extends Bridge.EntryPoints {

    val dataInPortIds: ISZ[Art.PortId] = IS(a_data_in_Id)

    val eventInPortIds: ISZ[Art.PortId] = IS(b_event_data_in_Id,
                                             c_event_data_in_Id,
                                             d_event_in_Id)

    val dataOutPortIds: ISZ[Art.PortId] = IS(e_data_out_Id)

    val eventOutPortIds: ISZ[Art.PortId] = IS(f_event_data_out_Id,
                                              g_event_data_out_Id,
                                              h_event_out_Id)

    def initialise(): Unit = {
      // implement the following method in 'component':  def initialise(api: Filter_p_Initialization_Api): Unit = {}
      component.initialise(initialization_api)
      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def compute(): Unit = {
      Art.receiveInput(eventInPortIds, dataInPortIds)

      // implement the following in 'component':  def timeTriggered(api: Filter_p_Operational_Api): Unit = {}
      component.timeTriggered(operational_api)

      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def activate(): Unit = {
      // implement the following method in 'component':  def activate(api: Filter_p_Operational_Api): Unit = {}
      component.activate(operational_api)
    }

    def deactivate(): Unit = {
      // implement the following method in 'component':  def deactivate(api: Filter_p_Operational_Api): Unit = {}
      component.deactivate(operational_api)
    }

    def finalise(): Unit = {
      // implement the following method in 'component':  def finalise(api: Filter_p_Operational_Api): Unit = {}
      component.finalise(operational_api)
    }

    def recover(): Unit = {
      // implement the following method in 'component':  def recover(api: Filter_p_Operational_Api): Unit = {}
      component.recover(operational_api)
    }

    override
    def testInitialise(): Unit = {
      // implement the following method in 'component':  def initialise(api: Filter_p_Initialization_Api): Unit = {}
      component.initialise(initialization_api)
      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }

    override
    def testCompute(): Unit = {
      Art.receiveInput(eventInPortIds, dataInPortIds)

      // implement the following in 'component':  def timeTriggered(api: Filter_p_Operational_Api): Unit = {}
      component.timeTriggered(operational_api)

      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }
  }
}
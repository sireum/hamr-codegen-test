// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
object Filter_s_p_filters_GumboX {
  /** I-Assm: Integration constraint on filters's incoming data port a_data_in
    *
    * assume a_gt_10
    *   Value received on a will always be greater than 10
    */
  @strictpure def I_Assm_a_data_in(a_data_in: ProdConsFlows.Container_i): B =
    a_data_in.value > 10

  // I-Assm-Guard: Integration constraint on filters's incoming data port a_data_in
  @strictpure def I_Assm_Guard_a_data_in(a_data_in: ProdConsFlows.Container_i): B =
    I_Assm_a_data_in(a_data_in)

  /** I-Guar: Integration constraint on filters's outgoing data port e_data_out
    *
    * guarantee e_gt_6
    *   Values placed on e must always be greate than 6
    */
  @strictpure def I_Guar_e_data_out(e_data_out: ProdConsFlows.Container_i): B =
    e_data_out.value > 6

  // I_Guar-Guard: Integration constraint on filters's outgoing data port e_data_out
  @strictpure def I_Guar_Guard_e_data_out(e_data_out: Option[ProdConsFlows.Container_i]): B =
    e_data_out.nonEmpty -->: I_Guar_e_data_out(e_data_out.get)

  /** I-Assm: Integration constraint on filters's incoming event data port b_event_data_in
    *
    * assume b_gt_8
    *   Value received on b will always be greater than 8
    */
  @strictpure def I_Assm_b_event_data_in(b_event_data_in: ProdConsFlows.Container_i): B =
    b_event_data_in.value > 8

  // I-Assm-Guard: Integration constraint on filters's incoming event data port b_event_data_in
  @strictpure def I_Assm_Guard_b_event_data_in(b_event_data_in: Option[ProdConsFlows.Container_i]): B =
    b_event_data_in.nonEmpty -->: I_Assm_b_event_data_in(b_event_data_in.get)

  /** I-Guar: Integration constraint on filters's outgoing event data port f_event_data_out
    *
    * guarantee f_gt_4
    *   Values placed on f must always be greate than 4
    */
  @strictpure def I_Guar_f_event_data_out(f_event_data_out: ProdConsFlows.Container_i): B =
    f_event_data_out.value > 4

  // I_Guar-Guard: Integration constraint on filters's outgoing event data port f_event_data_out
  @strictpure def I_Guar_Guard_f_event_data_out(f_event_data_out: Option[ProdConsFlows.Container_i]): B =
    f_event_data_out.nonEmpty -->: I_Guar_f_event_data_out(f_event_data_out.get)

  /** Initialize Entrypoint Contract
    *
    * guarantee e_data_out_initializes
    *   Must initialize outgoing data ports.
    *   Perhaps this should be a built-in emitted check.
    * @param api_e_data_out outgoing data port
    */
  @strictpure def initialize_e_data_out_initializes (
      api_e_data_out: ProdConsFlows.Container_i): B =
    api_e_data_out.value == 7

  /** IEP-Guar: Initialize Entrypoint Contracts for filters
    *
    * @param api_h_event_out outgoing event port
    * @param api_f_event_data_out outgoing event data port
    * @param api_g_event_data_out outgoing event data port
    * @param api_e_data_out outgoing data port
    */
  @strictpure def initialize_IEP_Guar (
      api_h_event_out: Option[art.Empty],
      api_f_event_data_out: Option[ProdConsFlows.Container_i],
      api_g_event_data_out: Option[ProdConsFlows.Container_i],
      api_e_data_out: ProdConsFlows.Container_i): B =
    initialize_e_data_out_initializes(api_e_data_out)

  /** IEP-Post: Initialize Entrypoint Post-Condition
    *
    * @param api_h_event_out outgoing event port
    * @param api_f_event_data_out outgoing event data port
    * @param api_g_event_data_out outgoing event data port
    * @param api_e_data_out outgoing data port
    */
  @strictpure def inititialize_IEP_Post (
      api_h_event_out: Option[art.Empty],
      api_f_event_data_out: Option[ProdConsFlows.Container_i],
      api_g_event_data_out: Option[ProdConsFlows.Container_i],
      api_e_data_out: ProdConsFlows.Container_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with filters's state variables and outgoing ports
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_f_event_data_out) &
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_g_event_data_out) &
     ProdConsFlows.Container_i_GumboX.D_Inv_Container_i(api_e_data_out) & 

     // I-Guar-Guard: Integration constraints for filters's outgoing ports"
     I_Guar_e_data_out(api_e_data_out) &
     I_Guar_Guard_f_event_data_out(api_f_event_data_out) & 

     // IEP-Guar: Initialize Entrypoint contract for filters
     initialize_IEP_Guar(api_h_event_out, api_f_event_data_out, api_g_event_data_out, api_e_data_out))

  /** CEP-Pre: Compute Entrypoint Pre-Condition for filters
    *
    * @param api_d_event_in incoming event port
    * @param api_b_event_data_in incoming event data port
    * @param api_c_event_data_in incoming event data port
    * @param api_a_data_in incoming data port
    */
  @strictpure def compute_CEP_Pre (
      api_d_event_in: Option[art.Empty],
      api_b_event_data_in: Option[ProdConsFlows.Container_i],
      api_c_event_data_in: Option[ProdConsFlows.Container_i],
      api_a_data_in: ProdConsFlows.Container_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with filters's state variables and incoming ports
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_b_event_data_in) & 
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_c_event_data_in) & 
     ProdConsFlows.Container_i_GumboX.D_Inv_Container_i(api_a_data_in) & 

     // I-Assm-Guard: Integration constraints for filters's incoming ports
     I_Assm_Guard_a_data_in(api_a_data_in) & 
     I_Assm_Guard_b_event_data_in(api_b_event_data_in))

  /** CEP-Post: Compute Entrypoint Post-Condition for filters
    *
    * @param api_h_event_out outgoing event port
    * @param api_f_event_data_out outgoing event data port
    * @param api_g_event_data_out outgoing event data port
    * @param api_e_data_out outgoing data port
    */
  @strictpure def compute_CEP_Post (
      api_h_event_out: Option[art.Empty],
      api_f_event_data_out: Option[ProdConsFlows.Container_i],
      api_g_event_data_out: Option[ProdConsFlows.Container_i],
      api_e_data_out: ProdConsFlows.Container_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with filters's state variables and outgoing ports
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_f_event_data_out) & 
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_g_event_data_out) & 
     ProdConsFlows.Container_i_GumboX.D_Inv_Container_i(api_e_data_out) & 

     // I-Guar-Guard: Integration constraints for filters's outgoing ports
     I_Guar_e_data_out(api_e_data_out) & 
     I_Guar_Guard_f_event_data_out(api_f_event_data_out))
}

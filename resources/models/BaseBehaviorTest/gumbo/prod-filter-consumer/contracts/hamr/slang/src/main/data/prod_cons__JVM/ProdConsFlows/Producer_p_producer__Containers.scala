// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM._
import prod_cons__JVM.util.Container

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// containers for the pre and post state values of ports and state variables

@sig trait Producer_p_producer_PreState_Container extends Container {
}

// container for incoming ports
@datatype class Producer_p_producer_PreState_Container_P (
  ) extends Producer_p_producer_PreState_Container

// container for incoming ports and state variables
@datatype class Producer_p_producer_PreState_Container_PS (
  ) extends Producer_p_producer_PreState_Container

@sig trait Producer_p_producer_PostState_Container extends Container {
  def api_d_event_out: Option[art.Empty]
  def api_b_event_data_out: Option[ProdConsFlows.Container_i]
  def api_c_event_data_out: Option[ProdConsFlows.Container_i]
  def api_a_data_out: ProdConsFlows.Container_i
}

// container for outgoing ports
@datatype class Producer_p_producer_PostState_Container_P (
  val api_d_event_out: Option[art.Empty],
  val api_b_event_data_out: Option[ProdConsFlows.Container_i],
  val api_c_event_data_out: Option[ProdConsFlows.Container_i],
  val api_a_data_out: ProdConsFlows.Container_i) extends Producer_p_producer_PostState_Container

// container for outgoing ports and state variables
@datatype class Producer_p_producer_PostState_Container_PS (
  val api_d_event_out: Option[art.Empty],
  val api_b_event_data_out: Option[ProdConsFlows.Container_i],
  val api_c_event_data_out: Option[ProdConsFlows.Container_i],
  val api_a_data_out: ProdConsFlows.Container_i) extends Producer_p_producer_PostState_Container

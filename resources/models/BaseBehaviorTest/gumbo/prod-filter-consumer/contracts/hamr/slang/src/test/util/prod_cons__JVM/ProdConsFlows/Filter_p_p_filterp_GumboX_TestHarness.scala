// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM._
import prod_cons__JVM.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Filter_p_p_filterp_GumboX_TestHarness extends Filter_p_p_filterp_TestApi {
  /** Contract-based test harness for the initialise entry point
    */
  def testInitialiseCB(
      ): GumboXResult.Type = {
    // [InvokeEntryPoint]: invoke the entry point test method
    testInitialise()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_h_event_out: Option[art.Empty] = get_h_event_out()
    val api_f_event_data_out: Option[ProdConsFlows.Container_i] = get_f_event_data_out()
    val api_g_event_data_out: Option[ProdConsFlows.Container_i] = get_g_event_data_out()
    val api_e_data_out: ProdConsFlows.Container_i = get_e_data_out().get

    // [CheckPost]: invoke the oracle function
    val postResult = prod_cons__JVM.ProdConsFlows.Filter_p_p_filterp_GumboX.inititialize_IEP_Post(api_h_event_out, api_f_event_data_out, api_g_event_data_out, api_e_data_out)
    if (!postResult) {
      return GumboXResult.Post_Condition_Fail
    }

    return GumboXResult.Post_Condition_Pass
  }

  /** Contract-based test harness for the compute entry point
    * @param api_d_event_in incoming event port
    * @param api_b_event_data_in incoming event data port
    * @param api_c_event_data_in incoming event data port
    * @param api_a_data_in incoming data port
    */
  def testComputeCB(
      api_d_event_in: Option[art.Empty],
      api_b_event_data_in: Option[ProdConsFlows.Container_i],
      api_c_event_data_in: Option[ProdConsFlows.Container_i],
      api_a_data_in: ProdConsFlows.Container_i): GumboXResult.Type = {
    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    //   filterp does not have incoming ports or state variables

    // [CheckPre]: check/filter based on pre-condition.
    val CEP_Pre_Result: B = prod_cons__JVM.ProdConsFlows.Filter_p_p_filterp_GumboX.compute_CEP_Pre (api_d_event_in, api_b_event_data_in, api_c_event_data_in, api_a_data_in)
    if (!CEP_Pre_Result) {
      return GumboXResult.Pre_Condition_Unsat
    }

    // [PutInPorts]: put values on the input ports
    if (api_d_event_in.nonEmpty) {
      put_d_event_in()
    }
    if (api_b_event_data_in.nonEmpty) {
      put_b_event_data_in(api_b_event_data_in.get)
    }
    if (api_c_event_data_in.nonEmpty) {
      put_c_event_data_in(api_c_event_data_in.get)
    }
    put_a_data_in(api_a_data_in)

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_h_event_out: Option[art.Empty] = get_h_event_out()
    val api_f_event_data_out: Option[ProdConsFlows.Container_i] = get_f_event_data_out()
    val api_g_event_data_out: Option[ProdConsFlows.Container_i] = get_g_event_data_out()
    val api_e_data_out: ProdConsFlows.Container_i = get_e_data_out().get

    // [CheckPost]: invoke the oracle function
    val postResult = prod_cons__JVM.ProdConsFlows.Filter_p_p_filterp_GumboX.compute_CEP_Post(api_b_event_data_in, api_a_data_in, api_h_event_out, api_f_event_data_out, api_g_event_data_out, api_e_data_out)
    if (!postResult) {
      return GumboXResult.Post_Condition_Fail
    }

    return GumboXResult.Post_Condition_Pass
  }
}

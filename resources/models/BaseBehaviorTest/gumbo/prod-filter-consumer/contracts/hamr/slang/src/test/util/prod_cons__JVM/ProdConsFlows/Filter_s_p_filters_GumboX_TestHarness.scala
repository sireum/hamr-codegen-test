// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM._
import prod_cons__JVM.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Filter_s_p_filters_GumboX_TestHarness extends Filter_s_p_filters_TestApi {
  def verbose: B

  /** Contract-based test harness for the initialise entry point
    */
  def testInitialiseCB(
      ): GumboXResult.Type = {

    if (verbose) {
      println(st"""Pre State Values:
                  """.render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testInitialise()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_h_event_out: Option[art.Empty] = get_h_event_out()
    val api_f_event_data_out: Option[ProdConsFlows.Container_i] = get_f_event_data_out()
    val api_g_event_data_out: Option[ProdConsFlows.Container_i] = get_g_event_data_out()
    val api_e_data_out: ProdConsFlows.Container_i = get_e_data_out().get

    if (verbose) {
      println(st"""Post State Values:
                  |  api_h_event_out = ${api_h_event_out.string}
                  |  api_f_event_data_out = ${api_f_event_data_out.string}
                  |  api_g_event_data_out = ${api_g_event_data_out.string}
                  |  api_e_data_out = ${api_e_data_out.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = prod_cons__JVM.ProdConsFlows.Filter_s_p_filters_GumboX.inititialize_IEP_Post(api_h_event_out, api_f_event_data_out, api_g_event_data_out, api_e_data_out)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }

  def testComputeCBJ(json: String): GumboXResult.Type = {
    prod_cons__JVM.JSON.toProdConsFlowsFilter_s_p_filters_PreState_Container(json) match {
      case Either.Left(o) => return testComputeCBV(o)
      case Either.Right(msg) => halt(msg.string)
    }
  }

  def testComputeCBV(o: Filter_s_p_filters_PreState_Container): GumboXResult.Type = {
    return testComputeCB(o.api_d_event_in, o.api_b_event_data_in, o.api_c_event_data_in, o.api_a_data_in)
  }

  /** Contract-based test harness for the compute entry point
    * @param api_d_event_in incoming event port
    * @param api_b_event_data_in incoming event data port
    * @param api_c_event_data_in incoming event data port
    * @param api_a_data_in incoming data port
    */
  def testComputeCB(
      api_d_event_in: Option[art.Empty],
      api_b_event_data_in: Option[ProdConsFlows.Container_i],
      api_c_event_data_in: Option[ProdConsFlows.Container_i],
      api_a_data_in: ProdConsFlows.Container_i): GumboXResult.Type = {

    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    //   filters does not have incoming ports or state variables

    // [CheckPre]: check/filter based on pre-condition.
    val CEP_Pre_Result: B = prod_cons__JVM.ProdConsFlows.Filter_s_p_filters_GumboX.compute_CEP_Pre (api_d_event_in, api_b_event_data_in, api_c_event_data_in, api_a_data_in)
    if (!CEP_Pre_Result) {
      return GumboXResult.Pre_Condition_Unsat
    }

    // [PutInPorts]: put values on the input ports
    if (api_d_event_in.nonEmpty) {
      put_d_event_in()
    }
    if (api_b_event_data_in.nonEmpty) {
      put_b_event_data_in(api_b_event_data_in.get)
    }
    if (api_c_event_data_in.nonEmpty) {
      put_c_event_data_in(api_c_event_data_in.get)
    }
    put_a_data_in(api_a_data_in)

    if (verbose) {
      println(st"""Pre State Values:
                  |  api_d_event_in = ${api_d_event_in.string}
                  |  api_b_event_data_in = ${api_b_event_data_in.string}
                  |  api_c_event_data_in = ${api_c_event_data_in.string}
                  |  api_a_data_in = ${api_a_data_in.string}""".render)
    }

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_h_event_out: Option[art.Empty] = get_h_event_out()
    val api_f_event_data_out: Option[ProdConsFlows.Container_i] = get_f_event_data_out()
    val api_g_event_data_out: Option[ProdConsFlows.Container_i] = get_g_event_data_out()
    val api_e_data_out: ProdConsFlows.Container_i = get_e_data_out().get

    if (verbose) {
      println(st"""Post State Values:
                  |  api_h_event_out = ${api_h_event_out.string}
                  |  api_f_event_data_out = ${api_f_event_data_out.string}
                  |  api_g_event_data_out = ${api_g_event_data_out.string}
                  |  api_e_data_out = ${api_e_data_out.string}""".render)
    }

    // [CheckPost]: invoke the oracle function
    val postResult = prod_cons__JVM.ProdConsFlows.Filter_s_p_filters_GumboX.compute_CEP_Post(api_d_event_in, api_b_event_data_in, api_c_event_data_in, api_a_data_in, api_h_event_out, api_f_event_data_out, api_g_event_data_out, api_e_data_out)
    val result: GumboXResult.Type =
      if (!postResult) GumboXResult.Post_Condition_Fail
      else GumboXResult.Post_Condition_Pass

    return result
  }
}

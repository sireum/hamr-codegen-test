// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
object Producer_p_producer_GumboX {
  /** IEP-Post: Initialize Entrypoint Post-Condition
    *
    * @param api_d_event_out outgoing event port
    * @param api_b_event_data_out outgoing event data port
    * @param api_c_event_data_out outgoing event data port
    * @param api_a_data_out outgoing data port
    */
  @strictpure def inititialize_IEP_Post (
      api_d_event_out: Option[art.Empty],
      api_b_event_data_out: Option[ProdConsFlows.Container_i],
      api_c_event_data_out: Option[ProdConsFlows.Container_i],
      api_a_data_out: ProdConsFlows.Container_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with producer's state variables and outgoing ports
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_b_event_data_out) &
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_c_event_data_out) &
     ProdConsFlows.Container_i_GumboX.D_Inv_Container_i(api_a_data_out))

  /** CEP-Post: Compute Entrypoint Post-Condition for producer
    *
    * @param api_d_event_out outgoing event port
    * @param api_b_event_data_out outgoing event data port
    * @param api_c_event_data_out outgoing event data port
    * @param api_a_data_out outgoing data port
    */
  @strictpure def compute_CEP_Post (
      api_d_event_out: Option[art.Empty],
      api_b_event_data_out: Option[ProdConsFlows.Container_i],
      api_c_event_data_out: Option[ProdConsFlows.Container_i],
      api_a_data_out: ProdConsFlows.Container_i): B =
    (// D-Inv-Guard: Datatype invariants for the types associated with producer's state variables and outgoing ports
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_b_event_data_out) & 
     ProdConsFlows.Container_i_GumboX.D_Inv_Guard_Container_i(api_c_event_data_out) & 
     ProdConsFlows.Container_i_GumboX.D_Inv_Container_i(api_a_data_out))
}

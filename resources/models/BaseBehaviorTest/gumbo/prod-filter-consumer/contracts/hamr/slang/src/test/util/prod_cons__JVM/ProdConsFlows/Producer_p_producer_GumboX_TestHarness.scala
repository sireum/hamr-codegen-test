// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM._
import prod_cons__JVM.GumboXUtil.GumboXResult

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Producer_p_producer_GumboX_TestHarness extends Producer_p_producer_TestApi {
  /** Contract-based test harness for the initialise entry point
    */
  def testInitialiseCB(
      ): GumboXResult.Type = {
    // [InvokeEntryPoint]: invoke the entry point test method
    testInitialise()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_d_event_out: Option[art.Empty] = get_d_event_out()
    val api_b_event_data_out: Option[ProdConsFlows.Container_i] = get_b_event_data_out()
    val api_c_event_data_out: Option[ProdConsFlows.Container_i] = get_c_event_data_out()
    val api_a_data_out: ProdConsFlows.Container_i = get_a_data_out().get

    // [CheckPost]: invoke the oracle function
    val postResult = prod_cons__JVM.ProdConsFlows.Producer_p_producer_GumboX.inititialize_IEP_Post(api_d_event_out, api_b_event_data_out, api_c_event_data_out, api_a_data_out)
    if (!postResult) {
      return GumboXResult.Post_Condition_Fail
    }

    return GumboXResult.Post_Condition_Pass
  }

  /** Contract-based test harness for the compute entry point
    */
  def testComputeCB(
      ): GumboXResult.Type = {
    // [SaveInLocal]: retrieve and save the current (input) values of GUMBO-declared local state variables as retrieved from the component state
    //   producer does not have incoming ports or state variables

    // [CheckPre]: check/filter based on pre-condition.
    //   producer's compute entry point does not have top level assume clauses

    // [PutInPorts]: put values on the input ports
    //   producer does not have incoming ports

    // [InvokeEntryPoint]: invoke the entry point test method
    testCompute()

    // [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable
    val api_d_event_out: Option[art.Empty] = get_d_event_out()
    val api_b_event_data_out: Option[ProdConsFlows.Container_i] = get_b_event_data_out()
    val api_c_event_data_out: Option[ProdConsFlows.Container_i] = get_c_event_data_out()
    val api_a_data_out: ProdConsFlows.Container_i = get_a_data_out().get

    // [CheckPost]: invoke the oracle function
    val postResult = prod_cons__JVM.ProdConsFlows.Producer_p_producer_GumboX.compute_CEP_Post(api_d_event_out, api_b_event_data_out, api_c_event_data_out, api_a_data_out)
    if (!postResult) {
      return GumboXResult.Post_Condition_Fail
    }

    return GumboXResult.Post_Condition_Pass
  }
}

// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM._
import prod_cons__JVM.util.Container

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// containers for the pre and post state values of ports and state variables

@sig trait Consumer_p_consumer_PreState_Container extends Container {
  def api_h_event_in: Option[art.Empty]
  def api_f_event_data_in: Option[ProdConsFlows.Container_i]
  def api_g_event_data_in: Option[ProdConsFlows.Container_i]
  def api_e_data_in: ProdConsFlows.Container_i
}

// container for incoming ports
@datatype class Consumer_p_consumer_PreState_Container_P (
  val api_h_event_in: Option[art.Empty],
  val api_f_event_data_in: Option[ProdConsFlows.Container_i],
  val api_g_event_data_in: Option[ProdConsFlows.Container_i],
  val api_e_data_in: ProdConsFlows.Container_i) extends Consumer_p_consumer_PreState_Container

// container for incoming ports and state variables
@datatype class Consumer_p_consumer_PreState_Container_PS (
  val api_h_event_in: Option[art.Empty],
  val api_f_event_data_in: Option[ProdConsFlows.Container_i],
  val api_g_event_data_in: Option[ProdConsFlows.Container_i],
  val api_e_data_in: ProdConsFlows.Container_i) extends Consumer_p_consumer_PreState_Container

@sig trait Consumer_p_consumer_PostState_Container extends Container {
}

// container for outgoing ports
@datatype class Consumer_p_consumer_PostState_Container_P (
  ) extends Consumer_p_consumer_PostState_Container

// container for outgoing ports and state variables
@datatype class Consumer_p_consumer_PostState_Container_PS (
  ) extends Consumer_p_consumer_PostState_Container

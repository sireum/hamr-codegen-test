// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM.GumboXUtil.GumboXResult
import prod_cons__JVM.RandomLib
import org.sireum.Random.Gen64
import org.sireum.Random.Impl.Xoshiro256

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// Distribute SlangCheck test runners

@record class Producer_p_producer_GumboX_DSC_TestRunner
  extends Random.Gen.TestRunner[Producer_p_producer_DSC_TestVector]
  with Producer_p_producer_GumboX_TestHarness {

  val seedGen: Gen64 = Random.Gen64Impl(Xoshiro256.create)

  override def next(): Producer_p_producer_DSC_TestVector = {
    return Producer_p_producer_DSC_TestVector(
    )
  }

  override def toCompactJson(o: Producer_p_producer_DSC_TestVector): String = {
    return prod_cons__JVM.JSON.fromProdConsFlowsProducer_p_producer_DSC_TestVector(o, T)
  }

  override def fromJson(json: String): Producer_p_producer_DSC_TestVector = {
    prod_cons__JVM.JSON.toProdConsFlowsProducer_p_producer_DSC_TestVector(json) match {
      case Either.Left(o) => return o
      case Either.Right(msg) => halt(msg.string)
    }
  }

  override def test(o: Producer_p_producer_DSC_TestVector): B = {
    BeforeEntrypoint()
    val r: B = testComputeCB() match {
      case GumboXResult.Pre_Condition_Unsat =>
        prod_cons__JVM.DSC_RecordUnsatPre.report(prod_cons__JVM.JSON.fromProdConsFlowsProducer_p_producer_DSC_TestVector(o, T))
        T
      case GumboXResult.Post_Condition_Fail => F
      case GumboXResult.Post_Condition_Pass => T
    }
    AfterEntrypoint()
    return r
  }
}

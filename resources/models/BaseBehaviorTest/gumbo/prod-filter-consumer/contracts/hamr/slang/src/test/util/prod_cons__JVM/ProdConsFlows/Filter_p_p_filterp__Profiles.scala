// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import prod_cons__JVM.RandomLib

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// Profile for initialise entrypoint
@record class Filter_p_p_filterp_Profile (
  val name: String,
  val numTests: Z //number of tests to generate
)

// Profile with generators for incoming ports
@record class Filter_p_p_filterp_Profile_P(
  val name: String,
  val numTests: Z, // number of tests to generate
  var numTestVectorGenRetries: Z, // number of test vector generation retries
  var api_d_event_in: RandomLib, // random lib for generating art.Empty
  var api_b_event_data_in: RandomLib, // random lib for generating ProdConsFlows.Container_i
  var api_c_event_data_in: RandomLib, // random lib for generating ProdConsFlows.Container_i
  var api_a_data_in: RandomLib // random lib for generating ProdConsFlows.Container_i
  )

// Profile with generators for state variables and incoming ports
@record class Filter_p_p_filterp_Profile_PS(
  val name: String,
  val numTests: Z, // number of tests to generate
  var numTestVectorGenRetries: Z, // number of test vector generation retries
  var api_d_event_in: RandomLib, // random lib for generating art.Empty
  var api_b_event_data_in: RandomLib, // random lib for generating ProdConsFlows.Container_i
  var api_c_event_data_in: RandomLib, // random lib for generating ProdConsFlows.Container_i
  var api_a_data_in: RandomLib // random lib for generating ProdConsFlows.Container_i
  )

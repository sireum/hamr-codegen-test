// #Sireum

package prod_cons__JVM.ProdConsFlows

import org.sireum._
import art.Art
import prod_cons__JVM._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Consumer_p_consumer_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.s_i_Instance_p_consumer)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.s_i_Instance_p_consumer)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.s_i_Instance_p_consumer)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.s_i_Instance_p_consumer)
  }

  /** helper function to set the values of all input ports.
   * @param a_in payloads for event data port a_in.
   *   ART currently supports single element event data queues so
   *   only the last element of a_in will be used
   * @param b_in payloads for event data port b_in.
   *   ART currently supports single element event data queues so
   *   only the last element of b_in will be used
   */
  def put_concrete_inputs(a_in : ISZ[Base_Types.Float_32],
                          b_in : ISZ[Base_Types.Float_32]): Unit = {
    for(v <- a_in){
      put_a_in(v)
    }
    for(v <- b_in){
      put_b_in(v)
    }
  }


  // setter for in EventDataPort
  def put_a_in(value : Base_Types.Float_32): Unit = {
    Art.insertInInfrastructurePort(Arch.s_i_Instance_p_consumer.operational_api.a_in_Id, Base_Types.Float_32_Payload(value))
  }

  // setter for in EventDataPort
  def put_b_in(value : Base_Types.Float_32): Unit = {
    Art.insertInInfrastructurePort(Arch.s_i_Instance_p_consumer.operational_api.b_in_Id, Base_Types.Float_32_Payload(value))
  }

}

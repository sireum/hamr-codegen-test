::/*#! 2> /dev/null                                   #
@ 2>/dev/null # 2>nul & echo off & goto BOF           #
if [ -z "${SIREUM_HOME}" ]; then                      #
  echo "Please set SIREUM_HOME env var"               #
  exit -1                                             #
fi                                                    #
exec "${SIREUM_HOME}/bin/sireum" slang run "$0" "$@"    #
:BOF
setlocal
if not defined SIREUM_HOME (
  echo Please set SIREUM_HOME env var
  exit /B -1
)
"%SIREUM_HOME%\bin\sireum.bat" slang run "%0" %*
exit /B %errorlevel%
::!#*/
// #Sireum

import org.sireum._

val sireum = Os.path(Os.env("SIREUM_HOME").get) / "bin" / (if (Os.isWin) "sireum.bat" else "sireum")

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// create SlangCheck artifacts for the Slang types used in the project

val files: ISZ[String] = ISZ("../src/main/data/TempControlSimpleTemp/TempSensor/Temperature_i.scala",
                             "../src/main/data/TempControlSimpleTemp/CoolingFan/FanCmd.scala",
                             "../src/main/data/TempControlSimpleTemp/CoolingFan/FanAck.scala",
                             "../src/main/data/TempControlSimpleTemp/TempControlSoftwareSystem/SetPoint_i.scala",
                             "../src/main/data/TempControlSimpleTemp/Base_Types.scala",
                             "../src/main/data/TempControlSimpleTemp/TempSensor/TempSensor_i_tcproc_tempSensor_Containers.scala",
                             "../src/main/data/TempControlSimpleTemp/CoolingFan/Fan_i_tcproc_fan_Containers.scala",
                             "../src/main/data/TempControlSimpleTemp/TempControlSoftwareSystem/TempControl_i_tcproc_tempControl_Containers.scala",
                             "../src/main/data/TempControlSimpleTemp/TempControlSoftwareSystem/OperatorInterface_i_tcproc_operatorInterface_Containers.scala",
                             "../src/main/data/TempControlSimpleTemp/util/Container.scala",
                             "../src/main/art/art/DataContent.scala",
                             "../src/main/data/TempControlSimpleTemp/Aux_Types.scala")

val toolargs: String = st"${(files, " ")}".render

(Os.slashDir.up / "src" / "main" / "util" / "TempControlSimpleTemp").mkdirAll()

proc"$sireum proyek slangcheck -p TempControlSimpleTemp -o ${Os.slashDir.up}/src/main/util/TempControlSimpleTemp ${Os.slashDir.up} $toolargs".at(Os.slashDir).console.runCheck()

// call to the tools version of SlangCheck which does not invoke Tipe
//proc"$sireum tools slangcheck generator -p TempControlSimpleTemp -o ${Os.slashDir.up}/src/main/util/TempControlSimpleTemp $toolargs".at(Os.slashDir).console.runCheck()

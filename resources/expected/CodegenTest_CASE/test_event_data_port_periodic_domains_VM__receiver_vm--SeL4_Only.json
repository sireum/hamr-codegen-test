{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "microkit\/components\/emitter_t_impl_src_process_src_thread\/emitter_t_impl_src_process_src_thread.camkes",
        {
          "type" : "ITestResource",
          "content" : "component emitter_t_impl_src_process_src_thread {\n  include <sb_types.h>;\n  include <sb_queue_int8_t_1.h>;\n  control;\n  emits ReceiveEvent sb_write_port_1_notification;\n  consumes Period sb_pacer_notification;\n  dataport sb_queue_int8_t_1_t sb_write_port_queue_1;\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM_consumer_p_impl_dst_process\/VM_consumer_p_impl_dst_process.camkes",
        {
          "type" : "ITestResource",
          "content" : "component VM_consumer_p_impl_dst_process {\n  include <sb_queue_int8_t_1.h>;\n  control;\n  provides VMDTBPassthrough dtb;\n  uses FileServerInterface fs;\n  maybe uses Batch batch;\n  maybe uses PutChar guest_putchar;\n  maybe uses GetChar serial_getchar;\n  maybe uses VirtQueueDev recv;\n  maybe uses VirtQueueDrv send;\n  maybe uses VMDTBPassthrough dtb_self;\n  emits HaveNotification notification_ready_connector;\n  maybe consumes restart restart_event;\n  consumes HaveNotification notification_ready;\n  consumes ReceiveEvent sb_read_port_notification;\n  consumes Period_VM sb_pacer_period_notification;\n  dataport sb_queue_int8_t_1_t sb_read_port_queue;\n  dataport sb_queue_int8_t_1_t sb_pacer_period_queue;\n  has semaphore vm_sem;\n  \/\/ expanding attributes in VM_INIT_DEF()\n  \/\/ https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L70-111\n  attribute int base_prio;\n  attribute int num_vcpus = 1;\n  attribute int num_extra_frame_caps;\n  attribute int extra_frame_map_address;\n  attribute {\n    string ram_base;\n    string ram_paddr_base;\n    string ram_size;\n    string dtb_addr;\n    string initrd_addr;\n    string kernel_entry_addr = \"-1\";\n  } vm_address_config;\n  attribute {\n    string kernel_name = \"linux\";\n    string dtb_name = \"linux-dtb\";\n    string initrd_name = \"linux-initrd\";\n    string kernel_bootcmdline = \"\";\n    string kernel_stdout = \"\";\n    string dtb_base_name = \"\";\n    int provide_dtb = true;\n    int generate_dtb = false;\n    int provide_initrd = true;\n    int clean_cache = false;\n    int map_one_to_one = false;\n  } vm_image_config;\n  attribute {\n    string linux_ram_base;\n    string linux_ram_paddr_base;\n    string linux_ram_size;\n    string linux_ram_offset = \"0\"; \/* obsolete *\/\n    string dtb_addr;\n    string initrd_max_size = \"-1\"; \/* obsolete *\/\n    string initrd_addr;\n  } linux_address_config;\n  attribute {\n    string linux_name = \"linux\";\n    string dtb_name = \"linux-dtb\";\n    string initrd_name = \"linux-initrd\";\n    string linux_bootcmdline = \"\";\n    string linux_stdout = \"\";\n    string dtb_base_name = \"\";\n  } linux_image_config;\n  attribute {\n    int send_id;\n    int recv_id;\n  } serial_layout[] = [];\n  \/\/ end of attribute expansion in VM_INIT_DEF()\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/Pacer\/Pacer.camkes",
        {
          "type" : "ITestResource",
          "content" : "component Pacer {\n  include <sb_queue_int8_t_1.h>;\n  control;\n  emits Period_VM period_to_vmdst_process_notification;\n  emits Period period;\n  emits TickTock tick;\n  consumes TickTock tock;\n  dataport sb_queue_int8_t_1_t period_to_vmdst_process_queue;\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/top_impl_Instance.camkes",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <seL4VMDTBPassthrough.idl4>;\nimport <FileServerInterface.camkes>;\nimport <FileServer\/FileServer.camkes>;\nimport <SerialServer\/SerialServer.camkes>;\nimport <TimeServer\/TimeServer.camkes>;\nimport <vm-connectors.camkes>;\nimport <devices.camkes>;\nimport \"components\/Pacer\/Pacer.camkes\";\nimport \"components\/emitter_t_impl_src_process_src_thread\/emitter_t_impl_src_process_src_thread.camkes\";\nimport \"components\/VM_consumer_p_impl_dst_process\/VM_consumer_p_impl_dst_process.camkes\";\n\nassembly {\n  composition {\n    component emitter_t_impl_src_process_src_thread src_process_src_thread;\n    component VM_consumer_p_impl_dst_process vmdst_process;\n    component FileServer fserv; \/\/ expansion of macro VM_GENERAL_COMPOSITION_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L124\n\n    \/\/ expansion of macro VM_VIRTUAL_SERIAL_COMPONENTS_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L147\n    component SerialServer serial;\n    component TimeServer time_server;\n\n    component Pacer pacer;\n\n    \/\/ expansion of macro VM_COMPONENT_CONNECTIONS_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L117\n    connection seL4RPCDataport conn1(from vmdst_process.fs, to fserv.fs_ctrl);\n    connection seL4GlobalAsynch conn2(from vmdst_process.notification_ready_connector, to vmdst_process.notification_ready);\n\n    connection seL4VMDTBPassthrough conn3(from vmdst_process.dtb_self, to vmdst_process.dtb);\n\n    \/\/ expansion of macro VM_VIRTUAL_SERIAL_COMPONENTS_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L149\n    connection seL4TimeServer conn4(from serial.timeout, to time_server.the_timer);\n\n    \/\/ expansion of macro PER_VM_VIRTUAL_SERIAL_CONNECTIONS_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L151\n    connection seL4SerialServer conn5(from vmdst_process.batch, to serial.processed_batch);\n    connection seL4SerialServer conn6(from vmdst_process.serial_getchar, to serial.getchar);\n\n    connection seL4GlobalAsynch conn7(from src_process_src_thread.sb_write_port_1_notification, to vmdst_process.sb_read_port_notification);\n    connection seL4SharedDataWithCaps conn8(from src_process_src_thread.sb_write_port_queue_1, to vmdst_process.sb_read_port_queue);\n    connection seL4Notification conn9(from pacer.tick, to pacer.tock);\n    connection seL4Notification conn10(from pacer.period, to src_process_src_thread.sb_pacer_notification);\n    connection seL4GlobalAsynch conn11(from pacer.period_to_vmdst_process_notification, to vmdst_process.sb_pacer_period_notification);\n    connection seL4SharedDataWithCaps conn12(from pacer.period_to_vmdst_process_queue, to vmdst_process.sb_pacer_period_queue);\n  }\n\n  configuration {\n    src_process_src_thread._domain = 2;\n\n    \/\/ expansion of macro VM_VIRTUAL_SERIAL_GENERAL_CONFIGURATION_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L155\n    time_server.timers_per_client = 1;\n    time_server.priority = 255;\n    time_server.simple = true;\n\n    vmdst_process.num_extra_frame_caps = 0;\n    vmdst_process.extra_frame_map_address = 0;\n    vmdst_process.cnode_size_bits = 23;\n    vmdst_process.simple_untyped24_pool = 12;\n    fserv.heap_size = 0x30000; \/\/ expansion of macro VM_GENERAL_CONFIGURATION_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L128\n\n    \/\/ expansion of macro VM_CONFIGURATION_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L131\n    vmdst_process.fs_shmem_size = 0x100000;\n    vmdst_process.global_endpoint_base = 1 << 27;\n    vmdst_process.asid_pool = true;\n    vmdst_process.simple = true;\n    vmdst_process.base_prio = 100;\n    vmdst_process._priority = 101;\n    vmdst_process.sem_value = 0;\n    vmdst_process.heap_size = 0x300000;\n\n\n    \/\/ expansion of macro PER_VM_VIRTUAL_SERIAL_CONFIGURATION_DEF. See https:\/\/github.com\/seL4\/camkes-vm\/blob\/64690e8db397f69ece88866e79a9f2942c3c7015\/components\/VM_Arm\/configurations\/vm.h#L164\n    vmdst_process.serial_getchar_shmem_size = 0x1000;\n    vmdst_process.batch_shmem_size = 0x1000;\n\n    vmdst_process._domain = 3;\n    src_process_src_thread.sb_write_port_queue_1_access = \"W\";\n    vmdst_process.sb_read_port_queue_access = \"R\";\n    vmdst_process.sb_read_port_notification_domain = 3;\n    pacer._domain = 1;\n    pacer.period_to_vmdst_process_queue_access = \"W\";\n    vmdst_process.sb_pacer_period_queue_access = \"R\";\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/emitter_t_impl_src_process_src_thread\/src\/emitter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_types.h>\n#include <sb_emitter_t_impl.h>\n\nstatic int8_t _value;\n\nvoid test_event_data_port_emitter_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_data_port_emitter_component_init called\\n\", get_instance_name());\n  _value = 0;\n}\n\nvoid test_event_data_port_emitter_time_triggered_handler(const int64_t *in_arg) {\n  if (sb_write_port_enqueue( &_value ) ) {\n    if(_value == 0){\n      \/\/ don't send to much to console, because ?????????\n      printf(\"[%s] Heartbeat %d\\n\", get_instance_name(), _value);\n    }\n    _value = (_value + 1) % 500;\n  } else {\n    printf(\"[%s] Unable to send\\n\", get_instance_name());\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/CMake_CAmkES_VM_Options.cmake",
        {
          "type" : "ITestResource",
          "content" : "option(BUILD_CROSSVM\n       \"Checkout and configure linux to build crossvm module instead of using pre-configured rootfs\"\n       OFF)\n\nif(\"$ENV{BUILD_CROSSVM}\" STREQUAL \"ON\")\n   set(BUILD_CROSSVM ON)\nendif()",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_CAmkES_VM_Options.cmake)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/components\/VM)\n\nDeclareCAmkESComponent(emitter_t_impl_src_process_src_thread\n  SOURCES components\/emitter_t_impl_src_process_src_thread\/\/src\/emitter.c components\/emitter_t_impl_src_process_src_thread\/src\/sb_emitter_t_impl.c types\/src\/sb_queue_int8_t_1.c\n  INCLUDES components\/emitter_t_impl_src_process_src_thread\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(Pacer\n  SOURCES components\/Pacer\/src\/Pacer.c\n  LIBS SB_Type_Library\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/bin\/run-camkes.sh",
        {
          "type" : "ITestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:sh\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate,help\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"-c, --camkes-dir       Location of CAmkES project\"\n  echo \"-n, --non-interactive  Non-interactive mode.  Symlink in apps directory will be replaced\"\n  echo \"                         if present\"\n  echo \"-o, --camkes-options   CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"-s, --simulate         Simulate via QEMU\"\n  echo \"-h, --help             Display this information\"\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\n    exit 2\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    -h|--help) usage; exit 0 ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\n  exit 3\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes-vm-examples\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes-vm-examples\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes-vm-examples project directory.\"\n  echo \"See https:\/\/github.com\/camkes-vm-examples\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/vm-examples\/apps\/Arm\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -svf $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    rm -rf ${BUILD_DIR}\n    mkdir ${BUILD_DIR}\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} \\\n    -DPLATFORM=qemu-arm-virt \\\n    -DQEMU_MEMORY=2048 \\\n    -DARM_HYP=ON \\\n    -DCAMKES_VM_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\ncat >${BUILD_DIR}\/sim << EOL\n#!\/usr\/bin\/env bash\n\nexport SCRIPT_HOME=\\$( cd \"\\$( dirname \"\\$0\" )\" &> \/dev\/null && pwd )\ncd \\${SCRIPT_HOME}\n\n# console output from simulation disappears when QEMU shuts down when run from\n# the CAmkES generated .\/simulate script. Instead call QEMU directly using the\n# default values .\/simulate would pass\n\nqemu-system-aarch64 \\\\\n    -machine virt,virtualization=on,highmem=off,secure=off \\\\\n    -cpu cortex-a53 \\\\\n    -nographic \\\\\n    -m size=2048 \\\\\n    -kernel images\/capdl-loader-image-arm-qemu-arm-virt\nEOL\n\nchmod 700 ${BUILD_DIR}\/sim\necho \"Wrote: ${BUILD_DIR}\/sim\"\n\nif [ \"${SIMULATE}\" = true ]; then\n  # ${BUILD_DIR}\/simulate\n  ${BUILD_DIR}\/sim\nfi\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/emitter_t_impl_src_process_src_thread\/src\/sb_emitter_t_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#include <sb_emitter_t_impl.h>\n#include <sb_queue_int8_t_1.h>\n#include <string.h>\n#include <camkes.h>\n\nvoid sb_entrypoint_period_emitter_t_impl(int64_t *in_arg) {\n  test_event_data_port_emitter_time_triggered_handler((int64_t *) in_arg);\n}\n\nbool sb_write_port_enqueue(const int8_t *data) {\n  sb_queue_int8_t_1_enqueue(sb_write_port_queue_1, (int8_t*) data);\n  sb_write_port_1_notification_emit();\n\n  return true;\n}\n\n\/************************************************************************\n *  sb_entrypoint_emitter_t_impl_src_process_src_thread_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_t_impl_src_process_src_thread_initializer(const int64_t * in_arg) {\n  test_event_data_port_emitter_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise data structure for outgoing event data port write_port\n  sb_queue_int8_t_1_init(sb_write_port_queue_1);\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_t_impl_src_process_src_thread_initializer(&sb_dummy);\n  }\n  sb_pacer_notification_wait();\n  for(;;) {\n    sb_pacer_notification_wait();\n    {\n      int64_t sb_dummy = 0;\n      sb_entrypoint_period_emitter_t_impl(&sb_dummy);\n    }\n  }\n  return 0;\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/emitter_t_impl_src_process_src_thread\/includes\/sb_emitter_t_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#ifndef SB_EMITTER_T_IMPL_H\n#define SB_EMITTER_T_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_write_port_enqueue(const int8_t *);\n\nvoid test_event_data_port_emitter_time_triggered_handler(const int64_t * in_arg);\n\nvoid test_event_data_port_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ SB_EMITTER_T_IMPL_H\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/Pacer\/src\/Pacer.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Copyright 2019 Adventium Labs\n\n#include <camkes.h>\n#include <stdio.h>\n#include <sel4\/sel4.h>\n#include <sb_queue_int8_t_1.h>\n\nextern const char *get_instance_name(void);\n\nvoid send_period_to_vmdst_process(int8_t *data) {\n  sb_queue_int8_t_1_enqueue(period_to_vmdst_process_queue, data);\n  period_to_vmdst_process_notification_emit();\n}\n\nvoid pre_init(void) {\n  sb_queue_int8_t_1_init(period_to_vmdst_process_queue);\n}\n\nint run(void) {\n\n  int8_t tickCount = 0;\n\n  while (1) {\n    \/\/printf(\"%s: Period tick %d\\n\", get_instance_name(), tickCount);\n\n    tickCount++;\n\n    tick_emit();\n\n    send_period_to_vmdst_process(&tickCount);\n    period_emit();\n\n    tock_wait();\n  }\n\n  return 0;\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/types\/includes\/sb_queue_int8_t_1.h",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h>\n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain\n\/\/ SB_QUEUE_INT8_T_1_SIZE-1 elements.\n#define SB_QUEUE_INT8_T_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_int8_t_1 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type int8_t\n  \/\/ (see sb_types.h) implemented as a ring buffer.\n  \/\/ No initialization necessary.\n  int8_t elt[SB_QUEUE_INT8_T_1_SIZE];\n\n} sb_queue_int8_t_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_int8_t_1_init(sb_queue_int8_t_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_int8_t_1_enqueue(\n  sb_queue_int8_t_1_t *queue,\n  int8_t *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_int8_t_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_int8_t_1_t *queue;\n\n} sb_queue_int8_t_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_int8_t_1_Recv_init(\n  sb_queue_int8_t_1_Recv_t *recvQueue,\n  sb_queue_int8_t_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time.\n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_int8_t_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_int8_t_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_int8_t_1_dequeue(\n  sb_queue_int8_t_1_Recv_t *recvQueue,\n  sb_event_counter_t *numDropped,\n  int8_t *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_int8_t_1_is_empty(sb_queue_int8_t_1_Recv_t *recvQueue);\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/types\/src\/sb_queue_int8_t_1.c",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_int8_t_1.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_int8_t_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_1_init(sb_queue_int8_t_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_int8_t_1_enqueue(\n  sb_queue_int8_t_1_t *queue,\n  int8_t *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization.\n  \/\/ elt[queue->numSent % SB_QUEUE_INT8_T_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_INT8_T_1_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_int8_t_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_int8_t_1_Recv_init(\n  sb_queue_int8_t_1_Recv_t *recvQueue,\n  sb_queue_int8_t_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_int8_t_1_dequeue(\n  sb_queue_int8_t_1_Recv_t *recvQueue,\n  sb_event_counter_t *numDropped,\n  int8_t *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_int8_t_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_INT8_T_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_INT8_T_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_INT8_T_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_INT8_T_1_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_INT8_T_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped);\n    return false;\n  }\n}\n\nbool sb_queue_int8_t_1_is_empty(sb_queue_int8_t_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/types\/includes\/sb_types.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ SB_TYPES_H\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/types\/includes\/sb_event_counter.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM\/src\/cross_vm_connections_vmdst_process.c",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2019, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_BSD)\n *\/\n\n#include <autoconf.h>\n#include <camkes.h>\n#include <vmlinux.h>\n#include <sel4vm\/guest_vm.h>\n\n#include <sel4vmmplatsupport\/drivers\/cross_vm_connection.h>\n#include <sel4vmmplatsupport\/drivers\/pci_helper.h>\n#include <pci\/helper.h>\n\n#ifdef CONFIG_PLAT_QEMU_ARM_VIRT\n#define CONNECTION_BASE_ADDRESS 0xDF000000\n#else\n#define CONNECTION_BASE_ADDRESS 0x3F000000\n#endif\n\n#define NUM_CONNECTIONS 2\nstatic struct camkes_crossvm_connection connections[NUM_CONNECTIONS];\n\nextern dataport_caps_handle_t sb_read_port_queue_handle;\nseL4_Word sb_read_port_notification_notification_badge(void);\nextern dataport_caps_handle_t sb_pacer_period_queue_handle;\nseL4_Word sb_pacer_period_notification_notification_badge(void);\n\nstatic int consume_callback(vm_t *vm, void *cookie) {\n    consume_connection_event(vm, (seL4_Word) cookie, true);\n    return 0;\n}\n\nvoid init_cross_vm_connections(vm_t *vm, void *cookie) {\n    connections[0] = (struct camkes_crossvm_connection) {\n      .handle = &sb_read_port_queue_handle,\n      .emit_fn = NULL,\n      .consume_badge = sb_read_port_notification_notification_badge(),\n      .connection_name = \"sb_read_port_queue\"\n    };\n\n    connections[1] = (struct camkes_crossvm_connection) {\n      .handle = &sb_pacer_period_queue_handle,\n      .emit_fn = NULL,\n      .consume_badge = sb_pacer_period_notification_notification_badge(),\n      .connection_name = \"sb_pacer_period_queue\"\n    };\n\n    for (int i = 0; i < NUM_CONNECTIONS; i++) {\n        if (connections[i].consume_badge != -1) {\n            int err = register_async_event_handler(connections[i].consume_badge, consume_callback, (void *)connections[i].consume_badge);\n            ZF_LOGF_IF(err, \"Failed to register_async_event_handler for init_cross_vm_connections.\");\n        }\n    }\n\n    cross_vm_connections_init(vm, CONNECTION_BASE_ADDRESS, connections, ARRAY_SIZE(connections));\n}\n\nDEFINE_MODULE(cross_vm_connections, NULL, init_cross_vm_connections)",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "cmake_minimum_required(VERSION 3.8.2)\n\n# This file will not be overwritten so is safe to edit\n\nproject(arm-vm C)\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(arm-vm C)\n\n# including https:\/\/github.com\/seL4\/camkes-vm\/blob\/master\/arm_vm_helpers.cmake\ninclude(${CAMKES_ARM_VM_HELPERS_PATH})\n#MESSAGE(\"CAMKES_ARM_VM_HELPERS_PATH = ${CAMKES_ARM_VM_HELPERS_PATH}\")\n\nfind_package(camkes-vm-linux REQUIRED)\n\n# including https:\/\/github.com\/seL4\/camkes-vm-linux\/blob\/master\/vm-linux-helpers.cmake\ninclude(${CAMKES_VM_LINUX_HELPERS_PATH})\n#MESSAGE(\"CAMKES_VM_LINUX_HELPERS_PATH = ${CAMKES_VM_LINUX_HELPERS_PATH}\")\n\n# including https:\/\/github.com\/seL4\/camkes-vm-linux\/blob\/master\/linux-module-helpers.cmake\ninclude(${CAMKES_VM_LINUX_MODULE_HELPERS_PATH})\n#MESSAGE(\"CAMKES_VM_LINUX_MODULE_HELPERS_PATH = ${CAMKES_VM_LINUX_MODULE_HELPERS_PATH}\")\n\n# including https:\/\/github.com\/seL4\/camkes-vm-linux\/blob\/master\/linux-source-helpers.cmake\ninclude(${CAMKES_VM_LINUX_SOURCE_HELPERS_PATH})\n#MESSAGE(\"CAMKES_VM_LINUX_SOURCE_HELPERS_PATH = ${CAMKES_VM_LINUX_SOURCE_HELPERS_PATH}\")\n\n\n# This Project Depends on External Project(s)\n# see https:\/\/cmake.org\/cmake\/help\/latest\/module\/ExternalProject.html\ninclude(ExternalProject)\ninclude(external-project-helpers)\n\n\nfind_package(camkes-vm-images REQUIRED)\nfind_package(camkes-arm-vm REQUIRED)\n\n\n#MESSAGE(\"CAMKES_VM_LINUX_HELPERS_PATH = ${CAMKES_VM_LINUX_HELPERS_PATH}\")\n#MESSAGE(\"KernelARMPlatform = ${KernelARMPlatform}\")\n#MESSAGE(\"CAMKES_ARM_VM_DIR = ${CAMKES_ARM_VM_DIR}\")\n#MESSAGE(\"CAMKES_VM_IMAGES_DIR = ${CAMKES_VM_IMAGES_DIR}\")\n#MESSAGE(\"CAMKES_VM_LINUX_DIR = ${CAMKES_VM_LINUX_DIR}\")\n\n#MESSAGE(\"CMAKE_CURRENT_BINARY_DIR = ${CMAKE_CURRENT_BINARY_DIR}\")\n#MESSAGE(\"CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}\")\n#MESSAGE(\"CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}\")\n#MESSAGE(\"BASE_C_FLAGS = ${BASE_C_FLAGS}\")\n\n\n\n# Create our CPP Flags based on ARM VM config variables\nif(\"${KernelARMPlatform}\" STREQUAL \"exynos5422\")\n    set(cpp_flags \"-DKERNELARMPLATFORM_EXYNOS5422\")\n    set(linux_repo \"https:\/\/github.com\/hardkernel\/linux.git\")\n    set(linux_tag \"4.14.87-153\")\n    set(linux_arch \"arm\")\n    set(linux_cross_compile \"arm-linux-gnueabi-\")\nelseif(\"${KernelARMPlatform}\" STREQUAL \"qemu-arm-virt\")\n    set(cpp_flags \"-DKERNELARMPLATFORM_QEMU-ARM-VIRT\")\n    set(linux_repo \"https:\/\/git.kernel.org\/pub\/scm\/linux\/kernel\/git\/stable\/linux.git\")\n    set(linux_tag \"v4.9.189\")\n    set(linux_arch \"arm64\")\n    set(linux_cross_compile \"aarch64-linux-gnu-\")\n    include(simulation)\n    set(SIMULATION ON CACHE BOOL \"Generate simulation script to run qemu with the proper arguments\")\n    if(SIMULATION)\n        GenerateSimulateScript()\n    endif()\nendif()\n\n\n\nif(BUILD_CROSSVM)\n    MESSAGE(\"Not using preconfigured rootfs, will download a vanilla linux image instead\")\n\n    set(rootfs_file \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/rootfs.cpio.gz\")\n    # Checkout and configure linux to build crossvm module\n    ExternalProject_Add(\n        checkout_linux\n        GIT_REPOSITORY\n        ${linux_repo}\n        GIT_TAG\n        ${linux_tag}\n        GIT_SHALLOW\n        1\n        GIT_PROGRESS\n        1\n        BUILD_COMMAND\n        \"\"\n        INSTALL_COMMAND\n        \"\"\n        CONFIGURE_COMMAND\n        \"\"\n        SOURCE_DIR\n        ${CMAKE_CURRENT_BINARY_DIR}\/linux_out\n    )\n    # Linux config and symvers are to be copied to unpacked archive\n    set(linux_config \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/linux_configs\/config\")\n    set(linux_symvers \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/linux_configs\/Module.symvers\")\n    # Configure unpacked archive with config and symvers\n    ConfigureLinux(\n        ${CMAKE_CURRENT_BINARY_DIR}\/linux_out\n        ${linux_config}\n        ${linux_symvers}\n        configure_vm_linux\n        ARCH\n        ${linux_arch}\n        CROSS_COMPILE\n        ${linux_cross_compile}\n        DEPENDS\n        checkout_linux\n    )\n\n    # Compile CrossVM Dataport Module\n    DefineLinuxModule(\n        ${CAMKES_VM_LINUX_DIR}\/camkes-linux-artifacts\/camkes-linux-modules\/camkes-connector-modules\/connection\n        output_module\n        output_module_target\n        KERNEL_DIR\n        ${CMAKE_CURRENT_BINARY_DIR}\/linux_out\n        ARCH\n        ${linux_arch}\n        CROSS_COMPILE\n        ${linux_cross_compile}\n        DEPENDS\n        checkout_linux\n        configure_vm_linux\n    )\n    AddFileToOverlayDir(\n        \"connection.ko\"\n        ${output_module}\n        \"lib\/modules\/4.14.87\/kernel\/drivers\/vmm\"\n        overlay\n        DEPENDS\n        output_module_target\n    )\n\n    # Complile CrossVM Dataport Apps\n    ExternalProject_Add(\n        dataport-apps\n        URL\n        file:\/\/\/${CAMKES_VM_LINUX_DIR}\/camkes-linux-artifacts\/camkes-linux-apps\/camkes-connector-apps\/pkgs\/dataport\n        BINARY_DIR\n        ${CMAKE_CURRENT_BINARY_DIR}\/dataport_apps\n        INSTALL_COMMAND\n        \"\"\n        BUILD_ALWAYS\n        ON\n        EXCLUDE_FROM_ALL\n        CMAKE_ARGS\n        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n    )\n    AddExternalProjFilesToOverlay(\n        dataport-apps\n        ${CMAKE_CURRENT_BINARY_DIR}\/dataport_apps\n        overlay\n        \"usr\/bin\"\n        FILES\n        dataport_read\n        dataport_write\n    )\n\n    # Complile CrossVM Event Apps\n    ExternalProject_Add(\n        event-apps\n        URL\n        file:\/\/\/${CAMKES_VM_LINUX_DIR}\/camkes-linux-artifacts\/camkes-linux-apps\/camkes-connector-apps\/pkgs\/emits_event\n        BINARY_DIR\n        ${CMAKE_CURRENT_BINARY_DIR}\/emits_event_apps\n        INSTALL_COMMAND\n        \"\"\n        BUILD_ALWAYS\n        ON\n        EXCLUDE_FROM_ALL\n        CMAKE_ARGS\n        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n    )\n    AddExternalProjFilesToOverlay(\n        event-apps\n        ${CMAKE_CURRENT_BINARY_DIR}\/emits_event_apps\n        overlay\n        \"usr\/bin\"\n        FILES\n        emits_event_emit\n    )\n\n    # Complile CrossVM Consume Event Apps\n    ExternalProject_Add(\n        consume-event-apps\n        URL\n        file:\/\/\/${CAMKES_VM_LINUX_DIR}\/camkes-linux-artifacts\/camkes-linux-apps\/camkes-connector-apps\/pkgs\/consumes_event\n        BINARY_DIR\n        ${CMAKE_CURRENT_BINARY_DIR}\/consume_event_apps\n        INSTALL_COMMAND\n        \"\"\n        BUILD_ALWAYS\n        ON\n        EXCLUDE_FROM_ALL\n        CMAKE_ARGS\n        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n    )\n    AddExternalProjFilesToOverlay(\n        consume-event-apps\n        ${CMAKE_CURRENT_BINARY_DIR}\/consume_event_apps\n        overlay\n        \"usr\/bin\"\n        FILES\n        consumes_event_wait\n    )\n\n    # Add script to initialise dataport module\n    AddFileToOverlayDir(\n        \"S90crossvm_module_init\"\n        ${CMAKE_CURRENT_SOURCE_DIR}\/overlay_files\/init_scripts\/cross_vm_module_init\n        \"etc\/init.d\"\n        overlay\n    )\nelse()\n    MESSAGE(\"Using pre-configured rootfs\")\n\n    # Use pre-configured rootfs file with crossvm modules and apps installed\n    set(rootfs_file \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/rootfs_crossvm.cpio.gz\")\nendif()\n\n\n# Complile CrossVM Event Apps vmdst_process\nforeach(item IN ITEMS vmdst_process)\n    ExternalProject_Add(\n        ${item}\n        SOURCE_DIR\n        ${CMAKE_CURRENT_SOURCE_DIR}\/apps\/${item}\n        BINARY_DIR\n        ${CMAKE_CURRENT_BINARY_DIR}\/${item}\n        INSTALL_COMMAND\n        \"\"\n        BUILD_ALWAYS\n        ON\n        EXCLUDE_FROM_ALL\n        CMAKE_ARGS\n        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n        -DSB_Type_Library_DIR=${CMAKE_CURRENT_SOURCE_DIR}\/..\/..\/types\n        -DCMAKE_C_FLAGS=${BASE_C_FLAGS}\n    )\n\n    AddExternalProjFilesToOverlay(\n        ${item}\n        ${CMAKE_CURRENT_BINARY_DIR}\/${item}\n        overlay\n        \"usr\/bin\"\n        FILES\n        ${item}\n    )\nendforeach()\n\n# Overwrite inittab file for using the virtio console hvc0.\nAddFileToOverlayDir(\n    \"inittab\"\n    ${CMAKE_CURRENT_SOURCE_DIR}\/overlay_files\/init_scripts\/inittab_hvc0\n    \"etc\"\n    overlay\n)\n\n# Construct new rootfs\nAddOverlayDirToRootfs(\n    overlay\n    ${rootfs_file}\n    \"buildroot\"\n    \"rootfs_install\"\n    output_overlayed_rootfs_location\n    rootfs_target\n    GZIP\n)\n\nAddToFileServer(\"linux-initrd\"\n                ${output_overlayed_rootfs_location}\n                DEPENDS rootfs_target)\n\n# Add linux kernel image to file server\nAddToFileServer(\"linux\"\n                \"${CAMKES_VM_IMAGES_DIR}\/${KernelARMPlatform}\/linux\")\n\nAddCamkesCPPFlag(\n    cpp_flags\n    CONFIG_VARS\n    VmEmmc2NoDMA\n    VmVUSB\n    VmVchan\n    Tk1DeviceFwd\n    Tk1Insecure\n    VmVirtioNetVirtqueue\n)\n\nDefineCAmkESVMFileServer()\n\nCAmkESAddImportPath(${CMAKE_CURRENT_SOURCE_DIR}\/${KernelARMPlatform}\/)\n\n# Define our VM Component with our cross vm dataports glue code\nDeclareCamkesARMVM(\n  VM_consumer_p_impl_dst_process\n  EXTRA_SOURCES src\/cross_vm_connections_vmdst_process.c\n  EXTRA_LIBS SB_Type_Library)\n\nCAmkESAddCPPInclude(${CAMKES_ARM_VM_DIR}\/components\/VM)",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM\/exynos5422\/devices.camkes",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n#include <configurations\/vm.h>\n\n#define VM_RAM_OFFSET 0\n#define VM_INITRD_MAX_SIZE 0x1900000 \/\/ 25 MB\n\n#define VM0_RAM_BASE       0x40000000\n#define VM0_RAM_SIZE       0x8000000\n#define VM0_DTB_ADDR       0x47000000  \/\/ VM0_RAM_BASE + 0x7000000\n#define VM0_INITRD_ADDR    0x45700000  \/\/ VM0_DTB_ADDR - VM_INITRD_MAX_SIZE\n\n#define VM0_RAM_MMIOS_BASE \"0x40000000:27\"\n\n#define VM1_RAM_BASE       0x50000000\n#define VM1_RAM_SIZE       0x8000000\n#define VM1_DTB_ADDR       0x57000000  \/\/ VM1_RAM_BASE + 0x7000000\n#define VM1_INITRD_ADDR    0x55700000  \/\/ VM1_DTB_ADDR - VM_INITRD_MAX_SIZE\n\n#define VM1_RAM_MMIOS_BASE \"0x48000000:27\"\n\nassembly {\n  composition {}\n  configuration {\n    vmdst_process.linux_address_config = {\n      \"linux_ram_base\" : VAR_STRINGIZE(VM0_RAM_BASE),\n      \"linux_ram_paddr_base\" : VAR_STRINGIZE(VM0_RAM_BASE),\n      \"linux_ram_size\" : VAR_STRINGIZE(VM0_RAM_SIZE),\n      \"linux_ram_offset\" : VAR_STRINGIZE(VM_RAM_OFFSET),\n      \"dtb_addr\" : VAR_STRINGIZE(VM0_DTB_ADDR),\n      \"initrd_max_size\" : VAR_STRINGIZE(VM_INITRD_MAX_SIZE),\n      \"initrd_addr\" : VAR_STRINGIZE(VM0_INITRD_ADDR),\n    };\n\n    vmdst_process.linux_image_config = {\n      \"linux_bootcmdline\" : \"console=hvc0 root=\/dev\/ram0 nosmp rw debug loglevel=8 pci=nomsi initcall_blacklist=clk_disable_unused\",\n      \"linux_stdout\" : \"hvc0\",\n      \"dtb_name\" : \"\",\n      \"initrd_name\" : \"linux-initrd\",\n    };\n\n    vmdst_process.mmios = [\n      \"0x10000000:0x1000:12\", \/\/ CHIP ID\n      \"0x10486000:0x1000:12\"  \/\/ VCPU\n    ];\n\n    vmdst_process.untyped_mmios = [\n      VM0_RAM_MMIOS_BASE  \/\/ RAM\n    ];\n\n    vmdst_process.irqs = [];\n\n    vmdst_process.dtb = dtb([{}]);\n  }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM\/qemu-arm-virt\/devices.camkes",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n#include <configurations\/vm.h>\n#define VM_RAM_OFFSET      0x00000000\n#define VM_INITRD_MAX_SIZE 0x3200000 \/\/50 MB\n\n#define VM0_RAM_BASE       0x40000000\n#define VM0_RAM_SIZE       0x8000000\n#define VM0_DTB_ADDR       0x47000000 \/\/VM0_RAM_BASE + 0x7000000\n#define VM0_INITRD_ADDR    0x43e00000 \/\/VM0_DTB_ADDR - VM_INITRD_MAX_SIZE\n\n#define VM0_MMIOS_ICI      \"0x8040000:0x1000:12\"\n#define VM0_MMIOS_LKMR     \"0x40000000:27\"\n\n\n#define VM1_RAM_BASE       0x48000000\n#define VM1_RAM_SIZE       0x8000000\n#define VM1_DTB_ADDR       0x4f000000 \/\/VM1_RAM_BASE + 0x7000000\n#define VM1_INITRD_ADDR    0x4be00000 \/\/VM1_DTB_ADDR - VM_INITRD_MAX_SIZE\n\n#define VM1_MMIOS_ICI      \"0x8040000:0x1000:12\"\n#define VM1_MMIOS_LKMR     \"0x48000000:27\"\n\n\nassembly {\n  composition {}\n  configuration {\n    vmdst_process.linux_address_config = {\n      \"linux_ram_base\" : VAR_STRINGIZE(VM0_RAM_BASE),\n      \"linux_ram_paddr_base\" : VAR_STRINGIZE(VM0_RAM_BASE),\n      \"linux_ram_size\" : VAR_STRINGIZE(VM0_RAM_SIZE),\n      \"linux_ram_offset\" : VAR_STRINGIZE(VM_RAM_OFFSET),\n      \"dtb_addr\" : VAR_STRINGIZE(VM0_DTB_ADDR),\n      \"initrd_max_size\" : VAR_STRINGIZE(VM_INITRD_MAX_SIZE),\n      \"initrd_addr\" : VAR_STRINGIZE(VM0_INITRD_ADDR)\n    };\n\n    vmdst_process.linux_image_config = {\n      \"linux_bootcmdline\" : \"console=hvc0 nosmp rw debug loglevel=8 pci=nomsi,realloc=off,bios initcall_blacklist=clk_disable_unused\",\n      \"linux_stdout\" : \"hvc0\",\n      \"dtb_name\": \"\",\n      \"initrd_name\" : \"linux-initrd\"\n    };\n\n    vmdst_process.dtb = dtb([{}]);\n\n    vmdst_process.irq = [];\n\n    vmdst_process.mmios = [\n      VM0_MMIOS_ICI, \/\/ Interrupt Controller Virtual CPU interface (Virtual Machine view)\n    ];\n\n    vmdst_process.untyped_mmios = [\n      VM0_MMIOS_LKMR, \/\/ Linux kernel memory regions\n    ];\n\n  }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM\/overlay_files\/init_scripts\/cross_vm_module_init",
        {
          "type" : "ITestResource",
          "content" : "#!\/bin\/sh\n\n# Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\ninsmod \/lib\/modules\/4.14.87\/kernel\/drivers\/vmm\/connection.ko",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM\/overlay_files\/init_scripts\/inittab_hvc0",
        {
          "type" : "ITestResource",
          "content" : "# @TAG(CUSTOM)\n# \/etc\/inittab\n#\n# This file will not be overwritten so is safe to edit\n#\n# Copyright (C) 2001 Erik Andersen <andersen@codepoet.org>\n#\n# Note: BusyBox init doesn't support runlevels.  The runlevels field is\n# completely ignored by BusyBox init. If you want runlevels, use\n# sysvinit.\n#\n# Format for each entry: <id>:<runlevels>:<action>:<process>\n#\n# id        == tty to run on, or empty for \/dev\/console\n# runlevels == ignored\n# action    == one of sysinit, respawn, askfirst, wait, and once\n# process   == program to run\n\n# Startup the system\n::sysinit:\/bin\/mount -t proc proc \/proc\n::sysinit:\/bin\/mount -o remount,rw \/\n::sysinit:\/bin\/mkdir -p \/dev\/pts \/dev\/shm\n::sysinit:\/bin\/mount -a\n::sysinit:\/sbin\/swapon -a\nnull::sysinit:\/bin\/ln -sf \/proc\/self\/fd \/dev\/fd\nnull::sysinit:\/bin\/ln -sf \/proc\/self\/fd\/0 \/dev\/stdin\nnull::sysinit:\/bin\/ln -sf \/proc\/self\/fd\/1 \/dev\/stdout\nnull::sysinit:\/bin\/ln -sf \/proc\/self\/fd\/2 \/dev\/stderr\n::sysinit:\/bin\/hostname -F \/etc\/hostname\n# now run any rc scripts\n::sysinit:\/etc\/init.d\/rcS\n\n# Put a getty on the serial port\nhvc0:2345:respawn:\/sbin\/getty -L 9600 hvc0\n\n# Stuff to do for the 3-finger salute\n#::ctrlaltdel:\/sbin\/reboot\n\n# Stuff to do before rebooting\n::shutdown:\/etc\/init.d\/rcK\n::shutdown:\/sbin\/swapoff -a\n::shutdown:\/bin\/umount -a -r",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM\/apps\/vmdst_process\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "cmake_minimum_required(VERSION 3.8.2)\n\n# This file will not be overwritten so is safe to edit\n\nproject(vmdst_process C)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_subdirectory(${SB_Type_Library_DIR} SB_Type_Library)\n\nadd_executable(vmdst_process vmdst_process.c)\n\ntarget_link_libraries(vmdst_process\n                      SB_Type_Library\n                      -static-libgcc -static)",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/VM\/apps\/vmdst_process\/vmdst_process.c",
        {
          "type" : "ITestResource",
          "content" : "#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <assert.h>\n#include <string.h>\n\n#include <sys\/types.h>\n#include <sys\/stat.h>\n#include <sys\/mman.h>\n#include <errno.h>\n\n#include <sb_types.h>\n#include <sb_event_counter.h>\n#include <sb_queue_int8_t_1.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nint main(int argc, char *argv[]) {\n  printf(\"VM App vmdst_process started\\n\");\n  return 0;\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/kernel\/domain_schedule.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Copyright 2020 Adventium Labs\n\n\/\/ This is a kernel data structure.\n\n#include <config.h>\n#include <object\/structures.h>\n#include <model\/statedata.h>\n\n\/\/ An arbitrary hand generated schedule. The length is in seL4 ticks\n\/\/ (2 ms default). This schedule should be generated from the AADL model\n\/\/ using execution time and data flow latency specifications.\n\/\/\n\/\/ Pacer runs at highest rate\n\/\/\n\/\/ This schedule is single-rate, 1Hz, run each thread at 200ms ticks for simplicity.\n\/\/ Fill space in with domain 0.\n\/\/\n\/\/         +\n\/\/ 3 dest  |        -              -              -              -      \n\/\/ 2 src   |     -              -              -              -         \n\/\/ 1 pacer |  -              -              -              -            \n\/\/ 0 dom0  |-- -- -- -------- -- -- -------- -- -- -------- -- -- ------\n\/\/         |______________|______________________________________________\\time\n\/\/           seconds      1              2              3              4 \/\n\/\/\n\/\/ Major frame is 1 seconds, since destination has 1 second period\n\/\/\nconst dschedule_t ksDomSchedule[] = { \/\/ (1 tick == 2ms)\n    { .domain = 0, .length =   100 }, \/\/ all other seL4 threads, init, 200ms\n    { .domain = 1, .length =   5 },   \/\/ pacer        \n    { .domain = 0, .length =   95 },  \/\/ domain0     \n    { .domain = 2, .length =   5 },   \/\/ source      \n    { .domain = 0, .length =   95 },  \/\/ domain0     \n    { .domain = 3, .length =   300 }, \/\/ destination \n    { .domain = 0, .length =   5 },   \/\/ domain0 \n};\n\nconst word_t ksDomScheduleLength = sizeof(ksDomSchedule) \/ sizeof(dschedule_t);\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/settings.cmake",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n# Add virtual PCI device to VMM for registering cross component connectors as\n# devices on the PCI bus.\nset(VmPCISupport ON CACHE BOOL \"\" FORCE)\n\n# Disable libusb from being compiled.\nset(LibUSB OFF CACHE BOOL \"\" FORCE)\n\n# Enables the option for the VM to open and load a seperate initrd file\nset(VmInitRdFile ON CACHE BOOL \"\" FORCE)\n\n# Enable virtio console vmm module\nset(VmVirtioConsole ON CACHE BOOL \"\" FORCE)\n\n# Make VTimers see absolute time rather than virtual time.\nset(KernelArmVtimerUpdateVOffset OFF CACHE BOOL \"\" FORCE)\n\n# Don't trap WFI or WFE instructions in a VM.\nset(KernelArmDisableWFIWFETraps ON CACHE BOOL \"\" FORCE)\n\nif(\"${PLATFORM}\" STREQUAL \"qemu-arm-virt\")\n\n    set(KernelArmCPU cortex-a53 CACHE STRING \"\" FORCE)\n    set(KernelArmExportPCNTUser ON CACHE BOOL \"\" FORCE)\n    set(KernelArmExportPTMRUser ON CACHE BOOL \"\" FORCE)\n\n    set(MIN_QEMU_VERSION \"4.0.0\")\n    execute_process(COMMAND qemu-system-aarch64 -version OUTPUT_VARIABLE QEMU_VERSION_STR)\n    string(\n        REGEX\n            MATCH\n            \"[0-9](\\\\.[0-9])+\"\n            QEMU_VERSION\n            ${QEMU_VERSION_STR}\n    )\n    if(\"${QEMU_VERSION}\" VERSION_LESS \"${MIN_QEMU_VERSION}\")\n        message(WARNING \"Warning: qemu version should be at least ${MIN_QEMU_VERSION}\")\n    endif()\n\nendif()\nset(KernelDomainSchedule \"${CMAKE_CURRENT_LIST_DIR}\/kernel\/domain_schedule.c\" CACHE INTERNAL \"\")\nset(KernelNumDomains 4 CACHE STRING \"\" FORCE)\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/types\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            src\/sb_queue_int8_t_1.c)\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           PUBLIC includes)\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/proof\/smt2_case.smt2",
        {
          "type" : "ITestResource",
          "content" : "(set-logic ALL)\n\n(declare-datatypes ((Option 1))\n  ((par (T) ((Some (value T))\n             (None)))))\n\n(declare-datatypes ((Mode 0)) ((\n  (SeL4)\n  (SeL4_Only)\n  (SeL4_TB))))\n\n(declare-datatypes ((ComponentCategory 0)) ((\n  (Abstract)\n  (Bus)\n  (Data)\n  (Device)\n  (Memory)\n  (Process)\n  (Processor)\n  (Subprogram)\n  (SubprogramGroup)\n  (System)\n  (Thread)\n  (ThreadGroup)\n  (VirtualBus)\n  (VirtualProcessor))))\n\n(declare-datatypes ((DispatchProtocol 0)) ((\n  (Periodic)\n  (Sporadic))))\n\n(declare-datatypes ((SchedulingType 0)) ((\n  (Pacing)\n  (SelfPacing)\n  (PeriodicDispatching)\n  (UNSPECIFIED_SCHEDULING_TYPE))))\n\n(declare-datatypes ((Direction 0)) ((\n  (In)\n  (Out)\n  (InOut))))\n\n(declare-datatypes ((FeatureCategory 0)) ((\n  (AbstractFeature)\n  (BusAccess)\n  (DataAccess)\n  (DataPort)\n  (EventPort)\n  (EventDataPort)\n  (FeatureGroup)\n  (Parameter)\n  (SubprogramAccess)\n  (SubprogramAccessGroup))))\n\n\n(declare-const CodegenMode Mode)\n(assert (= CodegenMode SeL4_Only))\n\n(declare-const ModelSchedulingType SchedulingType)\n(assert (= ModelSchedulingType Pacing))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                                AADL Model                              ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare-datatypes ((AadlComponent 0)) ((\n  (top_impl_Instance_src_process_src_thread)\n  (top_impl_Instance_proc)\n  (top_impl_Instance_dst_process)\n  (top_impl_Instance_vm_dst_proc)\n)))\n(declare-const AadlComponent_count Int)\n(assert (= 4 AadlComponent_count))\n\n(declare-const AadlComponentCategory (Array AadlComponent (Option ComponentCategory)))\n  (assert (= (Some Thread) (select AadlComponentCategory top_impl_Instance_src_process_src_thread)))\n  (assert (= (Some Processor) (select AadlComponentCategory top_impl_Instance_proc)))\n  (assert (= (Some Process) (select AadlComponentCategory top_impl_Instance_dst_process)))\n  (assert (= (Some VirtualProcessor) (select AadlComponentCategory top_impl_Instance_vm_dst_proc)))\n\n(declare-const ProcessorBindings (Array AadlComponent (Option AadlComponent)))\n  (assert (= (Some top_impl_Instance_proc) (select ProcessorBindings top_impl_Instance_src_process_src_thread)))\n  (assert (= (Some top_impl_Instance_vm_dst_proc) (select ProcessorBindings top_impl_Instance_dst_process)))\n\n(declare-const AadlDispatchProtocol (Array AadlComponent (Option DispatchProtocol)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol top_impl_Instance_src_process_src_thread)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol top_impl_Instance_vm_dst_proc)))\n(declare-const AadlDispatchProtocol_size Int)\n(assert (= 2 AadlDispatchProtocol_size))\n\n(declare-datatypes ((AadlPort 0)) ((\n  (top_impl_Instance_src_process_src_thread_write_port)\n  (top_impl_Instance_dst_process_read_port))))\n(declare-const AadlPort_count Int)\n(assert (= 2 AadlPort_count))\n\n(declare-const AadlPortComponent (Array AadlPort (Option AadlComponent)))\n  (assert (= (Some top_impl_Instance_src_process_src_thread) (select AadlPortComponent top_impl_Instance_src_process_src_thread_write_port)))\n  (assert (= (Some top_impl_Instance_dst_process) (select AadlPortComponent top_impl_Instance_dst_process_read_port)))\n(declare-const AadlPortComponent_size Int)\n(assert (= 2 AadlPortComponent_size))\n\n(declare-const AadlFeatureCategory (Array AadlPort FeatureCategory))\n  (assert (= EventDataPort (select AadlFeatureCategory top_impl_Instance_src_process_src_thread_write_port)))\n  (assert (= EventDataPort (select AadlFeatureCategory top_impl_Instance_dst_process_read_port)))\n(declare-const AadlFeatureCategory_size Int)\n(assert (= 2 AadlFeatureCategory_size))\n\n(declare-const AadlPortDirection (Array AadlPort Direction))\n  (assert (= Out (select AadlPortDirection top_impl_Instance_src_process_src_thread_write_port)))\n  (assert (= In (select AadlPortDirection top_impl_Instance_dst_process_read_port)))\n(declare-const AadlPortDirection_size Int)\n(assert (= 2 AadlPortDirection_size))\n\n(define-fun AadlConnectionFlowTos ((p1 AadlPort) (p2 AadlPort)) Bool\n  (or\n    (and (= p1 top_impl_Instance_src_process_src_thread_write_port) (= p2 top_impl_Instance_dst_process_read_port))\n    false))\n(declare-const AadlConnectionFlowsTos_count Int)\n(assert (= 1 AadlConnectionFlowsTos_count))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                              CAmkES Model                              ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare-datatypes ((AccessType 0)) ((\n  (R)\n  (W)\n  (RW))))\n\n(declare-datatypes ((seL4ConnectorType 0)) ((\n  (seL4GlobalAsynch)\n  (seL4GlobalAsynchCallback)\n  (seL4Notification)\n  (seL4RPCCall)\n  (seL4RPCDataport)\n  (seL4SharedData)\n  (seL4SharedDataWithCaps)\n  (seL4SerialServer)\n  (seL4TimeServer)\n  (seL4VMDTBPassthrough)\n  (CASE_AADL_EventDataport))))\n\n(declare-datatypes ((CAmkESComponent 0)) ((\n  (src_process_src_thread)\n  (vmdst_process)\n  (fserv)\n  (serial)\n  (time_server)\n  (pacer))))\n(declare-const CAmkESComponent_count Int)\n(assert (= 6 CAmkESComponent_count))\n\n(define-fun isPeriodicDispatcher ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       false))\n\n(define-fun isPacer ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (= _component pacer)))\n\n(define-fun isFileServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a file server is expected\n       (= _component fserv)))\n\n(define-fun isTimeServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a time server is expected\n       (= _component time_server)))\n\n(define-fun isSerialServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a serial server is expected\n       (= _component serial)))\n\n(declare-datatypes ((CAmkESPort 0)) ((\n  (src_process_src_thread_sb_write_port_queue_1)\n  (src_process_src_thread_sb_write_port_1_notification)\n  (src_process_src_thread_sb_pacer_notification)\n  (vmdst_process_sb_read_port_queue)\n  (vmdst_process_sb_pacer_period_queue)\n  (vmdst_process_notification_ready_connector)\n  (vmdst_process_fs)\n  (vmdst_process_batch)\n  (vmdst_process_guest_putchar)\n  (vmdst_process_serial_getchar)\n  (vmdst_process_recv)\n  (vmdst_process_send)\n  (vmdst_process_dtb_self)\n  (vmdst_process_restart_event)\n  (vmdst_process_notification_ready)\n  (vmdst_process_sb_read_port_notification)\n  (vmdst_process_sb_pacer_period_notification)\n  (vmdst_process_dtb)\n  (fserv_fs_ctrl)\n  (serial_getchar)\n  (serial_processed_batch)\n  (serial_timeout)\n  (time_server_the_timer)\n  (pacer_period_to_vmdst_process_queue)\n  (pacer_period_to_vmdst_process_notification)\n  (pacer_period)\n  (pacer_tick)\n  (pacer_tock))))\n(declare-const CAmkESPort_count Int)\n(assert (= 28 CAmkESPort_count))\n\n(declare-const CAmkESAccessRestrictions (Array CAmkESPort AccessType))\n  (assert (= W (select CAmkESAccessRestrictions src_process_src_thread_sb_write_port_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions vmdst_process_sb_read_port_queue)))\n  (assert (= W (select CAmkESAccessRestrictions pacer_period_to_vmdst_process_queue)))\n  (assert (= R (select CAmkESAccessRestrictions vmdst_process_sb_pacer_period_queue)))\n(declare-const CAmkESAccessRestrictions_size Int)\n(assert (= 4 CAmkESAccessRestrictions_size))\n\n(declare-datatypes ((CAmkESConnection 0)) ((\n  (conn1)\n  (conn2)\n  (conn3)\n  (conn4)\n  (conn5)\n  (conn6)\n  (conn7)\n  (conn8)\n  (conn9)\n  (conn10)\n  (conn11)\n  (conn12))))\n(declare-const CAmkESConnection_count Int)\n(assert (= 12 CAmkESConnection_count))\n\n(define-fun isSelfPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType SelfPacing)\n       (or \n           false)))\n\n(define-fun isPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or (= _conn conn9)\n           (= _conn conn10)\n           (= _conn conn11)\n           (= _conn conn12)\n           false)))\n\n(define-fun isPeriodicDispatchingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or \n           false)))\n(declare-const PeriodicDispatchingConnection_count Int)\n(assert (= 0 PeriodicDispatchingConnection_count))\n\n; non Aadl connection refinement connections required by a VM\n(define-fun isVMAuxConnection ((_conn CAmkESConnection)) Bool\n  (or (= _conn conn1)\n      (= _conn conn2)\n      (= _conn conn3)\n      (= _conn conn4)\n      (= _conn conn5)\n      (= _conn conn6)\n      false))\n\n(declare-const CAmkESConnectionType (Array CAmkESConnection seL4ConnectorType))\n  (assert (= seL4RPCDataport (select CAmkESConnectionType conn1)))\n  (assert (= seL4GlobalAsynch (select CAmkESConnectionType conn2)))\n  (assert (= seL4VMDTBPassthrough (select CAmkESConnectionType conn3)))\n  (assert (= seL4TimeServer (select CAmkESConnectionType conn4)))\n  (assert (= seL4SerialServer (select CAmkESConnectionType conn5)))\n  (assert (= seL4SerialServer (select CAmkESConnectionType conn6)))\n  (assert (= seL4GlobalAsynch (select CAmkESConnectionType conn7)))\n  (assert (= seL4SharedDataWithCaps (select CAmkESConnectionType conn8)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn9)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn10)))\n  (assert (= seL4GlobalAsynch (select CAmkESConnectionType conn11)))\n  (assert (= seL4SharedDataWithCaps (select CAmkESConnectionType conn12)))\n(declare-const CAmkESConnectionType_count Int)\n(assert (= 12 CAmkESConnectionType_count))\n\n(declare-const CAmkESPortComponent (Array CAmkESPort CAmkESComponent))\n  (assert (= src_process_src_thread (select CAmkESPortComponent src_process_src_thread_sb_write_port_queue_1)))\n  (assert (= src_process_src_thread (select CAmkESPortComponent src_process_src_thread_sb_write_port_1_notification)))\n  (assert (= src_process_src_thread (select CAmkESPortComponent src_process_src_thread_sb_pacer_notification)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_sb_read_port_queue)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_sb_pacer_period_queue)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_notification_ready_connector)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_fs)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_batch)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_guest_putchar)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_serial_getchar)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_recv)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_send)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_dtb_self)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_restart_event)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_notification_ready)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_sb_read_port_notification)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_sb_pacer_period_notification)))\n  (assert (= vmdst_process (select CAmkESPortComponent vmdst_process_dtb)))\n  (assert (= fserv (select CAmkESPortComponent fserv_fs_ctrl)))\n  (assert (= serial (select CAmkESPortComponent serial_getchar)))\n  (assert (= serial (select CAmkESPortComponent serial_processed_batch)))\n  (assert (= serial (select CAmkESPortComponent serial_timeout)))\n  (assert (= time_server (select CAmkESPortComponent time_server_the_timer)))\n  (assert (= pacer (select CAmkESPortComponent pacer_period_to_vmdst_process_queue)))\n  (assert (= pacer (select CAmkESPortComponent pacer_period_to_vmdst_process_notification)))\n  (assert (= pacer (select CAmkESPortComponent pacer_period)))\n  (assert (= pacer (select CAmkESPortComponent pacer_tick)))\n  (assert (= pacer (select CAmkESPortComponent pacer_tock)))\n(declare-const CAmkESPortComponent_size Int)\n(assert (= 28 CAmkESPortComponent_size))\n\n(define-fun CAmkESConnectionFlowTos ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort)) Bool\n  (or\n    (and (= _conn conn1) (= _p1 vmdst_process_fs) (= _p2 fserv_fs_ctrl))\n    (and (= _conn conn2) (= _p1 vmdst_process_notification_ready_connector) (= _p2 vmdst_process_notification_ready))\n    (and (= _conn conn3) (= _p1 vmdst_process_dtb_self) (= _p2 vmdst_process_dtb))\n    (and (= _conn conn4) (= _p1 serial_timeout) (= _p2 time_server_the_timer))\n    (and (= _conn conn5) (= _p1 vmdst_process_batch) (= _p2 serial_processed_batch))\n    (and (= _conn conn6) (= _p1 vmdst_process_serial_getchar) (= _p2 serial_getchar))\n    (and (= _conn conn7) (= _p1 src_process_src_thread_sb_write_port_1_notification) (= _p2 vmdst_process_sb_read_port_notification))\n    (and (= _conn conn8) (= _p1 src_process_src_thread_sb_write_port_queue_1) (= _p2 vmdst_process_sb_read_port_queue))\n    (and (= _conn conn9) (= _p1 pacer_tick) (= _p2 pacer_tock))\n    (and (= _conn conn10) (= _p1 pacer_period) (= _p2 src_process_src_thread_sb_pacer_notification))\n    (and (= _conn conn11) (= _p1 pacer_period_to_vmdst_process_notification) (= _p2 vmdst_process_sb_pacer_period_notification))\n    (and (= _conn conn12) (= _p1 pacer_period_to_vmdst_process_queue) (= _p2 vmdst_process_sb_pacer_period_queue))\n    false))\n(declare-const CAmkESConnectionFlowTos_count Int)\n(assert (= 12 CAmkESConnectionFlowTos_count))\n\n(define-fun ComponentRefinement ((ac (Option AadlComponent)) (cc CAmkESComponent)) Bool\n  (or\n    (and (= ac (Some top_impl_Instance_src_process_src_thread)) (= cc src_process_src_thread))\n    (and (= ac (Some top_impl_Instance_dst_process)) (= cc vmdst_process))\n    false))\n(declare-const ComponentRefinement_count Int)\n(assert (= 2 ComponentRefinement_count))\n\n(define-fun PortRefinement ((ap AadlPort) (cp CAmkESPort)) Bool\n  (or\n    (and (= ap top_impl_Instance_src_process_src_thread_write_port) (= cp src_process_src_thread_sb_write_port_queue_1))\n    (and (= ap top_impl_Instance_src_process_src_thread_write_port) (= cp src_process_src_thread_sb_write_port_1_notification))\n    (and (= ap top_impl_Instance_dst_process_read_port) (= cp vmdst_process_sb_read_port_queue))\n    (and (= ap top_impl_Instance_dst_process_read_port) (= cp vmdst_process_sb_read_port_notification))\n    false))\n(declare-const PortRefinement_count Int)\n(assert (= 4 PortRefinement_count))\n\n(define-fun isVMAuxPort ((cp CAmkESPort)) Bool\n  (exists ((cc CAmkESComponent))\n    (and (= cc (select CAmkESPortComponent cp))\n         (or (and (= cc vmdst_process)\n                  (or (= cp vmdst_process_notification_ready_connector) (= cp vmdst_process_fs) (= cp vmdst_process_batch) (= cp vmdst_process_guest_putchar) (= cp vmdst_process_serial_getchar) (= cp vmdst_process_recv) (= cp vmdst_process_send) (= cp vmdst_process_dtb_self) (= cp vmdst_process_restart_event) (= cp vmdst_process_notification_ready) (= cp vmdst_process_dtb) false))\n             false))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                             Proof Functions                            ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(define-fun isVMComponent ((cc CAmkESComponent)) Bool\n  (exists ((ap AadlComponent))\n    (and (ComponentRefinement (Some ap) cc)                   ; cc refines ap\n         (= (Some Process) (select AadlComponentCategory ap)) ; ap is a process\n         (match (select ProcessorBindings ap) (\n           ((Some x) (= (Some VirtualProcessor) (select AadlComponentCategory x))) ; ap is bound to virtual processor\n           (None false))))))\n\n(define-fun AadlFlowDirectionality () Bool\n  (forall ((p1 AadlPort) (p2 AadlPort))\n    (=> (AadlConnectionFlowTos p1 p2)\n        (and (= Out (select AadlPortDirection p1)) (= In (select AadlPortDirection p2))))))\n\n(define-fun AadlFlowNoSelfConnection () Bool\n  (forall ((p1 AadlPort) (p2 AadlPort))\n    (=> (AadlConnectionFlowTos p1 p2)\n        (not (= p1 p2)))))\n\n(define-fun AadlConnectedPortTypeMatch () Bool\n  (forall ((src AadlPort) (dst AadlPort))\n    (=> (AadlConnectionFlowTos src dst)\n        (or (and (= AbstractFeature (select AadlFeatureCategory src)) (= AbstractFeature (select AadlFeatureCategory dst)))\n            (and (= BusAccess (select AadlFeatureCategory src)) (= BusAccess (select AadlFeatureCategory dst)))\n            (and (= DataAccess (select AadlFeatureCategory src)) (= DataAccess (select AadlFeatureCategory dst)))\n            (and (= DataPort (select AadlFeatureCategory src)) (= DataPort (select AadlFeatureCategory dst)))\n            (and (= EventPort (select AadlFeatureCategory src)) (= EventPort (select AadlFeatureCategory dst)))\n            (and (= EventDataPort (select AadlFeatureCategory src)) (= EventDataPort (select AadlFeatureCategory dst)))\n            (and (= FeatureGroup (select AadlFeatureCategory src)) (= FeatureGroup (select AadlFeatureCategory dst)))\n            (and (= Parameter (select AadlFeatureCategory src)) (= Parameter (select AadlFeatureCategory dst)))\n            (and (= SubprogramAccess (select AadlFeatureCategory src)) (= SubprogramAccess (select AadlFeatureCategory dst)))\n            (and (= SubprogramAccessGroup (select AadlFeatureCategory src)) (= SubprogramAccessGroup (select AadlFeatureCategory dst)))\n             false))))\n(declare-const AadlConnectedPortTypeMatch_count Int)\n(assert (= 10 AadlConnectedPortTypeMatch_count))\n\n(define-fun AadlDispatchProtocolSpecified () Bool\n  (forall ((_comp AadlComponent))\n    (match (select AadlComponentCategory _comp) (\n      ((Some _category_) (\n        ; threads and virtual processors must have an assigned dispatch protocol, all others are 'don't care'\n        match _category_ (\n          (Thread (not (= (as None (Option DispatchProtocol)) (select AadlDispatchProtocol _comp))))\n          (VirtualProcessor (not (= (as None (Option DispatchProtocol)) (select AadlDispatchProtocol _comp))))\n          (_z_ true)\n        )))\n      (None false) ; sanity check: all AADL components must have an assigned component category\n      ))))\n\n(define-fun AadlAllPortsAssigned () Bool\n  (forall ((_p AadlPort))\n    (not (= (as None (Option AadlComponent)) (select AadlPortComponent _p)))))\n\n(define-fun AADLWellFormedness () Bool\n  (and\n    (= AadlPort_count AadlPortComponent_size) ; all Aadl ports belong to an Aadl component\n    AadlAllPortsAssigned\n    AadlDispatchProtocolSpecified\n    AadlFlowDirectionality\n    AadlFlowNoSelfConnection\n    AadlConnectedPortTypeMatch))\n\n\n(define-fun CAmkESFlowNoSelfConnection () Bool\n  (forall ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _p1 _p2)\n        (not (= _p1 _p2)))))\n\n(define-fun CAmkESDataPortAccess () Bool\n  (forall ((_conn CAmkESConnection) (_src CAmkESPort) (_dst CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _src _dst)\n        (and\n             (=> (= seL4SharedData (select CAmkESConnectionType _conn))\n                 (and (= W (select CAmkESAccessRestrictions _src))\n                      (= R (select CAmkESAccessRestrictions _dst))))\n             (=> (= seL4SharedDataWithCaps (select CAmkESConnectionType _conn))\n                 (and (ite (isVMComponent (select CAmkESPortComponent _src))\n                           (= RW (select CAmkESAccessRestrictions _src))\n                           (= W (select CAmkESAccessRestrictions _src)))\n                      (= R (select CAmkESAccessRestrictions _dst))))))))\n\n(define-fun UniqueComponentRefinements () Bool\n  (forall ((aadlComponent1 AadlComponent) (camkesComponent CAmkESComponent))\n    (=> (ComponentRefinement (Some aadlComponent1) camkesComponent)\n        (not (exists ((aadlComponent2 AadlComponent))\n               (and (not (= aadlComponent1 aadlComponent2))\n                    (ComponentRefinement (Some aadlComponent2) camkesComponent)))))))\n\n(define-fun UniquePortRefinements () Bool\n  (forall ((aadlPort1 AadlPort) (camkesPort CAmkESPort))\n    (=> (PortRefinement aadlPort1 camkesPort)\n        (not (exists ((aadlPort2 AadlPort))\n               (and (not (= aadlPort1 aadlPort2))\n                    (PortRefinement aadlPort2 camkesPort)))))))\n\n(define-fun CAmkESWellFormedness () Bool\n  (and\n    (= CAmkESPort_count CAmkESPortComponent_size) ; all CAmkES ports belong to a CAmkES component\n    CAmkESDataPortAccess\n    CAmkESFlowNoSelfConnection))\n\n; helper method: if either port belongs to a VM component then any data connection between the two of them\n; must be seL4SharedDataWithCaps, seL4SharedData otherwise\n(define-fun getExpectedDataConnectionType ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) seL4ConnectorType\n  (ite (or (isVMComponent (select CAmkESPortComponent camkesSource))\n           (isVMComponent (select CAmkESPortComponent camkesDest))\n           false)\n       seL4SharedDataWithCaps\n       seL4SharedData))\n\n; helper method: if the destination port belongs to a VM component than any event connection between the two ports\n; must be seL4GlobalAsynch, seL4Notification otherwise\n(define-fun getExpectedEventConnectionType ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) seL4ConnectorType\n  (ite (isVMComponent (select CAmkESPortComponent camkesDest))\n       seL4GlobalAsynch\n       seL4Notification))\n\n(define-fun SB_DataPortRefinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n      (and (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n           (= (select CAmkESConnectionType conn) (getExpectedDataConnectionType camkesSource camkesDest)) ; actual connector type must match expected\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest  camkesDest)\n           (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_EventPortRefinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (and\n      (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (= (select CAmkESConnectionType conn) (getExpectedEventConnectionType camkesSource camkesDest)) ; actual connector type must match expected\n      (PortRefinement aadlSource camkesSource)\n      (PortRefinement aadlDest camkesDest)\n      (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n      (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_Refinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (or\n         (and\n           (= DataPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)) ; payload\n         (and\n           (= EventPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; event counter\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         (and\n           (= EventDataPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; payload\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         false)))\n\n(define-fun ConnectionPreservation () Bool\n  (forall ((aadlSource AadlPort) (aadlDest AadlPort))\n    (=> (AadlConnectionFlowTos aadlSource aadlDest)\n        (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n             (SB_Refinement aadlSource aadlDest)))))\n\n\n(define-fun isAadl_SB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (exists ((aadlSource AadlPort) (aadlDest AadlPort))\n         (and\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest camkesDest)\n           (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest))\n           (AadlConnectionFlowTos aadlSource aadlDest)))))\n\n(define-fun isCAmkESSchedulingConnection ((_conn CAmkESConnection)) Bool\n  (or\n    (isSelfPacingConnection _conn)\n    (isPacingConnection _conn)\n    (isPeriodicDispatchingConnection _conn)\n    false))\n\n(define-fun isVirtualMachineInducedConnection ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (or\n    (and (isVMAuxConnection conn)\n         (or (isVMAuxPort camkesSource)\n             (isVMAuxPort camkesDest)\n             false))\n    (and (isSerialServer (select CAmkESPortComponent camkesSource)) ; connection b\/w serial and time server\n         (isTimeServer (select CAmkESPortComponent camkesDest)))\n    false))\n\n(define-fun NoNewConnections () Bool\n  (forall ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (=> (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (or\n        (isAadl_SB_ConnectionRefinement camkesSource camkesDest)\n        (isCAmkESSchedulingConnection conn)\n        (isVirtualMachineInducedConnection conn camkesSource camkesDest)\n        false))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                              Proof                                     ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(echo \"RefinementProof: Shows that there is a model satisfying all the constraints (should be sat):\")\n(push)\n(assert (and\n  AADLWellFormedness\n  CAmkESWellFormedness\n  ConnectionPreservation\n  UniqueComponentRefinements\n  UniquePortRefinements\n  NoNewConnections\n))\n(check-sat)\n;(get-model)\n(pop)\n\n(echo \"AADLWellFormedness: Proves that the generated AADL evidence is well-formed (should be unsat):\")\n(push)\n(assert (not AADLWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"CAmkESWellFormedness: Proves that the generated CAmkES evidence is well-formed (should be unsat):\")\n(push)\n(assert (not CAmkESWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"ConnectionPreservation: Proves that the generated CAmkES connections preserve AADL's (should be unsat):\")\n(push)\n(assert (not ConnectionPreservation))\n(check-sat)\n(pop)\n\n(echo \"NoNewConnections: Proves that the generated CAmkES connections does not contain more than AADL's (should be unsat):\")\n(push)\n(assert (not NoNewConnections))\n(check-sat)\n(pop)\n\n\n(exit)",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ]
    ]
  }
}
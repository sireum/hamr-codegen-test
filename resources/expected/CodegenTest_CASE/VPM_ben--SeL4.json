{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "slang\/src\/main\/data\/VPM_ben__SeL4\/Base_Types.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4\n\nimport org.sireum._\nimport org.sireum.S8._\nimport org.sireum.S16._\nimport org.sireum.S32._\nimport org.sireum.S64._\nimport org.sireum.U8._\nimport org.sireum.U16._\nimport org.sireum.U32._\nimport org.sireum.U64._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Base_Types {\n\n  type Boolean = B\n\n  type Integer = Z\n\n  type Integer_8 = S8\n  type Integer_16 = S16\n  type Integer_32 = S32\n  type Integer_64 = S64\n\n  type Unsigned_8 = U8\n  type Unsigned_16 = U16\n  type Unsigned_32 = U32\n  type Unsigned_64 = U64\n\n  \/\/ TODO: Base_Types::Natural\n\n  type Float = R\n  type Float_32 = F32\n  type Float_64 = F64\n\n  type Character = C\n  type String = org.sireum.String\n\n  type Bits = org.sireum.ISZ[B]\n\n  @datatype class Boolean_Payload(value: B) extends art.DataContent\n\n  @datatype class Integer_Payload(value: Z) extends art.DataContent\n\n  @datatype class Integer_8_Payload(value: S8) extends art.DataContent\n  @datatype class Integer_16_Payload(value: S16) extends art.DataContent\n  @datatype class Integer_32_Payload(value: S32) extends art.DataContent\n  @datatype class Integer_64_Payload(value: S64) extends art.DataContent\n\n  @datatype class Unsigned_8_Payload(value: U8) extends art.DataContent\n  @datatype class Unsigned_16_Payload(value: U16) extends art.DataContent\n  @datatype class Unsigned_32_Payload(value: U32) extends art.DataContent\n  @datatype class Unsigned_64_Payload(value: U64) extends art.DataContent\n\n  @datatype class Float_Payload(value: R) extends art.DataContent\n  @datatype class Float_32_Payload(value: F32) extends art.DataContent\n  @datatype class Float_64_Payload(value: F64) extends art.DataContent\n\n  @datatype class Character_Payload(value: C) extends art.DataContent\n  @datatype class String_Payload(value: String) extends art.DataContent\n\n  @datatype class Bits_Payload(value: ISZ[B]) extends art.DataContent\n\n  def Boolean_example(): Boolean = {\n    Contract(Ensures(Res == F))\n    return F\n  }\n\n\n  def Integer_example(): Integer = {\n    Contract(Ensures(Res == z\"0\"))\n    return z\"0\"\n  }\n\n  def Integer_8_example(): Integer_8 = {\n    Contract(Ensures(Res == s8\"0\"))\n    return s8\"0\"\n  }\n\n  def Integer_16_example(): Integer_16 = {\n    Contract(Ensures(Res == s16\"0\"))\n    return s16\"0\"\n  }\n\n  def Integer_32_example(): Integer_32 = {\n    Contract(Ensures(Res == s32\"0\"))\n    return s32\"0\"\n  }\n\n  def Integer_64_example(): Integer_64 = {\n    Contract(Ensures(Res == s64\"0\"))\n    return s64\"0\"\n  }\n\n\n  def Unsigned_8_example(): Unsigned_8 = {\n    Contract(Ensures(Res == u8\"0\"))\n    return u8\"0\"\n  }\n\n  def Unsigned_16_example(): Unsigned_16 = {\n    Contract(Ensures(Res == u16\"0\"))\n    return u16\"0\"\n  }\n\n  def Unsigned_32_example(): Unsigned_32 = {\n    Contract(Ensures(Res == u32\"0\"))\n    return u32\"0\"\n  }\n\n  def Unsigned_64_example(): Unsigned_64 = {\n    Contract(Ensures(Res == u64\"0\"))\n    return u64\"0\"\n  }\n\n\n  def Float_example(): Float = {\n    Contract(Ensures(Res == r\"0\"))\n    return r\"0\"\n  }\n\n  def Float_32_example(): Float_32 = {\n    Contract(Ensures(Res == f32\"0\"))\n    return f32\"0\"\n  }\n\n  def Float_64_example(): Float_64 = {\n    Contract(Ensures(Res == f64\"0\"))\n    return f64\"0\"\n  }\n\n\n  def Character_example(): Character = {\n    Contract(Ensures(Res == ' '))\n    return ' '\n  }\n\n  def String_example(): String = {\n    Contract(Ensures(Res == \"\"))\n    return \"\"\n  }\n\n\n  def Bits_example(): Bits = {\n    Contract(Ensures(Res == ISZ[B]()))\n    return ISZ[B]()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/architecture\/VPM_ben__SeL4\/Arch.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4\n\nimport org.sireum._\nimport art._\nimport art.PortMode._\nimport art.DispatchPropertyProtocol._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject Arch {\n  val VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager : VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge = {\n    val AttestationRequest = Port[Base_Types.Bits] (id = portId\"0\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest\", mode = EventOut)\n    val AttestationResponse = Port[Base_Types.Bits] (id = portId\"1\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse\", mode = EventIn)\n    val TrustedIds = Port[Base_Types.Bits] (id = portId\"2\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds\", mode = EventOut)\n    val InitiateAttestation = Port[Base_Types.Bits] (id = portId\"3\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation\", mode = EventIn)\n    val TerminateAttestation = Port[Base_Types.Bits] (id = portId\"4\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation\", mode = EventOut)\n\n    VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge(\n      id = bridgeId\"0\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      AttestationRequest = AttestationRequest,\n      AttestationResponse = AttestationResponse,\n      TrustedIds = TrustedIds,\n      InitiateAttestation = InitiateAttestation,\n      TerminateAttestation = TerminateAttestation\n    )\n  }\n  val VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate : VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge = {\n    val SHM_QUEUE_Request_In = Port[Base_Types.Bits] (id = portId\"5\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In\", mode = EventIn)\n    val SHM_QUEUE_Request_Out = Port[Base_Types.Bits] (id = portId\"6\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out\", mode = EventOut)\n    val Connection_Command_In = Port[Base_Types.Bits] (id = portId\"7\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In\", mode = EventIn)\n    val Connection_Command_Out = Port[Base_Types.Bits] (id = portId\"8\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out\", mode = EventOut)\n    val TrustedIds = Port[Base_Types.Bits] (id = portId\"9\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds\", mode = EventIn)\n\n    VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge(\n      id = bridgeId\"1\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      SHM_QUEUE_Request_In = SHM_QUEUE_Request_In,\n      SHM_QUEUE_Request_Out = SHM_QUEUE_Request_Out,\n      Connection_Command_In = Connection_Command_In,\n      Connection_Command_Out = Connection_Command_Out,\n      TrustedIds = TrustedIds\n    )\n  }\n  val VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1 : VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge = {\n    val Observed = Port[Base_Types.Bits] (id = portId\"10\", name = \"VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed\", mode = EventIn)\n    val Suspect_Traffic_Out = Port[Base_Types.Bits] (id = portId\"11\", name = \"VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out\", mode = EventOut)\n\n    VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge(\n      id = bridgeId\"2\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      Observed = Observed,\n      Suspect_Traffic_Out = Suspect_Traffic_Out\n    )\n  }\n  val VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2 : VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge = {\n    val Observed = Port[Base_Types.Bits] (id = portId\"12\", name = \"VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed\", mode = EventIn)\n    val Suspect_Traffic_Out = Port[Base_Types.Bits] (id = portId\"13\", name = \"VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out\", mode = EventOut)\n\n    VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge(\n      id = bridgeId\"3\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      Observed = Observed,\n      Suspect_Traffic_Out = Suspect_Traffic_Out\n    )\n  }\n  val VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low : VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge = {\n    val ADSB_Messages_In = Port[Base_Types.Bits] (id = portId\"14\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In\", mode = EventIn)\n    val Response_In = Port[Base_Types.Bits] (id = portId\"15\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In\", mode = EventIn)\n    val AttestationRequest = Port[Base_Types.Bits] (id = portId\"16\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest\", mode = EventIn)\n    val SHM_QUEUE_ADSB_Heartbeat_Out = Port[Base_Types.Bits] (id = portId\"17\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_ADSB_Heartbeat_Out\", mode = EventOut)\n    val SHM_QUEUE_ADSB_Ownship_Out = Port[Base_Types.Bits] (id = portId\"18\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_ADSB_Ownship_Out\", mode = EventOut)\n    val SHM_QUEUE_ADSB_Traffic_Out = Port[Base_Types.Bits] (id = portId\"19\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_ADSB_Traffic_Out\", mode = EventOut)\n    val SHM_QUEUE_Response_Out = Port[Base_Types.Bits] (id = portId\"20\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Response_Out\", mode = EventOut)\n    val SHM_QUEUE_AttestationRequest = Port[Base_Types.Bits] (id = portId\"21\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_AttestationRequest\", mode = EventOut)\n    val SHM_HEADER_adsb_to_ptab = Port[Base_Types.Bits] (id = portId\"22\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab\", mode = EventIn)\n    val Connection_Command_In = Port[Base_Types.Bits] (id = portId\"23\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In\", mode = EventIn)\n    val Suspect_Traffic_In1 = Port[Base_Types.Bits] (id = portId\"24\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1\", mode = EventIn)\n    val SHM_QUEUE_Suspect_Traffic_Out1 = Port[Base_Types.Bits] (id = portId\"25\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Suspect_Traffic_Out1\", mode = EventOut)\n    val Suspect_Traffic_In2 = Port[Base_Types.Bits] (id = portId\"26\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2\", mode = EventIn)\n    val SHM_QUEUE_Suspect_Traffic_Out2 = Port[Base_Types.Bits] (id = portId\"27\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Suspect_Traffic_Out2\", mode = EventOut)\n    val Suspect_Traffic_In3 = Port[Base_Types.Bits] (id = portId\"28\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3\", mode = EventIn)\n    val SHM_QUEUE_Suspect_Traffic_Out3 = Port[Base_Types.Bits] (id = portId\"29\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Suspect_Traffic_Out3\", mode = EventOut)\n    val SHM_QUEUE_Request_In = Port[Base_Types.Bits] (id = portId\"30\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_In\", mode = EventIn)\n    val SHM_QUEUE_AttestationResponse = Port[Base_Types.Bits] (id = portId\"31\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_AttestationResponse\", mode = EventIn)\n    val SHM_QUEUE_Request_Out = Port[Base_Types.Bits] (id = portId\"32\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out\", mode = EventOut)\n    val AttestationResponse = Port[Base_Types.Bits] (id = portId\"33\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse\", mode = EventOut)\n    val Connection_Command_Out = Port[Base_Types.Bits] (id = portId\"34\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out\", mode = EventOut)\n    val InitiateAttestation = Port[Base_Types.Bits] (id = portId\"35\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation\", mode = EventOut)\n    val TerminateAttestation = Port[Base_Types.Bits] (id = portId\"36\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation\", mode = EventIn)\n\n    VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge(\n      id = bridgeId\"4\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      ADSB_Messages_In = ADSB_Messages_In,\n      Response_In = Response_In,\n      AttestationRequest = AttestationRequest,\n      SHM_QUEUE_ADSB_Heartbeat_Out = SHM_QUEUE_ADSB_Heartbeat_Out,\n      SHM_QUEUE_ADSB_Ownship_Out = SHM_QUEUE_ADSB_Ownship_Out,\n      SHM_QUEUE_ADSB_Traffic_Out = SHM_QUEUE_ADSB_Traffic_Out,\n      SHM_QUEUE_Response_Out = SHM_QUEUE_Response_Out,\n      SHM_QUEUE_AttestationRequest = SHM_QUEUE_AttestationRequest,\n      SHM_HEADER_adsb_to_ptab = SHM_HEADER_adsb_to_ptab,\n      Connection_Command_In = Connection_Command_In,\n      Suspect_Traffic_In1 = Suspect_Traffic_In1,\n      SHM_QUEUE_Suspect_Traffic_Out1 = SHM_QUEUE_Suspect_Traffic_Out1,\n      Suspect_Traffic_In2 = Suspect_Traffic_In2,\n      SHM_QUEUE_Suspect_Traffic_Out2 = SHM_QUEUE_Suspect_Traffic_Out2,\n      Suspect_Traffic_In3 = Suspect_Traffic_In3,\n      SHM_QUEUE_Suspect_Traffic_Out3 = SHM_QUEUE_Suspect_Traffic_Out3,\n      SHM_QUEUE_Request_In = SHM_QUEUE_Request_In,\n      SHM_QUEUE_AttestationResponse = SHM_QUEUE_AttestationResponse,\n      SHM_QUEUE_Request_Out = SHM_QUEUE_Request_Out,\n      AttestationResponse = AttestationResponse,\n      Connection_Command_Out = Connection_Command_Out,\n      InitiateAttestation = InitiateAttestation,\n      TerminateAttestation = TerminateAttestation\n    )\n  }\n  val VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high : VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge = {\n    val SHM_QUEUE_ADSB_Heartbeat_In = Port[Base_Types.Bits] (id = portId\"37\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_ADSB_Heartbeat_In\", mode = EventIn)\n    val SHM_QUEUE_ADSB_Ownship_In = Port[Base_Types.Bits] (id = portId\"38\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_ADSB_Ownship_In\", mode = EventIn)\n    val SHM_QUEUE_ADSB_Traffic_In = Port[Base_Types.Bits] (id = portId\"39\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_ADSB_Traffic_In\", mode = EventIn)\n    val SHM_QUEUE_Response_In = Port[Base_Types.Bits] (id = portId\"40\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_Response_In\", mode = EventIn)\n    val Response_Out = Port[Base_Types.Bits] (id = portId\"41\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out\", mode = EventOut)\n    val ADSB_Messages_Out = Port[Base_Types.Bits] (id = portId\"42\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out\", mode = EventOut)\n    val SHM_HEADER_adsb_to_ptab = Port[Base_Types.Bits] (id = portId\"43\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab\", mode = EventOut)\n    val Connection_Command_Out = Port[Base_Types.Bits] (id = portId\"44\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out\", mode = EventOut)\n    val Request_In = Port[Base_Types.Bits] (id = portId\"45\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In\", mode = EventIn)\n    val SHM_QUEUE_Request_Out = Port[Base_Types.Bits] (id = portId\"46\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_Request_Out\", mode = EventOut)\n    val Connection_Command_In = Port[Base_Types.Bits] (id = portId\"47\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In\", mode = EventIn)\n\n    VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge(\n      id = bridgeId\"5\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high\",\n      dispatchProtocol = Periodic(period = 250),\n      dispatchTriggers = None(),\n\n      SHM_QUEUE_ADSB_Heartbeat_In = SHM_QUEUE_ADSB_Heartbeat_In,\n      SHM_QUEUE_ADSB_Ownship_In = SHM_QUEUE_ADSB_Ownship_In,\n      SHM_QUEUE_ADSB_Traffic_In = SHM_QUEUE_ADSB_Traffic_In,\n      SHM_QUEUE_Response_In = SHM_QUEUE_Response_In,\n      Response_Out = Response_Out,\n      ADSB_Messages_Out = ADSB_Messages_Out,\n      SHM_HEADER_adsb_to_ptab = SHM_HEADER_adsb_to_ptab,\n      Connection_Command_Out = Connection_Command_Out,\n      Request_In = Request_In,\n      SHM_QUEUE_Request_Out = SHM_QUEUE_Request_Out,\n      Connection_Command_In = Connection_Command_In\n    )\n  }\n  val VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3 : VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge = {\n    val Observed = Port[Base_Types.Bits] (id = portId\"48\", name = \"VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed\", mode = EventIn)\n    val Suspect_Traffic_Out = Port[Base_Types.Bits] (id = portId\"49\", name = \"VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out\", mode = EventOut)\n\n    VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge(\n      id = bridgeId\"6\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      Observed = Observed,\n      Suspect_Traffic_Out = Suspect_Traffic_Out\n    )\n  }\n\n  val ad : ArchitectureDescription = {\n    TranspilerUtil.touch()\n\n    ArchitectureDescription(\n      components = IS[Art.BridgeId, Bridge] (VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager, VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate, VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1, VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2, VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low, VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high, VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3),\n\n      connections = IS[Art.ConnectionId, UConnection] (Connection(from = VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.AttestationRequest, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.AttestationRequest),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.TrustedIds, to = VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.TrustedIds),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.TerminateAttestation, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.TerminateAttestation),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.SHM_QUEUE_Request_Out, to = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.Request_In),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.Connection_Command_Out, to = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.Connection_Command_In),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1.Suspect_Traffic_Out, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.Suspect_Traffic_In1),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2.Suspect_Traffic_Out, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.Suspect_Traffic_In2),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.SHM_QUEUE_Request_Out, to = VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.SHM_QUEUE_Request_In),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.AttestationResponse, to = VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.AttestationResponse),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.Connection_Command_Out, to = VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.Connection_Command_In),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.InitiateAttestation, to = VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.InitiateAttestation),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.Response_Out, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.Response_In),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.ADSB_Messages_Out, to = VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1.Observed),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.ADSB_Messages_Out, to = VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2.Observed),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.ADSB_Messages_Out, to = VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3.Observed),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.ADSB_Messages_Out, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.ADSB_Messages_In),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.SHM_HEADER_adsb_to_ptab, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.SHM_HEADER_adsb_to_ptab),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.Connection_Command_Out, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.Connection_Command_In),\n                                                       Connection(from = VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3.Suspect_Traffic_Out, to = VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.Suspect_Traffic_In3))\n    )\n  }\n}\n\nobject TranspilerUtil {\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ add types used in Platform.receive and Platform.receiveAsync\n      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId\"0\", Base_Types.Boolean_Payload(T))\n      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId\"0\", None())\n\n      \/\/ touch process\/thread timing properties\n      println(Schedulers.VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0_timingProperties)\n      println(Schedulers.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_timingProperties)\n      println(Schedulers.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_timingProperties)\n      println(Schedulers.VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_timingProperties)\n      println(Schedulers.VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_timingProperties)\n      println(Schedulers.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_timingProperties)\n      println(Schedulers.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_timingProperties)\n      println(Schedulers.VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_timingProperties)\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      {\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.logError(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.logError(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.put_AttestationRequest(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.put_AttestationRequest(Base_Types.Bits_example())\n        val apiUsage_AttestationResponse: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.get_AttestationResponse()\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.put_TrustedIds(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.put_TrustedIds(Base_Types.Bits_example())\n        val apiUsage_InitiateAttestation: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.get_InitiateAttestation()\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.put_TerminateAttestation(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.put_TerminateAttestation(Base_Types.Bits_example())\n      }\n      {\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logError(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logError(\"\")\n        val apiUsage_SHM_QUEUE_Request_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_SHM_QUEUE_Request_In()\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n        val apiUsage_Connection_Command_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_Connection_Command_In()\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n        val apiUsage_TrustedIds: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_TrustedIds()\n      }\n      {\n        VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api.get.logError(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.logError(\"\")\n        val apiUsage_Observed: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.get_Observed()\n        VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n      }\n      {\n        VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api.get.logError(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.logError(\"\")\n        val apiUsage_Observed: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.get_Observed()\n        VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n      }\n      {\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.logError(\"\")\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.logError(\"\")\n        val apiUsage_ADSB_Messages_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_ADSB_Messages_In()\n        val apiUsage_Response_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Response_In()\n        val apiUsage_AttestationRequest: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_AttestationRequest()\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_ADSB_Heartbeat_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_ADSB_Heartbeat_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_ADSB_Ownship_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_ADSB_Ownship_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_ADSB_Traffic_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_ADSB_Traffic_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Response_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Response_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_AttestationRequest(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_AttestationRequest(Base_Types.Bits_example())\n        val apiUsage_SHM_HEADER_adsb_to_ptab: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_SHM_HEADER_adsb_to_ptab()\n        val apiUsage_Connection_Command_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Connection_Command_In()\n        val apiUsage_Suspect_Traffic_In1: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Suspect_Traffic_In1()\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Suspect_Traffic_Out1(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Suspect_Traffic_Out1(Base_Types.Bits_example())\n        val apiUsage_Suspect_Traffic_In2: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Suspect_Traffic_In2()\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Suspect_Traffic_Out2(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Suspect_Traffic_Out2(Base_Types.Bits_example())\n        val apiUsage_Suspect_Traffic_In3: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Suspect_Traffic_In3()\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Suspect_Traffic_Out3(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Suspect_Traffic_Out3(Base_Types.Bits_example())\n        val apiUsage_SHM_QUEUE_Request_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_SHM_QUEUE_Request_In()\n        val apiUsage_SHM_QUEUE_AttestationResponse: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_SHM_QUEUE_AttestationResponse()\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_AttestationResponse(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_AttestationResponse(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_InitiateAttestation(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_InitiateAttestation(Base_Types.Bits_example())\n        val apiUsage_TerminateAttestation: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_TerminateAttestation()\n      }\n      {\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.logError(\"\")\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.logError(\"\")\n        val apiUsage_SHM_QUEUE_ADSB_Heartbeat_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_SHM_QUEUE_ADSB_Heartbeat_In()\n        val apiUsage_SHM_QUEUE_ADSB_Ownship_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_SHM_QUEUE_ADSB_Ownship_In()\n        val apiUsage_SHM_QUEUE_ADSB_Traffic_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_SHM_QUEUE_ADSB_Traffic_In()\n        val apiUsage_SHM_QUEUE_Response_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_SHM_QUEUE_Response_In()\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_Response_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_Response_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_ADSB_Messages_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_ADSB_Messages_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_SHM_HEADER_adsb_to_ptab(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_SHM_HEADER_adsb_to_ptab(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n        val apiUsage_Request_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_Request_In()\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n        val apiUsage_Connection_Command_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_Connection_Command_In()\n      }\n      {\n        VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api.get.logError(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.logInfo(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.logDebug(\"\")\n        VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.logError(\"\")\n        val apiUsage_Observed: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.get_Observed()\n        VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n        VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n      }\n    }\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/architecture\/VPM_ben__SeL4\/Demo.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4\n\nimport org.sireum._\nimport art.scheduling.Scheduler\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject Demo extends App {\n\n  \/** @return the scheduler to use for JVM based simulation as well as the 'default' scheduler\n    *         that will be used when taking this program down to C\/Linux.  Refer to\n    *         'bin\/run.sh -h' if you want to use a specific scheduler for C.  If the scheduler\n    *         accepts a schedule and you want to provide that in C then just pass None()\n    *\n    *         If you want to use the legacy scheduler for C then you must use\n    *           bin\/transpile.cmd --legacy\n    *           bin\/compile.cmd\n    *           bin\/run.sh --legacy\n    *\/\n  def defaultScheduler(): Scheduler = {\n    return Schedulers.getRoundRobinScheduler(None())\n  }\n\n  def main(args: ISZ[String]): Z = {\n    Cli(' ').parseRun(args, 0) match {\n      case Some(o: Cli.RunOption) =>\n        val scheduler: Scheduler = o.scheduler match {\n          case Cli.RunChoice.Default => defaultScheduler()\n          case Cli.RunChoice.RoundRobin => Schedulers.getRoundRobinScheduler(None())\n          case Cli.RunChoice.Static => Schedulers.getStaticScheduler(None())\n          case Cli.RunChoice.Legacy => Schedulers.getLegacyScheduler()\n        }\n        art.Art.run(Arch.ad, scheduler)\n      case Some(o: Cli.HelpOption) =>\n      case _ => return 1\n    }\n    return 0\n  }\n}\n\nobject Cli {\n\n  @datatype trait RunTopOption\n\n  @datatype class HelpOption extends RunTopOption\n\n  @enum object RunChoice {\n    'Default\n    'RoundRobin\n    'Static\n    'Legacy\n  }\n\n  @datatype class RunOption(\n                             val help: String,\n                             val args: ISZ[String],\n                             val scheduler: RunChoice.Type\n                           ) extends RunTopOption\n}\n\nimport Cli._\n\n@record class Cli(val pathSep: C) {\n\n  def parseRunChoiceH(arg: String): Option[RunChoice.Type] = {\n    arg match {\n      case \"default\" => return Some(RunChoice.Default)\n      case \"roundRobin\" => return Some(RunChoice.RoundRobin)\n      case \"static\" => return Some(RunChoice.Static)\n      case \"legacy\" => return Some(RunChoice.Legacy)\n      case s =>\n        eprintln(s\"Expecting one of the following: { default, roundRobin, static, legacy }, but found '$s'.\")\n        return None()\n    }\n  }\n\n  def parseRunChoice(args: ISZ[String], i: Z): Option[RunChoice.Type] = {\n    if (i >= args.size) {\n      eprintln(\"Expecting one of the following: { default, roundRobin, static, legacy }, but none found.\")\n      return None()\n    }\n    val r = parseRunChoiceH(args(i))\n    return r\n  }\n\n  def parseRun(args: ISZ[String], i: Z): Option[RunTopOption] = {\n\n    def help(): Unit = {\n      println(\"Run Slang Embedded Program\")\n      println()\n      println(\"Usage: <option>*\")\n      println()\n      println(\"Available Options:\")\n      println(\"-s, --scheduler          The scheduler to use.  See Demo.scala for information\")\n      println(\"                           on 'default' (expects one of { default, roundRobin,\")\n      println(\"                           static, legacy }; default: default)\")\n      println(\"-h, --help               Display this information\")\n    }\n\n    var scheduler: RunChoice.Type = RunChoice.Default\n    var j = i\n    var isOption = T\n    while (j < args.size && isOption) {\n      var arg = args(j)\n      if (arg == \"-h\" || arg == \"--help\") {\n        help()\n        return Some(HelpOption())\n      } else if (arg == \"-s\" || arg == \"--scheduler\") {\n        val o: Option[RunChoice.Type] = parseRunChoice(args, j + 1)\n        o match {\n          case Some(v) => scheduler = v\n          case _ => return None()\n        }\n      } else {\n        eprintln(s\"Unrecognized option '$arg'.\")\n        return None()\n      }\n      j = j + 2\n    }\n\n    return Some(RunOption(\"\", args, scheduler))\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/architecture\/VPM_ben__SeL4\/Schedulers.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage VPM_ben__SeL4\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.legacy.Legacy\nimport art.scheduling.roundrobin.RoundRobin\nimport art.scheduling.static.Schedule.{DSchedule, DScheduleSpec, Slot}\nimport art.scheduling.static.StaticScheduler\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class ProcessorTimingProperties(val clockPeriod: Option[Z],\n                                          val framePeriod: Option[Z],\n                                          val maxDomain: Option[Z],\n                                          val slotTime: Option[Z])\n\n@datatype class ThreadTimingProperties(val domain: Option[Z],\n                                       val computeExecutionTime: Option[(Z, Z)])\n\nobject Schedulers {\n\n  val VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0_timingProperties: ProcessorTimingProperties = ProcessorTimingProperties(\n    clockPeriod = Some(2),\n    framePeriod = Some(500),\n    maxDomain = Some(8),\n    slotTime = None())\n\n  val VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = Some((10, 50)),\n    domain = Some(7))\n\n  val VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = Some((10, 50)),\n    domain = Some(8))\n\n  val VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = Some((10, 50)),\n    domain = Some(4))\n\n  val VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = Some((10, 50)),\n    domain = Some(5))\n\n  val VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = Some((10, 50)),\n    domain = Some(3))\n\n  val VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = Some((10, 50)),\n    domain = Some(2))\n\n  val VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = Some((10, 50)),\n    domain = Some(6))\n\n  \/\/ roundRobinSchedule represents the component dispatch order\n  val roundRobinSchedule: ISZ[Art.BridgeId] = {\n    \/\/ convert IS[Art.BridgeId, art.Bridge] to an IS[Z, Art.BridgeId] to allow bridges to be dispatched\n    \/\/ multiple times during a hyper-period\n    var ret: ISZ[Art.BridgeId] = ISZ()\n    for(e <- Arch.ad.components) {\n      ret = ret :+ e.id\n    }\n    ret\n  }\n\n  val framePeriod: Z = 500\n  val numComponents: Z = Arch.ad.components.size\n  val maxExecutionTime: Z = numComponents \/ framePeriod\n\n  \/\/ staticSchedule represents the component dispatch order\n  val staticSchedule: DScheduleSpec = DScheduleSpec(0, 0, DSchedule(ISZ(\n    Slot(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.id, maxExecutionTime),\n    Slot(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.id, maxExecutionTime),\n    Slot(Arch.VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1.id, maxExecutionTime),\n    Slot(Arch.VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2.id, maxExecutionTime),\n    Slot(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.id, maxExecutionTime),\n    Slot(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.id, maxExecutionTime),\n    Slot(Arch.VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3.id, maxExecutionTime)\n  )))\n\n\n  def getRoundRobinScheduler(schedule: Option[ISZ[Art.BridgeId]]): RoundRobin = {\n    if(roundRobinSchedule.isEmpty) {} \/\/ line needed for transpiler; do not remove\n    schedule match {\n      case Some(s) => return RoundRobin(s)\n      case _ => return RoundRobin(ScheduleProviderI.getRoundRobinOrder())\n    }\n  }\n\n  def getStaticScheduler(schedule: Option[DScheduleSpec]): StaticScheduler = {\n    if(staticSchedule.schedule.slots.isEmpty) {} \/\/ line needed for transpiler; do not remove\n    schedule match {\n      case Some(s) => return StaticScheduler(Arch.ad.components, s)\n      case _ => return StaticScheduler(Arch.ad.components, ScheduleProviderI.getStaticSchedule())\n    }\n  }\n\n  def getLegacyScheduler(): Legacy = {\n    return Legacy(Arch.ad.components)\n  }\n}\n\n\/\/ the purpose of this extension is to allow users to provide custom schedules\n\/\/ at the C level after transpiling\n@ext(name = \"ScheduleProvider\") object ScheduleProviderI {\n  def getRoundRobinOrder(): ISZ[Art.BridgeId] = $\n  def getStaticSchedule(): DScheduleSpec = $\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/architecture\/VPM_ben__SeL4\/ScheduleProvider.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.static.Schedule.DScheduleSpec\n\n\/\/ This file was auto-generated.  Do not edit\n\nobject ScheduleProvider {\n\n  def getRoundRobinOrder(): ISZ[Art.BridgeId] = {\n    return Schedulers.roundRobinSchedule\n  }\n\n  def getStaticSchedule(): DScheduleSpec = {\n    return Schedulers.staticSchedule\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/inspector\/VPM_ben__SeL4\/InspectorDemo.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4\n\nimport art.{ArchitectureDescription, Bridge, DataContent, UPort}\nimport org.reactivestreams.Publisher\nimport org.sireum.hamr.inspector.common.{Filter, Injection, InspectionBlueprint, Msg, Rule}\nimport org.sireum.hamr.inspector.capabilities.InspectorCapabilitiesLauncher\nimport org.sireum.hamr.inspector.gui.InspectorGUILauncher\nimport org.sireum.hamr.inspector.stream.Flux\n\nobject InspectorDemo extends App {\n\n  {\n    InspectorCapabilitiesLauncher.run(Blueprint)\n\n    val filters: Set[Filter] = Set(NoFilter, EvensOnly)\n    val rules: Set[Rule] = Set(Require100OrMore)\n    val injections: Set[Injection] = Set()\n\n    InspectorGUILauncher.run(Blueprint, filters, rules, injections, args)\n  }\n\n  object Blueprint extends InspectionBlueprint {\n    override def ad(): ArchitectureDescription = Arch.ad\n    override def serializer(): DataContent => String = JSON.from_artDataContent(_, true).value\n    override def deserializer(): String => DataContent = JSON.to_artDataContent(_).left\n  }\n\n  object NoFilter extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in\n  }\n\n  object EvensOnly extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in.filter(_.sequence % 2 == 0)\n  }\n\n  object Require100OrMore extends Rule {\n    override def rule(in: Flux[Msg]): Publisher[_] = in.skip(99).next().single()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art.{Art, ArtNative, Empty}\nimport VPM_ben__SeL4._\n\n\/\/ This file was auto-generated.  Do not edit\n@msig trait CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param AttestationResponse payloads for event data port AttestationResponse.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AttestationResponse will be used\n   * @param InitiateAttestation payloads for event data port InitiateAttestation.\n   *   ART currently supports single element event data queues so\n   *   only the last element of InitiateAttestation will be used\n   *\/\n  def put_concrete_inputs(AttestationResponse : ISZ[Base_Types.Bits],\n                          InitiateAttestation : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- AttestationResponse){\n      put_AttestationResponse(v)\n    }\n    for(v <- InitiateAttestation){\n      put_InitiateAttestation(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param AttestationRequest method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AttestationRequest'.\n   * @param TrustedIds method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'TrustedIds'.\n   * @param TerminateAttestation method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'TerminateAttestation'.\n   *\/\n  def check_concrete_output(AttestationRequest: ISZ[Base_Types.Bits] => B,\n                            TrustedIds: ISZ[Base_Types.Bits] => B,\n                            TerminateAttestation: ISZ[Base_Types.Bits] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var AttestationRequestValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AttestationRequest().nonEmpty) { AttestationRequestValue = AttestationRequestValue :+ get_AttestationRequest().get }\n    if(!AttestationRequest(AttestationRequestValue)) {\n      testFailures = testFailures :+ st\"'AttestationRequest' did not match expected: received ${AttestationRequestValue.size} events with the following payloads ${AttestationRequestValue}\"\n    }\n    var TrustedIdsValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_TrustedIds().nonEmpty) { TrustedIdsValue = TrustedIdsValue :+ get_TrustedIds().get }\n    if(!TrustedIds(TrustedIdsValue)) {\n      testFailures = testFailures :+ st\"'TrustedIds' did not match expected: received ${TrustedIdsValue.size} events with the following payloads ${TrustedIdsValue}\"\n    }\n    var TerminateAttestationValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_TerminateAttestation().nonEmpty) { TerminateAttestationValue = TerminateAttestationValue :+ get_TerminateAttestation().get }\n    if(!TerminateAttestation(TerminateAttestationValue)) {\n      testFailures = testFailures :+ st\"'TerminateAttestation' did not match expected: received ${TerminateAttestationValue.size} events with the following payloads ${TerminateAttestationValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_AttestationResponse(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.operational_api.AttestationResponse_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_InitiateAttestation(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.operational_api.InitiateAttestation_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AttestationRequest(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AttestationRequest_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port AttestationRequest.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AttestationRequest_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.initialization_api.AttestationRequest_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_TrustedIds(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_TrustedIds_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port TrustedIds.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_TrustedIds_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.initialization_api.TrustedIds_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_TerminateAttestation(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_TerminateAttestation_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port TerminateAttestation.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_TerminateAttestation_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager.initialization_api.TerminateAttestation_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/bridge\/VPM_ben__SeL4\/VPM\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4.VPM._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Test extends CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.{CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  AttestationRequest: Port[Base_Types.Bits],\n  AttestationResponse: Port[Base_Types.Bits],\n  TrustedIds: Port[Base_Types.Bits],\n  InitiateAttestation: Port[Base_Types.Bits],\n  TerminateAttestation: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](AttestationResponse,\n                              InitiateAttestation),\n\n    eventOuts = ISZ[art.UPort](AttestationRequest,\n                               TrustedIds,\n                               TerminateAttestation)\n  )\n\n  val initialization_api : CASE_AttestationManager_Impl_Initialization_Api = {\n    val api = CASE_AttestationManager_Impl_Initialization_Api(\n      id,\n      AttestationRequest.id,\n      AttestationResponse.id,\n      TrustedIds.id,\n      InitiateAttestation.id,\n      TerminateAttestation.id\n    )\n    CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_AttestationManager_Impl_Operational_Api = {\n    val api = CASE_AttestationManager_Impl_Operational_Api(\n      id,\n      AttestationRequest.id,\n      AttestationResponse.id,\n      TrustedIds.id,\n      InitiateAttestation.id,\n      TerminateAttestation.id\n    )\n    CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.EntryPoints(\n      id,\n\n      AttestationRequest.id,\n      AttestationResponse.id,\n      TrustedIds.id,\n      InitiateAttestation.id,\n      TerminateAttestation.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge {\n\n  var c_initialization_api: Option[CASE_AttestationManager_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_AttestationManager_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_BridgeId : Art.BridgeId,\n    AttestationRequest_Id : Art.PortId,\n    AttestationResponse_Id : Art.PortId,\n    TrustedIds_Id : Art.PortId,\n    InitiateAttestation_Id : Art.PortId,\n    TerminateAttestation_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: CASE_AttestationManager_Impl_Initialization_Api,\n    operational_api: CASE_AttestationManager_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(AttestationResponse_Id,\n                                             InitiateAttestation_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(AttestationRequest_Id,\n                                              TrustedIds_Id,\n                                              TerminateAttestation_Id)\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_AttestationManager_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_AttestationManager_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_AttestationManager_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_AttestationManager_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_AttestationManager_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_AttestationManager_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_AttestationManager_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_AttestationManager_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_AttestationManager_Impl_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\n\n@sig trait CASE_AttestationManager_Impl_Api {\n  def id: Art.BridgeId\n  def AttestationRequest_Id : Art.PortId\n  def AttestationResponse_Id : Art.PortId\n  def TrustedIds_Id : Art.PortId\n  def InitiateAttestation_Id : Art.PortId\n  def TerminateAttestation_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var AttestationRequest: Option[Base_Types.Bits] = $\n\n  def put_AttestationRequest(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(AttestationRequest),\n      Ensures(\n        AttestationRequest == Some(value)\n      )\n    )\n    Spec {\n      AttestationRequest = Some(value)\n    }\n\n    Art.putValue(AttestationRequest_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var TrustedIds: Option[Base_Types.Bits] = $\n\n  def put_TrustedIds(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(TrustedIds),\n      Ensures(\n        TrustedIds == Some(value)\n      )\n    )\n    Spec {\n      TrustedIds = Some(value)\n    }\n\n    Art.putValue(TrustedIds_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var TerminateAttestation: Option[Base_Types.Bits] = $\n\n  def put_TerminateAttestation(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(TerminateAttestation),\n      Ensures(\n        TerminateAttestation == Some(value)\n      )\n    )\n    Spec {\n      TerminateAttestation = Some(value)\n    }\n\n    Art.putValue(TerminateAttestation_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_AttestationManager_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val AttestationRequest_Id : Art.PortId,\n  val AttestationResponse_Id : Art.PortId,\n  val TrustedIds_Id : Art.PortId,\n  val InitiateAttestation_Id : Art.PortId,\n  val TerminateAttestation_Id : Art.PortId) extends CASE_AttestationManager_Impl_Api\n\n@datatype class CASE_AttestationManager_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val AttestationRequest_Id : Art.PortId,\n  val AttestationResponse_Id : Art.PortId,\n  val TrustedIds_Id : Art.PortId,\n  val InitiateAttestation_Id : Art.PortId,\n  val TerminateAttestation_Id : Art.PortId) extends CASE_AttestationManager_Impl_Api {\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var AttestationResponse: Base_Types.Bits = $\n\n  def get_AttestationResponse() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(AttestationResponse)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(AttestationResponse_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AttestationResponse.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var InitiateAttestation: Base_Types.Bits = $\n\n  def get_InitiateAttestation() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(InitiateAttestation)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(InitiateAttestation_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port InitiateAttestation.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/component\/VPM_ben__SeL4\/VPM\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager {\n\n  def initialise(api: CASE_AttestationManager_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_AttestationManager_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_AttestationManager_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_AttestationManager_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_AttestationManager_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_AttestationManager_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art.{Art, ArtNative, Empty}\nimport VPM_ben__SeL4._\n\n\/\/ This file was auto-generated.  Do not edit\n@msig trait CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param SHM_QUEUE_Request_In payloads for event data port SHM_QUEUE_Request_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of SHM_QUEUE_Request_In will be used\n   * @param Connection_Command_In payloads for event data port Connection_Command_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Connection_Command_In will be used\n   * @param TrustedIds payloads for event data port TrustedIds.\n   *   ART currently supports single element event data queues so\n   *   only the last element of TrustedIds will be used\n   *\/\n  def put_concrete_inputs(SHM_QUEUE_Request_In : ISZ[Base_Types.Bits],\n                          Connection_Command_In : ISZ[Base_Types.Bits],\n                          TrustedIds : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- SHM_QUEUE_Request_In){\n      put_SHM_QUEUE_Request_In(v)\n    }\n    for(v <- Connection_Command_In){\n      put_Connection_Command_In(v)\n    }\n    for(v <- TrustedIds){\n      put_TrustedIds(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param SHM_QUEUE_Request_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_Request_Out'.\n   * @param Connection_Command_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'Connection_Command_Out'.\n   *\/\n  def check_concrete_output(SHM_QUEUE_Request_Out: ISZ[Base_Types.Bits] => B,\n                            Connection_Command_Out: ISZ[Base_Types.Bits] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var SHM_QUEUE_Request_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_Request_Out().nonEmpty) { SHM_QUEUE_Request_OutValue = SHM_QUEUE_Request_OutValue :+ get_SHM_QUEUE_Request_Out().get }\n    if(!SHM_QUEUE_Request_Out(SHM_QUEUE_Request_OutValue)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_Request_Out' did not match expected: received ${SHM_QUEUE_Request_OutValue.size} events with the following payloads ${SHM_QUEUE_Request_OutValue}\"\n    }\n    var Connection_Command_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_Connection_Command_Out().nonEmpty) { Connection_Command_OutValue = Connection_Command_OutValue :+ get_Connection_Command_Out().get }\n    if(!Connection_Command_Out(Connection_Command_OutValue)) {\n      testFailures = testFailures :+ st\"'Connection_Command_Out' did not match expected: received ${Connection_Command_OutValue.size} events with the following payloads ${Connection_Command_OutValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_SHM_QUEUE_Request_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.operational_api.SHM_QUEUE_Request_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_Connection_Command_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.operational_api.Connection_Command_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_TrustedIds(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.operational_api.TrustedIds_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_Request_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_Request_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_Request_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_Request_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.initialization_api.SHM_QUEUE_Request_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_Connection_Command_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_Connection_Command_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port Connection_Command_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_Connection_Command_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate.initialization_api.Connection_Command_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/bridge\/VPM_ben__SeL4\/VPM\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4.VPM._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Test extends CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.{CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  SHM_QUEUE_Request_In: Port[Base_Types.Bits],\n  SHM_QUEUE_Request_Out: Port[Base_Types.Bits],\n  Connection_Command_In: Port[Base_Types.Bits],\n  Connection_Command_Out: Port[Base_Types.Bits],\n  TrustedIds: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](SHM_QUEUE_Request_In,\n                              Connection_Command_In,\n                              TrustedIds),\n\n    eventOuts = ISZ[art.UPort](SHM_QUEUE_Request_Out,\n                               Connection_Command_Out)\n  )\n\n  val initialization_api : CASE_AttestationGate_Impl_Initialization_Api = {\n    val api = CASE_AttestationGate_Impl_Initialization_Api(\n      id,\n      SHM_QUEUE_Request_In.id,\n      SHM_QUEUE_Request_Out.id,\n      Connection_Command_In.id,\n      Connection_Command_Out.id,\n      TrustedIds.id\n    )\n    CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_AttestationGate_Impl_Operational_Api = {\n    val api = CASE_AttestationGate_Impl_Operational_Api(\n      id,\n      SHM_QUEUE_Request_In.id,\n      SHM_QUEUE_Request_Out.id,\n      Connection_Command_In.id,\n      Connection_Command_Out.id,\n      TrustedIds.id\n    )\n    CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.EntryPoints(\n      id,\n\n      SHM_QUEUE_Request_In.id,\n      SHM_QUEUE_Request_Out.id,\n      Connection_Command_In.id,\n      Connection_Command_Out.id,\n      TrustedIds.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge {\n\n  var c_initialization_api: Option[CASE_AttestationGate_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_AttestationGate_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_BridgeId : Art.BridgeId,\n    SHM_QUEUE_Request_In_Id : Art.PortId,\n    SHM_QUEUE_Request_Out_Id : Art.PortId,\n    Connection_Command_In_Id : Art.PortId,\n    Connection_Command_Out_Id : Art.PortId,\n    TrustedIds_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: CASE_AttestationGate_Impl_Initialization_Api,\n    operational_api: CASE_AttestationGate_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(SHM_QUEUE_Request_In_Id,\n                                             Connection_Command_In_Id,\n                                             TrustedIds_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(SHM_QUEUE_Request_Out_Id,\n                                              Connection_Command_Out_Id)\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_AttestationGate_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_AttestationGate_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_AttestationGate_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_AttestationGate_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_AttestationGate_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_AttestationGate_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_AttestationGate_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_AttestationGate_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_AttestationGate_Impl_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\n\n@sig trait CASE_AttestationGate_Impl_Api {\n  def id: Art.BridgeId\n  def SHM_QUEUE_Request_In_Id : Art.PortId\n  def SHM_QUEUE_Request_Out_Id : Art.PortId\n  def Connection_Command_In_Id : Art.PortId\n  def Connection_Command_Out_Id : Art.PortId\n  def TrustedIds_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_Request_Out: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_Request_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_Request_Out),\n      Ensures(\n        SHM_QUEUE_Request_Out == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_Request_Out = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_Request_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var Connection_Command_Out: Option[Base_Types.Bits] = $\n\n  def put_Connection_Command_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(Connection_Command_Out),\n      Ensures(\n        Connection_Command_Out == Some(value)\n      )\n    )\n    Spec {\n      Connection_Command_Out = Some(value)\n    }\n\n    Art.putValue(Connection_Command_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_AttestationGate_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val SHM_QUEUE_Request_In_Id : Art.PortId,\n  val SHM_QUEUE_Request_Out_Id : Art.PortId,\n  val Connection_Command_In_Id : Art.PortId,\n  val Connection_Command_Out_Id : Art.PortId,\n  val TrustedIds_Id : Art.PortId) extends CASE_AttestationGate_Impl_Api\n\n@datatype class CASE_AttestationGate_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val SHM_QUEUE_Request_In_Id : Art.PortId,\n  val SHM_QUEUE_Request_Out_Id : Art.PortId,\n  val Connection_Command_In_Id : Art.PortId,\n  val Connection_Command_Out_Id : Art.PortId,\n  val TrustedIds_Id : Art.PortId) extends CASE_AttestationGate_Impl_Api {\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var SHM_QUEUE_Request_In: Base_Types.Bits = $\n\n  def get_SHM_QUEUE_Request_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(SHM_QUEUE_Request_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(SHM_QUEUE_Request_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port SHM_QUEUE_Request_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Connection_Command_In: Base_Types.Bits = $\n\n  def get_Connection_Command_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Connection_Command_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Connection_Command_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Connection_Command_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var TrustedIds: Base_Types.Bits = $\n\n  def get_TrustedIds() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(TrustedIds)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(TrustedIds_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port TrustedIds.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/component\/VPM_ben__SeL4\/VPM\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate {\n\n  def initialise(api: CASE_AttestationGate_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_AttestationGate_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_AttestationGate_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_AttestationGate_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_AttestationGate_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_AttestationGate_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art.{Art, ArtNative, Empty}\nimport VPM_ben__SeL4._\n\n\/\/ This file was auto-generated.  Do not edit\n@msig trait CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param Observed payloads for event data port Observed.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Observed will be used\n   *\/\n  def put_concrete_inputs(Observed : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- Observed){\n      put_Observed(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param Suspect_Traffic_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'Suspect_Traffic_Out'.\n   *\/\n  def check_concrete_output(Suspect_Traffic_Out: ISZ[Base_Types.Bits] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var Suspect_Traffic_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_Suspect_Traffic_Out().nonEmpty) { Suspect_Traffic_OutValue = Suspect_Traffic_OutValue :+ get_Suspect_Traffic_Out().get }\n    if(!Suspect_Traffic_Out(Suspect_Traffic_OutValue)) {\n      testFailures = testFailures :+ st\"'Suspect_Traffic_Out' did not match expected: received ${Suspect_Traffic_OutValue.size} events with the following payloads ${Suspect_Traffic_OutValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_Observed(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1.operational_api.Observed_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_Suspect_Traffic_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_Suspect_Traffic_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port Suspect_Traffic_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_Suspect_Traffic_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1.initialization_api.Suspect_Traffic_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4.VPM._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Test extends CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.{CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1 => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  Observed: Port[Base_Types.Bits],\n  Suspect_Traffic_Out: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](Observed),\n\n    eventOuts = ISZ[art.UPort](Suspect_Traffic_Out)\n  )\n\n  val initialization_api : CASE_Monitor1_Impl_Initialization_Api = {\n    val api = CASE_Monitor1_Impl_Initialization_Api(\n      id,\n      Observed.id,\n      Suspect_Traffic_Out.id\n    )\n    CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_Monitor1_Impl_Operational_Api = {\n    val api = CASE_Monitor1_Impl_Operational_Api(\n      id,\n      Observed.id,\n      Suspect_Traffic_Out.id\n    )\n    CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.EntryPoints(\n      id,\n\n      Observed.id,\n      Suspect_Traffic_Out.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge {\n\n  var c_initialization_api: Option[CASE_Monitor1_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_Monitor1_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_BridgeId : Art.BridgeId,\n    Observed_Id : Art.PortId,\n    Suspect_Traffic_Out_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: CASE_Monitor1_Impl_Initialization_Api,\n    operational_api: CASE_Monitor1_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(Observed_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(Suspect_Traffic_Out_Id)\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Monitor1_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor1_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_Monitor1_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_Monitor1_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_Monitor1_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_Monitor1_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Monitor1_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor1_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor1_Impl_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\n\n@sig trait CASE_Monitor1_Impl_Api {\n  def id: Art.BridgeId\n  def Observed_Id : Art.PortId\n  def Suspect_Traffic_Out_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var Suspect_Traffic_Out: Option[Base_Types.Bits] = $\n\n  def put_Suspect_Traffic_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(Suspect_Traffic_Out),\n      Ensures(\n        Suspect_Traffic_Out == Some(value)\n      )\n    )\n    Spec {\n      Suspect_Traffic_Out = Some(value)\n    }\n\n    Art.putValue(Suspect_Traffic_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_Monitor1_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val Observed_Id : Art.PortId,\n  val Suspect_Traffic_Out_Id : Art.PortId) extends CASE_Monitor1_Impl_Api\n\n@datatype class CASE_Monitor1_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val Observed_Id : Art.PortId,\n  val Suspect_Traffic_Out_Id : Art.PortId) extends CASE_Monitor1_Impl_Api {\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Observed: Base_Types.Bits = $\n\n  def get_Observed() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Observed)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Observed_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Observed.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/component\/VPM_ben__SeL4\/VPM\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1 {\n\n  def initialise(api: CASE_Monitor1_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_Monitor1_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_Monitor1_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_Monitor1_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_Monitor1_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_Monitor1_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art.{Art, ArtNative, Empty}\nimport VPM_ben__SeL4._\n\n\/\/ This file was auto-generated.  Do not edit\n@msig trait CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param Observed payloads for event data port Observed.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Observed will be used\n   *\/\n  def put_concrete_inputs(Observed : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- Observed){\n      put_Observed(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param Suspect_Traffic_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'Suspect_Traffic_Out'.\n   *\/\n  def check_concrete_output(Suspect_Traffic_Out: ISZ[Base_Types.Bits] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var Suspect_Traffic_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_Suspect_Traffic_Out().nonEmpty) { Suspect_Traffic_OutValue = Suspect_Traffic_OutValue :+ get_Suspect_Traffic_Out().get }\n    if(!Suspect_Traffic_Out(Suspect_Traffic_OutValue)) {\n      testFailures = testFailures :+ st\"'Suspect_Traffic_Out' did not match expected: received ${Suspect_Traffic_OutValue.size} events with the following payloads ${Suspect_Traffic_OutValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_Observed(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2.operational_api.Observed_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_Suspect_Traffic_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_Suspect_Traffic_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port Suspect_Traffic_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_Suspect_Traffic_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2.initialization_api.Suspect_Traffic_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4.VPM._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Test extends CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.{CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2 => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  Observed: Port[Base_Types.Bits],\n  Suspect_Traffic_Out: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](Observed),\n\n    eventOuts = ISZ[art.UPort](Suspect_Traffic_Out)\n  )\n\n  val initialization_api : CASE_Monitor2_Impl_Initialization_Api = {\n    val api = CASE_Monitor2_Impl_Initialization_Api(\n      id,\n      Observed.id,\n      Suspect_Traffic_Out.id\n    )\n    CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_Monitor2_Impl_Operational_Api = {\n    val api = CASE_Monitor2_Impl_Operational_Api(\n      id,\n      Observed.id,\n      Suspect_Traffic_Out.id\n    )\n    CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.EntryPoints(\n      id,\n\n      Observed.id,\n      Suspect_Traffic_Out.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge {\n\n  var c_initialization_api: Option[CASE_Monitor2_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_Monitor2_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_BridgeId : Art.BridgeId,\n    Observed_Id : Art.PortId,\n    Suspect_Traffic_Out_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: CASE_Monitor2_Impl_Initialization_Api,\n    operational_api: CASE_Monitor2_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(Observed_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(Suspect_Traffic_Out_Id)\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Monitor2_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor2_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_Monitor2_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_Monitor2_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_Monitor2_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_Monitor2_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Monitor2_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor2_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor2_Impl_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\n\n@sig trait CASE_Monitor2_Impl_Api {\n  def id: Art.BridgeId\n  def Observed_Id : Art.PortId\n  def Suspect_Traffic_Out_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var Suspect_Traffic_Out: Option[Base_Types.Bits] = $\n\n  def put_Suspect_Traffic_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(Suspect_Traffic_Out),\n      Ensures(\n        Suspect_Traffic_Out == Some(value)\n      )\n    )\n    Spec {\n      Suspect_Traffic_Out = Some(value)\n    }\n\n    Art.putValue(Suspect_Traffic_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_Monitor2_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val Observed_Id : Art.PortId,\n  val Suspect_Traffic_Out_Id : Art.PortId) extends CASE_Monitor2_Impl_Api\n\n@datatype class CASE_Monitor2_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val Observed_Id : Art.PortId,\n  val Suspect_Traffic_Out_Id : Art.PortId) extends CASE_Monitor2_Impl_Api {\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Observed: Base_Types.Bits = $\n\n  def get_Observed() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Observed)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Observed_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Observed.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/component\/VPM_ben__SeL4\/VPM\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2 {\n\n  def initialise(api: CASE_Monitor2_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_Monitor2_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_Monitor2_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_Monitor2_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_Monitor2_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_Monitor2_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/adapter_low_impl_SW_adapter_low_adapter_low_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art.{Art, ArtNative, Empty}\nimport VPM_ben__SeL4._\n\n\/\/ This file was auto-generated.  Do not edit\n@msig trait adapter_low_impl_SW_adapter_low_adapter_low_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param ADSB_Messages_In payloads for event data port ADSB_Messages_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of ADSB_Messages_In will be used\n   * @param Response_In payloads for event data port Response_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Response_In will be used\n   * @param AttestationRequest payloads for event data port AttestationRequest.\n   *   ART currently supports single element event data queues so\n   *   only the last element of AttestationRequest will be used\n   * @param SHM_HEADER_adsb_to_ptab payloads for event data port SHM_HEADER_adsb_to_ptab.\n   *   ART currently supports single element event data queues so\n   *   only the last element of SHM_HEADER_adsb_to_ptab will be used\n   * @param Connection_Command_In payloads for event data port Connection_Command_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Connection_Command_In will be used\n   * @param Suspect_Traffic_In1 payloads for event data port Suspect_Traffic_In1.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Suspect_Traffic_In1 will be used\n   * @param Suspect_Traffic_In2 payloads for event data port Suspect_Traffic_In2.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Suspect_Traffic_In2 will be used\n   * @param Suspect_Traffic_In3 payloads for event data port Suspect_Traffic_In3.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Suspect_Traffic_In3 will be used\n   * @param SHM_QUEUE_Request_In payloads for event data port SHM_QUEUE_Request_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of SHM_QUEUE_Request_In will be used\n   * @param SHM_QUEUE_AttestationResponse payloads for event data port SHM_QUEUE_AttestationResponse.\n   *   ART currently supports single element event data queues so\n   *   only the last element of SHM_QUEUE_AttestationResponse will be used\n   * @param TerminateAttestation payloads for event data port TerminateAttestation.\n   *   ART currently supports single element event data queues so\n   *   only the last element of TerminateAttestation will be used\n   *\/\n  def put_concrete_inputs(ADSB_Messages_In : ISZ[Base_Types.Bits],\n                          Response_In : ISZ[Base_Types.Bits],\n                          AttestationRequest : ISZ[Base_Types.Bits],\n                          SHM_HEADER_adsb_to_ptab : ISZ[Base_Types.Bits],\n                          Connection_Command_In : ISZ[Base_Types.Bits],\n                          Suspect_Traffic_In1 : ISZ[Base_Types.Bits],\n                          Suspect_Traffic_In2 : ISZ[Base_Types.Bits],\n                          Suspect_Traffic_In3 : ISZ[Base_Types.Bits],\n                          SHM_QUEUE_Request_In : ISZ[Base_Types.Bits],\n                          SHM_QUEUE_AttestationResponse : ISZ[Base_Types.Bits],\n                          TerminateAttestation : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- ADSB_Messages_In){\n      put_ADSB_Messages_In(v)\n    }\n    for(v <- Response_In){\n      put_Response_In(v)\n    }\n    for(v <- AttestationRequest){\n      put_AttestationRequest(v)\n    }\n    for(v <- SHM_HEADER_adsb_to_ptab){\n      put_SHM_HEADER_adsb_to_ptab(v)\n    }\n    for(v <- Connection_Command_In){\n      put_Connection_Command_In(v)\n    }\n    for(v <- Suspect_Traffic_In1){\n      put_Suspect_Traffic_In1(v)\n    }\n    for(v <- Suspect_Traffic_In2){\n      put_Suspect_Traffic_In2(v)\n    }\n    for(v <- Suspect_Traffic_In3){\n      put_Suspect_Traffic_In3(v)\n    }\n    for(v <- SHM_QUEUE_Request_In){\n      put_SHM_QUEUE_Request_In(v)\n    }\n    for(v <- SHM_QUEUE_AttestationResponse){\n      put_SHM_QUEUE_AttestationResponse(v)\n    }\n    for(v <- TerminateAttestation){\n      put_TerminateAttestation(v)\n    }\n  }\n\n\n  \/** helper function to check adapter_low_impl_SW_adapter_low_adapter_low's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param SHM_QUEUE_ADSB_Heartbeat_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_ADSB_Heartbeat_Out'.\n   * @param SHM_QUEUE_ADSB_Ownship_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_ADSB_Ownship_Out'.\n   * @param SHM_QUEUE_ADSB_Traffic_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_ADSB_Traffic_Out'.\n   * @param SHM_QUEUE_Response_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_Response_Out'.\n   * @param SHM_QUEUE_AttestationRequest method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_AttestationRequest'.\n   * @param SHM_QUEUE_Suspect_Traffic_Out1 method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_Suspect_Traffic_Out1'.\n   * @param SHM_QUEUE_Suspect_Traffic_Out2 method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_Suspect_Traffic_Out2'.\n   * @param SHM_QUEUE_Suspect_Traffic_Out3 method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_Suspect_Traffic_Out3'.\n   * @param SHM_QUEUE_Request_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_Request_Out'.\n   * @param AttestationResponse method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'AttestationResponse'.\n   * @param Connection_Command_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'Connection_Command_Out'.\n   * @param InitiateAttestation method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'InitiateAttestation'.\n   *\/\n  def check_concrete_output(SHM_QUEUE_ADSB_Heartbeat_Out: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_ADSB_Ownship_Out: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_ADSB_Traffic_Out: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_Response_Out: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_AttestationRequest: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_Suspect_Traffic_Out1: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_Suspect_Traffic_Out2: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_Suspect_Traffic_Out3: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_Request_Out: ISZ[Base_Types.Bits] => B,\n                            AttestationResponse: ISZ[Base_Types.Bits] => B,\n                            Connection_Command_Out: ISZ[Base_Types.Bits] => B,\n                            InitiateAttestation: ISZ[Base_Types.Bits] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var SHM_QUEUE_ADSB_Heartbeat_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_ADSB_Heartbeat_Out().nonEmpty) { SHM_QUEUE_ADSB_Heartbeat_OutValue = SHM_QUEUE_ADSB_Heartbeat_OutValue :+ get_SHM_QUEUE_ADSB_Heartbeat_Out().get }\n    if(!SHM_QUEUE_ADSB_Heartbeat_Out(SHM_QUEUE_ADSB_Heartbeat_OutValue)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_ADSB_Heartbeat_Out' did not match expected: received ${SHM_QUEUE_ADSB_Heartbeat_OutValue.size} events with the following payloads ${SHM_QUEUE_ADSB_Heartbeat_OutValue}\"\n    }\n    var SHM_QUEUE_ADSB_Ownship_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_ADSB_Ownship_Out().nonEmpty) { SHM_QUEUE_ADSB_Ownship_OutValue = SHM_QUEUE_ADSB_Ownship_OutValue :+ get_SHM_QUEUE_ADSB_Ownship_Out().get }\n    if(!SHM_QUEUE_ADSB_Ownship_Out(SHM_QUEUE_ADSB_Ownship_OutValue)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_ADSB_Ownship_Out' did not match expected: received ${SHM_QUEUE_ADSB_Ownship_OutValue.size} events with the following payloads ${SHM_QUEUE_ADSB_Ownship_OutValue}\"\n    }\n    var SHM_QUEUE_ADSB_Traffic_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_ADSB_Traffic_Out().nonEmpty) { SHM_QUEUE_ADSB_Traffic_OutValue = SHM_QUEUE_ADSB_Traffic_OutValue :+ get_SHM_QUEUE_ADSB_Traffic_Out().get }\n    if(!SHM_QUEUE_ADSB_Traffic_Out(SHM_QUEUE_ADSB_Traffic_OutValue)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_ADSB_Traffic_Out' did not match expected: received ${SHM_QUEUE_ADSB_Traffic_OutValue.size} events with the following payloads ${SHM_QUEUE_ADSB_Traffic_OutValue}\"\n    }\n    var SHM_QUEUE_Response_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_Response_Out().nonEmpty) { SHM_QUEUE_Response_OutValue = SHM_QUEUE_Response_OutValue :+ get_SHM_QUEUE_Response_Out().get }\n    if(!SHM_QUEUE_Response_Out(SHM_QUEUE_Response_OutValue)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_Response_Out' did not match expected: received ${SHM_QUEUE_Response_OutValue.size} events with the following payloads ${SHM_QUEUE_Response_OutValue}\"\n    }\n    var SHM_QUEUE_AttestationRequestValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_AttestationRequest().nonEmpty) { SHM_QUEUE_AttestationRequestValue = SHM_QUEUE_AttestationRequestValue :+ get_SHM_QUEUE_AttestationRequest().get }\n    if(!SHM_QUEUE_AttestationRequest(SHM_QUEUE_AttestationRequestValue)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_AttestationRequest' did not match expected: received ${SHM_QUEUE_AttestationRequestValue.size} events with the following payloads ${SHM_QUEUE_AttestationRequestValue}\"\n    }\n    var SHM_QUEUE_Suspect_Traffic_Out1Value: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_Suspect_Traffic_Out1().nonEmpty) { SHM_QUEUE_Suspect_Traffic_Out1Value = SHM_QUEUE_Suspect_Traffic_Out1Value :+ get_SHM_QUEUE_Suspect_Traffic_Out1().get }\n    if(!SHM_QUEUE_Suspect_Traffic_Out1(SHM_QUEUE_Suspect_Traffic_Out1Value)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_Suspect_Traffic_Out1' did not match expected: received ${SHM_QUEUE_Suspect_Traffic_Out1Value.size} events with the following payloads ${SHM_QUEUE_Suspect_Traffic_Out1Value}\"\n    }\n    var SHM_QUEUE_Suspect_Traffic_Out2Value: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_Suspect_Traffic_Out2().nonEmpty) { SHM_QUEUE_Suspect_Traffic_Out2Value = SHM_QUEUE_Suspect_Traffic_Out2Value :+ get_SHM_QUEUE_Suspect_Traffic_Out2().get }\n    if(!SHM_QUEUE_Suspect_Traffic_Out2(SHM_QUEUE_Suspect_Traffic_Out2Value)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_Suspect_Traffic_Out2' did not match expected: received ${SHM_QUEUE_Suspect_Traffic_Out2Value.size} events with the following payloads ${SHM_QUEUE_Suspect_Traffic_Out2Value}\"\n    }\n    var SHM_QUEUE_Suspect_Traffic_Out3Value: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_Suspect_Traffic_Out3().nonEmpty) { SHM_QUEUE_Suspect_Traffic_Out3Value = SHM_QUEUE_Suspect_Traffic_Out3Value :+ get_SHM_QUEUE_Suspect_Traffic_Out3().get }\n    if(!SHM_QUEUE_Suspect_Traffic_Out3(SHM_QUEUE_Suspect_Traffic_Out3Value)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_Suspect_Traffic_Out3' did not match expected: received ${SHM_QUEUE_Suspect_Traffic_Out3Value.size} events with the following payloads ${SHM_QUEUE_Suspect_Traffic_Out3Value}\"\n    }\n    var SHM_QUEUE_Request_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_Request_Out().nonEmpty) { SHM_QUEUE_Request_OutValue = SHM_QUEUE_Request_OutValue :+ get_SHM_QUEUE_Request_Out().get }\n    if(!SHM_QUEUE_Request_Out(SHM_QUEUE_Request_OutValue)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_Request_Out' did not match expected: received ${SHM_QUEUE_Request_OutValue.size} events with the following payloads ${SHM_QUEUE_Request_OutValue}\"\n    }\n    var AttestationResponseValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_AttestationResponse().nonEmpty) { AttestationResponseValue = AttestationResponseValue :+ get_AttestationResponse().get }\n    if(!AttestationResponse(AttestationResponseValue)) {\n      testFailures = testFailures :+ st\"'AttestationResponse' did not match expected: received ${AttestationResponseValue.size} events with the following payloads ${AttestationResponseValue}\"\n    }\n    var Connection_Command_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_Connection_Command_Out().nonEmpty) { Connection_Command_OutValue = Connection_Command_OutValue :+ get_Connection_Command_Out().get }\n    if(!Connection_Command_Out(Connection_Command_OutValue)) {\n      testFailures = testFailures :+ st\"'Connection_Command_Out' did not match expected: received ${Connection_Command_OutValue.size} events with the following payloads ${Connection_Command_OutValue}\"\n    }\n    var InitiateAttestationValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_InitiateAttestation().nonEmpty) { InitiateAttestationValue = InitiateAttestationValue :+ get_InitiateAttestation().get }\n    if(!InitiateAttestation(InitiateAttestationValue)) {\n      testFailures = testFailures :+ st\"'InitiateAttestation' did not match expected: received ${InitiateAttestationValue.size} events with the following payloads ${InitiateAttestationValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_ADSB_Messages_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.ADSB_Messages_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_Response_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.Response_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_AttestationRequest(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.AttestationRequest_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_SHM_HEADER_adsb_to_ptab(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.SHM_HEADER_adsb_to_ptab_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_Connection_Command_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.Connection_Command_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_Suspect_Traffic_In1(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.Suspect_Traffic_In1_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_Suspect_Traffic_In2(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.Suspect_Traffic_In2_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_Suspect_Traffic_In3(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.Suspect_Traffic_In3_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_SHM_QUEUE_Request_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.SHM_QUEUE_Request_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_SHM_QUEUE_AttestationResponse(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.SHM_QUEUE_AttestationResponse_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_TerminateAttestation(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.operational_api.TerminateAttestation_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_ADSB_Heartbeat_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_ADSB_Heartbeat_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_ADSB_Heartbeat_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_ADSB_Heartbeat_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_ADSB_Heartbeat_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_ADSB_Ownship_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_ADSB_Ownship_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_ADSB_Ownship_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_ADSB_Ownship_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_ADSB_Ownship_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_ADSB_Traffic_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_ADSB_Traffic_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_ADSB_Traffic_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_ADSB_Traffic_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_ADSB_Traffic_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_Response_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_Response_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_Response_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_Response_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_Response_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_AttestationRequest(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_AttestationRequest_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_AttestationRequest.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_AttestationRequest_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_AttestationRequest_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_Suspect_Traffic_Out1(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_Suspect_Traffic_Out1_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_Suspect_Traffic_Out1.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_Suspect_Traffic_Out1_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_Suspect_Traffic_Out1_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_Suspect_Traffic_Out2(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_Suspect_Traffic_Out2_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_Suspect_Traffic_Out2.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_Suspect_Traffic_Out2_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_Suspect_Traffic_Out2_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_Suspect_Traffic_Out3(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_Suspect_Traffic_Out3_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_Suspect_Traffic_Out3.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_Suspect_Traffic_Out3_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_Suspect_Traffic_Out3_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_Request_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_Request_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_Request_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_Request_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.SHM_QUEUE_Request_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_AttestationResponse(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_AttestationResponse_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port AttestationResponse.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_AttestationResponse_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.AttestationResponse_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_Connection_Command_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_Connection_Command_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port Connection_Command_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_Connection_Command_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.Connection_Command_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_InitiateAttestation(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_InitiateAttestation_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port InitiateAttestation.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_InitiateAttestation_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low.initialization_api.InitiateAttestation_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/adapter_low_impl_SW_adapter_low_adapter_low_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class adapter_low_impl_SW_adapter_low_adapter_low_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  adapter_low_impl_SW_adapter_low_adapter_low_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/bridge\/VPM_ben__SeL4\/VPM\/adapter_low_impl_SW_adapter_low_adapter_low_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4.VPM._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass adapter_low_impl_SW_adapter_low_adapter_low_Test extends adapter_low_impl_SW_adapter_low_adapter_low_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/adapter_low_impl_SW_adapter_low_adapter_low_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.{adapter_low_impl_SW_adapter_low_adapter_low => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class adapter_low_impl_SW_adapter_low_adapter_low_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  ADSB_Messages_In: Port[Base_Types.Bits],\n  Response_In: Port[Base_Types.Bits],\n  AttestationRequest: Port[Base_Types.Bits],\n  SHM_QUEUE_ADSB_Heartbeat_Out: Port[Base_Types.Bits],\n  SHM_QUEUE_ADSB_Ownship_Out: Port[Base_Types.Bits],\n  SHM_QUEUE_ADSB_Traffic_Out: Port[Base_Types.Bits],\n  SHM_QUEUE_Response_Out: Port[Base_Types.Bits],\n  SHM_QUEUE_AttestationRequest: Port[Base_Types.Bits],\n  SHM_HEADER_adsb_to_ptab: Port[Base_Types.Bits],\n  Connection_Command_In: Port[Base_Types.Bits],\n  Suspect_Traffic_In1: Port[Base_Types.Bits],\n  SHM_QUEUE_Suspect_Traffic_Out1: Port[Base_Types.Bits],\n  Suspect_Traffic_In2: Port[Base_Types.Bits],\n  SHM_QUEUE_Suspect_Traffic_Out2: Port[Base_Types.Bits],\n  Suspect_Traffic_In3: Port[Base_Types.Bits],\n  SHM_QUEUE_Suspect_Traffic_Out3: Port[Base_Types.Bits],\n  SHM_QUEUE_Request_In: Port[Base_Types.Bits],\n  SHM_QUEUE_AttestationResponse: Port[Base_Types.Bits],\n  SHM_QUEUE_Request_Out: Port[Base_Types.Bits],\n  AttestationResponse: Port[Base_Types.Bits],\n  Connection_Command_Out: Port[Base_Types.Bits],\n  InitiateAttestation: Port[Base_Types.Bits],\n  TerminateAttestation: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](ADSB_Messages_In,\n                              Response_In,\n                              AttestationRequest,\n                              SHM_HEADER_adsb_to_ptab,\n                              Connection_Command_In,\n                              Suspect_Traffic_In1,\n                              Suspect_Traffic_In2,\n                              Suspect_Traffic_In3,\n                              SHM_QUEUE_Request_In,\n                              SHM_QUEUE_AttestationResponse,\n                              TerminateAttestation),\n\n    eventOuts = ISZ[art.UPort](SHM_QUEUE_ADSB_Heartbeat_Out,\n                               SHM_QUEUE_ADSB_Ownship_Out,\n                               SHM_QUEUE_ADSB_Traffic_Out,\n                               SHM_QUEUE_Response_Out,\n                               SHM_QUEUE_AttestationRequest,\n                               SHM_QUEUE_Suspect_Traffic_Out1,\n                               SHM_QUEUE_Suspect_Traffic_Out2,\n                               SHM_QUEUE_Suspect_Traffic_Out3,\n                               SHM_QUEUE_Request_Out,\n                               AttestationResponse,\n                               Connection_Command_Out,\n                               InitiateAttestation)\n  )\n\n  val initialization_api : adapter_low_impl_Initialization_Api = {\n    val api = adapter_low_impl_Initialization_Api(\n      id,\n      ADSB_Messages_In.id,\n      Response_In.id,\n      AttestationRequest.id,\n      SHM_QUEUE_ADSB_Heartbeat_Out.id,\n      SHM_QUEUE_ADSB_Ownship_Out.id,\n      SHM_QUEUE_ADSB_Traffic_Out.id,\n      SHM_QUEUE_Response_Out.id,\n      SHM_QUEUE_AttestationRequest.id,\n      SHM_HEADER_adsb_to_ptab.id,\n      Connection_Command_In.id,\n      Suspect_Traffic_In1.id,\n      SHM_QUEUE_Suspect_Traffic_Out1.id,\n      Suspect_Traffic_In2.id,\n      SHM_QUEUE_Suspect_Traffic_Out2.id,\n      Suspect_Traffic_In3.id,\n      SHM_QUEUE_Suspect_Traffic_Out3.id,\n      SHM_QUEUE_Request_In.id,\n      SHM_QUEUE_AttestationResponse.id,\n      SHM_QUEUE_Request_Out.id,\n      AttestationResponse.id,\n      Connection_Command_Out.id,\n      InitiateAttestation.id,\n      TerminateAttestation.id\n    )\n    adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : adapter_low_impl_Operational_Api = {\n    val api = adapter_low_impl_Operational_Api(\n      id,\n      ADSB_Messages_In.id,\n      Response_In.id,\n      AttestationRequest.id,\n      SHM_QUEUE_ADSB_Heartbeat_Out.id,\n      SHM_QUEUE_ADSB_Ownship_Out.id,\n      SHM_QUEUE_ADSB_Traffic_Out.id,\n      SHM_QUEUE_Response_Out.id,\n      SHM_QUEUE_AttestationRequest.id,\n      SHM_HEADER_adsb_to_ptab.id,\n      Connection_Command_In.id,\n      Suspect_Traffic_In1.id,\n      SHM_QUEUE_Suspect_Traffic_Out1.id,\n      Suspect_Traffic_In2.id,\n      SHM_QUEUE_Suspect_Traffic_Out2.id,\n      Suspect_Traffic_In3.id,\n      SHM_QUEUE_Suspect_Traffic_Out3.id,\n      SHM_QUEUE_Request_In.id,\n      SHM_QUEUE_AttestationResponse.id,\n      SHM_QUEUE_Request_Out.id,\n      AttestationResponse.id,\n      Connection_Command_Out.id,\n      InitiateAttestation.id,\n      TerminateAttestation.id\n    )\n    adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    adapter_low_impl_SW_adapter_low_adapter_low_Bridge.EntryPoints(\n      id,\n\n      ADSB_Messages_In.id,\n      Response_In.id,\n      AttestationRequest.id,\n      SHM_QUEUE_ADSB_Heartbeat_Out.id,\n      SHM_QUEUE_ADSB_Ownship_Out.id,\n      SHM_QUEUE_ADSB_Traffic_Out.id,\n      SHM_QUEUE_Response_Out.id,\n      SHM_QUEUE_AttestationRequest.id,\n      SHM_HEADER_adsb_to_ptab.id,\n      Connection_Command_In.id,\n      Suspect_Traffic_In1.id,\n      SHM_QUEUE_Suspect_Traffic_Out1.id,\n      Suspect_Traffic_In2.id,\n      SHM_QUEUE_Suspect_Traffic_Out2.id,\n      Suspect_Traffic_In3.id,\n      SHM_QUEUE_Suspect_Traffic_Out3.id,\n      SHM_QUEUE_Request_In.id,\n      SHM_QUEUE_AttestationResponse.id,\n      SHM_QUEUE_Request_Out.id,\n      AttestationResponse.id,\n      Connection_Command_Out.id,\n      InitiateAttestation.id,\n      TerminateAttestation.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject adapter_low_impl_SW_adapter_low_adapter_low_Bridge {\n\n  var c_initialization_api: Option[adapter_low_impl_Initialization_Api] = None()\n  var c_operational_api: Option[adapter_low_impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    adapter_low_impl_SW_adapter_low_adapter_low_BridgeId : Art.BridgeId,\n    ADSB_Messages_In_Id : Art.PortId,\n    Response_In_Id : Art.PortId,\n    AttestationRequest_Id : Art.PortId,\n    SHM_QUEUE_ADSB_Heartbeat_Out_Id : Art.PortId,\n    SHM_QUEUE_ADSB_Ownship_Out_Id : Art.PortId,\n    SHM_QUEUE_ADSB_Traffic_Out_Id : Art.PortId,\n    SHM_QUEUE_Response_Out_Id : Art.PortId,\n    SHM_QUEUE_AttestationRequest_Id : Art.PortId,\n    SHM_HEADER_adsb_to_ptab_Id : Art.PortId,\n    Connection_Command_In_Id : Art.PortId,\n    Suspect_Traffic_In1_Id : Art.PortId,\n    SHM_QUEUE_Suspect_Traffic_Out1_Id : Art.PortId,\n    Suspect_Traffic_In2_Id : Art.PortId,\n    SHM_QUEUE_Suspect_Traffic_Out2_Id : Art.PortId,\n    Suspect_Traffic_In3_Id : Art.PortId,\n    SHM_QUEUE_Suspect_Traffic_Out3_Id : Art.PortId,\n    SHM_QUEUE_Request_In_Id : Art.PortId,\n    SHM_QUEUE_AttestationResponse_Id : Art.PortId,\n    SHM_QUEUE_Request_Out_Id : Art.PortId,\n    AttestationResponse_Id : Art.PortId,\n    Connection_Command_Out_Id : Art.PortId,\n    InitiateAttestation_Id : Art.PortId,\n    TerminateAttestation_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: adapter_low_impl_Initialization_Api,\n    operational_api: adapter_low_impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(ADSB_Messages_In_Id,\n                                             Response_In_Id,\n                                             AttestationRequest_Id,\n                                             SHM_HEADER_adsb_to_ptab_Id,\n                                             Connection_Command_In_Id,\n                                             Suspect_Traffic_In1_Id,\n                                             Suspect_Traffic_In2_Id,\n                                             Suspect_Traffic_In3_Id,\n                                             SHM_QUEUE_Request_In_Id,\n                                             SHM_QUEUE_AttestationResponse_Id,\n                                             TerminateAttestation_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(SHM_QUEUE_ADSB_Heartbeat_Out_Id,\n                                              SHM_QUEUE_ADSB_Ownship_Out_Id,\n                                              SHM_QUEUE_ADSB_Traffic_Out_Id,\n                                              SHM_QUEUE_Response_Out_Id,\n                                              SHM_QUEUE_AttestationRequest_Id,\n                                              SHM_QUEUE_Suspect_Traffic_Out1_Id,\n                                              SHM_QUEUE_Suspect_Traffic_Out2_Id,\n                                              SHM_QUEUE_Suspect_Traffic_Out3_Id,\n                                              SHM_QUEUE_Request_Out_Id,\n                                              AttestationResponse_Id,\n                                              Connection_Command_Out_Id,\n                                              InitiateAttestation_Id)\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: adapter_low_impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: adapter_low_impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: adapter_low_impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: adapter_low_impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: adapter_low_impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: adapter_low_impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: adapter_low_impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: adapter_low_impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/adapter_low_impl_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\n\n@sig trait adapter_low_impl_Api {\n  def id: Art.BridgeId\n  def ADSB_Messages_In_Id : Art.PortId\n  def Response_In_Id : Art.PortId\n  def AttestationRequest_Id : Art.PortId\n  def SHM_QUEUE_ADSB_Heartbeat_Out_Id : Art.PortId\n  def SHM_QUEUE_ADSB_Ownship_Out_Id : Art.PortId\n  def SHM_QUEUE_ADSB_Traffic_Out_Id : Art.PortId\n  def SHM_QUEUE_Response_Out_Id : Art.PortId\n  def SHM_QUEUE_AttestationRequest_Id : Art.PortId\n  def SHM_HEADER_adsb_to_ptab_Id : Art.PortId\n  def Connection_Command_In_Id : Art.PortId\n  def Suspect_Traffic_In1_Id : Art.PortId\n  def SHM_QUEUE_Suspect_Traffic_Out1_Id : Art.PortId\n  def Suspect_Traffic_In2_Id : Art.PortId\n  def SHM_QUEUE_Suspect_Traffic_Out2_Id : Art.PortId\n  def Suspect_Traffic_In3_Id : Art.PortId\n  def SHM_QUEUE_Suspect_Traffic_Out3_Id : Art.PortId\n  def SHM_QUEUE_Request_In_Id : Art.PortId\n  def SHM_QUEUE_AttestationResponse_Id : Art.PortId\n  def SHM_QUEUE_Request_Out_Id : Art.PortId\n  def AttestationResponse_Id : Art.PortId\n  def Connection_Command_Out_Id : Art.PortId\n  def InitiateAttestation_Id : Art.PortId\n  def TerminateAttestation_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_ADSB_Heartbeat_Out: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_ADSB_Heartbeat_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_ADSB_Heartbeat_Out),\n      Ensures(\n        SHM_QUEUE_ADSB_Heartbeat_Out == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_ADSB_Heartbeat_Out = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_ADSB_Heartbeat_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_ADSB_Ownship_Out: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_ADSB_Ownship_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_ADSB_Ownship_Out),\n      Ensures(\n        SHM_QUEUE_ADSB_Ownship_Out == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_ADSB_Ownship_Out = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_ADSB_Ownship_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_ADSB_Traffic_Out: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_ADSB_Traffic_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_ADSB_Traffic_Out),\n      Ensures(\n        SHM_QUEUE_ADSB_Traffic_Out == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_ADSB_Traffic_Out = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_ADSB_Traffic_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_Response_Out: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_Response_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_Response_Out),\n      Ensures(\n        SHM_QUEUE_Response_Out == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_Response_Out = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_Response_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_AttestationRequest: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_AttestationRequest(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_AttestationRequest),\n      Ensures(\n        SHM_QUEUE_AttestationRequest == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_AttestationRequest = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_AttestationRequest_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_Suspect_Traffic_Out1: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_Suspect_Traffic_Out1(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_Suspect_Traffic_Out1),\n      Ensures(\n        SHM_QUEUE_Suspect_Traffic_Out1 == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_Suspect_Traffic_Out1 = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_Suspect_Traffic_Out1_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_Suspect_Traffic_Out2: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_Suspect_Traffic_Out2(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_Suspect_Traffic_Out2),\n      Ensures(\n        SHM_QUEUE_Suspect_Traffic_Out2 == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_Suspect_Traffic_Out2 = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_Suspect_Traffic_Out2_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_Suspect_Traffic_Out3: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_Suspect_Traffic_Out3(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_Suspect_Traffic_Out3),\n      Ensures(\n        SHM_QUEUE_Suspect_Traffic_Out3 == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_Suspect_Traffic_Out3 = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_Suspect_Traffic_Out3_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_Request_Out: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_Request_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_Request_Out),\n      Ensures(\n        SHM_QUEUE_Request_Out == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_Request_Out = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_Request_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var AttestationResponse: Option[Base_Types.Bits] = $\n\n  def put_AttestationResponse(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(AttestationResponse),\n      Ensures(\n        AttestationResponse == Some(value)\n      )\n    )\n    Spec {\n      AttestationResponse = Some(value)\n    }\n\n    Art.putValue(AttestationResponse_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var Connection_Command_Out: Option[Base_Types.Bits] = $\n\n  def put_Connection_Command_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(Connection_Command_Out),\n      Ensures(\n        Connection_Command_Out == Some(value)\n      )\n    )\n    Spec {\n      Connection_Command_Out = Some(value)\n    }\n\n    Art.putValue(Connection_Command_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var InitiateAttestation: Option[Base_Types.Bits] = $\n\n  def put_InitiateAttestation(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(InitiateAttestation),\n      Ensures(\n        InitiateAttestation == Some(value)\n      )\n    )\n    Spec {\n      InitiateAttestation = Some(value)\n    }\n\n    Art.putValue(InitiateAttestation_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class adapter_low_impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val ADSB_Messages_In_Id : Art.PortId,\n  val Response_In_Id : Art.PortId,\n  val AttestationRequest_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Heartbeat_Out_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Ownship_Out_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Traffic_Out_Id : Art.PortId,\n  val SHM_QUEUE_Response_Out_Id : Art.PortId,\n  val SHM_QUEUE_AttestationRequest_Id : Art.PortId,\n  val SHM_HEADER_adsb_to_ptab_Id : Art.PortId,\n  val Connection_Command_In_Id : Art.PortId,\n  val Suspect_Traffic_In1_Id : Art.PortId,\n  val SHM_QUEUE_Suspect_Traffic_Out1_Id : Art.PortId,\n  val Suspect_Traffic_In2_Id : Art.PortId,\n  val SHM_QUEUE_Suspect_Traffic_Out2_Id : Art.PortId,\n  val Suspect_Traffic_In3_Id : Art.PortId,\n  val SHM_QUEUE_Suspect_Traffic_Out3_Id : Art.PortId,\n  val SHM_QUEUE_Request_In_Id : Art.PortId,\n  val SHM_QUEUE_AttestationResponse_Id : Art.PortId,\n  val SHM_QUEUE_Request_Out_Id : Art.PortId,\n  val AttestationResponse_Id : Art.PortId,\n  val Connection_Command_Out_Id : Art.PortId,\n  val InitiateAttestation_Id : Art.PortId,\n  val TerminateAttestation_Id : Art.PortId) extends adapter_low_impl_Api\n\n@datatype class adapter_low_impl_Operational_Api (\n  val id: Art.BridgeId,\n  val ADSB_Messages_In_Id : Art.PortId,\n  val Response_In_Id : Art.PortId,\n  val AttestationRequest_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Heartbeat_Out_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Ownship_Out_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Traffic_Out_Id : Art.PortId,\n  val SHM_QUEUE_Response_Out_Id : Art.PortId,\n  val SHM_QUEUE_AttestationRequest_Id : Art.PortId,\n  val SHM_HEADER_adsb_to_ptab_Id : Art.PortId,\n  val Connection_Command_In_Id : Art.PortId,\n  val Suspect_Traffic_In1_Id : Art.PortId,\n  val SHM_QUEUE_Suspect_Traffic_Out1_Id : Art.PortId,\n  val Suspect_Traffic_In2_Id : Art.PortId,\n  val SHM_QUEUE_Suspect_Traffic_Out2_Id : Art.PortId,\n  val Suspect_Traffic_In3_Id : Art.PortId,\n  val SHM_QUEUE_Suspect_Traffic_Out3_Id : Art.PortId,\n  val SHM_QUEUE_Request_In_Id : Art.PortId,\n  val SHM_QUEUE_AttestationResponse_Id : Art.PortId,\n  val SHM_QUEUE_Request_Out_Id : Art.PortId,\n  val AttestationResponse_Id : Art.PortId,\n  val Connection_Command_Out_Id : Art.PortId,\n  val InitiateAttestation_Id : Art.PortId,\n  val TerminateAttestation_Id : Art.PortId) extends adapter_low_impl_Api {\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var ADSB_Messages_In: Base_Types.Bits = $\n\n  def get_ADSB_Messages_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(ADSB_Messages_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(ADSB_Messages_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port ADSB_Messages_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Response_In: Base_Types.Bits = $\n\n  def get_Response_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Response_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Response_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Response_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var AttestationRequest: Base_Types.Bits = $\n\n  def get_AttestationRequest() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(AttestationRequest)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(AttestationRequest_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port AttestationRequest.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var SHM_HEADER_adsb_to_ptab: Base_Types.Bits = $\n\n  def get_SHM_HEADER_adsb_to_ptab() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(SHM_HEADER_adsb_to_ptab)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(SHM_HEADER_adsb_to_ptab_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port SHM_HEADER_adsb_to_ptab.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Connection_Command_In: Base_Types.Bits = $\n\n  def get_Connection_Command_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Connection_Command_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Connection_Command_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Connection_Command_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Suspect_Traffic_In1: Base_Types.Bits = $\n\n  def get_Suspect_Traffic_In1() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Suspect_Traffic_In1)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Suspect_Traffic_In1_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Suspect_Traffic_In1.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Suspect_Traffic_In2: Base_Types.Bits = $\n\n  def get_Suspect_Traffic_In2() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Suspect_Traffic_In2)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Suspect_Traffic_In2_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Suspect_Traffic_In2.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Suspect_Traffic_In3: Base_Types.Bits = $\n\n  def get_Suspect_Traffic_In3() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Suspect_Traffic_In3)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Suspect_Traffic_In3_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Suspect_Traffic_In3.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var SHM_QUEUE_Request_In: Base_Types.Bits = $\n\n  def get_SHM_QUEUE_Request_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(SHM_QUEUE_Request_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(SHM_QUEUE_Request_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port SHM_QUEUE_Request_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var SHM_QUEUE_AttestationResponse: Base_Types.Bits = $\n\n  def get_SHM_QUEUE_AttestationResponse() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(SHM_QUEUE_AttestationResponse)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(SHM_QUEUE_AttestationResponse_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port SHM_QUEUE_AttestationResponse.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var TerminateAttestation: Base_Types.Bits = $\n\n  def get_TerminateAttestation() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(TerminateAttestation)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(TerminateAttestation_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port TerminateAttestation.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/component\/VPM_ben__SeL4\/VPM\/adapter_low_impl_SW_adapter_low_adapter_low.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject adapter_low_impl_SW_adapter_low_adapter_low {\n\n  def initialise(api: adapter_low_impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: adapter_low_impl_Operational_Api): Unit = { }\n\n  def activate(api: adapter_low_impl_Operational_Api): Unit = { }\n\n  def deactivate(api: adapter_low_impl_Operational_Api): Unit = { }\n\n  def finalise(api: adapter_low_impl_Operational_Api): Unit = { }\n\n  def recover(api: adapter_low_impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/adapter_high_impl_SW_adapter_high_adapter_high_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art.{Art, ArtNative, Empty}\nimport VPM_ben__SeL4._\n\n\/\/ This file was auto-generated.  Do not edit\n@msig trait adapter_high_impl_SW_adapter_high_adapter_high_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param SHM_QUEUE_ADSB_Heartbeat_In payloads for event data port SHM_QUEUE_ADSB_Heartbeat_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of SHM_QUEUE_ADSB_Heartbeat_In will be used\n   * @param SHM_QUEUE_ADSB_Ownship_In payloads for event data port SHM_QUEUE_ADSB_Ownship_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of SHM_QUEUE_ADSB_Ownship_In will be used\n   * @param SHM_QUEUE_ADSB_Traffic_In payloads for event data port SHM_QUEUE_ADSB_Traffic_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of SHM_QUEUE_ADSB_Traffic_In will be used\n   * @param SHM_QUEUE_Response_In payloads for event data port SHM_QUEUE_Response_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of SHM_QUEUE_Response_In will be used\n   * @param Request_In payloads for event data port Request_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Request_In will be used\n   * @param Connection_Command_In payloads for event data port Connection_Command_In.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Connection_Command_In will be used\n   *\/\n  def put_concrete_inputs(SHM_QUEUE_ADSB_Heartbeat_In : ISZ[Base_Types.Bits],\n                          SHM_QUEUE_ADSB_Ownship_In : ISZ[Base_Types.Bits],\n                          SHM_QUEUE_ADSB_Traffic_In : ISZ[Base_Types.Bits],\n                          SHM_QUEUE_Response_In : ISZ[Base_Types.Bits],\n                          Request_In : ISZ[Base_Types.Bits],\n                          Connection_Command_In : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- SHM_QUEUE_ADSB_Heartbeat_In){\n      put_SHM_QUEUE_ADSB_Heartbeat_In(v)\n    }\n    for(v <- SHM_QUEUE_ADSB_Ownship_In){\n      put_SHM_QUEUE_ADSB_Ownship_In(v)\n    }\n    for(v <- SHM_QUEUE_ADSB_Traffic_In){\n      put_SHM_QUEUE_ADSB_Traffic_In(v)\n    }\n    for(v <- SHM_QUEUE_Response_In){\n      put_SHM_QUEUE_Response_In(v)\n    }\n    for(v <- Request_In){\n      put_Request_In(v)\n    }\n    for(v <- Connection_Command_In){\n      put_Connection_Command_In(v)\n    }\n  }\n\n\n  \/** helper function to check adapter_high_impl_SW_adapter_high_adapter_high's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param Response_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'Response_Out'.\n   * @param ADSB_Messages_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'ADSB_Messages_Out'.\n   * @param SHM_HEADER_adsb_to_ptab method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_HEADER_adsb_to_ptab'.\n   * @param Connection_Command_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'Connection_Command_Out'.\n   * @param SHM_QUEUE_Request_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'SHM_QUEUE_Request_Out'.\n   *\/\n  def check_concrete_output(Response_Out: ISZ[Base_Types.Bits] => B,\n                            ADSB_Messages_Out: ISZ[Base_Types.Bits] => B,\n                            SHM_HEADER_adsb_to_ptab: ISZ[Base_Types.Bits] => B,\n                            Connection_Command_Out: ISZ[Base_Types.Bits] => B,\n                            SHM_QUEUE_Request_Out: ISZ[Base_Types.Bits] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var Response_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_Response_Out().nonEmpty) { Response_OutValue = Response_OutValue :+ get_Response_Out().get }\n    if(!Response_Out(Response_OutValue)) {\n      testFailures = testFailures :+ st\"'Response_Out' did not match expected: received ${Response_OutValue.size} events with the following payloads ${Response_OutValue}\"\n    }\n    var ADSB_Messages_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_ADSB_Messages_Out().nonEmpty) { ADSB_Messages_OutValue = ADSB_Messages_OutValue :+ get_ADSB_Messages_Out().get }\n    if(!ADSB_Messages_Out(ADSB_Messages_OutValue)) {\n      testFailures = testFailures :+ st\"'ADSB_Messages_Out' did not match expected: received ${ADSB_Messages_OutValue.size} events with the following payloads ${ADSB_Messages_OutValue}\"\n    }\n    var SHM_HEADER_adsb_to_ptabValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_HEADER_adsb_to_ptab().nonEmpty) { SHM_HEADER_adsb_to_ptabValue = SHM_HEADER_adsb_to_ptabValue :+ get_SHM_HEADER_adsb_to_ptab().get }\n    if(!SHM_HEADER_adsb_to_ptab(SHM_HEADER_adsb_to_ptabValue)) {\n      testFailures = testFailures :+ st\"'SHM_HEADER_adsb_to_ptab' did not match expected: received ${SHM_HEADER_adsb_to_ptabValue.size} events with the following payloads ${SHM_HEADER_adsb_to_ptabValue}\"\n    }\n    var Connection_Command_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_Connection_Command_Out().nonEmpty) { Connection_Command_OutValue = Connection_Command_OutValue :+ get_Connection_Command_Out().get }\n    if(!Connection_Command_Out(Connection_Command_OutValue)) {\n      testFailures = testFailures :+ st\"'Connection_Command_Out' did not match expected: received ${Connection_Command_OutValue.size} events with the following payloads ${Connection_Command_OutValue}\"\n    }\n    var SHM_QUEUE_Request_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_SHM_QUEUE_Request_Out().nonEmpty) { SHM_QUEUE_Request_OutValue = SHM_QUEUE_Request_OutValue :+ get_SHM_QUEUE_Request_Out().get }\n    if(!SHM_QUEUE_Request_Out(SHM_QUEUE_Request_OutValue)) {\n      testFailures = testFailures :+ st\"'SHM_QUEUE_Request_Out' did not match expected: received ${SHM_QUEUE_Request_OutValue.size} events with the following payloads ${SHM_QUEUE_Request_OutValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_SHM_QUEUE_ADSB_Heartbeat_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.operational_api.SHM_QUEUE_ADSB_Heartbeat_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_SHM_QUEUE_ADSB_Ownship_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.operational_api.SHM_QUEUE_ADSB_Ownship_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_SHM_QUEUE_ADSB_Traffic_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.operational_api.SHM_QUEUE_ADSB_Traffic_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_SHM_QUEUE_Response_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.operational_api.SHM_QUEUE_Response_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_Request_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.operational_api.Request_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_Connection_Command_In(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.operational_api.Connection_Command_In_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_Response_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_Response_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port Response_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_Response_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.initialization_api.Response_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_ADSB_Messages_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_ADSB_Messages_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port ADSB_Messages_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_ADSB_Messages_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.initialization_api.ADSB_Messages_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_HEADER_adsb_to_ptab(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_HEADER_adsb_to_ptab_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_HEADER_adsb_to_ptab.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_HEADER_adsb_to_ptab_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.initialization_api.SHM_HEADER_adsb_to_ptab_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_Connection_Command_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_Connection_Command_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port Connection_Command_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_Connection_Command_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.initialization_api.Connection_Command_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_SHM_QUEUE_Request_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_SHM_QUEUE_Request_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port SHM_QUEUE_Request_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_SHM_QUEUE_Request_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high.initialization_api.SHM_QUEUE_Request_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/adapter_high_impl_SW_adapter_high_adapter_high_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class adapter_high_impl_SW_adapter_high_adapter_high_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  adapter_high_impl_SW_adapter_high_adapter_high_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/bridge\/VPM_ben__SeL4\/VPM\/adapter_high_impl_SW_adapter_high_adapter_high_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4.VPM._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass adapter_high_impl_SW_adapter_high_adapter_high_Test extends adapter_high_impl_SW_adapter_high_adapter_high_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/adapter_high_impl_SW_adapter_high_adapter_high_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.{adapter_high_impl_SW_adapter_high_adapter_high => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class adapter_high_impl_SW_adapter_high_adapter_high_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  SHM_QUEUE_ADSB_Heartbeat_In: Port[Base_Types.Bits],\n  SHM_QUEUE_ADSB_Ownship_In: Port[Base_Types.Bits],\n  SHM_QUEUE_ADSB_Traffic_In: Port[Base_Types.Bits],\n  SHM_QUEUE_Response_In: Port[Base_Types.Bits],\n  Response_Out: Port[Base_Types.Bits],\n  ADSB_Messages_Out: Port[Base_Types.Bits],\n  SHM_HEADER_adsb_to_ptab: Port[Base_Types.Bits],\n  Connection_Command_Out: Port[Base_Types.Bits],\n  Request_In: Port[Base_Types.Bits],\n  SHM_QUEUE_Request_Out: Port[Base_Types.Bits],\n  Connection_Command_In: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](SHM_QUEUE_ADSB_Heartbeat_In,\n                              SHM_QUEUE_ADSB_Ownship_In,\n                              SHM_QUEUE_ADSB_Traffic_In,\n                              SHM_QUEUE_Response_In,\n                              Request_In,\n                              Connection_Command_In),\n\n    eventOuts = ISZ[art.UPort](Response_Out,\n                               ADSB_Messages_Out,\n                               SHM_HEADER_adsb_to_ptab,\n                               Connection_Command_Out,\n                               SHM_QUEUE_Request_Out)\n  )\n\n  val initialization_api : adapter_high_impl_Initialization_Api = {\n    val api = adapter_high_impl_Initialization_Api(\n      id,\n      SHM_QUEUE_ADSB_Heartbeat_In.id,\n      SHM_QUEUE_ADSB_Ownship_In.id,\n      SHM_QUEUE_ADSB_Traffic_In.id,\n      SHM_QUEUE_Response_In.id,\n      Response_Out.id,\n      ADSB_Messages_Out.id,\n      SHM_HEADER_adsb_to_ptab.id,\n      Connection_Command_Out.id,\n      Request_In.id,\n      SHM_QUEUE_Request_Out.id,\n      Connection_Command_In.id\n    )\n    adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : adapter_high_impl_Operational_Api = {\n    val api = adapter_high_impl_Operational_Api(\n      id,\n      SHM_QUEUE_ADSB_Heartbeat_In.id,\n      SHM_QUEUE_ADSB_Ownship_In.id,\n      SHM_QUEUE_ADSB_Traffic_In.id,\n      SHM_QUEUE_Response_In.id,\n      Response_Out.id,\n      ADSB_Messages_Out.id,\n      SHM_HEADER_adsb_to_ptab.id,\n      Connection_Command_Out.id,\n      Request_In.id,\n      SHM_QUEUE_Request_Out.id,\n      Connection_Command_In.id\n    )\n    adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    adapter_high_impl_SW_adapter_high_adapter_high_Bridge.EntryPoints(\n      id,\n\n      SHM_QUEUE_ADSB_Heartbeat_In.id,\n      SHM_QUEUE_ADSB_Ownship_In.id,\n      SHM_QUEUE_ADSB_Traffic_In.id,\n      SHM_QUEUE_Response_In.id,\n      Response_Out.id,\n      ADSB_Messages_Out.id,\n      SHM_HEADER_adsb_to_ptab.id,\n      Connection_Command_Out.id,\n      Request_In.id,\n      SHM_QUEUE_Request_Out.id,\n      Connection_Command_In.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject adapter_high_impl_SW_adapter_high_adapter_high_Bridge {\n\n  var c_initialization_api: Option[adapter_high_impl_Initialization_Api] = None()\n  var c_operational_api: Option[adapter_high_impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    adapter_high_impl_SW_adapter_high_adapter_high_BridgeId : Art.BridgeId,\n    SHM_QUEUE_ADSB_Heartbeat_In_Id : Art.PortId,\n    SHM_QUEUE_ADSB_Ownship_In_Id : Art.PortId,\n    SHM_QUEUE_ADSB_Traffic_In_Id : Art.PortId,\n    SHM_QUEUE_Response_In_Id : Art.PortId,\n    Response_Out_Id : Art.PortId,\n    ADSB_Messages_Out_Id : Art.PortId,\n    SHM_HEADER_adsb_to_ptab_Id : Art.PortId,\n    Connection_Command_Out_Id : Art.PortId,\n    Request_In_Id : Art.PortId,\n    SHM_QUEUE_Request_Out_Id : Art.PortId,\n    Connection_Command_In_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: adapter_high_impl_Initialization_Api,\n    operational_api: adapter_high_impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(SHM_QUEUE_ADSB_Heartbeat_In_Id,\n                                             SHM_QUEUE_ADSB_Ownship_In_Id,\n                                             SHM_QUEUE_ADSB_Traffic_In_Id,\n                                             SHM_QUEUE_Response_In_Id,\n                                             Request_In_Id,\n                                             Connection_Command_In_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(Response_Out_Id,\n                                              ADSB_Messages_Out_Id,\n                                              SHM_HEADER_adsb_to_ptab_Id,\n                                              Connection_Command_Out_Id,\n                                              SHM_QUEUE_Request_Out_Id)\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: adapter_high_impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: adapter_high_impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: adapter_high_impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: adapter_high_impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: adapter_high_impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: adapter_high_impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: adapter_high_impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: adapter_high_impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/adapter_high_impl_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\n\n@sig trait adapter_high_impl_Api {\n  def id: Art.BridgeId\n  def SHM_QUEUE_ADSB_Heartbeat_In_Id : Art.PortId\n  def SHM_QUEUE_ADSB_Ownship_In_Id : Art.PortId\n  def SHM_QUEUE_ADSB_Traffic_In_Id : Art.PortId\n  def SHM_QUEUE_Response_In_Id : Art.PortId\n  def Response_Out_Id : Art.PortId\n  def ADSB_Messages_Out_Id : Art.PortId\n  def SHM_HEADER_adsb_to_ptab_Id : Art.PortId\n  def Connection_Command_Out_Id : Art.PortId\n  def Request_In_Id : Art.PortId\n  def SHM_QUEUE_Request_Out_Id : Art.PortId\n  def Connection_Command_In_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var Response_Out: Option[Base_Types.Bits] = $\n\n  def put_Response_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(Response_Out),\n      Ensures(\n        Response_Out == Some(value)\n      )\n    )\n    Spec {\n      Response_Out = Some(value)\n    }\n\n    Art.putValue(Response_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var ADSB_Messages_Out: Option[Base_Types.Bits] = $\n\n  def put_ADSB_Messages_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(ADSB_Messages_Out),\n      Ensures(\n        ADSB_Messages_Out == Some(value)\n      )\n    )\n    Spec {\n      ADSB_Messages_Out = Some(value)\n    }\n\n    Art.putValue(ADSB_Messages_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_HEADER_adsb_to_ptab: Option[Base_Types.Bits] = $\n\n  def put_SHM_HEADER_adsb_to_ptab(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_HEADER_adsb_to_ptab),\n      Ensures(\n        SHM_HEADER_adsb_to_ptab == Some(value)\n      )\n    )\n    Spec {\n      SHM_HEADER_adsb_to_ptab = Some(value)\n    }\n\n    Art.putValue(SHM_HEADER_adsb_to_ptab_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var Connection_Command_Out: Option[Base_Types.Bits] = $\n\n  def put_Connection_Command_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(Connection_Command_Out),\n      Ensures(\n        Connection_Command_Out == Some(value)\n      )\n    )\n    Spec {\n      Connection_Command_Out = Some(value)\n    }\n\n    Art.putValue(Connection_Command_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var SHM_QUEUE_Request_Out: Option[Base_Types.Bits] = $\n\n  def put_SHM_QUEUE_Request_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(SHM_QUEUE_Request_Out),\n      Ensures(\n        SHM_QUEUE_Request_Out == Some(value)\n      )\n    )\n    Spec {\n      SHM_QUEUE_Request_Out = Some(value)\n    }\n\n    Art.putValue(SHM_QUEUE_Request_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class adapter_high_impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val SHM_QUEUE_ADSB_Heartbeat_In_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Ownship_In_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Traffic_In_Id : Art.PortId,\n  val SHM_QUEUE_Response_In_Id : Art.PortId,\n  val Response_Out_Id : Art.PortId,\n  val ADSB_Messages_Out_Id : Art.PortId,\n  val SHM_HEADER_adsb_to_ptab_Id : Art.PortId,\n  val Connection_Command_Out_Id : Art.PortId,\n  val Request_In_Id : Art.PortId,\n  val SHM_QUEUE_Request_Out_Id : Art.PortId,\n  val Connection_Command_In_Id : Art.PortId) extends adapter_high_impl_Api\n\n@datatype class adapter_high_impl_Operational_Api (\n  val id: Art.BridgeId,\n  val SHM_QUEUE_ADSB_Heartbeat_In_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Ownship_In_Id : Art.PortId,\n  val SHM_QUEUE_ADSB_Traffic_In_Id : Art.PortId,\n  val SHM_QUEUE_Response_In_Id : Art.PortId,\n  val Response_Out_Id : Art.PortId,\n  val ADSB_Messages_Out_Id : Art.PortId,\n  val SHM_HEADER_adsb_to_ptab_Id : Art.PortId,\n  val Connection_Command_Out_Id : Art.PortId,\n  val Request_In_Id : Art.PortId,\n  val SHM_QUEUE_Request_Out_Id : Art.PortId,\n  val Connection_Command_In_Id : Art.PortId) extends adapter_high_impl_Api {\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var SHM_QUEUE_ADSB_Heartbeat_In: Base_Types.Bits = $\n\n  def get_SHM_QUEUE_ADSB_Heartbeat_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(SHM_QUEUE_ADSB_Heartbeat_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(SHM_QUEUE_ADSB_Heartbeat_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port SHM_QUEUE_ADSB_Heartbeat_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var SHM_QUEUE_ADSB_Ownship_In: Base_Types.Bits = $\n\n  def get_SHM_QUEUE_ADSB_Ownship_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(SHM_QUEUE_ADSB_Ownship_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(SHM_QUEUE_ADSB_Ownship_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port SHM_QUEUE_ADSB_Ownship_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var SHM_QUEUE_ADSB_Traffic_In: Base_Types.Bits = $\n\n  def get_SHM_QUEUE_ADSB_Traffic_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(SHM_QUEUE_ADSB_Traffic_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(SHM_QUEUE_ADSB_Traffic_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port SHM_QUEUE_ADSB_Traffic_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var SHM_QUEUE_Response_In: Base_Types.Bits = $\n\n  def get_SHM_QUEUE_Response_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(SHM_QUEUE_Response_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(SHM_QUEUE_Response_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port SHM_QUEUE_Response_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Request_In: Base_Types.Bits = $\n\n  def get_Request_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Request_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Request_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Request_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Connection_Command_In: Base_Types.Bits = $\n\n  def get_Connection_Command_In() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Connection_Command_In)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Connection_Command_In_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Connection_Command_In.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/component\/VPM_ben__SeL4\/VPM\/adapter_high_impl_SW_adapter_high_adapter_high.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject adapter_high_impl_SW_adapter_high_adapter_high {\n\n  def initialise(api: adapter_high_impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: adapter_high_impl_Operational_Api): Unit = { }\n\n  def activate(api: adapter_high_impl_Operational_Api): Unit = { }\n\n  def deactivate(api: adapter_high_impl_Operational_Api): Unit = { }\n\n  def finalise(api: adapter_high_impl_Operational_Api): Unit = { }\n\n  def recover(api: adapter_high_impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art.{Art, ArtNative, Empty}\nimport VPM_ben__SeL4._\n\n\/\/ This file was auto-generated.  Do not edit\n@msig trait CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param Observed payloads for event data port Observed.\n   *   ART currently supports single element event data queues so\n   *   only the last element of Observed will be used\n   *\/\n  def put_concrete_inputs(Observed : ISZ[Base_Types.Bits]): Unit = {\n    for(v <- Observed){\n      put_Observed(v)\n    }\n  }\n\n\n  \/** helper function to check CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param Suspect_Traffic_Out method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'Suspect_Traffic_Out'.\n   *\/\n  def check_concrete_output(Suspect_Traffic_Out: ISZ[Base_Types.Bits] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var Suspect_Traffic_OutValue: ISZ[Base_Types.Bits] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_Suspect_Traffic_Out().nonEmpty) { Suspect_Traffic_OutValue = Suspect_Traffic_OutValue :+ get_Suspect_Traffic_Out().get }\n    if(!Suspect_Traffic_Out(Suspect_Traffic_OutValue)) {\n      testFailures = testFailures :+ st\"'Suspect_Traffic_Out' did not match expected: received ${Suspect_Traffic_OutValue.size} events with the following payloads ${Suspect_Traffic_OutValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_Observed(value : Base_Types.Bits): Unit = {\n    ArtNative.insertInPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3.operational_api.Observed_Id, Base_Types.Bits_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_Suspect_Traffic_Out(): Option[Base_Types.Bits] = {\n    val value: Option[Base_Types.Bits] = get_Suspect_Traffic_Out_payload() match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port Suspect_Traffic_Out.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_Suspect_Traffic_Out_payload(): Option[Base_Types.Bits_Payload] = {\n    return ArtNative.observeOutPortValue(Arch.VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3.initialization_api.Suspect_Traffic_Out_Id).asInstanceOf[Option[Base_Types.Bits_Payload]]\n  }\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/util\/VPM_ben__SeL4\/VPM\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ This file was auto-generated.  Do not edit\nabstract class CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/test\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4.VPM._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Test extends CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.{CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3 => component}\n\n\/\/ This file was auto-generated.  Do not edit\n\n@datatype class CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  Observed: Port[Base_Types.Bits],\n  Suspect_Traffic_Out: Port[Base_Types.Bits]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](Observed),\n\n    eventOuts = ISZ[art.UPort](Suspect_Traffic_Out)\n  )\n\n  val initialization_api : CASE_Monitor3_Impl_Initialization_Api = {\n    val api = CASE_Monitor3_Impl_Initialization_Api(\n      id,\n      Observed.id,\n      Suspect_Traffic_Out.id\n    )\n    CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : CASE_Monitor3_Impl_Operational_Api = {\n    val api = CASE_Monitor3_Impl_Operational_Api(\n      id,\n      Observed.id,\n      Suspect_Traffic_Out.id\n    )\n    CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.EntryPoints(\n      id,\n\n      Observed.id,\n      Suspect_Traffic_Out.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge {\n\n  var c_initialization_api: Option[CASE_Monitor3_Impl_Initialization_Api] = None()\n  var c_operational_api: Option[CASE_Monitor3_Impl_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_BridgeId : Art.BridgeId,\n    Observed_Id : Art.PortId,\n    Suspect_Traffic_Out_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: CASE_Monitor3_Impl_Initialization_Api,\n    operational_api: CASE_Monitor3_Impl_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(Observed_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(Suspect_Traffic_Out_Id)\n\n    def initialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Monitor3_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor3_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def activate(): Unit = {\n      \/\/ implement the following method in 'component':  def activate(api: CASE_Monitor3_Impl_Operational_Api): Unit = {}\n      component.activate(operational_api)\n    }\n\n    def deactivate(): Unit = {\n      \/\/ implement the following method in 'component':  def deactivate(api: CASE_Monitor3_Impl_Operational_Api): Unit = {}\n      component.deactivate(operational_api)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: CASE_Monitor3_Impl_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    def recover(): Unit = {\n      \/\/ implement the following method in 'component':  def recover(api: CASE_Monitor3_Impl_Operational_Api): Unit = {}\n      component.recover(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: CASE_Monitor3_Impl_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: CASE_Monitor3_Impl_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/bridge\/VPM_ben__SeL4\/VPM\/CASE_Monitor3_Impl_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\n\n@sig trait CASE_Monitor3_Impl_Api {\n  def id: Art.BridgeId\n  def Observed_Id : Art.PortId\n  def Suspect_Traffic_Out_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var Suspect_Traffic_Out: Option[Base_Types.Bits] = $\n\n  def put_Suspect_Traffic_Out(value : Base_Types.Bits) : Unit = {\n    Contract(\n      Modifies(Suspect_Traffic_Out),\n      Ensures(\n        Suspect_Traffic_Out == Some(value)\n      )\n    )\n    Spec {\n      Suspect_Traffic_Out = Some(value)\n    }\n\n    Art.putValue(Suspect_Traffic_Out_Id, Base_Types.Bits_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class CASE_Monitor3_Impl_Initialization_Api (\n  val id: Art.BridgeId,\n  val Observed_Id : Art.PortId,\n  val Suspect_Traffic_Out_Id : Art.PortId) extends CASE_Monitor3_Impl_Api\n\n@datatype class CASE_Monitor3_Impl_Operational_Api (\n  val id: Art.BridgeId,\n  val Observed_Id : Art.PortId,\n  val Suspect_Traffic_Out_Id : Art.PortId) extends CASE_Monitor3_Impl_Api {\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var Observed: Base_Types.Bits = $\n\n  def get_Observed() : Option[Base_Types.Bits] = {\n    Contract(\n      Ensures(\n        Res == Some(Observed)\n      )\n    )\n    val value : Option[Base_Types.Bits] = Art.getValue(Observed_Id) match {\n      case Some(Base_Types.Bits_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port Observed.  Expecting 'Base_Types.Bits_Payload' but received ${v}\")\n        None[Base_Types.Bits]()\n      case _ => None[Base_Types.Bits]()\n    }\n    return value\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/component\/VPM_ben__SeL4\/VPM\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport VPM_ben__SeL4._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3 {\n\n  def initialise(api: CASE_Monitor3_Impl_Initialization_Api): Unit = { }\n\n  def timeTriggered(api: CASE_Monitor3_Impl_Operational_Api): Unit = { }\n\n  def activate(api: CASE_Monitor3_Impl_Operational_Api): Unit = { }\n\n  def deactivate(api: CASE_Monitor3_Impl_Operational_Api): Unit = { }\n\n  def finalise(api: CASE_Monitor3_Impl_Operational_Api): Unit = { }\n\n  def recover(api: CASE_Monitor3_Impl_Operational_Api): Unit = { }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/component\/VPM_ben__SeL4\/TranspilerToucher.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4\n\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject TranspilerToucher {\n  def touch(): Unit = {\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\n\nimport org.sireum._\nimport art._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix\n\nobject CASE_AttestationManager extends App {\n\n  val CASE_AttestationManagerBridge : VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge = {\n    val AttestationRequest = Port[Base_Types.Bits] (id = portId\"0\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest\", mode = EventOut)\n    val AttestationResponse = Port[Base_Types.Bits] (id = portId\"1\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse\", mode = EventIn)\n    val TrustedIds = Port[Base_Types.Bits] (id = portId\"2\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds\", mode = EventOut)\n    val InitiateAttestation = Port[Base_Types.Bits] (id = portId\"3\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation\", mode = EventIn)\n    val TerminateAttestation = Port[Base_Types.Bits] (id = portId\"4\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation\", mode = EventOut)\n\n    VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge(\n      id = bridgeId\"0\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      AttestationRequest = AttestationRequest,\n      AttestationResponse = AttestationResponse,\n      TrustedIds = TrustedIds,\n      InitiateAttestation = InitiateAttestation,\n      TerminateAttestation = TerminateAttestation\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_AttestationManagerBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ AttestationRequest: Out EventDataPort Base_Types.Bits\n  val AttestationRequest_id: Art.PortId = CASE_AttestationManagerBridge.AttestationRequest.id\n  var AttestationRequest_port: Option[DataContent] = noData\n\n  \/\/ AttestationResponse: In EventDataPort Base_Types.Bits\n  val AttestationResponse_id: Art.PortId = CASE_AttestationManagerBridge.AttestationResponse.id\n  var AttestationResponse_port: Option[DataContent] = noData\n\n  \/\/ TrustedIds: Out EventDataPort Base_Types.Bits\n  val TrustedIds_id: Art.PortId = CASE_AttestationManagerBridge.TrustedIds.id\n  var TrustedIds_port: Option[DataContent] = noData\n\n  \/\/ InitiateAttestation: In EventDataPort Base_Types.Bits\n  val InitiateAttestation_id: Art.PortId = CASE_AttestationManagerBridge.InitiateAttestation.id\n  var InitiateAttestation_port: Option[DataContent] = noData\n\n  \/\/ TerminateAttestation: Out EventDataPort Base_Types.Bits\n  val TerminateAttestation_id: Art.PortId = CASE_AttestationManagerBridge.TerminateAttestation.id\n  var TerminateAttestation_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == AttestationResponse_id) {\n      return AttestationResponse_port\n    } else if(portId == InitiateAttestation_id) {\n      return InitiateAttestation_port\n    } else {\n      halt(s\"Unexpected: CASE_AttestationManager.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    AttestationResponse_port = CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix.AttestationResponse_Receive()\n\n    InitiateAttestation_port = CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix.InitiateAttestation_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == AttestationRequest_id) {\n      AttestationRequest_port = Some(data)\n    } else if(portId == TrustedIds_id) {\n      TrustedIds_port = Some(data)\n    } else if(portId == TerminateAttestation_id) {\n      TerminateAttestation_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_AttestationManager.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(AttestationRequest_port.nonEmpty) {\n      CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix.AttestationRequest_Send(AttestationRequest_port.get)\n      AttestationRequest_port = noData\n    }\n\n    if(TrustedIds_port.nonEmpty) {\n      CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix.TrustedIds_Send(TrustedIds_port.get)\n      TrustedIds_port = noData\n    }\n\n    if(TerminateAttestation_port.nonEmpty) {\n      CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix.TerminateAttestation_Send(TerminateAttestation_port.get)\n      TerminateAttestation_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    \/\/ nothing to do - CAmkES is responsible for initialization\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ add types used in Platform.receive and Platform.receiveAsync\n      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId\"0\", Base_Types.Boolean_Payload(T))\n      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId\"0\", None())\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.logError(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.logError(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.put_AttestationRequest(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.put_AttestationRequest(Base_Types.Bits_example())\n      val apiUsage_AttestationResponse: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.get_AttestationResponse()\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.put_TrustedIds(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.put_TrustedIds(Base_Types.Bits_example())\n      val apiUsage_InitiateAttestation: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.get_InitiateAttestation()\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_initialization_api.get.put_TerminateAttestation(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge.c_operational_api.get.put_TerminateAttestation(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(CASE_AttestationManagerBridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(CASE_AttestationManagerBridge.name)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(CASE_AttestationManagerBridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix {\n  \/\/ send payload 'd' to components connected to seL4's AttestationRequest port\n  def AttestationRequest_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's AttestationResponse port is empty, F otherwise \n  def AttestationResponse_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AttestationResponse port \n  def AttestationResponse_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's TrustedIds port\n  def TrustedIds_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's InitiateAttestation port is empty, F otherwise \n  def InitiateAttestation_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's InitiateAttestation port \n  def InitiateAttestation_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's TerminateAttestation port\n  def TerminateAttestation_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\nobject CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_Ext {\n  def AttestationRequest_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def AttestationResponse_IsEmpty(): B = halt(\"stub\")\n\n  def AttestationResponse_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def TrustedIds_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def InitiateAttestation_IsEmpty(): B = halt(\"stub\")\n\n  def InitiateAttestation_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def TerminateAttestation_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_ATTESTATIONMANAGER_IMPL_SW_ATTESTATION_MANAGER_CASE_ATTESTATIONMANAGER_H\n#define CASE_ATTESTATIONMANAGER_IMPL_SW_ATTESTATION_MANAGER_CASE_ATTESTATIONMANAGER_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_initialise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_finalise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.h>\n#include <CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nstatic char* component_id = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager\";\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_initialise_\", 0);\n\n  printf(\"%s: VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_initialise_ called\\n\", component_id);\n\n  \/\/ example usage of api setters\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl];\n  byte_array_default(SF t0, numBits_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl, numBytes_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl);\n  api_put_AttestationRequest__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF numBits_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl, t0);\n\n  uint8_t t1[numBytes_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl];\n  byte_array_default(SF t1, numBits_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl);\n  api_put_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF numBits_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl, t1);\n\n  uint8_t t2[numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32];\n  byte_array_default(SF t2, numBits_VPM_ben__SeL4_Common_Types_Unsigned_32, numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32);\n  api_put_TerminateAttestation__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF numBits_VPM_ben__SeL4_Common_Types_Unsigned_32, t2);\n\n  \/* example usage of api loggers. Commented out as the constructed String may be too long\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF string(\"Example logInfo\"));\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF string(\"Example logDebug\"));\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF string(\"Example logError\"));\n  *\/\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_finalise_\", 0);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl];\n  size_t t0_numBits;\n  if(api_get_AttestationResponse__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert((Z) t0_numBits == numBits_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port AttestationResponse: \\n\", component_id);\n    hex_dump(SF t0, numBytes_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(AttestationResponse_str);\n    String__append(SF (String) &AttestationResponse_str, string(\"Received data on event data port AttestationResponse: \"));\n    byte_array_string(SF (String) &AttestationResponse_str, t0, numBytes_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF (String) &AttestationResponse_str);\n    *\/\n  }\n\n  uint8_t t1[numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32];\n  size_t t1_numBits;\n  if(api_get_InitiateAttestation__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert((Z) t1_numBits == numBits_VPM_ben__SeL4_Common_Types_Unsigned_32, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port InitiateAttestation: \\n\", component_id);\n    hex_dump(SF t1, numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(InitiateAttestation_str);\n    String__append(SF (String) &InitiateAttestation_str, string(\"Received data on event data port InitiateAttestation: \"));\n    byte_array_string(SF (String) &InitiateAttestation_str, t1, numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32);\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(SF (String) &InitiateAttestation_str);\n    *\/\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_ATTESTATIONMANAGER_IMPL_SW_ATTESTATION_MANAGER_CASE_ATTESTATIONMANAGER_API_H\n#define CASE_ATTESTATIONMANAGER_IMPL_SW_ATTESTATION_MANAGER_CASE_ATTESTATIONMANAGER_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nvoid api_put_AttestationRequest__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_AttestationResponse__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_InitiateAttestation__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_TerminateAttestation__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.h>\n#include <CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.h>\n\nstatic bool apis_initialized = false;\nstatic struct VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api initialization_api;\nstatic struct VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Operational_Api operational_api;\n\nstatic void initialize_apis(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.c\", \"\", \"initialize_apis\", 0);\n\n  \/\/ Option_E6EBEB = Option[VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_Initialization_Api]\n  Option_E6EBEB_get_(SF (VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api) &initialization_api, VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge_c_initialization_api(SF_LAST));\n  \/\/ Option_D43E1E = Option[VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_Operational_Api]\n  Option_D43E1E_get_(SF (VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Operational_Api) &operational_api, VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_Bridge_c_operational_api(SF_LAST));\n  apis_initialized = true;\n}\n\n\/\/ This file was auto-generated.  Do not edit\n\nvoid api_put_AttestationRequest__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"api_put_AttestationRequest__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api_put_AttestationRequest_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_AttestationResponse__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"api_get_AttestationResponse__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Operational_Api_get_AttestationResponse_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"api_put_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api_put_TrustedIds_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_InitiateAttestation__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"api_get_InitiateAttestation__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Operational_Api_get_InitiateAttestation_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_TerminateAttestation__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"api_put_TerminateAttestation__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api_put_TerminateAttestation_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api_logInfo_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api_logDebug_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"api_logError__VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api_logError_(\n    SF\n    &initialization_api,\n    str);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_initialise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_initialise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_initialise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_finalise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_finalise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_finalise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_timeTriggered(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_timeTriggered\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_initialiseArchitecture\", 0);\n\n  VPM_ben__SeL4_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_CASE_AttestationManager_initialiseArchitecture(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_initialiseEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_CASE_AttestationManager_initialiseEntryPoint(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_computeEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_CASE_AttestationManager_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_entryPoints\", 0);\n\n  return VPM_ben__SeL4_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_CASE_AttestationManager_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_ATTESTATIONMANAGER_IMPL_SW_ATTESTATION_MANAGER_CASE_ATTESTATIONMANAGER_ADAPTER_H\n#define CASE_ATTESTATIONMANAGER_IMPL_SW_ATTESTATION_MANAGER_CASE_ATTESTATIONMANAGER_ADAPTER_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/settings_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.cmake",
        {
          "type" : "ITestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\n\nimport org.sireum._\nimport art._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix\n\nobject CASE_AttestationGate extends App {\n\n  val CASE_AttestationGateBridge : VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge = {\n    val SHM_QUEUE_Request_In = Port[Base_Types.Bits] (id = portId\"0\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In\", mode = EventIn)\n    val SHM_QUEUE_Request_Out = Port[Base_Types.Bits] (id = portId\"1\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out\", mode = EventOut)\n    val Connection_Command_In = Port[Base_Types.Bits] (id = portId\"2\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In\", mode = EventIn)\n    val Connection_Command_Out = Port[Base_Types.Bits] (id = portId\"3\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out\", mode = EventOut)\n    val TrustedIds = Port[Base_Types.Bits] (id = portId\"4\", name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds\", mode = EventIn)\n\n    VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge(\n      id = bridgeId\"0\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      SHM_QUEUE_Request_In = SHM_QUEUE_Request_In,\n      SHM_QUEUE_Request_Out = SHM_QUEUE_Request_Out,\n      Connection_Command_In = Connection_Command_In,\n      Connection_Command_Out = Connection_Command_Out,\n      TrustedIds = TrustedIds\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_AttestationGateBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ SHM_QUEUE_Request_In: In EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Request_In_id: Art.PortId = CASE_AttestationGateBridge.SHM_QUEUE_Request_In.id\n  var SHM_QUEUE_Request_In_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Request_Out: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Request_Out_id: Art.PortId = CASE_AttestationGateBridge.SHM_QUEUE_Request_Out.id\n  var SHM_QUEUE_Request_Out_port: Option[DataContent] = noData\n\n  \/\/ Connection_Command_In: In EventDataPort Base_Types.Bits\n  val Connection_Command_In_id: Art.PortId = CASE_AttestationGateBridge.Connection_Command_In.id\n  var Connection_Command_In_port: Option[DataContent] = noData\n\n  \/\/ Connection_Command_Out: Out EventDataPort Base_Types.Bits\n  val Connection_Command_Out_id: Art.PortId = CASE_AttestationGateBridge.Connection_Command_Out.id\n  var Connection_Command_Out_port: Option[DataContent] = noData\n\n  \/\/ TrustedIds: In EventDataPort Base_Types.Bits\n  val TrustedIds_id: Art.PortId = CASE_AttestationGateBridge.TrustedIds.id\n  var TrustedIds_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == SHM_QUEUE_Request_In_id) {\n      return SHM_QUEUE_Request_In_port\n    } else if(portId == Connection_Command_In_id) {\n      return Connection_Command_In_port\n    } else if(portId == TrustedIds_id) {\n      return TrustedIds_port\n    } else {\n      halt(s\"Unexpected: CASE_AttestationGate.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    SHM_QUEUE_Request_In_port = CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix.SHM_QUEUE_Request_In_Receive()\n\n    Connection_Command_In_port = CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix.Connection_Command_In_Receive()\n\n    TrustedIds_port = CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix.TrustedIds_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == SHM_QUEUE_Request_Out_id) {\n      SHM_QUEUE_Request_Out_port = Some(data)\n    } else if(portId == Connection_Command_Out_id) {\n      Connection_Command_Out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_AttestationGate.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(SHM_QUEUE_Request_Out_port.nonEmpty) {\n      CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix.SHM_QUEUE_Request_Out_Send(SHM_QUEUE_Request_Out_port.get)\n      SHM_QUEUE_Request_Out_port = noData\n    }\n\n    if(Connection_Command_Out_port.nonEmpty) {\n      CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix.Connection_Command_Out_Send(Connection_Command_Out_port.get)\n      Connection_Command_Out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    \/\/ nothing to do - CAmkES is responsible for initialization\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ add types used in Platform.receive and Platform.receiveAsync\n      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId\"0\", Base_Types.Boolean_Payload(T))\n      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId\"0\", None())\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.logError(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_SHM_QUEUE_Request_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_SHM_QUEUE_Request_In()\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n      val apiUsage_Connection_Command_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_Connection_Command_In()\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_initialization_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n      val apiUsage_TrustedIds: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge.c_operational_api.get.get_TrustedIds()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(CASE_AttestationGateBridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(CASE_AttestationGateBridge.name)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(CASE_AttestationGateBridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix {\n  \/\/ returns T if seL4's SHM_QUEUE_Request_In port is empty, F otherwise \n  def SHM_QUEUE_Request_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's SHM_QUEUE_Request_In port \n  def SHM_QUEUE_Request_In_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_Request_Out port\n  def SHM_QUEUE_Request_Out_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's Connection_Command_In port is empty, F otherwise \n  def Connection_Command_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Connection_Command_In port \n  def Connection_Command_In_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's Connection_Command_Out port\n  def Connection_Command_Out_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's TrustedIds port is empty, F otherwise \n  def TrustedIds_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's TrustedIds port \n  def TrustedIds_Receive(): Option[DataContent] = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\nobject CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_Ext {\n  def SHM_QUEUE_Request_In_IsEmpty(): B = halt(\"stub\")\n\n  def SHM_QUEUE_Request_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_Request_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def Connection_Command_In_IsEmpty(): B = halt(\"stub\")\n\n  def Connection_Command_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def Connection_Command_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def TrustedIds_IsEmpty(): B = halt(\"stub\")\n\n  def TrustedIds_Receive(): Option[DataContent] = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_ATTESTATIONGATE_IMPL_SW_ATTESTATION_GATE_CASE_ATTESTATIONGATE_H\n#define CASE_ATTESTATIONGATE_IMPL_SW_ATTESTATION_GATE_CASE_ATTESTATIONGATE_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_initialise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_finalise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.h>\n#include <CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nstatic char* component_id = \"VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate\";\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_initialise_\", 0);\n\n  printf(\"%s: VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_initialise_ called\\n\", component_id);\n\n  \/\/ example usage of api setters\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl];\n  byte_array_default(SF t0, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl);\n  api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl, t0);\n\n  uint8_t t1[numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl];\n  byte_array_default(SF t1, numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n  api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, t1);\n\n  \/* example usage of api loggers. Commented out as the constructed String may be too long\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF string(\"Example logInfo\"));\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF string(\"Example logDebug\"));\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF string(\"Example logError\"));\n  *\/\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_finalise_\", 0);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl];\n  size_t t0_numBits;\n  if(api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert((Z) t0_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port SHM_QUEUE_Request_In: \\n\", component_id);\n    hex_dump(SF t0, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(SHM_QUEUE_Request_In_str);\n    String__append(SF (String) &SHM_QUEUE_Request_In_str, string(\"Received data on event data port SHM_QUEUE_Request_In: \"));\n    byte_array_string(SF (String) &SHM_QUEUE_Request_In_str, t0, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF (String) &SHM_QUEUE_Request_In_str);\n    *\/\n  }\n\n  uint8_t t1[numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl];\n  size_t t1_numBits;\n  if(api_get_Connection_Command_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert((Z) t1_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Connection_Command_In: \\n\", component_id);\n    hex_dump(SF t1, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Connection_Command_In_str);\n    String__append(SF (String) &Connection_Command_In_str, string(\"Received data on event data port Connection_Command_In: \"));\n    byte_array_string(SF (String) &Connection_Command_In_str, t1, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF (String) &Connection_Command_In_str);\n    *\/\n  }\n\n  uint8_t t2[numBytes_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl];\n  size_t t2_numBits;\n  if(api_get_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF &t2_numBits, t2)) {\n    \/\/ sanity check\n    sfAssert((Z) t2_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port TrustedIds: \\n\", component_id);\n    hex_dump(SF t2, numBytes_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(TrustedIds_str);\n    String__append(SF (String) &TrustedIds_str, string(\"Received data on event data port TrustedIds: \"));\n    byte_array_string(SF (String) &TrustedIds_str, t2, numBytes_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF (String) &TrustedIds_str);\n    *\/\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_ATTESTATIONGATE_IMPL_SW_ATTESTATION_GATE_CASE_ATTESTATIONGATE_API_H\n#define CASE_ATTESTATIONGATE_IMPL_SW_ATTESTATION_GATE_CASE_ATTESTATIONGATE_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_Connection_Command_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.h>\n#include <CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.h>\n\nstatic bool apis_initialized = false;\nstatic struct VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Initialization_Api initialization_api;\nstatic struct VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Operational_Api operational_api;\n\nstatic void initialize_apis(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.c\", \"\", \"initialize_apis\", 0);\n\n  \/\/ Option_96283E = Option[VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_Initialization_Api]\n  Option_96283E_get_(SF (VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Initialization_Api) &initialization_api, VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_c_initialization_api(SF_LAST));\n  \/\/ Option_EAEC89 = Option[VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_Operational_Api]\n  Option_EAEC89_get_(SF (VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Operational_Api) &operational_api, VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_c_operational_api(SF_LAST));\n  apis_initialized = true;\n}\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Operational_Api_get_SHM_QUEUE_Request_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Initialization_Api_put_SHM_QUEUE_Request_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_Connection_Command_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"api_get_Connection_Command_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Operational_Api_get_Connection_Command_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Initialization_Api_put_Connection_Command_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"api_get_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Operational_Api_get_TrustedIds_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Initialization_Api_logInfo_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Initialization_Api_logDebug_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"api_logError__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Initialization_Api_logError_(\n    SF\n    &initialization_api,\n    str);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_initialise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_initialise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_initialise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_finalise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_finalise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_finalise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_timeTriggered(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_timeTriggered\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_initialiseArchitecture\", 0);\n\n  VPM_ben__SeL4_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_CASE_AttestationGate_initialiseArchitecture(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_initialiseEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_CASE_AttestationGate_initialiseEntryPoint(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_computeEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_CASE_AttestationGate_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_entryPoints\", 0);\n\n  return VPM_ben__SeL4_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_CASE_AttestationGate_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_ATTESTATIONGATE_IMPL_SW_ATTESTATION_GATE_CASE_ATTESTATIONGATE_ADAPTER_H\n#define CASE_ATTESTATIONGATE_IMPL_SW_ATTESTATION_GATE_CASE_ATTESTATIONGATE_ADAPTER_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/settings_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.cmake",
        {
          "type" : "ITestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\n\nimport org.sireum._\nimport art._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix\n\nobject CASE_Monitor1 extends App {\n\n  val CASE_Monitor1Bridge : VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge = {\n    val Observed = Port[Base_Types.Bits] (id = portId\"0\", name = \"VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed\", mode = EventIn)\n    val Suspect_Traffic_Out = Port[Base_Types.Bits] (id = portId\"1\", name = \"VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out\", mode = EventOut)\n\n    VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge(\n      id = bridgeId\"0\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      Observed = Observed,\n      Suspect_Traffic_Out = Suspect_Traffic_Out\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_Monitor1Bridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ Observed: In EventDataPort Base_Types.Bits\n  val Observed_id: Art.PortId = CASE_Monitor1Bridge.Observed.id\n  var Observed_port: Option[DataContent] = noData\n\n  \/\/ Suspect_Traffic_Out: Out EventDataPort Base_Types.Bits\n  val Suspect_Traffic_Out_id: Art.PortId = CASE_Monitor1Bridge.Suspect_Traffic_Out.id\n  var Suspect_Traffic_Out_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == Observed_id) {\n      return Observed_port\n    } else {\n      halt(s\"Unexpected: CASE_Monitor1.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    Observed_port = CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix.Observed_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == Suspect_Traffic_Out_id) {\n      Suspect_Traffic_Out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_Monitor1.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(Suspect_Traffic_Out_port.nonEmpty) {\n      CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix.Suspect_Traffic_Out_Send(Suspect_Traffic_Out_port.get)\n      Suspect_Traffic_Out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    \/\/ nothing to do - CAmkES is responsible for initialization\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ add types used in Platform.receive and Platform.receiveAsync\n      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId\"0\", Base_Types.Boolean_Payload(T))\n      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId\"0\", None())\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api.get.logError(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_Observed: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.get_Observed()\n      VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_initialization_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge.c_operational_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(CASE_Monitor1Bridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(CASE_Monitor1Bridge.name)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(CASE_Monitor1Bridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix {\n  \/\/ returns T if seL4's Observed port is empty, F otherwise \n  def Observed_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Observed port \n  def Observed_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's Suspect_Traffic_Out port\n  def Suspect_Traffic_Out_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\nobject CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix_Ext {\n  def Observed_IsEmpty(): B = halt(\"stub\")\n\n  def Observed_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def Suspect_Traffic_Out_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR1_IMPL_SW_EXPECTED_POSITION_MONITOR_CASE_MONITOR1_H\n#define CASE_MONITOR1_IMPL_SW_EXPECTED_POSITION_MONITOR_CASE_MONITOR1_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_initialise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_finalise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.h>\n#include <CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nstatic char* component_id = \"VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1\";\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_initialise_\", 0);\n\n  printf(\"%s: VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_initialise_ called\\n\", component_id);\n\n  \/\/ example usage of api setters\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl];\n  byte_array_default(SF t0, numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n  api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, t0);\n\n  \/* example usage of api loggers. Commented out as the constructed String may be too long\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF string(\"Example logInfo\"));\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF string(\"Example logDebug\"));\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF string(\"Example logError\"));\n  *\/\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_finalise_\", 0);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl];\n  size_t t0_numBits;\n  if(api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert((Z) t0_numBits == numBits_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Observed: \\n\", component_id);\n    hex_dump(SF t0, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Observed_str);\n    String__append(SF (String) &Observed_str, string(\"Received data on event data port Observed: \"));\n    byte_array_string(SF (String) &Observed_str, t0, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF (String) &Observed_str);\n    *\/\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR1_IMPL_SW_EXPECTED_POSITION_MONITOR_CASE_MONITOR1_API_H\n#define CASE_MONITOR1_IMPL_SW_EXPECTED_POSITION_MONITOR_CASE_MONITOR1_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.h>\n#include <CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.h>\n\nstatic bool apis_initialized = false;\nstatic struct VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Initialization_Api initialization_api;\nstatic struct VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Operational_Api operational_api;\n\nstatic void initialize_apis(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.c\", \"\", \"initialize_apis\", 0);\n\n  \/\/ Option_4608EA = Option[VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_Initialization_Api]\n  Option_4608EA_get_(SF (VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Initialization_Api) &initialization_api, VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_c_initialization_api(SF_LAST));\n  \/\/ Option_437545 = Option[VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_Operational_Api]\n  Option_437545_get_(SF (VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Operational_Api) &operational_api, VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_c_operational_api(SF_LAST));\n  apis_initialized = true;\n}\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c\", \"\", \"api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Operational_Api_get_Observed_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c\", \"\", \"api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Initialization_Api_put_Suspect_Traffic_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c\", \"\", \"api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Initialization_Api_logInfo_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c\", \"\", \"api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Initialization_Api_logDebug_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c\", \"\", \"api_logError__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Initialization_Api_logError_(\n    SF\n    &initialization_api,\n    str);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_initialise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_initialise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_initialise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_finalise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_finalise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_finalise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_timeTriggered(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_timeTriggered\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_initialiseArchitecture\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_CASE_Monitor1_initialiseArchitecture(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_initialiseEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_CASE_Monitor1_initialiseEntryPoint(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_computeEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_CASE_Monitor1_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_entryPoints\", 0);\n\n  return VPM_ben__SeL4_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_CASE_Monitor1_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR1_IMPL_SW_EXPECTED_POSITION_MONITOR_CASE_MONITOR1_ADAPTER_H\n#define CASE_MONITOR1_IMPL_SW_EXPECTED_POSITION_MONITOR_CASE_MONITOR1_ADAPTER_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/settings_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.cmake",
        {
          "type" : "ITestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\n\nimport org.sireum._\nimport art._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix\n\nobject CASE_Monitor2 extends App {\n\n  val CASE_Monitor2Bridge : VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge = {\n    val Observed = Port[Base_Types.Bits] (id = portId\"0\", name = \"VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed\", mode = EventIn)\n    val Suspect_Traffic_Out = Port[Base_Types.Bits] (id = portId\"1\", name = \"VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out\", mode = EventOut)\n\n    VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge(\n      id = bridgeId\"0\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      Observed = Observed,\n      Suspect_Traffic_Out = Suspect_Traffic_Out\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_Monitor2Bridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ Observed: In EventDataPort Base_Types.Bits\n  val Observed_id: Art.PortId = CASE_Monitor2Bridge.Observed.id\n  var Observed_port: Option[DataContent] = noData\n\n  \/\/ Suspect_Traffic_Out: Out EventDataPort Base_Types.Bits\n  val Suspect_Traffic_Out_id: Art.PortId = CASE_Monitor2Bridge.Suspect_Traffic_Out.id\n  var Suspect_Traffic_Out_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == Observed_id) {\n      return Observed_port\n    } else {\n      halt(s\"Unexpected: CASE_Monitor2.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    Observed_port = CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix.Observed_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == Suspect_Traffic_Out_id) {\n      Suspect_Traffic_Out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_Monitor2.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(Suspect_Traffic_Out_port.nonEmpty) {\n      CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix.Suspect_Traffic_Out_Send(Suspect_Traffic_Out_port.get)\n      Suspect_Traffic_Out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    \/\/ nothing to do - CAmkES is responsible for initialization\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ add types used in Platform.receive and Platform.receiveAsync\n      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId\"0\", Base_Types.Boolean_Payload(T))\n      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId\"0\", None())\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api.get.logError(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_Observed: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.get_Observed()\n      VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_initialization_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge.c_operational_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(CASE_Monitor2Bridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(CASE_Monitor2Bridge.name)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(CASE_Monitor2Bridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix {\n  \/\/ returns T if seL4's Observed port is empty, F otherwise \n  def Observed_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Observed port \n  def Observed_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's Suspect_Traffic_Out port\n  def Suspect_Traffic_Out_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\nobject CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix_Ext {\n  def Observed_IsEmpty(): B = halt(\"stub\")\n\n  def Observed_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def Suspect_Traffic_Out_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR2_IMPL_SW_DUPLICATE_ENTITY_MONITOR_CASE_MONITOR2_H\n#define CASE_MONITOR2_IMPL_SW_DUPLICATE_ENTITY_MONITOR_CASE_MONITOR2_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_initialise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_finalise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.h>\n#include <CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nstatic char* component_id = \"VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2\";\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_initialise_\", 0);\n\n  printf(\"%s: VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_initialise_ called\\n\", component_id);\n\n  \/\/ example usage of api setters\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl];\n  byte_array_default(SF t0, numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n  api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, t0);\n\n  \/* example usage of api loggers. Commented out as the constructed String may be too long\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF string(\"Example logInfo\"));\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF string(\"Example logDebug\"));\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF string(\"Example logError\"));\n  *\/\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_finalise_\", 0);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl];\n  size_t t0_numBits;\n  if(api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert((Z) t0_numBits == numBits_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Observed: \\n\", component_id);\n    hex_dump(SF t0, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Observed_str);\n    String__append(SF (String) &Observed_str, string(\"Received data on event data port Observed: \"));\n    byte_array_string(SF (String) &Observed_str, t0, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF (String) &Observed_str);\n    *\/\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR2_IMPL_SW_DUPLICATE_ENTITY_MONITOR_CASE_MONITOR2_API_H\n#define CASE_MONITOR2_IMPL_SW_DUPLICATE_ENTITY_MONITOR_CASE_MONITOR2_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.h>\n#include <CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.h>\n\nstatic bool apis_initialized = false;\nstatic struct VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Initialization_Api initialization_api;\nstatic struct VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Operational_Api operational_api;\n\nstatic void initialize_apis(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.c\", \"\", \"initialize_apis\", 0);\n\n  \/\/ Option_484EBF = Option[VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_Initialization_Api]\n  Option_484EBF_get_(SF (VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Initialization_Api) &initialization_api, VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_c_initialization_api(SF_LAST));\n  \/\/ Option_9E8BA8 = Option[VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_Operational_Api]\n  Option_9E8BA8_get_(SF (VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Operational_Api) &operational_api, VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_c_operational_api(SF_LAST));\n  apis_initialized = true;\n}\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c\", \"\", \"api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Operational_Api_get_Observed_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c\", \"\", \"api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Initialization_Api_put_Suspect_Traffic_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c\", \"\", \"api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Initialization_Api_logInfo_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c\", \"\", \"api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Initialization_Api_logDebug_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c\", \"\", \"api_logError__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Initialization_Api_logError_(\n    SF\n    &initialization_api,\n    str);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_initialise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_initialise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_initialise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_finalise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_finalise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_finalise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_timeTriggered(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_timeTriggered\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_initialiseArchitecture\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_CASE_Monitor2_initialiseArchitecture(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_initialiseEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_CASE_Monitor2_initialiseEntryPoint(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_computeEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_CASE_Monitor2_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_entryPoints\", 0);\n\n  return VPM_ben__SeL4_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_CASE_Monitor2_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR2_IMPL_SW_DUPLICATE_ENTITY_MONITOR_CASE_MONITOR2_ADAPTER_H\n#define CASE_MONITOR2_IMPL_SW_DUPLICATE_ENTITY_MONITOR_CASE_MONITOR2_ADAPTER_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/settings_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.cmake",
        {
          "type" : "ITestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.adapter_low_impl_SW_adapter_low_adapter_low\n\nimport org.sireum._\nimport art._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix\n\nobject adapter_low extends App {\n\n  val adapter_lowBridge : VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge = {\n    val ADSB_Messages_In = Port[Base_Types.Bits] (id = portId\"0\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In\", mode = EventIn)\n    val Response_In = Port[Base_Types.Bits] (id = portId\"1\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In\", mode = EventIn)\n    val AttestationRequest = Port[Base_Types.Bits] (id = portId\"2\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest\", mode = EventIn)\n    val SHM_QUEUE_ADSB_Heartbeat_Out = Port[Base_Types.Bits] (id = portId\"3\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_ADSB_Heartbeat_Out\", mode = EventOut)\n    val SHM_QUEUE_ADSB_Ownship_Out = Port[Base_Types.Bits] (id = portId\"4\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_ADSB_Ownship_Out\", mode = EventOut)\n    val SHM_QUEUE_ADSB_Traffic_Out = Port[Base_Types.Bits] (id = portId\"5\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_ADSB_Traffic_Out\", mode = EventOut)\n    val SHM_QUEUE_Response_Out = Port[Base_Types.Bits] (id = portId\"6\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Response_Out\", mode = EventOut)\n    val SHM_QUEUE_AttestationRequest = Port[Base_Types.Bits] (id = portId\"7\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_AttestationRequest\", mode = EventOut)\n    val SHM_HEADER_adsb_to_ptab = Port[Base_Types.Bits] (id = portId\"8\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab\", mode = EventIn)\n    val Connection_Command_In = Port[Base_Types.Bits] (id = portId\"9\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In\", mode = EventIn)\n    val Suspect_Traffic_In1 = Port[Base_Types.Bits] (id = portId\"10\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1\", mode = EventIn)\n    val SHM_QUEUE_Suspect_Traffic_Out1 = Port[Base_Types.Bits] (id = portId\"11\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Suspect_Traffic_Out1\", mode = EventOut)\n    val Suspect_Traffic_In2 = Port[Base_Types.Bits] (id = portId\"12\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2\", mode = EventIn)\n    val SHM_QUEUE_Suspect_Traffic_Out2 = Port[Base_Types.Bits] (id = portId\"13\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Suspect_Traffic_Out2\", mode = EventOut)\n    val Suspect_Traffic_In3 = Port[Base_Types.Bits] (id = portId\"14\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3\", mode = EventIn)\n    val SHM_QUEUE_Suspect_Traffic_Out3 = Port[Base_Types.Bits] (id = portId\"15\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Suspect_Traffic_Out3\", mode = EventOut)\n    val SHM_QUEUE_Request_In = Port[Base_Types.Bits] (id = portId\"16\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_In\", mode = EventIn)\n    val SHM_QUEUE_AttestationResponse = Port[Base_Types.Bits] (id = portId\"17\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_AttestationResponse\", mode = EventIn)\n    val SHM_QUEUE_Request_Out = Port[Base_Types.Bits] (id = portId\"18\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out\", mode = EventOut)\n    val AttestationResponse = Port[Base_Types.Bits] (id = portId\"19\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse\", mode = EventOut)\n    val Connection_Command_Out = Port[Base_Types.Bits] (id = portId\"20\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out\", mode = EventOut)\n    val InitiateAttestation = Port[Base_Types.Bits] (id = portId\"21\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation\", mode = EventOut)\n    val TerminateAttestation = Port[Base_Types.Bits] (id = portId\"22\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation\", mode = EventIn)\n\n    VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge(\n      id = bridgeId\"0\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      ADSB_Messages_In = ADSB_Messages_In,\n      Response_In = Response_In,\n      AttestationRequest = AttestationRequest,\n      SHM_QUEUE_ADSB_Heartbeat_Out = SHM_QUEUE_ADSB_Heartbeat_Out,\n      SHM_QUEUE_ADSB_Ownship_Out = SHM_QUEUE_ADSB_Ownship_Out,\n      SHM_QUEUE_ADSB_Traffic_Out = SHM_QUEUE_ADSB_Traffic_Out,\n      SHM_QUEUE_Response_Out = SHM_QUEUE_Response_Out,\n      SHM_QUEUE_AttestationRequest = SHM_QUEUE_AttestationRequest,\n      SHM_HEADER_adsb_to_ptab = SHM_HEADER_adsb_to_ptab,\n      Connection_Command_In = Connection_Command_In,\n      Suspect_Traffic_In1 = Suspect_Traffic_In1,\n      SHM_QUEUE_Suspect_Traffic_Out1 = SHM_QUEUE_Suspect_Traffic_Out1,\n      Suspect_Traffic_In2 = Suspect_Traffic_In2,\n      SHM_QUEUE_Suspect_Traffic_Out2 = SHM_QUEUE_Suspect_Traffic_Out2,\n      Suspect_Traffic_In3 = Suspect_Traffic_In3,\n      SHM_QUEUE_Suspect_Traffic_Out3 = SHM_QUEUE_Suspect_Traffic_Out3,\n      SHM_QUEUE_Request_In = SHM_QUEUE_Request_In,\n      SHM_QUEUE_AttestationResponse = SHM_QUEUE_AttestationResponse,\n      SHM_QUEUE_Request_Out = SHM_QUEUE_Request_Out,\n      AttestationResponse = AttestationResponse,\n      Connection_Command_Out = Connection_Command_Out,\n      InitiateAttestation = InitiateAttestation,\n      TerminateAttestation = TerminateAttestation\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = adapter_lowBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ ADSB_Messages_In: In EventDataPort Base_Types.Bits\n  val ADSB_Messages_In_id: Art.PortId = adapter_lowBridge.ADSB_Messages_In.id\n  var ADSB_Messages_In_port: Option[DataContent] = noData\n\n  \/\/ Response_In: In EventDataPort Base_Types.Bits\n  val Response_In_id: Art.PortId = adapter_lowBridge.Response_In.id\n  var Response_In_port: Option[DataContent] = noData\n\n  \/\/ AttestationRequest: In EventDataPort Base_Types.Bits\n  val AttestationRequest_id: Art.PortId = adapter_lowBridge.AttestationRequest.id\n  var AttestationRequest_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_ADSB_Heartbeat_Out: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_ADSB_Heartbeat_Out_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_ADSB_Heartbeat_Out.id\n  var SHM_QUEUE_ADSB_Heartbeat_Out_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_ADSB_Ownship_Out: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_ADSB_Ownship_Out_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_ADSB_Ownship_Out.id\n  var SHM_QUEUE_ADSB_Ownship_Out_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_ADSB_Traffic_Out: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_ADSB_Traffic_Out_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_ADSB_Traffic_Out.id\n  var SHM_QUEUE_ADSB_Traffic_Out_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Response_Out: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Response_Out_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_Response_Out.id\n  var SHM_QUEUE_Response_Out_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_AttestationRequest: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_AttestationRequest_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_AttestationRequest.id\n  var SHM_QUEUE_AttestationRequest_port: Option[DataContent] = noData\n\n  \/\/ SHM_HEADER_adsb_to_ptab: In EventDataPort Base_Types.Bits\n  val SHM_HEADER_adsb_to_ptab_id: Art.PortId = adapter_lowBridge.SHM_HEADER_adsb_to_ptab.id\n  var SHM_HEADER_adsb_to_ptab_port: Option[DataContent] = noData\n\n  \/\/ Connection_Command_In: In EventDataPort Base_Types.Bits\n  val Connection_Command_In_id: Art.PortId = adapter_lowBridge.Connection_Command_In.id\n  var Connection_Command_In_port: Option[DataContent] = noData\n\n  \/\/ Suspect_Traffic_In1: In EventDataPort Base_Types.Bits\n  val Suspect_Traffic_In1_id: Art.PortId = adapter_lowBridge.Suspect_Traffic_In1.id\n  var Suspect_Traffic_In1_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Suspect_Traffic_Out1: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Suspect_Traffic_Out1_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_Suspect_Traffic_Out1.id\n  var SHM_QUEUE_Suspect_Traffic_Out1_port: Option[DataContent] = noData\n\n  \/\/ Suspect_Traffic_In2: In EventDataPort Base_Types.Bits\n  val Suspect_Traffic_In2_id: Art.PortId = adapter_lowBridge.Suspect_Traffic_In2.id\n  var Suspect_Traffic_In2_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Suspect_Traffic_Out2: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Suspect_Traffic_Out2_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_Suspect_Traffic_Out2.id\n  var SHM_QUEUE_Suspect_Traffic_Out2_port: Option[DataContent] = noData\n\n  \/\/ Suspect_Traffic_In3: In EventDataPort Base_Types.Bits\n  val Suspect_Traffic_In3_id: Art.PortId = adapter_lowBridge.Suspect_Traffic_In3.id\n  var Suspect_Traffic_In3_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Suspect_Traffic_Out3: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Suspect_Traffic_Out3_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_Suspect_Traffic_Out3.id\n  var SHM_QUEUE_Suspect_Traffic_Out3_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Request_In: In EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Request_In_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_Request_In.id\n  var SHM_QUEUE_Request_In_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_AttestationResponse: In EventDataPort Base_Types.Bits\n  val SHM_QUEUE_AttestationResponse_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_AttestationResponse.id\n  var SHM_QUEUE_AttestationResponse_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Request_Out: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Request_Out_id: Art.PortId = adapter_lowBridge.SHM_QUEUE_Request_Out.id\n  var SHM_QUEUE_Request_Out_port: Option[DataContent] = noData\n\n  \/\/ AttestationResponse: Out EventDataPort Base_Types.Bits\n  val AttestationResponse_id: Art.PortId = adapter_lowBridge.AttestationResponse.id\n  var AttestationResponse_port: Option[DataContent] = noData\n\n  \/\/ Connection_Command_Out: Out EventDataPort Base_Types.Bits\n  val Connection_Command_Out_id: Art.PortId = adapter_lowBridge.Connection_Command_Out.id\n  var Connection_Command_Out_port: Option[DataContent] = noData\n\n  \/\/ InitiateAttestation: Out EventDataPort Base_Types.Bits\n  val InitiateAttestation_id: Art.PortId = adapter_lowBridge.InitiateAttestation.id\n  var InitiateAttestation_port: Option[DataContent] = noData\n\n  \/\/ TerminateAttestation: In EventDataPort Base_Types.Bits\n  val TerminateAttestation_id: Art.PortId = adapter_lowBridge.TerminateAttestation.id\n  var TerminateAttestation_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == ADSB_Messages_In_id) {\n      return ADSB_Messages_In_port\n    } else if(portId == Response_In_id) {\n      return Response_In_port\n    } else if(portId == AttestationRequest_id) {\n      return AttestationRequest_port\n    } else if(portId == SHM_HEADER_adsb_to_ptab_id) {\n      return SHM_HEADER_adsb_to_ptab_port\n    } else if(portId == Connection_Command_In_id) {\n      return Connection_Command_In_port\n    } else if(portId == Suspect_Traffic_In1_id) {\n      return Suspect_Traffic_In1_port\n    } else if(portId == Suspect_Traffic_In2_id) {\n      return Suspect_Traffic_In2_port\n    } else if(portId == Suspect_Traffic_In3_id) {\n      return Suspect_Traffic_In3_port\n    } else if(portId == SHM_QUEUE_Request_In_id) {\n      return SHM_QUEUE_Request_In_port\n    } else if(portId == SHM_QUEUE_AttestationResponse_id) {\n      return SHM_QUEUE_AttestationResponse_port\n    } else if(portId == TerminateAttestation_id) {\n      return TerminateAttestation_port\n    } else {\n      halt(s\"Unexpected: adapter_low.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    ADSB_Messages_In_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.ADSB_Messages_In_Receive()\n\n    Response_In_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.Response_In_Receive()\n\n    AttestationRequest_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.AttestationRequest_Receive()\n\n    SHM_HEADER_adsb_to_ptab_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_HEADER_adsb_to_ptab_Receive()\n\n    Connection_Command_In_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.Connection_Command_In_Receive()\n\n    Suspect_Traffic_In1_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.Suspect_Traffic_In1_Receive()\n\n    Suspect_Traffic_In2_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.Suspect_Traffic_In2_Receive()\n\n    Suspect_Traffic_In3_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.Suspect_Traffic_In3_Receive()\n\n    SHM_QUEUE_Request_In_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_Request_In_Receive()\n\n    SHM_QUEUE_AttestationResponse_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_AttestationResponse_Receive()\n\n    TerminateAttestation_port = adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.TerminateAttestation_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == SHM_QUEUE_ADSB_Heartbeat_Out_id) {\n      SHM_QUEUE_ADSB_Heartbeat_Out_port = Some(data)\n    } else if(portId == SHM_QUEUE_ADSB_Ownship_Out_id) {\n      SHM_QUEUE_ADSB_Ownship_Out_port = Some(data)\n    } else if(portId == SHM_QUEUE_ADSB_Traffic_Out_id) {\n      SHM_QUEUE_ADSB_Traffic_Out_port = Some(data)\n    } else if(portId == SHM_QUEUE_Response_Out_id) {\n      SHM_QUEUE_Response_Out_port = Some(data)\n    } else if(portId == SHM_QUEUE_AttestationRequest_id) {\n      SHM_QUEUE_AttestationRequest_port = Some(data)\n    } else if(portId == SHM_QUEUE_Suspect_Traffic_Out1_id) {\n      SHM_QUEUE_Suspect_Traffic_Out1_port = Some(data)\n    } else if(portId == SHM_QUEUE_Suspect_Traffic_Out2_id) {\n      SHM_QUEUE_Suspect_Traffic_Out2_port = Some(data)\n    } else if(portId == SHM_QUEUE_Suspect_Traffic_Out3_id) {\n      SHM_QUEUE_Suspect_Traffic_Out3_port = Some(data)\n    } else if(portId == SHM_QUEUE_Request_Out_id) {\n      SHM_QUEUE_Request_Out_port = Some(data)\n    } else if(portId == AttestationResponse_id) {\n      AttestationResponse_port = Some(data)\n    } else if(portId == Connection_Command_Out_id) {\n      Connection_Command_Out_port = Some(data)\n    } else if(portId == InitiateAttestation_id) {\n      InitiateAttestation_port = Some(data)\n    } else {\n      halt(s\"Unexpected: adapter_low.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(SHM_QUEUE_ADSB_Heartbeat_Out_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_ADSB_Heartbeat_Out_Send(SHM_QUEUE_ADSB_Heartbeat_Out_port.get)\n      SHM_QUEUE_ADSB_Heartbeat_Out_port = noData\n    }\n\n    if(SHM_QUEUE_ADSB_Ownship_Out_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_ADSB_Ownship_Out_Send(SHM_QUEUE_ADSB_Ownship_Out_port.get)\n      SHM_QUEUE_ADSB_Ownship_Out_port = noData\n    }\n\n    if(SHM_QUEUE_ADSB_Traffic_Out_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_ADSB_Traffic_Out_Send(SHM_QUEUE_ADSB_Traffic_Out_port.get)\n      SHM_QUEUE_ADSB_Traffic_Out_port = noData\n    }\n\n    if(SHM_QUEUE_Response_Out_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_Response_Out_Send(SHM_QUEUE_Response_Out_port.get)\n      SHM_QUEUE_Response_Out_port = noData\n    }\n\n    if(SHM_QUEUE_AttestationRequest_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_AttestationRequest_Send(SHM_QUEUE_AttestationRequest_port.get)\n      SHM_QUEUE_AttestationRequest_port = noData\n    }\n\n    if(SHM_QUEUE_Suspect_Traffic_Out1_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_Suspect_Traffic_Out1_Send(SHM_QUEUE_Suspect_Traffic_Out1_port.get)\n      SHM_QUEUE_Suspect_Traffic_Out1_port = noData\n    }\n\n    if(SHM_QUEUE_Suspect_Traffic_Out2_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_Suspect_Traffic_Out2_Send(SHM_QUEUE_Suspect_Traffic_Out2_port.get)\n      SHM_QUEUE_Suspect_Traffic_Out2_port = noData\n    }\n\n    if(SHM_QUEUE_Suspect_Traffic_Out3_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_Suspect_Traffic_Out3_Send(SHM_QUEUE_Suspect_Traffic_Out3_port.get)\n      SHM_QUEUE_Suspect_Traffic_Out3_port = noData\n    }\n\n    if(SHM_QUEUE_Request_Out_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.SHM_QUEUE_Request_Out_Send(SHM_QUEUE_Request_Out_port.get)\n      SHM_QUEUE_Request_Out_port = noData\n    }\n\n    if(AttestationResponse_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.AttestationResponse_Send(AttestationResponse_port.get)\n      AttestationResponse_port = noData\n    }\n\n    if(Connection_Command_Out_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.Connection_Command_Out_Send(Connection_Command_Out_port.get)\n      Connection_Command_Out_port = noData\n    }\n\n    if(InitiateAttestation_port.nonEmpty) {\n      adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.InitiateAttestation_Send(InitiateAttestation_port.get)\n      InitiateAttestation_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    \/\/ nothing to do - CAmkES is responsible for initialization\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ add types used in Platform.receive and Platform.receiveAsync\n      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId\"0\", Base_Types.Boolean_Payload(T))\n      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId\"0\", None())\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.logError(\"\")\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_ADSB_Messages_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_ADSB_Messages_In()\n      val apiUsage_Response_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Response_In()\n      val apiUsage_AttestationRequest: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_AttestationRequest()\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_ADSB_Heartbeat_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_ADSB_Heartbeat_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_ADSB_Ownship_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_ADSB_Ownship_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_ADSB_Traffic_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_ADSB_Traffic_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Response_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Response_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_AttestationRequest(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_AttestationRequest(Base_Types.Bits_example())\n      val apiUsage_SHM_HEADER_adsb_to_ptab: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_SHM_HEADER_adsb_to_ptab()\n      val apiUsage_Connection_Command_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Connection_Command_In()\n      val apiUsage_Suspect_Traffic_In1: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Suspect_Traffic_In1()\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Suspect_Traffic_Out1(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Suspect_Traffic_Out1(Base_Types.Bits_example())\n      val apiUsage_Suspect_Traffic_In2: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Suspect_Traffic_In2()\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Suspect_Traffic_Out2(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Suspect_Traffic_Out2(Base_Types.Bits_example())\n      val apiUsage_Suspect_Traffic_In3: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_Suspect_Traffic_In3()\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Suspect_Traffic_Out3(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Suspect_Traffic_Out3(Base_Types.Bits_example())\n      val apiUsage_SHM_QUEUE_Request_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_SHM_QUEUE_Request_In()\n      val apiUsage_SHM_QUEUE_AttestationResponse: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_SHM_QUEUE_AttestationResponse()\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_AttestationResponse(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_AttestationResponse(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_initialization_api.get.put_InitiateAttestation(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.put_InitiateAttestation(Base_Types.Bits_example())\n      val apiUsage_TerminateAttestation: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low_Bridge.c_operational_api.get.get_TerminateAttestation()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(adapter_lowBridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(adapter_lowBridge.name)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(adapter_lowBridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\n@ext object adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix {\n  \/\/ returns T if seL4's ADSB_Messages_In port is empty, F otherwise \n  def ADSB_Messages_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's ADSB_Messages_In port \n  def ADSB_Messages_In_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's Response_In port is empty, F otherwise \n  def Response_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Response_In port \n  def Response_In_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's AttestationRequest port is empty, F otherwise \n  def AttestationRequest_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's AttestationRequest port \n  def AttestationRequest_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_ADSB_Heartbeat_Out port\n  def SHM_QUEUE_ADSB_Heartbeat_Out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_ADSB_Ownship_Out port\n  def SHM_QUEUE_ADSB_Ownship_Out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_ADSB_Traffic_Out port\n  def SHM_QUEUE_ADSB_Traffic_Out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_Response_Out port\n  def SHM_QUEUE_Response_Out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_AttestationRequest port\n  def SHM_QUEUE_AttestationRequest_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's SHM_HEADER_adsb_to_ptab port is empty, F otherwise \n  def SHM_HEADER_adsb_to_ptab_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's SHM_HEADER_adsb_to_ptab port \n  def SHM_HEADER_adsb_to_ptab_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's Connection_Command_In port is empty, F otherwise \n  def Connection_Command_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Connection_Command_In port \n  def Connection_Command_In_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's Suspect_Traffic_In1 port is empty, F otherwise \n  def Suspect_Traffic_In1_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Suspect_Traffic_In1 port \n  def Suspect_Traffic_In1_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_Suspect_Traffic_Out1 port\n  def SHM_QUEUE_Suspect_Traffic_Out1_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's Suspect_Traffic_In2 port is empty, F otherwise \n  def Suspect_Traffic_In2_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Suspect_Traffic_In2 port \n  def Suspect_Traffic_In2_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_Suspect_Traffic_Out2 port\n  def SHM_QUEUE_Suspect_Traffic_Out2_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's Suspect_Traffic_In3 port is empty, F otherwise \n  def Suspect_Traffic_In3_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Suspect_Traffic_In3 port \n  def Suspect_Traffic_In3_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_Suspect_Traffic_Out3 port\n  def SHM_QUEUE_Suspect_Traffic_Out3_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's SHM_QUEUE_Request_In port is empty, F otherwise \n  def SHM_QUEUE_Request_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's SHM_QUEUE_Request_In port \n  def SHM_QUEUE_Request_In_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's SHM_QUEUE_AttestationResponse port is empty, F otherwise \n  def SHM_QUEUE_AttestationResponse_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's SHM_QUEUE_AttestationResponse port \n  def SHM_QUEUE_AttestationResponse_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_Request_Out port\n  def SHM_QUEUE_Request_Out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's AttestationResponse port\n  def AttestationResponse_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's Connection_Command_Out port\n  def Connection_Command_Out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's InitiateAttestation port\n  def InitiateAttestation_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's TerminateAttestation port is empty, F otherwise \n  def TerminateAttestation_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's TerminateAttestation port \n  def TerminateAttestation_Receive(): Option[DataContent] = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\nobject adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Ext {\n  def ADSB_Messages_In_IsEmpty(): B = halt(\"stub\")\n\n  def ADSB_Messages_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def Response_In_IsEmpty(): B = halt(\"stub\")\n\n  def Response_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def AttestationRequest_IsEmpty(): B = halt(\"stub\")\n\n  def AttestationRequest_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_ADSB_Heartbeat_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def SHM_QUEUE_ADSB_Ownship_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def SHM_QUEUE_ADSB_Traffic_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def SHM_QUEUE_Response_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def SHM_QUEUE_AttestationRequest_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def SHM_HEADER_adsb_to_ptab_IsEmpty(): B = halt(\"stub\")\n\n  def SHM_HEADER_adsb_to_ptab_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def Connection_Command_In_IsEmpty(): B = halt(\"stub\")\n\n  def Connection_Command_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def Suspect_Traffic_In1_IsEmpty(): B = halt(\"stub\")\n\n  def Suspect_Traffic_In1_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_Suspect_Traffic_Out1_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def Suspect_Traffic_In2_IsEmpty(): B = halt(\"stub\")\n\n  def Suspect_Traffic_In2_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_Suspect_Traffic_Out2_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def Suspect_Traffic_In3_IsEmpty(): B = halt(\"stub\")\n\n  def Suspect_Traffic_In3_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_Suspect_Traffic_Out3_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def SHM_QUEUE_Request_In_IsEmpty(): B = halt(\"stub\")\n\n  def SHM_QUEUE_Request_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_AttestationResponse_IsEmpty(): B = halt(\"stub\")\n\n  def SHM_QUEUE_AttestationResponse_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_Request_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def AttestationResponse_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def Connection_Command_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def InitiateAttestation_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def TerminateAttestation_IsEmpty(): B = halt(\"stub\")\n\n  def TerminateAttestation_Receive(): Option[DataContent] = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef ADAPTER_LOW_IMPL_SW_ADAPTER_LOW_ADAPTER_LOW_H\n#define ADAPTER_LOW_IMPL_SW_ADAPTER_LOW_ADAPTER_LOW_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_initialise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_finalise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low.c",
        {
          "type" : "ITestResource",
          "content" : "#include <adapter_low_impl_SW_adapter_low_adapter_low_api.h>\n#include <adapter_low_impl_SW_adapter_low_adapter_low.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nstatic char* component_id = \"VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low\";\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_initialise_\", 0);\n\n  printf(\"%s: VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_initialise_ called\\n\", component_id);\n\n  \/\/ example usage of api setters\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl];\n  byte_array_default(SF t0, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl);\n  api_put_SHM_QUEUE_ADSB_Heartbeat_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl, t0);\n\n  uint8_t t1[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl];\n  byte_array_default(SF t1, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl);\n  api_put_SHM_QUEUE_ADSB_Ownship_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl, t1);\n\n  uint8_t t2[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl];\n  byte_array_default(SF t2, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl);\n  api_put_SHM_QUEUE_ADSB_Traffic_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl, t2);\n\n  uint8_t t3[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl];\n  byte_array_default(SF t3, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl);\n  api_put_SHM_QUEUE_Response_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl, t3);\n\n  uint8_t t4[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_request_impl];\n  byte_array_default(SF t4, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_request_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_request_impl);\n  api_put_SHM_QUEUE_AttestationRequest__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_request_impl, t4);\n\n  uint8_t t5[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl];\n  byte_array_default(SF t5, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl);\n  api_put_SHM_QUEUE_Suspect_Traffic_Out1__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl, t5);\n\n  uint8_t t6[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl];\n  byte_array_default(SF t6, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl);\n  api_put_SHM_QUEUE_Suspect_Traffic_Out2__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl, t6);\n\n  uint8_t t7[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl];\n  byte_array_default(SF t7, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl);\n  api_put_SHM_QUEUE_Suspect_Traffic_Out3__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl, t7);\n\n  uint8_t t8[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl];\n  byte_array_default(SF t8, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl);\n  api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl, t8);\n\n  uint8_t t9[numBytes_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl];\n  byte_array_default(SF t9, numBits_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl, numBytes_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl);\n  api_put_AttestationResponse__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl, t9);\n\n  uint8_t t10[numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl];\n  byte_array_default(SF t10, numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n  api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, t10);\n\n  uint8_t t11[numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32];\n  byte_array_default(SF t11, numBits_VPM_ben__SeL4_Common_Types_Unsigned_32, numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32);\n  api_put_InitiateAttestation__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF numBits_VPM_ben__SeL4_Common_Types_Unsigned_32, t11);\n\n  \/* example usage of api loggers. Commented out as the constructed String may be too long\n  api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF string(\"Example logInfo\"));\n\n  api_logDebug__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF string(\"Example logDebug\"));\n\n  api_logError__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF string(\"Example logError\"));\n  *\/\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_finalise_\", 0);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl];\n  size_t t0_numBits;\n  if(api_get_ADSB_Messages_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert((Z) t0_numBits == numBits_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port ADSB_Messages_In: \\n\", component_id);\n    hex_dump(SF t0, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(ADSB_Messages_In_str);\n    String__append(SF (String) &ADSB_Messages_In_str, string(\"Received data on event data port ADSB_Messages_In: \"));\n    byte_array_string(SF (String) &ADSB_Messages_In_str, t0, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &ADSB_Messages_In_str);\n    *\/\n  }\n\n  uint8_t t1[numBytes_VPM_ben__SeL4_DTU_Types_Response_Message_impl];\n  size_t t1_numBits;\n  if(api_get_Response_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert((Z) t1_numBits == numBits_VPM_ben__SeL4_DTU_Types_Response_Message_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Response_In: \\n\", component_id);\n    hex_dump(SF t1, numBytes_VPM_ben__SeL4_DTU_Types_Response_Message_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Response_In_str);\n    String__append(SF (String) &Response_In_str, string(\"Received data on event data port Response_In: \"));\n    byte_array_string(SF (String) &Response_In_str, t1, numBytes_VPM_ben__SeL4_DTU_Types_Response_Message_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &Response_In_str);\n    *\/\n  }\n\n  uint8_t t2[numBytes_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl];\n  size_t t2_numBits;\n  if(api_get_AttestationRequest__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t2_numBits, t2)) {\n    \/\/ sanity check\n    sfAssert((Z) t2_numBits == numBits_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port AttestationRequest: \\n\", component_id);\n    hex_dump(SF t2, numBytes_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(AttestationRequest_str);\n    String__append(SF (String) &AttestationRequest_str, string(\"Received data on event data port AttestationRequest: \"));\n    byte_array_string(SF (String) &AttestationRequest_str, t2, numBytes_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &AttestationRequest_str);\n    *\/\n  }\n\n  uint8_t t3[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl];\n  size_t t3_numBits;\n  if(api_get_SHM_HEADER_adsb_to_ptab__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t3_numBits, t3)) {\n    \/\/ sanity check\n    sfAssert((Z) t3_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port SHM_HEADER_adsb_to_ptab: \\n\", component_id);\n    hex_dump(SF t3, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(SHM_HEADER_adsb_to_ptab_str);\n    String__append(SF (String) &SHM_HEADER_adsb_to_ptab_str, string(\"Received data on event data port SHM_HEADER_adsb_to_ptab: \"));\n    byte_array_string(SF (String) &SHM_HEADER_adsb_to_ptab_str, t3, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &SHM_HEADER_adsb_to_ptab_str);\n    *\/\n  }\n\n  uint8_t t4[numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl];\n  size_t t4_numBits;\n  if(api_get_Connection_Command_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t4_numBits, t4)) {\n    \/\/ sanity check\n    sfAssert((Z) t4_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Connection_Command_In: \\n\", component_id);\n    hex_dump(SF t4, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Connection_Command_In_str);\n    String__append(SF (String) &Connection_Command_In_str, string(\"Received data on event data port Connection_Command_In: \"));\n    byte_array_string(SF (String) &Connection_Command_In_str, t4, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &Connection_Command_In_str);\n    *\/\n  }\n\n  uint8_t t5[numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl];\n  size_t t5_numBits;\n  if(api_get_Suspect_Traffic_In1__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t5_numBits, t5)) {\n    \/\/ sanity check\n    sfAssert((Z) t5_numBits == numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Suspect_Traffic_In1: \\n\", component_id);\n    hex_dump(SF t5, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Suspect_Traffic_In1_str);\n    String__append(SF (String) &Suspect_Traffic_In1_str, string(\"Received data on event data port Suspect_Traffic_In1: \"));\n    byte_array_string(SF (String) &Suspect_Traffic_In1_str, t5, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &Suspect_Traffic_In1_str);\n    *\/\n  }\n\n  uint8_t t6[numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl];\n  size_t t6_numBits;\n  if(api_get_Suspect_Traffic_In2__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t6_numBits, t6)) {\n    \/\/ sanity check\n    sfAssert((Z) t6_numBits == numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Suspect_Traffic_In2: \\n\", component_id);\n    hex_dump(SF t6, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Suspect_Traffic_In2_str);\n    String__append(SF (String) &Suspect_Traffic_In2_str, string(\"Received data on event data port Suspect_Traffic_In2: \"));\n    byte_array_string(SF (String) &Suspect_Traffic_In2_str, t6, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &Suspect_Traffic_In2_str);\n    *\/\n  }\n\n  uint8_t t7[numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl];\n  size_t t7_numBits;\n  if(api_get_Suspect_Traffic_In3__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t7_numBits, t7)) {\n    \/\/ sanity check\n    sfAssert((Z) t7_numBits == numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Suspect_Traffic_In3: \\n\", component_id);\n    hex_dump(SF t7, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Suspect_Traffic_In3_str);\n    String__append(SF (String) &Suspect_Traffic_In3_str, string(\"Received data on event data port Suspect_Traffic_In3: \"));\n    byte_array_string(SF (String) &Suspect_Traffic_In3_str, t7, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &Suspect_Traffic_In3_str);\n    *\/\n  }\n\n  uint8_t t8[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl];\n  size_t t8_numBits;\n  if(api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t8_numBits, t8)) {\n    \/\/ sanity check\n    sfAssert((Z) t8_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port SHM_QUEUE_Request_In: \\n\", component_id);\n    hex_dump(SF t8, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(SHM_QUEUE_Request_In_str);\n    String__append(SF (String) &SHM_QUEUE_Request_In_str, string(\"Received data on event data port SHM_QUEUE_Request_In: \"));\n    byte_array_string(SF (String) &SHM_QUEUE_Request_In_str, t8, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &SHM_QUEUE_Request_In_str);\n    *\/\n  }\n\n  uint8_t t9[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_response_impl];\n  size_t t9_numBits;\n  if(api_get_SHM_QUEUE_AttestationResponse__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t9_numBits, t9)) {\n    \/\/ sanity check\n    sfAssert((Z) t9_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_response_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port SHM_QUEUE_AttestationResponse: \\n\", component_id);\n    hex_dump(SF t9, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_response_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(SHM_QUEUE_AttestationResponse_str);\n    String__append(SF (String) &SHM_QUEUE_AttestationResponse_str, string(\"Received data on event data port SHM_QUEUE_AttestationResponse: \"));\n    byte_array_string(SF (String) &SHM_QUEUE_AttestationResponse_str, t9, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_response_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &SHM_QUEUE_AttestationResponse_str);\n    *\/\n  }\n\n  uint8_t t10[numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32];\n  size_t t10_numBits;\n  if(api_get_TerminateAttestation__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF &t10_numBits, t10)) {\n    \/\/ sanity check\n    sfAssert((Z) t10_numBits == numBits_VPM_ben__SeL4_Common_Types_Unsigned_32, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port TerminateAttestation: \\n\", component_id);\n    hex_dump(SF t10, numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(TerminateAttestation_str);\n    String__append(SF (String) &TerminateAttestation_str, string(\"Received data on event data port TerminateAttestation: \"));\n    byte_array_string(SF (String) &TerminateAttestation_str, t10, numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(SF (String) &TerminateAttestation_str);\n    *\/\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low_api.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef ADAPTER_LOW_IMPL_SW_ADAPTER_LOW_ADAPTER_LOW_API_H\n#define ADAPTER_LOW_IMPL_SW_ADAPTER_LOW_ADAPTER_LOW_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_ADSB_Messages_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_Response_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_AttestationRequest__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_ADSB_Heartbeat_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_ADSB_Ownship_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_ADSB_Traffic_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_Response_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_AttestationRequest__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_SHM_HEADER_adsb_to_ptab__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_Connection_Command_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_Suspect_Traffic_In1__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_Suspect_Traffic_Out1__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_Suspect_Traffic_In2__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_Suspect_Traffic_Out2__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_Suspect_Traffic_In3__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_Suspect_Traffic_Out3__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_SHM_QUEUE_AttestationResponse__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_AttestationResponse__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_InitiateAttestation__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_TerminateAttestation__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low_api.c",
        {
          "type" : "ITestResource",
          "content" : "#include <adapter_low_impl_SW_adapter_low_adapter_low_api.h>\n#include <adapter_low_impl_SW_adapter_low_adapter_low.h>\n\nstatic bool apis_initialized = false;\nstatic struct VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api initialization_api;\nstatic struct VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api operational_api;\n\nstatic void initialize_apis(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low.c\", \"\", \"initialize_apis\", 0);\n\n  \/\/ Option_26214E = Option[VPM_ben__SeL4.VPM.adapter_low_impl_Initialization_Api]\n  Option_26214E_get_(SF (VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api) &initialization_api, VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_Bridge_c_initialization_api(SF_LAST));\n  \/\/ Option_AFAA70 = Option[VPM_ben__SeL4.VPM.adapter_low_impl_Operational_Api]\n  Option_AFAA70_get_(SF (VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api) &operational_api, VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_Bridge_c_operational_api(SF_LAST));\n  apis_initialized = true;\n}\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_ADSB_Messages_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_ADSB_Messages_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_ADSB_Messages_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_Response_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_Response_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_Response_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_AttestationRequest__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_AttestationRequest__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_AttestationRequest_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_SHM_QUEUE_ADSB_Heartbeat_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_ADSB_Heartbeat_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_ADSB_Heartbeat_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_SHM_QUEUE_ADSB_Ownship_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_ADSB_Ownship_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_ADSB_Ownship_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_SHM_QUEUE_ADSB_Traffic_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_ADSB_Traffic_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_ADSB_Traffic_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_SHM_QUEUE_Response_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_Response_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_Response_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_SHM_QUEUE_AttestationRequest__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_AttestationRequest__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_AttestationRequest_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_SHM_HEADER_adsb_to_ptab__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_SHM_HEADER_adsb_to_ptab__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_SHM_HEADER_adsb_to_ptab_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_Connection_Command_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_Connection_Command_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_Connection_Command_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_Suspect_Traffic_In1__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_Suspect_Traffic_In1__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_Suspect_Traffic_In1_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_SHM_QUEUE_Suspect_Traffic_Out1__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_Suspect_Traffic_Out1__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_Suspect_Traffic_Out1_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_Suspect_Traffic_In2__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_Suspect_Traffic_In2__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_Suspect_Traffic_In2_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_SHM_QUEUE_Suspect_Traffic_Out2__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_Suspect_Traffic_Out2__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_Suspect_Traffic_Out2_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_Suspect_Traffic_In3__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_Suspect_Traffic_In3__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_Suspect_Traffic_In3_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_SHM_QUEUE_Suspect_Traffic_Out3__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_Suspect_Traffic_Out3__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_Suspect_Traffic_Out3_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_SHM_QUEUE_Request_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_SHM_QUEUE_AttestationResponse__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_SHM_QUEUE_AttestationResponse__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_SHM_QUEUE_AttestationResponse_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_SHM_QUEUE_Request_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_AttestationResponse__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_AttestationResponse__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_AttestationResponse_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_Connection_Command_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_InitiateAttestation__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_put_InitiateAttestation__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_put_InitiateAttestation_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_TerminateAttestation__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_get_TerminateAttestation__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api_get_TerminateAttestation_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_logInfo__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_logInfo_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_logDebug__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_logDebug_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logError__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"api_logError__VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api_logError_(\n    SF\n    &initialization_api,\n    str);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_initialise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_adapter_low_impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_initialise\", 0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_initialise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_finalise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_finalise\", 0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_finalise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_timeTriggered(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_adapter_low_impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_api.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_timeTriggered\", 0);\n\n  VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low_adapter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <adapter_low_impl_SW_adapter_low_adapter_low_adapter.h>\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_initialiseArchitecture\", 0);\n\n  VPM_ben__SeL4_adapter_low_impl_SW_adapter_low_adapter_low_adapter_low_initialiseArchitecture(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_initialiseEntryPoint\", 0);\n\n  VPM_ben__SeL4_adapter_low_impl_SW_adapter_low_adapter_low_adapter_low_initialiseEntryPoint(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_computeEntryPoint\", 0);\n\n  VPM_ben__SeL4_adapter_low_impl_SW_adapter_low_adapter_low_adapter_low_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_low_impl_SW_adapter_low_adapter_low_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_entryPoints\", 0);\n\n  return VPM_ben__SeL4_adapter_low_impl_SW_adapter_low_adapter_low_adapter_low_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low_adapter.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef ADAPTER_LOW_IMPL_SW_ADAPTER_LOW_ADAPTER_LOW_ADAPTER_H\n#define ADAPTER_LOW_IMPL_SW_ADAPTER_LOW_ADAPTER_LOW_ADAPTER_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/settings_adapter_low_impl_SW_adapter_low_adapter_low.cmake",
        {
          "type" : "ITestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(adapter_low_impl_SW_adapter_low_adapter_low\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.adapter_high_impl_SW_adapter_high_adapter_high\n\nimport org.sireum._\nimport art._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix\n\nobject adapter_high extends App {\n\n  val adapter_highBridge : VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge = {\n    val SHM_QUEUE_ADSB_Heartbeat_In = Port[Base_Types.Bits] (id = portId\"0\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_ADSB_Heartbeat_In\", mode = EventIn)\n    val SHM_QUEUE_ADSB_Ownship_In = Port[Base_Types.Bits] (id = portId\"1\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_ADSB_Ownship_In\", mode = EventIn)\n    val SHM_QUEUE_ADSB_Traffic_In = Port[Base_Types.Bits] (id = portId\"2\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_ADSB_Traffic_In\", mode = EventIn)\n    val SHM_QUEUE_Response_In = Port[Base_Types.Bits] (id = portId\"3\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_Response_In\", mode = EventIn)\n    val Response_Out = Port[Base_Types.Bits] (id = portId\"4\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out\", mode = EventOut)\n    val ADSB_Messages_Out = Port[Base_Types.Bits] (id = portId\"5\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out\", mode = EventOut)\n    val SHM_HEADER_adsb_to_ptab = Port[Base_Types.Bits] (id = portId\"6\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab\", mode = EventOut)\n    val Connection_Command_Out = Port[Base_Types.Bits] (id = portId\"7\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out\", mode = EventOut)\n    val Request_In = Port[Base_Types.Bits] (id = portId\"8\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In\", mode = EventIn)\n    val SHM_QUEUE_Request_Out = Port[Base_Types.Bits] (id = portId\"9\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_QUEUE_Request_Out\", mode = EventOut)\n    val Connection_Command_In = Port[Base_Types.Bits] (id = portId\"10\", name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In\", mode = EventIn)\n\n    VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge(\n      id = bridgeId\"0\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high\",\n      dispatchProtocol = Periodic(period = 250),\n      dispatchTriggers = None(),\n\n      SHM_QUEUE_ADSB_Heartbeat_In = SHM_QUEUE_ADSB_Heartbeat_In,\n      SHM_QUEUE_ADSB_Ownship_In = SHM_QUEUE_ADSB_Ownship_In,\n      SHM_QUEUE_ADSB_Traffic_In = SHM_QUEUE_ADSB_Traffic_In,\n      SHM_QUEUE_Response_In = SHM_QUEUE_Response_In,\n      Response_Out = Response_Out,\n      ADSB_Messages_Out = ADSB_Messages_Out,\n      SHM_HEADER_adsb_to_ptab = SHM_HEADER_adsb_to_ptab,\n      Connection_Command_Out = Connection_Command_Out,\n      Request_In = Request_In,\n      SHM_QUEUE_Request_Out = SHM_QUEUE_Request_Out,\n      Connection_Command_In = Connection_Command_In\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = adapter_highBridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ SHM_QUEUE_ADSB_Heartbeat_In: In EventDataPort Base_Types.Bits\n  val SHM_QUEUE_ADSB_Heartbeat_In_id: Art.PortId = adapter_highBridge.SHM_QUEUE_ADSB_Heartbeat_In.id\n  var SHM_QUEUE_ADSB_Heartbeat_In_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_ADSB_Ownship_In: In EventDataPort Base_Types.Bits\n  val SHM_QUEUE_ADSB_Ownship_In_id: Art.PortId = adapter_highBridge.SHM_QUEUE_ADSB_Ownship_In.id\n  var SHM_QUEUE_ADSB_Ownship_In_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_ADSB_Traffic_In: In EventDataPort Base_Types.Bits\n  val SHM_QUEUE_ADSB_Traffic_In_id: Art.PortId = adapter_highBridge.SHM_QUEUE_ADSB_Traffic_In.id\n  var SHM_QUEUE_ADSB_Traffic_In_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Response_In: In EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Response_In_id: Art.PortId = adapter_highBridge.SHM_QUEUE_Response_In.id\n  var SHM_QUEUE_Response_In_port: Option[DataContent] = noData\n\n  \/\/ Response_Out: Out EventDataPort Base_Types.Bits\n  val Response_Out_id: Art.PortId = adapter_highBridge.Response_Out.id\n  var Response_Out_port: Option[DataContent] = noData\n\n  \/\/ ADSB_Messages_Out: Out EventDataPort Base_Types.Bits\n  val ADSB_Messages_Out_id: Art.PortId = adapter_highBridge.ADSB_Messages_Out.id\n  var ADSB_Messages_Out_port: Option[DataContent] = noData\n\n  \/\/ SHM_HEADER_adsb_to_ptab: Out EventDataPort Base_Types.Bits\n  val SHM_HEADER_adsb_to_ptab_id: Art.PortId = adapter_highBridge.SHM_HEADER_adsb_to_ptab.id\n  var SHM_HEADER_adsb_to_ptab_port: Option[DataContent] = noData\n\n  \/\/ Connection_Command_Out: Out EventDataPort Base_Types.Bits\n  val Connection_Command_Out_id: Art.PortId = adapter_highBridge.Connection_Command_Out.id\n  var Connection_Command_Out_port: Option[DataContent] = noData\n\n  \/\/ Request_In: In EventDataPort Base_Types.Bits\n  val Request_In_id: Art.PortId = adapter_highBridge.Request_In.id\n  var Request_In_port: Option[DataContent] = noData\n\n  \/\/ SHM_QUEUE_Request_Out: Out EventDataPort Base_Types.Bits\n  val SHM_QUEUE_Request_Out_id: Art.PortId = adapter_highBridge.SHM_QUEUE_Request_Out.id\n  var SHM_QUEUE_Request_Out_port: Option[DataContent] = noData\n\n  \/\/ Connection_Command_In: In EventDataPort Base_Types.Bits\n  val Connection_Command_In_id: Art.PortId = adapter_highBridge.Connection_Command_In.id\n  var Connection_Command_In_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == SHM_QUEUE_ADSB_Heartbeat_In_id) {\n      return SHM_QUEUE_ADSB_Heartbeat_In_port\n    } else if(portId == SHM_QUEUE_ADSB_Ownship_In_id) {\n      return SHM_QUEUE_ADSB_Ownship_In_port\n    } else if(portId == SHM_QUEUE_ADSB_Traffic_In_id) {\n      return SHM_QUEUE_ADSB_Traffic_In_port\n    } else if(portId == SHM_QUEUE_Response_In_id) {\n      return SHM_QUEUE_Response_In_port\n    } else if(portId == Request_In_id) {\n      return Request_In_port\n    } else if(portId == Connection_Command_In_id) {\n      return Connection_Command_In_port\n    } else {\n      halt(s\"Unexpected: adapter_high.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    SHM_QUEUE_ADSB_Heartbeat_In_port = adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.SHM_QUEUE_ADSB_Heartbeat_In_Receive()\n\n    SHM_QUEUE_ADSB_Ownship_In_port = adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.SHM_QUEUE_ADSB_Ownship_In_Receive()\n\n    SHM_QUEUE_ADSB_Traffic_In_port = adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.SHM_QUEUE_ADSB_Traffic_In_Receive()\n\n    SHM_QUEUE_Response_In_port = adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.SHM_QUEUE_Response_In_Receive()\n\n    Request_In_port = adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.Request_In_Receive()\n\n    Connection_Command_In_port = adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.Connection_Command_In_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == Response_Out_id) {\n      Response_Out_port = Some(data)\n    } else if(portId == ADSB_Messages_Out_id) {\n      ADSB_Messages_Out_port = Some(data)\n    } else if(portId == SHM_HEADER_adsb_to_ptab_id) {\n      SHM_HEADER_adsb_to_ptab_port = Some(data)\n    } else if(portId == Connection_Command_Out_id) {\n      Connection_Command_Out_port = Some(data)\n    } else if(portId == SHM_QUEUE_Request_Out_id) {\n      SHM_QUEUE_Request_Out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: adapter_high.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(Response_Out_port.nonEmpty) {\n      adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.Response_Out_Send(Response_Out_port.get)\n      Response_Out_port = noData\n    }\n\n    if(ADSB_Messages_Out_port.nonEmpty) {\n      adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.ADSB_Messages_Out_Send(ADSB_Messages_Out_port.get)\n      ADSB_Messages_Out_port = noData\n    }\n\n    if(SHM_HEADER_adsb_to_ptab_port.nonEmpty) {\n      adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.SHM_HEADER_adsb_to_ptab_Send(SHM_HEADER_adsb_to_ptab_port.get)\n      SHM_HEADER_adsb_to_ptab_port = noData\n    }\n\n    if(Connection_Command_Out_port.nonEmpty) {\n      adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.Connection_Command_Out_Send(Connection_Command_Out_port.get)\n      Connection_Command_Out_port = noData\n    }\n\n    if(SHM_QUEUE_Request_Out_port.nonEmpty) {\n      adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.SHM_QUEUE_Request_Out_Send(SHM_QUEUE_Request_Out_port.get)\n      SHM_QUEUE_Request_Out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    \/\/ nothing to do - CAmkES is responsible for initialization\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ add types used in Platform.receive and Platform.receiveAsync\n      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId\"0\", Base_Types.Boolean_Payload(T))\n      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId\"0\", None())\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.logError(\"\")\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_SHM_QUEUE_ADSB_Heartbeat_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_SHM_QUEUE_ADSB_Heartbeat_In()\n      val apiUsage_SHM_QUEUE_ADSB_Ownship_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_SHM_QUEUE_ADSB_Ownship_In()\n      val apiUsage_SHM_QUEUE_ADSB_Traffic_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_SHM_QUEUE_ADSB_Traffic_In()\n      val apiUsage_SHM_QUEUE_Response_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_SHM_QUEUE_Response_In()\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_Response_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_Response_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_ADSB_Messages_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_ADSB_Messages_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_SHM_HEADER_adsb_to_ptab(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_SHM_HEADER_adsb_to_ptab(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_Connection_Command_Out(Base_Types.Bits_example())\n      val apiUsage_Request_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_Request_In()\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_initialization_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.put_SHM_QUEUE_Request_Out(Base_Types.Bits_example())\n      val apiUsage_Connection_Command_In: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high_Bridge.c_operational_api.get.get_Connection_Command_In()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(adapter_highBridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(adapter_highBridge.name)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(adapter_highBridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\n@ext object adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix {\n  \/\/ returns T if seL4's SHM_QUEUE_ADSB_Heartbeat_In port is empty, F otherwise \n  def SHM_QUEUE_ADSB_Heartbeat_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's SHM_QUEUE_ADSB_Heartbeat_In port \n  def SHM_QUEUE_ADSB_Heartbeat_In_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's SHM_QUEUE_ADSB_Ownship_In port is empty, F otherwise \n  def SHM_QUEUE_ADSB_Ownship_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's SHM_QUEUE_ADSB_Ownship_In port \n  def SHM_QUEUE_ADSB_Ownship_In_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's SHM_QUEUE_ADSB_Traffic_In port is empty, F otherwise \n  def SHM_QUEUE_ADSB_Traffic_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's SHM_QUEUE_ADSB_Traffic_In port \n  def SHM_QUEUE_ADSB_Traffic_In_Receive(): Option[DataContent] = $\n\n  \/\/ returns T if seL4's SHM_QUEUE_Response_In port is empty, F otherwise \n  def SHM_QUEUE_Response_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's SHM_QUEUE_Response_In port \n  def SHM_QUEUE_Response_In_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's Response_Out port\n  def Response_Out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's ADSB_Messages_Out port\n  def ADSB_Messages_Out_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_HEADER_adsb_to_ptab port\n  def SHM_HEADER_adsb_to_ptab_Send(d: DataContent): Unit = $\n\n  \/\/ send payload 'd' to components connected to seL4's Connection_Command_Out port\n  def Connection_Command_Out_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's Request_In port is empty, F otherwise \n  def Request_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Request_In port \n  def Request_In_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's SHM_QUEUE_Request_Out port\n  def SHM_QUEUE_Request_Out_Send(d: DataContent): Unit = $\n\n  \/\/ returns T if seL4's Connection_Command_In port is empty, F otherwise \n  def Connection_Command_In_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Connection_Command_In port \n  def Connection_Command_In_Receive(): Option[DataContent] = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\nobject adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Ext {\n  def SHM_QUEUE_ADSB_Heartbeat_In_IsEmpty(): B = halt(\"stub\")\n\n  def SHM_QUEUE_ADSB_Heartbeat_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_ADSB_Ownship_In_IsEmpty(): B = halt(\"stub\")\n\n  def SHM_QUEUE_ADSB_Ownship_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_ADSB_Traffic_In_IsEmpty(): B = halt(\"stub\")\n\n  def SHM_QUEUE_ADSB_Traffic_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_Response_In_IsEmpty(): B = halt(\"stub\")\n\n  def SHM_QUEUE_Response_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def Response_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def ADSB_Messages_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def SHM_HEADER_adsb_to_ptab_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def Connection_Command_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def Request_In_IsEmpty(): B = halt(\"stub\")\n\n  def Request_In_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def SHM_QUEUE_Request_Out_Send(d: DataContent): Unit = halt(\"stub\")\n\n  def Connection_Command_In_IsEmpty(): B = halt(\"stub\")\n\n  def Connection_Command_In_Receive(): Option[DataContent] = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef ADAPTER_HIGH_IMPL_SW_ADAPTER_HIGH_ADAPTER_HIGH_H\n#define ADAPTER_HIGH_IMPL_SW_ADAPTER_HIGH_ADAPTER_HIGH_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_initialise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_finalise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high.c",
        {
          "type" : "ITestResource",
          "content" : "#include <adapter_high_impl_SW_adapter_high_adapter_high_api.h>\n#include <adapter_high_impl_SW_adapter_high_adapter_high.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nstatic char* component_id = \"VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high\";\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_initialise_\", 0);\n\n  printf(\"%s: VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_initialise_ called\\n\", component_id);\n\n  \/\/ example usage of api setters\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_DTU_Types_Response_Message_impl];\n  byte_array_default(SF t0, numBits_VPM_ben__SeL4_DTU_Types_Response_Message_impl, numBytes_VPM_ben__SeL4_DTU_Types_Response_Message_impl);\n  api_put_Response_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF numBits_VPM_ben__SeL4_DTU_Types_Response_Message_impl, t0);\n\n  uint8_t t1[numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl];\n  byte_array_default(SF t1, numBits_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n  api_put_ADSB_Messages_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF numBits_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl, t1);\n\n  uint8_t t2[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl];\n  byte_array_default(SF t2, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl);\n  api_put_SHM_HEADER_adsb_to_ptab__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl, t2);\n\n  uint8_t t3[numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl];\n  byte_array_default(SF t3, numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n  api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, t3);\n\n  uint8_t t4[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl];\n  byte_array_default(SF t4, numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl);\n  api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl, t4);\n\n  \/* example usage of api loggers. Commented out as the constructed String may be too long\n  api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF string(\"Example logInfo\"));\n\n  api_logDebug__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF string(\"Example logDebug\"));\n\n  api_logError__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF string(\"Example logError\"));\n  *\/\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_finalise_\", 0);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl];\n  size_t t0_numBits;\n  if(api_get_SHM_QUEUE_ADSB_Heartbeat_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert((Z) t0_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port SHM_QUEUE_ADSB_Heartbeat_In: \\n\", component_id);\n    hex_dump(SF t0, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(SHM_QUEUE_ADSB_Heartbeat_In_str);\n    String__append(SF (String) &SHM_QUEUE_ADSB_Heartbeat_In_str, string(\"Received data on event data port SHM_QUEUE_ADSB_Heartbeat_In: \"));\n    byte_array_string(SF (String) &SHM_QUEUE_ADSB_Heartbeat_In_str, t0, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF (String) &SHM_QUEUE_ADSB_Heartbeat_In_str);\n    *\/\n  }\n\n  uint8_t t1[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl];\n  size_t t1_numBits;\n  if(api_get_SHM_QUEUE_ADSB_Ownship_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF &t1_numBits, t1)) {\n    \/\/ sanity check\n    sfAssert((Z) t1_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port SHM_QUEUE_ADSB_Ownship_In: \\n\", component_id);\n    hex_dump(SF t1, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(SHM_QUEUE_ADSB_Ownship_In_str);\n    String__append(SF (String) &SHM_QUEUE_ADSB_Ownship_In_str, string(\"Received data on event data port SHM_QUEUE_ADSB_Ownship_In: \"));\n    byte_array_string(SF (String) &SHM_QUEUE_ADSB_Ownship_In_str, t1, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF (String) &SHM_QUEUE_ADSB_Ownship_In_str);\n    *\/\n  }\n\n  uint8_t t2[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl];\n  size_t t2_numBits;\n  if(api_get_SHM_QUEUE_ADSB_Traffic_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF &t2_numBits, t2)) {\n    \/\/ sanity check\n    sfAssert((Z) t2_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port SHM_QUEUE_ADSB_Traffic_In: \\n\", component_id);\n    hex_dump(SF t2, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(SHM_QUEUE_ADSB_Traffic_In_str);\n    String__append(SF (String) &SHM_QUEUE_ADSB_Traffic_In_str, string(\"Received data on event data port SHM_QUEUE_ADSB_Traffic_In: \"));\n    byte_array_string(SF (String) &SHM_QUEUE_ADSB_Traffic_In_str, t2, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF (String) &SHM_QUEUE_ADSB_Traffic_In_str);\n    *\/\n  }\n\n  uint8_t t3[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl];\n  size_t t3_numBits;\n  if(api_get_SHM_QUEUE_Response_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF &t3_numBits, t3)) {\n    \/\/ sanity check\n    sfAssert((Z) t3_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port SHM_QUEUE_Response_In: \\n\", component_id);\n    hex_dump(SF t3, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(SHM_QUEUE_Response_In_str);\n    String__append(SF (String) &SHM_QUEUE_Response_In_str, string(\"Received data on event data port SHM_QUEUE_Response_In: \"));\n    byte_array_string(SF (String) &SHM_QUEUE_Response_In_str, t3, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF (String) &SHM_QUEUE_Response_In_str);\n    *\/\n  }\n\n  uint8_t t4[numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl];\n  size_t t4_numBits;\n  if(api_get_Request_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF &t4_numBits, t4)) {\n    \/\/ sanity check\n    sfAssert((Z) t4_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Request_In: \\n\", component_id);\n    hex_dump(SF t4, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Request_In_str);\n    String__append(SF (String) &Request_In_str, string(\"Received data on event data port Request_In: \"));\n    byte_array_string(SF (String) &Request_In_str, t4, numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF (String) &Request_In_str);\n    *\/\n  }\n\n  uint8_t t5[numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl];\n  size_t t5_numBits;\n  if(api_get_Connection_Command_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF &t5_numBits, t5)) {\n    \/\/ sanity check\n    sfAssert((Z) t5_numBits == numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Connection_Command_In: \\n\", component_id);\n    hex_dump(SF t5, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Connection_Command_In_str);\n    String__append(SF (String) &Connection_Command_In_str, string(\"Received data on event data port Connection_Command_In: \"));\n    byte_array_string(SF (String) &Connection_Command_In_str, t5, numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(SF (String) &Connection_Command_In_str);\n    *\/\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high_api.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef ADAPTER_HIGH_IMPL_SW_ADAPTER_HIGH_ADAPTER_HIGH_API_H\n#define ADAPTER_HIGH_IMPL_SW_ADAPTER_HIGH_ADAPTER_HIGH_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_SHM_QUEUE_ADSB_Heartbeat_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_SHM_QUEUE_ADSB_Ownship_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_SHM_QUEUE_ADSB_Traffic_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nbool api_get_SHM_QUEUE_Response_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_Response_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_ADSB_Messages_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_HEADER_adsb_to_ptab__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_Request_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nbool api_get_Connection_Command_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high_api.c",
        {
          "type" : "ITestResource",
          "content" : "#include <adapter_high_impl_SW_adapter_high_adapter_high_api.h>\n#include <adapter_high_impl_SW_adapter_high_adapter_high.h>\n\nstatic bool apis_initialized = false;\nstatic struct VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api initialization_api;\nstatic struct VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api operational_api;\n\nstatic void initialize_apis(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high.c\", \"\", \"initialize_apis\", 0);\n\n  \/\/ Option_858711 = Option[VPM_ben__SeL4.VPM.adapter_high_impl_Initialization_Api]\n  Option_858711_get_(SF (VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api) &initialization_api, VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_Bridge_c_initialization_api(SF_LAST));\n  \/\/ Option_3F19F9 = Option[VPM_ben__SeL4.VPM.adapter_high_impl_Operational_Api]\n  Option_3F19F9_get_(SF (VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api) &operational_api, VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_Bridge_c_operational_api(SF_LAST));\n  apis_initialized = true;\n}\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_SHM_QUEUE_ADSB_Heartbeat_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_get_SHM_QUEUE_ADSB_Heartbeat_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api_get_SHM_QUEUE_ADSB_Heartbeat_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_SHM_QUEUE_ADSB_Ownship_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_get_SHM_QUEUE_ADSB_Ownship_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api_get_SHM_QUEUE_ADSB_Ownship_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_SHM_QUEUE_ADSB_Traffic_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_get_SHM_QUEUE_ADSB_Traffic_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api_get_SHM_QUEUE_ADSB_Traffic_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nbool api_get_SHM_QUEUE_Response_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_get_SHM_QUEUE_Response_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api_get_SHM_QUEUE_Response_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_Response_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_put_Response_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api_put_Response_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_ADSB_Messages_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_put_ADSB_Messages_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api_put_ADSB_Messages_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_SHM_HEADER_adsb_to_ptab__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_put_SHM_HEADER_adsb_to_ptab__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api_put_SHM_HEADER_adsb_to_ptab_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api_put_Connection_Command_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_Request_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_get_Request_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api_get_Request_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api_put_SHM_QUEUE_Request_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nbool api_get_Connection_Command_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_get_Connection_Command_In__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api_get_Connection_Command_In_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_logInfo__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api_logInfo_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_logDebug__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api_logDebug_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logError__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"api_logError__VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api_logError_(\n    SF\n    &initialization_api,\n    str);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_initialise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_adapter_high_impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_initialise\", 0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_initialise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_finalise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_finalise\", 0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_finalise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_timeTriggered(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_adapter_high_impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_api.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_timeTriggered\", 0);\n\n  VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high_adapter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <adapter_high_impl_SW_adapter_high_adapter_high_adapter.h>\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_initialiseArchitecture\", 0);\n\n  VPM_ben__SeL4_adapter_high_impl_SW_adapter_high_adapter_high_adapter_high_initialiseArchitecture(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_initialiseEntryPoint\", 0);\n\n  VPM_ben__SeL4_adapter_high_impl_SW_adapter_high_adapter_high_adapter_high_initialiseEntryPoint(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_computeEntryPoint\", 0);\n\n  VPM_ben__SeL4_adapter_high_impl_SW_adapter_high_adapter_high_adapter_high_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"adapter_high_impl_SW_adapter_high_adapter_high_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_entryPoints\", 0);\n\n  return VPM_ben__SeL4_adapter_high_impl_SW_adapter_high_adapter_high_adapter_high_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high_adapter.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef ADAPTER_HIGH_IMPL_SW_ADAPTER_HIGH_ADAPTER_HIGH_ADAPTER_H\n#define ADAPTER_HIGH_IMPL_SW_ADAPTER_HIGH_ADAPTER_HIGH_ADAPTER_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/settings_adapter_high_impl_SW_adapter_high_adapter_high.cmake",
        {
          "type" : "ITestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(adapter_high_impl_SW_adapter_high_adapter_high\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\n\nimport org.sireum._\nimport art._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\nimport art.DispatchPropertyProtocol._\nimport art.PortMode._\nimport VPM_ben__SeL4._\nimport VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix\n\nobject CASE_Monitor3 extends App {\n\n  val CASE_Monitor3Bridge : VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge = {\n    val Observed = Port[Base_Types.Bits] (id = portId\"0\", name = \"VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed\", mode = EventIn)\n    val Suspect_Traffic_Out = Port[Base_Types.Bits] (id = portId\"1\", name = \"VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out\", mode = EventOut)\n\n    VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge(\n      id = bridgeId\"0\",\n      name = \"VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3\",\n      dispatchProtocol = Periodic(period = 500),\n      dispatchTriggers = None(),\n\n      Observed = Observed,\n      Suspect_Traffic_Out = Suspect_Traffic_Out\n    )\n  }\n\n  val entryPoints: Bridge.EntryPoints = CASE_Monitor3Bridge.entryPoints\n  val noData: Option[DataContent] = None()\n\n  \/\/ Observed: In EventDataPort Base_Types.Bits\n  val Observed_id: Art.PortId = CASE_Monitor3Bridge.Observed.id\n  var Observed_port: Option[DataContent] = noData\n\n  \/\/ Suspect_Traffic_Out: Out EventDataPort Base_Types.Bits\n  val Suspect_Traffic_Out_id: Art.PortId = CASE_Monitor3Bridge.Suspect_Traffic_Out.id\n  var Suspect_Traffic_Out_port: Option[DataContent] = noData\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    return TimeTriggered()\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    if(portId == Observed_id) {\n      return Observed_port\n    } else {\n      halt(s\"Unexpected: CASE_Monitor3.getValue called with: ${portId}\")\n    }\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    Observed_port = CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix.Observed_Receive()\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    if(portId == Suspect_Traffic_Out_id) {\n      Suspect_Traffic_Out_port = Some(data)\n    } else {\n      halt(s\"Unexpected: CASE_Monitor3.putValue called with: ${portId}\")\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ ignore params\n\n    if(Suspect_Traffic_Out_port.nonEmpty) {\n      CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix.Suspect_Traffic_Out_Send(Suspect_Traffic_Out_port.get)\n      Suspect_Traffic_Out_port = noData\n    }\n  }\n\n  def initialiseArchitecture(): Unit = {\n    \/\/ nothing to do - CAmkES is responsible for initialization\n  }\n\n  def initialiseEntryPoint(): Unit = { entryPoints.initialise() }\n\n  def computeEntryPoint(): Unit = { entryPoints.compute() }\n\n  def finaliseEntryPoint(): Unit = { entryPoints.finalise() }\n\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ need to touch the following for transpiler\n    initialiseArchitecture()\n    initialiseEntryPoint()\n    computeEntryPoint()\n    finaliseEntryPoint()\n\n    touch()\n\n    return 0\n  }\n\n  def touch(): Unit = {\n    if(F) {\n      TranspilerToucher.touch()\n\n      \/\/ add types used in Platform.receive and Platform.receiveAsync\n      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId\"0\", Base_Types.Boolean_Payload(T))\n      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId\"0\", None())\n\n      \/\/ touch each payload\/type in case some are only used as a field in a record\n      def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n      printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n      printDataContent(art.Empty())\n\n      VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api.get.logError(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.logInfo(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.logDebug(\"\")\n      VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.logError(\"\")\n      val apiUsage_Observed: Option[Base_Types.Bits] = VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.get_Observed()\n      VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_initialization_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n      VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge.c_operational_api.get.put_Suspect_Traffic_Out(Base_Types.Bits_example())\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(CASE_Monitor3Bridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    eprint(CASE_Monitor3Bridge.name)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    print(CASE_Monitor3Bridge.name)\n    print(\": \")\n    println(msg)\n  }\n\n  def run(): Unit = {}\n\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\n\/\/ This file was auto-generated.  Do not edit\n\npackage VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\n@ext object CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix {\n  \/\/ returns T if seL4's Observed port is empty, F otherwise \n  def Observed_IsEmpty(): B = $\n\n  \/\/ returns result of dequeuing seL4's Observed port \n  def Observed_Receive(): Option[DataContent] = $\n\n  \/\/ send payload 'd' to components connected to seL4's Suspect_Traffic_Out port\n  def Suspect_Traffic_Out_Send(d: DataContent): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package VPM_ben__SeL4.VPM\n\nimport org.sireum._\nimport art._\n\nobject CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix_Ext {\n  def Observed_IsEmpty(): B = halt(\"stub\")\n\n  def Observed_Receive(): Option[DataContent] = halt(\"stub\")\n\n  def Suspect_Traffic_Out_Send(d: DataContent): Unit = halt(\"stub\")\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR3_IMPL_SW_TELEPORT_MONITOR_CASE_MONITOR3_H\n#define CASE_MONITOR3_IMPL_SW_TELEPORT_MONITOR_CASE_MONITOR3_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_initialise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_finalise_(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_timeTriggered_(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.h>\n#include <CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.h>\n#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\nstatic char* component_id = \"VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3\";\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_initialise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_initialise_\", 0);\n\n  printf(\"%s: VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_initialise_ called\\n\", component_id);\n\n  \/\/ example usage of api setters\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl];\n  byte_array_default(SF t0, numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl);\n  api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl, t0);\n\n  \/* example usage of api loggers. Commented out as the constructed String may be too long\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF string(\"Example logInfo\"));\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF string(\"Example logDebug\"));\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF string(\"Example logError\"));\n  *\/\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_finalise_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_finalise_\", 0);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_timeTriggered_(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_timeTriggered_\", 0);\n\n  \/\/ examples of api getter usage\n\n  uint8_t t0[numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl];\n  size_t t0_numBits;\n  if(api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF &t0_numBits, t0)) {\n    \/\/ sanity check\n    sfAssert((Z) t0_numBits == numBits_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl, \"numBits received does not match expected\")\n\n    printf(\"%s: Received data on event data port Observed: \\n\", component_id);\n    hex_dump(SF t0, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n\n    \/* alternative using logInfo.  Commented out as the constructed String may be too large\n    DeclNewString(Observed_str);\n    String__append(SF (String) &Observed_str, string(\"Received data on event data port Observed: \"));\n    byte_array_string(SF (String) &Observed_str, t0, numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl);\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF (String) &Observed_str);\n    *\/\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR3_IMPL_SW_TELEPORT_MONITOR_CASE_MONITOR3_API_H\n#define CASE_MONITOR3_IMPL_SW_TELEPORT_MONITOR_CASE_MONITOR3_API_H\n\n#include <all.h>\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray);\n\nvoid api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray);\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  String str);\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  String str);\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  String str);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.h>\n#include <CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.h>\n\nstatic bool apis_initialized = false;\nstatic struct VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Initialization_Api initialization_api;\nstatic struct VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Operational_Api operational_api;\n\nstatic void initialize_apis(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.c\", \"\", \"initialize_apis\", 0);\n\n  \/\/ Option_49D553 = Option[VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_Initialization_Api]\n  Option_49D553_get_(SF (VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Initialization_Api) &initialization_api, VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_c_initialization_api(SF_LAST));\n  \/\/ Option_759FF3 = Option[VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_Operational_Api]\n  Option_759FF3_get_(SF (VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Operational_Api) &operational_api, VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_c_operational_api(SF_LAST));\n  apis_initialized = true;\n}\n\n\/\/ This file was auto-generated.  Do not edit\n\nbool api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  size_t *numBits,\n  uint8_t *byteArray){\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c\", \"\", \"api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  \/\/ Option_30119F = Option[IS[Z, B]]\n  \/\/ Some_8D03B1 = Some[IS[Z, B]]\n  DeclNewOption_30119F(t_0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Operational_Api_get_Observed_(\n    SF\n    (Option_30119F) &t_0,\n    &operational_api);\n\n  if(t_0.type == TSome_8D03B1){\n    *numBits = t_0.Some_8D03B1.value.size;\n    if(*numBits > 0) {\n      size_t numBytes = (*numBits - 1) \/ 8 + 1;\n      memcpy(byteArray, &t_0.Some_8D03B1.value.value, numBytes);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nvoid api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  size_t numBits,\n  uint8_t *byteArray) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c\", \"\", \"api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\", 0);\n\n  sfAssert((Z) numBits >= 0, \"numBits must be non-negative for IS[Z, B].\")\n  sfAssert((Z) numBits <= MaxIS_C4F575, \"numBits too large for IS[Z, B].\")\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  DeclNewIS_C4F575(t_0);\n\n  t_0.size = numBits;\n  if(numBits > 0) {\n    size_t numBytes = (numBits - 1) \/ 8 + 1;\n    memcpy(&t_0.value, byteArray, numBytes);\n  }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Initialization_Api_put_Suspect_Traffic_Out_(\n    SF\n    &initialization_api,\n    &t_0);\n}\n\nvoid api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c\", \"\", \"api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Initialization_Api_logInfo_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c\", \"\", \"api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Initialization_Api_logDebug_(\n    SF\n    &initialization_api,\n    str);\n}\n\nvoid api_logError__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(\n  STACK_FRAME\n  String str) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c\", \"\", \"api_logError__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\", 0);\n\n  if(!apis_initialized) { initialize_apis(SF_LAST); }\n\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Initialization_Api_logError_(\n    SF\n    &initialization_api,\n    str);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_initialise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Initialization_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_initialise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_initialise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_finalise(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_finalise\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_finalise_(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_timeTriggered(\n  STACK_FRAME\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_Operational_Api api) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_timeTriggered\", 0);\n\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_timeTriggered_(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_initialiseArchitecture(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_initialiseArchitecture\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_CASE_Monitor3_initialiseArchitecture(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_initialiseEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_initialiseEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_CASE_Monitor3_initialiseEntryPoint(SF_LAST);\n}\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_computeEntryPoint(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_computeEntryPoint\", 0);\n\n  VPM_ben__SeL4_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_CASE_Monitor3_computeEntryPoint(SF_LAST);\n}\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_entryPoints(STACK_FRAME_ONLY) {\n  DeclNewStackFrame(caller, \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_entryPoints\", 0);\n\n  return VPM_ben__SeL4_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_CASE_Monitor3_entryPoints(SF_LAST);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/etc_seL4\/adapters\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef CASE_MONITOR3_IMPL_SW_TELEPORT_MONITOR_CASE_MONITOR3_ADAPTER_H\n#define CASE_MONITOR3_IMPL_SW_TELEPORT_MONITOR_CASE_MONITOR3_ADAPTER_H\n\n#include <all.h>\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_initialiseArchitecture(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_initialiseEntryPoint(STACK_FRAME_ONLY);\n\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_computeEntryPoint(STACK_FRAME_ONLY);\n\nart_Bridge_EntryPoints VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_entryPoints(STACK_FRAME_ONLY);\n\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/settings_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.cmake",
        {
          "type" : "ITestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/ext.c",
        {
          "type" : "ITestResource",
          "content" : "#include <ext.h>\n\n\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ add c extension code here\n\n\/\/ example method that sets the first numBits bits of byteArray to 1\nvoid byte_array_default(STACK_FRAME uint8_t* byteArray, size_t numBits, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"byte_array_default\", 0);\n\n  sfAssert((numBits - 1) \/ 8  + 1 <= numBytes, \"byte_array_default: numBytes * 8 must be at least numBits\")\n\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    uint8_t v = 0;\n    for(uint8_t bit = 0; bit < 8; bit++) {\n      if(byte * 8 + bit < numBits) {\n        v |= 1UL << bit;\n      }\n    }\n    byteArray[byte] = v;\n  }\n}\n\n\/\/ example method that places the hex value of the bytes in byteArray into str\nvoid byte_array_string(STACK_FRAME String str, uint8_t* byteArray, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"byte_array_string\", 0);\n\n  sfAssert((str->size + numBytes) <= MaxString, \"byte_array_string: Insufficient maximum for String characters, consider increasing the --max-string-size option\")\n\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    U8_string_(SF str, byteArray[byte]);\n    String__append(SF str, string(\" \"));\n  }\n}\n\n\/\/ example method that directly prints the hex values of the bytes in byte_array\nvoid hex_dump(STACK_FRAME uint8_t* byte_array, size_t numBytes) {\n  DeclNewStackFrame(caller, \"ext.c\", \"\", \"hex_dump\", 0);\n\n  printf(\"[ \");\n  for(size_t byte = 0; byte < numBytes; byte++) {\n    if(byte != 0 && byte % 16 == 0) { printf(\"\\n  \"); }\n    printf(\"%02X \", byte_array[byte]);\n  }\n  printf(\"]\\n\");\n}",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/c\/ext-c\/ext.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef EXT_H\n#define EXT_H\n\n\/\/ This file will not be overwritten so is safe to edit\n\n#include <all.h>\n\n\/\/ bit-codec size for VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl\n#define numBits_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl 256\n#define numBytes_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl ((numBits_VPM_ben__SeL4_VPM_CASE_AttestationRequestMsg_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl\n#define numBits_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl 16384\n#define numBytes_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl ((numBits_VPM_ben__SeL4_VPM_CASE_AttestationResponseMsg_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_WhiteList_impl\n#define numBits_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl 128\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_WhiteList_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_Common_Types_Unsigned_32\n#define numBits_VPM_ben__SeL4_Common_Types_Unsigned_32 32\n#define numBytes_VPM_ben__SeL4_Common_Types_Unsigned_32 ((numBits_VPM_ben__SeL4_Common_Types_Unsigned_32 - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_request_array_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_connection_command_impl\n#define numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl 192\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_connection_command_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_connection_command_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl\n#define numBits_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl 35088\n#define numBytes_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl ((numBits_VPM_ben__SeL4_ADSB_Types_ADSB_Aggregated_Message_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_ADSB_Types_MonitorReport_impl\n#define numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl 4832\n#define numBytes_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl ((numBits_VPM_ben__SeL4_ADSB_Types_MonitorReport_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_DTU_Types_Response_Message_impl\n#define numBits_VPM_ben__SeL4_DTU_Types_Response_Message_impl 16384\n#define numBytes_VPM_ben__SeL4_DTU_Types_Response_Message_impl ((numBits_VPM_ben__SeL4_DTU_Types_Response_Message_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl\n\/\/ CASE_Proxies::shm_queue_adsb_Heartbeat.impl does not specify a bit size, assuming max bit size of 65792. Used by unconnected port adapter_low.SHM_QUEUE_ADSB_Heartbeat_Out\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_Heartbeat_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl\n\/\/ CASE_Proxies::shm_queue_adsb_ownship.impl does not specify a bit size, assuming max bit size of 65792. Used by unconnected port adapter_low.SHM_QUEUE_ADSB_Ownship_Out\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_ownship_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl\n\/\/ CASE_Proxies::shm_queue_adsb_traffic.impl does not specify a bit size, assuming max bit size of 65792. Used by unconnected port adapter_low.SHM_QUEUE_ADSB_Traffic_Out\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_adsb_traffic_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl\n\/\/ CASE_Proxies::shm_queue_vdtu_response.impl does not specify a bit size, assuming max bit size of 65792. Used by unconnected port adapter_low.SHM_QUEUE_Response_Out\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_response_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_request_impl\n\/\/ CASE_Proxies::shm_queue_attestation_request.impl does not specify a bit size, assuming max bit size of 65792. Used by unconnected port adapter_low.SHM_QUEUE_AttestationRequest\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_request_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_request_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_request_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl 256\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_header_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl\n\/\/ CASE_Proxies::shm_queue_monitor_report.impl does not specify a bit size, assuming max bit size of 65792. Used by unconnected port adapter_low.SHM_QUEUE_Suspect_Traffic_Out1\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_monitor_report_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl\n\/\/ CASE_Proxies::shm_queue_vdtu_request.impl does not specify a bit size, assuming max bit size of 65792. Used by unconnected port adapter_low.SHM_QUEUE_Request_In\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_vdtu_request_impl - 1) \/ 8 + 1)\n\n\/\/ bit-codec size for VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_response_impl\n\/\/ CASE_Proxies::shm_queue_attestation_response.impl does not specify a bit size, assuming max bit size of 65792. Used by unconnected port adapter_low.SHM_QUEUE_AttestationResponse\n#define numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_response_impl 65792\n#define numBytes_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_response_impl ((numBits_VPM_ben__SeL4_CASE_Proxies_shm_queue_attestation_response_impl - 1) \/ 8 + 1)\n\nvoid byte_array_default(STACK_FRAME uint8_t* byteArray, size_t numBits, size_t numBytes);\n\nvoid byte_array_string(STACK_FRAME String str, uint8_t* byteArray, size_t numBytes);\n\nvoid hex_dump(STACK_FRAME uint8_t* byte_array, size_t numBytes);\n#endif",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/seL4Nix\/VPM_ben__SeL4\/SlangTypeLibrary\/SlangTypeLibrary.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage VPM_ben__SeL4.SlangTypeLibrary\n\nimport org.sireum._\nimport art._\nimport VPM_ben__SeL4._\n\nobject SlangTypeLibrary extends App {\n  def main(args: ISZ[String]): Z = {\n\n    \/\/ touch each payload\/type in case some are only used as a field in a record\n    def printDataContent(a: art.DataContent): Unit = { println(s\"${a}\") }\n\n    printDataContent(Base_Types.Bits_Payload(Base_Types.Bits_example()))\n    printDataContent(art.Empty())\n\n    return 0\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/settings_SlangTypeLibrary.cmake",
        {
          "type" : "ITestResource",
          "content" : "add_definitions(-DCAMKES)\n\nif(TARGET muslc)\n  target_link_libraries(SlangTypeLibrary\n                        muslc)\nendif()",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/transpile-sel4.cmd",
        {
          "type" : "ITestResource",
          "content" : "::\/*#! 2> \/dev\/null                                   #\n@ 2>\/dev\/null # 2>nul & echo off & goto BOF           #\nif [ -z ${SIREUM_HOME} ]; then                        #\n  echo \"Please set SIREUM_HOME env var\"               #\n  exit -1                                             #\nfi                                                    #\nexec ${SIREUM_HOME}\/bin\/sireum slang run \"$0\" \"$@\"    #\n:BOF\nsetlocal\nif not defined SIREUM_HOME (\n  echo Please set SIREUM_HOME env var\n  exit \/B -1\n)\n%SIREUM_HOME%\\\\bin\\\\sireum.bat slang run \"%0\" %*\nexit \/B %errorlevel%\n::!#*\/\n\/\/ #Sireum\n\nimport org.sireum._\n\n\/\/ This file was auto-generated.  Do not edit\n\nval SCRIPT_HOME: Os.Path = Os.slashDir\nval PATH_SEP: String = Os.pathSep\n\nval CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager: ISZ[String] = ISZ(\n  \"--sourcepath\", s\"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\",\n  \"--output-dir\", s\"${SCRIPT_HOME}\/..\/..\/camkes\/slang_libraries\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\",\n  \"--name\", \"CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\",\n  \"--apps\", \"VPM_ben__SeL4.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.CASE_AttestationManager\",\n  \"--fingerprint\", \"3\",\n  \"--bits\", \"32\",\n  \"--string-size\", \"256\",\n  \"--sequence-size\", \"1\",\n  \"--sequence\", s\"MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=3;IS[Z,art.Art.PortId]=3;IS[Z,B]=65792\",\n  \"--constants\", s\"art.Art.numComponents=1;art.Art.numPorts=5;art.Art.numConnections=1\",\n  \"--cmake-includes\", s\"+${SCRIPT_HOME}\/settings_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.cmake\",\n  \"--forward\", \"art.ArtNative=VPM_ben__SeL4.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.CASE_AttestationManager\",\n  \"--stack-size\", \"16777216\",\n  \"--stable-type-id\",\n  \"--exts\", s\"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.c\",\n  \"--exclude-build\", \"VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager,VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate,VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1,VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2,VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low,VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high,VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--lib-only\")\n\nval CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate: ISZ[String] = ISZ(\n  \"--sourcepath\", s\"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\",\n  \"--output-dir\", s\"${SCRIPT_HOME}\/..\/..\/camkes\/slang_libraries\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\",\n  \"--name\", \"CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\",\n  \"--apps\", \"VPM_ben__SeL4.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.CASE_AttestationGate\",\n  \"--fingerprint\", \"3\",\n  \"--bits\", \"32\",\n  \"--string-size\", \"256\",\n  \"--sequence-size\", \"1\",\n  \"--sequence\", s\"MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=3;IS[Z,art.Art.PortId]=3;IS[Z,B]=65792\",\n  \"--constants\", s\"art.Art.numComponents=1;art.Art.numPorts=5;art.Art.numConnections=1\",\n  \"--cmake-includes\", s\"+${SCRIPT_HOME}\/settings_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.cmake\",\n  \"--forward\", \"art.ArtNative=VPM_ben__SeL4.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.CASE_AttestationGate\",\n  \"--stack-size\", \"16777216\",\n  \"--stable-type-id\",\n  \"--exts\", s\"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.c\",\n  \"--exclude-build\", \"VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager,VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate,VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1,VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2,VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low,VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high,VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--lib-only\")\n\nval CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1: ISZ[String] = ISZ(\n  \"--sourcepath\", s\"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\",\n  \"--output-dir\", s\"${SCRIPT_HOME}\/..\/..\/camkes\/slang_libraries\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\",\n  \"--name\", \"CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\",\n  \"--apps\", \"VPM_ben__SeL4.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.CASE_Monitor1\",\n  \"--fingerprint\", \"3\",\n  \"--bits\", \"32\",\n  \"--string-size\", \"256\",\n  \"--sequence-size\", \"1\",\n  \"--sequence\", s\"MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=1;IS[Z,art.Art.PortId]=1;IS[Z,B]=65792\",\n  \"--constants\", s\"art.Art.numComponents=1;art.Art.numPorts=2;art.Art.numConnections=1\",\n  \"--cmake-includes\", s\"+${SCRIPT_HOME}\/settings_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.cmake\",\n  \"--forward\", \"art.ArtNative=VPM_ben__SeL4.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.CASE_Monitor1\",\n  \"--stack-size\", \"16777216\",\n  \"--stable-type-id\",\n  \"--exts\", s\"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.c\",\n  \"--exclude-build\", \"VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager,VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate,VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1,VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2,VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low,VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high,VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--lib-only\")\n\nval CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2: ISZ[String] = ISZ(\n  \"--sourcepath\", s\"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\",\n  \"--output-dir\", s\"${SCRIPT_HOME}\/..\/..\/camkes\/slang_libraries\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\",\n  \"--name\", \"CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\",\n  \"--apps\", \"VPM_ben__SeL4.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.CASE_Monitor2\",\n  \"--fingerprint\", \"3\",\n  \"--bits\", \"32\",\n  \"--string-size\", \"256\",\n  \"--sequence-size\", \"1\",\n  \"--sequence\", s\"MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=1;IS[Z,art.Art.PortId]=1;IS[Z,B]=65792\",\n  \"--constants\", s\"art.Art.numComponents=1;art.Art.numPorts=2;art.Art.numConnections=1\",\n  \"--cmake-includes\", s\"+${SCRIPT_HOME}\/settings_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.cmake\",\n  \"--forward\", \"art.ArtNative=VPM_ben__SeL4.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.CASE_Monitor2\",\n  \"--stack-size\", \"16777216\",\n  \"--stable-type-id\",\n  \"--exts\", s\"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.c\",\n  \"--exclude-build\", \"VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager,VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate,VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1,VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2,VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low,VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high,VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--lib-only\")\n\nval adapter_low_impl_SW_adapter_low_adapter_low: ISZ[String] = ISZ(\n  \"--sourcepath\", s\"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/adapter_low_impl_SW_adapter_low_adapter_low\",\n  \"--output-dir\", s\"${SCRIPT_HOME}\/..\/..\/camkes\/slang_libraries\/adapter_low_impl_SW_adapter_low_adapter_low\",\n  \"--name\", \"adapter_low_impl_SW_adapter_low_adapter_low\",\n  \"--apps\", \"VPM_ben__SeL4.adapter_low_impl_SW_adapter_low_adapter_low.adapter_low\",\n  \"--fingerprint\", \"3\",\n  \"--bits\", \"32\",\n  \"--string-size\", \"256\",\n  \"--sequence-size\", \"1\",\n  \"--sequence\", s\"MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=12;IS[Z,art.Art.PortId]=12;IS[Z,B]=65792\",\n  \"--constants\", s\"art.Art.numComponents=1;art.Art.numPorts=23;art.Art.numConnections=1\",\n  \"--cmake-includes\", s\"+${SCRIPT_HOME}\/settings_adapter_low_impl_SW_adapter_low_adapter_low.cmake\",\n  \"--forward\", \"art.ArtNative=VPM_ben__SeL4.adapter_low_impl_SW_adapter_low_adapter_low.adapter_low\",\n  \"--stack-size\", \"16777216\",\n  \"--stable-type-id\",\n  \"--exts\", s\"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low_adapter.c\",\n  \"--exclude-build\", \"VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager,VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate,VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1,VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2,VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low,VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high,VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--lib-only\")\n\nval adapter_high_impl_SW_adapter_high_adapter_high: ISZ[String] = ISZ(\n  \"--sourcepath\", s\"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/adapter_high_impl_SW_adapter_high_adapter_high\",\n  \"--output-dir\", s\"${SCRIPT_HOME}\/..\/..\/camkes\/slang_libraries\/adapter_high_impl_SW_adapter_high_adapter_high\",\n  \"--name\", \"adapter_high_impl_SW_adapter_high_adapter_high\",\n  \"--apps\", \"VPM_ben__SeL4.adapter_high_impl_SW_adapter_high_adapter_high.adapter_high\",\n  \"--fingerprint\", \"3\",\n  \"--bits\", \"32\",\n  \"--string-size\", \"256\",\n  \"--sequence-size\", \"1\",\n  \"--sequence\", s\"MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=6;IS[Z,art.Art.PortId]=6;IS[Z,B]=65792\",\n  \"--constants\", s\"art.Art.numComponents=1;art.Art.numPorts=11;art.Art.numConnections=1\",\n  \"--cmake-includes\", s\"+${SCRIPT_HOME}\/settings_adapter_high_impl_SW_adapter_high_adapter_high.cmake\",\n  \"--forward\", \"art.ArtNative=VPM_ben__SeL4.adapter_high_impl_SW_adapter_high_adapter_high.adapter_high\",\n  \"--stack-size\", \"16777216\",\n  \"--stable-type-id\",\n  \"--exts\", s\"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high_adapter.c\",\n  \"--exclude-build\", \"VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager,VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate,VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1,VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2,VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low,VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high,VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--lib-only\")\n\nval CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3: ISZ[String] = ISZ(\n  \"--sourcepath\", s\"${SCRIPT_HOME}\/..\/src\/main\/bridge${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/component${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/VPM${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--output-dir\", s\"${SCRIPT_HOME}\/..\/..\/camkes\/slang_libraries\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--name\", \"CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--apps\", \"VPM_ben__SeL4.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.CASE_Monitor3\",\n  \"--fingerprint\", \"3\",\n  \"--bits\", \"32\",\n  \"--string-size\", \"256\",\n  \"--sequence-size\", \"1\",\n  \"--sequence\", s\"MS[Z,Option[art.Bridge]]=1;IS[Z,art.UPort]=1;IS[Z,art.Art.PortId]=1;IS[Z,B]=65792\",\n  \"--constants\", s\"art.Art.numComponents=1;art.Art.numPorts=2;art.Art.numConnections=1\",\n  \"--cmake-includes\", s\"+${SCRIPT_HOME}\/settings_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.cmake\",\n  \"--forward\", \"art.ArtNative=VPM_ben__SeL4.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.CASE_Monitor3\",\n  \"--stack-size\", \"16777216\",\n  \"--stable-type-id\",\n  \"--exts\", s\"${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/ext.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/ext-c\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.c${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.h${PATH_SEP}${SCRIPT_HOME}\/..\/src\/c\/etc_seL4\/adapters\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.c\",\n  \"--exclude-build\", \"VPM_ben__SeL4.VPM.CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager,VPM_ben__SeL4.VPM.CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate,VPM_ben__SeL4.VPM.CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1,VPM_ben__SeL4.VPM.CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2,VPM_ben__SeL4.VPM.adapter_low_impl_SW_adapter_low_adapter_low,VPM_ben__SeL4.VPM.adapter_high_impl_SW_adapter_high_adapter_high,VPM_ben__SeL4.VPM.CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\",\n  \"--lib-only\")\n\nval SlangTypeLibrary: ISZ[String] = ISZ(\n  \"--sourcepath\", s\"${SCRIPT_HOME}\/..\/src\/main\/art${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/data${PATH_SEP}${SCRIPT_HOME}\/..\/src\/main\/seL4Nix\/VPM_ben__SeL4\/SlangTypeLibrary\",\n  \"--output-dir\", s\"${SCRIPT_HOME}\/..\/..\/camkes\/slang_libraries\/SlangTypeLibrary\",\n  \"--name\", \"SlangTypeLibrary\",\n  \"--apps\", \"VPM_ben__SeL4.SlangTypeLibrary.SlangTypeLibrary\",\n  \"--fingerprint\", \"3\",\n  \"--bits\", \"32\",\n  \"--string-size\", \"256\",\n  \"--sequence-size\", \"1\",\n  \"--sequence\", s\"IS[Z,B]=65792\",\n  \"--cmake-includes\", s\"+${SCRIPT_HOME}\/settings_SlangTypeLibrary.cmake\",\n  \"--forward\", \"art.ArtNative=VPM_ben__SeL4.SlangTypeLibrary.SlangTypeLibrary\",\n  \"--stack-size\", \"16777216\",\n  \"--stable-type-id\",\n  \"--lib-only\")\n\nval projects: ISZ[ISZ[String]] = ISZ(\n  CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager,\n  CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate,\n  CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1,\n  CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2,\n  adapter_low_impl_SW_adapter_low_adapter_low,\n  adapter_high_impl_SW_adapter_high_adapter_high,\n  CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3,\n  SlangTypeLibrary\n)\n\nprintln(\"Initializing runtime library ...\")\nSireum.initRuntimeLibrary()\n\nvar result = 0\nfor(p <- projects if result == 0) {\n  result = Sireum.run(ISZ[String](\"slang\", \"transpilers\", \"c\") ++ p)\n}\n\n\/\/ops.ISZOps(projects).parMap(p =>\n\/\/  Sireum.run(ISZ[String](\"slang\", \"transpilers\", \"c\") ++ p)\n\/\/)\n\nOs.exit(result)\n",
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArchitectureDescription.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n\n@datatype class ArchitectureDescription(components: IS[Art.BridgeId, Bridge],\n                                        connections: IS[Art.ConnectionId, UConnection]) {\n  @spec val allPorts: ISZ[UPort] = $\n\n  @spec def allPortsSpec(i: Z): ISZ[UPort] = $\n  \/*\n    l\"\"\"\n    = base:  ISZ[UPort](), if i == 0\n    = rec:   components(i).ports.all ++ allPorts(i - 1), if 0 < i \u2227 i < components.size\n  \"\"\"\n\n  l\"\"\" invariant\n\n         AllPorts:\n           allPorts \u2261 allPortsSpec(components.size - 1)\n\n         ComponentIdUnique:\n           \u2200i: [0, components.size)\n             \u2200j: [0, components.size)\n               i \u2260 j \u2192 components(i).id \u2260 components(j).id\n\n         PortIdUnique:\n           \u2200i: [0, allPorts.size)\n             \u2200j: [0, allPorts.size)\n               i \u2260 j \u2192 allPorts(i).id \u2260 allPorts(j).id\n   \"\"\"\n  *\/\n}\n\n@datatype trait UConnection {\n  \/*\n  l\"\"\" invariant\n         FromPortOut:   from.mode \u2261 PortMode.DataOut \u2228 from.mode \u2261 PortMode.EventOut\n         DataPort:    (from.mode \u2261 PortMode.DataOut) \u2261 (to.mode \u2261 PortMode.DataIn)\n         EventPort:  (from.mode \u2261 PortMode.EventOut) \u2261 (to.mode \u2261 PortMode.EventIn)  \"\"\"\n  *\/\n\n  def from: UPort\n\n  def to: UPort\n}\n\n@datatype class Connection(val from: UPort, val to: UPort)\n  extends UConnection\n\n\n@enum object PortMode {\n  'DataIn\n  'DataOut\n  'EventIn\n  'EventOut\n}\n\n@datatype trait UPort {\n  def id: Art.PortId\n\n  def name: String\n\n  def mode: PortMode.Type\n}\n\n@datatype trait PortProto extends UPort\n\n@datatype class Port[T](val id: Art.PortId,\n                        val name: String,\n                        val mode: PortMode.Type)\n  extends PortProto\n\n@datatype trait UrgentPortProto extends UPort {\n  def urgency: Z\n}\n\n@datatype class UrgentPort[T](val id: Art.PortId,\n                              val name: String,\n                              val mode: PortMode.Type,\n                              val urgency: Z)\n  extends UrgentPortProto\n\n@sig trait Bridge {\n  def id: Art.BridgeId\n\n  def name: String\n\n  def ports: Bridge.Ports\n\n  def entryPoints: Bridge.EntryPoints\n\n  def dispatchProtocol: DispatchPropertyProtocol\n}\n\n\nobject Bridge {\n\n  \/\/ initialise()  ( compute() | activate() deactivate() | recover() )* finalise()\n  @sig trait EntryPoints {\n\n    def initialise(): Unit\n\n    def activate(): Unit\n\n    def deactivate(): Unit\n\n    def compute(): Unit\n\n    def recover(): Unit\n\n    def finalise(): Unit\n\n    def testCompute(): Unit = {\n      println(\"Default testCompute\")\n    }\n\n    def testInitialise(): Unit = {\n      println(\"Default testInitialise\")\n    }\n  }\n\n  @datatype class Ports(dataIns: ISZ[UPort],\n                        dataOuts: ISZ[UPort],\n                        eventIns: ISZ[UPort],\n                        eventOuts: ISZ[UPort])\n\n}\n\n\n@datatype trait DispatchPropertyProtocol\n\nobject DispatchPropertyProtocol {\n\n  @datatype class Periodic(period: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Aperiodic() extends DispatchPropertyProtocol\n\n  @datatype class Sporadic(min: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Timed() extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Hybrid() extends DispatchPropertyProtocol\n}\n\n@datatype trait DispatchStatus\n\n@datatype class TimeTriggered() extends DispatchStatus\n\n@datatype class EventTriggered(portIds: ISZ[Art.PortId]) extends DispatchStatus",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/Art.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.scheduling.Scheduler\n\nobject Art {\n\n  @range(min = 0, max = 6, index = T) class BridgeId\n\n  @range(min = 0, max = 49, index = T) class PortId\n\n  @range(min = 0, max = 18, index = T) class ConnectionId\n\n  type Time = S64 \/\/ Z might be too small after transpiling\n\n  val numComponents: Z = 7\n  val numPorts: Z = 50\n  val numConnections: Z = 19\n\n  val logTitle: String = \"Art\"\n\n  val bridges: MSZ[Option[Bridge]] = MS.create(numComponents, None[Bridge]())\n  val ports: MS[Art.PortId, Option[UPort]] = MS.create[Art.PortId, Option[UPort]](numPorts, None[UPort]())\n  val connections: MS[Art.PortId, IS[Art.ConnectionId, Art.PortId]] = MS.create[Art.PortId, IS[Art.ConnectionId, Art.PortId]](numPorts, IS())\n\n  \/\/ Note on transpiling:\n  \/\/ ports and conenctions are not touched\/transpiled when targeting seL4. Bridges\n  \/\/ are isolated when transpiling so BridgeId.Max could be 0, but changing Min\/Max is\n  \/\/ not currently supported by the transpiler so instead bridges is defined as an MSZ\n  \/\/ so that that its size can be set to 1 and thus reduce stack space requirements\n\n\n  @pure def bridge(bridgeId: Art.BridgeId): Bridge = {\n    return bridges(bridgeId.toZ).get\n  }\n\n  @pure def port(p: Art.PortId): UPort = {\n    return ports(p).get\n  }\n\n  def register(bridge: Bridge): Unit = {\n    bridges(bridge.id.toZ) = Some(bridge)\n    bridge.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (periodic: $period)\")\n      case DispatchPropertyProtocol.Sporadic(min) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (sporadic: $min)\")\n    }\n\n    def r(uports: ISZ[UPort]): Unit = {\n      for (port <- uports) {\n        ports(port.id) = Some(port)\n        \/* transpiler does not emit an extractor for matches in nested functions\n        port.mode match {\n          case PortMode.DataIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data in)\")\n          case PortMode.DataOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data out)\")\n          case PortMode.EventIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event in)\")\n          case PortMode.EventOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event out)\")\n        }\n        *\/\n        val typ: String = if (port.mode == PortMode.DataIn) \"(data in)\" else if (port.mode == PortMode.DataOut) \"(data out)\" else if (port.mode == PortMode.EventOut) \"(event out)\" else if (port.mode == PortMode.EventIn) \"(event in)\" else \"(infeasible)\"\n        ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} $typ\")\n      }\n    }\n\n    r(bridge.ports.dataIns)\n    r(bridge.ports.dataOuts)\n    r(bridge.ports.eventIns)\n    r(bridge.ports.eventOuts)\n  }\n\n  \/\/ can't find definition in the standard ??\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = { \/\/ DISPATCH_STATUS\n    return ArtNative.dispatchStatus(bridgeId)\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ RECEIVE_INPUT\n    ArtNative.receiveInput(eventPortIds, dataPortIds)\n  }\n\n  def putValue(portId: PortId, data: DataContent): Unit = { \/\/ PUT_VALUE\n    ArtNative.putValue(portId, data)\n  }\n\n  def getValue(portId: PortId): Option[DataContent] = { \/\/ GET_VALUE\n    return ArtNative.getValue(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    ArtNative.sendOutput(eventPortIds, dataPortIds)\n  }\n\n  \/** The seL4 platform doesn't use the bridges data structure and its\n    * version of the loggers ignore the 'title' parameter. Not pattern matching\n    * here as that adds an Option to the stack which increases the stack size.\n    *\/\n  def logInfo(bridgeId: Art.BridgeId, msg: String): Unit = {\n    if (bridges(bridgeId.toZ).nonEmpty) {\n      ArtNative.logInfo(bridges(bridgeId.toZ).get.name, msg)\n    } else {\n      ArtNative.logInfo(\"\", msg)\n    }\n  }\n\n  def logError(bridgeId: Art.BridgeId, msg: String): Unit = {\n    if (bridges(bridgeId.toZ).nonEmpty) {\n      ArtNative.logError(bridges(bridgeId.toZ).get.name, msg)\n    } else {\n      ArtNative.logError(\"\", msg)\n    }\n  }\n\n  def logDebug(bridgeId: Art.BridgeId, msg: String): Unit = {\n    if (bridges(bridgeId.toZ).nonEmpty) {\n      ArtNative.logDebug(bridges(bridgeId.toZ).get.name, msg)\n    } else {\n      ArtNative.logDebug(\"\", msg)\n    }\n  }\n\n  def connect(from: UPort, to: UPort): Unit = {\n    connections(from.id) = connections(from.id) :+ to.id\n    ArtNative.logInfo(logTitle, s\"Connected ports: ${from.name} -> ${to.name}\")\n  }\n\n  \/\/ JH: Refactor\n  \/\/ Define explicit assemble phase (to support both test and execution modes)\n  def assemble(system: ArchitectureDescription): Unit = {\n    for (component <- system.components) {\n      register(component)\n    }\n\n    for (connection <- system.connections) {\n      connect(connection.from, connection.to)\n    }\n  }\n\n  def run(system: ArchitectureDescription,\n          scheduler: Scheduler): Unit = {\n\n    assemble(system)\n\n    setUpArchitecture()\n    setUpPlatform()\n    setUpSystemState(scheduler)\n\n    initializePhase(scheduler)\n    computePhase(scheduler)\n    finalizePhase(scheduler)\n\n    tearDownSystemState()\n    tearDownPlatform()\n    tearDownArchitecture()\n  }\n\n  def initializePhase(scheduler: Scheduler): Unit = {\n    ArtNative.initializePhase()\n    scheduler.initializationPhase()\n  }\n\n  def computePhase(scheduler: Scheduler): Unit = {\n    ArtNative.computePhase()\n    scheduler.computePhase()\n  }\n\n  def finalizePhase(scheduler: Scheduler): Unit = {\n    ArtNative.finalizePhase()\n    scheduler.finalizePhase()\n  }\n\n  def setUpArchitecture(): Unit = {}\n\n  def tearDownArchitecture(): Unit = {}\n\n  def setUpPlatform(): Unit = {}\n\n  def tearDownPlatform(): Unit = {}\n\n  def setUpSystemState(scheduler: Scheduler): Unit = {\n    ArtNative.setUpSystemState()\n    scheduler.initialize()\n  }\n\n  def tearDownSystemState(): Unit = {\n    ArtNative.tearDownSystemState()\n  }\n\n  def time(): Time = {\n    return ArtNative.time()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Clears any existing ports and bridges, then sets up ports\/bridges for the next test.\n   *\n   * Automatically called by BridgeTestSuite before each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = None()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n\n    \/\/ register bridge passed to this method\n    register(bridge)\n\n    \/\/ call ArtNative to reset the state of the specific thread component\n    ArtNative.initTest(bridge)\n  }\n\n  \/**\n  * Executes a component (identified by bridge) Initialize Entry Point (application code)\n  * for the purposes of unit testing.\n  *\n  * This infrastructure method is called with automatically generated unit testing support code.\n  * The developer-facing version of this method (called by a developer unit test)\n  * provided by the unit testing support code hides the bridge argument.  The bridge\n  * value is retrieved from the testing infrastructure code before passing the call\n  * through to this method.\n  *\/\n  def testInitialise(bridge: Bridge): Unit = {\n    ArtNative.testInitialise(bridge)\n  }\n\n  \/**\n   * Executes a component (identified by bridge) Compute Entry Point (application code)\n   * for the purposes of unit testing.\n   *\n   * This infrastructure method is called with automatically generated unit testing support code.\n   * The developer-facing version of this method (called by a developer unit test)\n   * provided by the unit testing support code hides the bridge argument.  The bridge\n   * value is retrieved from the testing infrastructure code before passing the call\n   * through to this method.\n   *\/\n  def testCompute(bridge: Bridge): Unit = {\n    ArtNative.testCompute(bridge)\n  }\n\n\n  def finalizeTest(bridge: Bridge): Unit = {\n    ArtNative.finalizeTest(bridge)\n  }\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def initSystemTest(system: ArchitectureDescription,\n                     scheduler: Scheduler): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = None()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n    \/\/ It seems to me that it might be best to do this once and for all (not for every test) as it is really\n    \/\/ a static description of the model that will not be changing.\n    assemble(system)\n\n    \/\/ let ArtNative reset itself as well\n    ArtNative.initSystemTest(scheduler)\n  }\n\n  \/\/  def executeSystemTest(): Unit = {\n  \/\/    ArtNative.executeTest()\n  \/\/  }\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def finalizeSystemTest(): Unit = {\n    ArtNative.finalizeSystemTest()\n  }\n\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    ArtNative.releaseOutput(eventPortIds, dataPortIds)\n  }\n\n  def manuallyClearOutput(): Unit = {\n    ArtNative.manuallyClearOutput()\n  }\n\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    ArtNative.insertInPortValue(dstPortId, data)\n  }\n\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    return ArtNative.observeOutPortValue(portId)\n  }\n\n  \/\/ JH: Refactored - manually added method to support\n  def observeInPortValue(portId: Art.PortId): Option[DataContent] = {\n    return ArtNative.observeInPortValue(portId)\n  }\n\n  def observeOutPortVariable(portId: Art.PortId): Option[DataContent] = {\n    return ArtNative.observeOutPortVariable(portId)\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtDebug.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtDebug {\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = $\n\n  def registerListener(listener: ArtListener): Unit = $\n\n  def setDebugObject[T](key: String, o: T): Unit = $\n\n  def getDebugObject[T](key: String): Option[T] = $\n}\n\n@msig trait ArtListener {\n\n  \/\/ lifecycle information\n  def start(time: Art.Time): Unit\n\n  def stop(time: Art.Time): Unit\n\n  \/\/ communication information\n  def output(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Art.Time): Unit\n\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtDebug_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.Art.Time\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtDebug_Ext {\n  private val debugObjects: MMap[String, Any] = ArtNative_Ext.concMap()\n  private val listeners: MSet[ArtListener] = concSet()\n\n  protected[art] def start(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.start(time))\n  }\n\n  protected[art] def stop(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.stop(time))\n  }\n\n  protected[art] def outputCallback(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Time): Unit = {\n    listeners.foreach((listener: ArtListener) => listener.output(src, dst, data, time))\n  }\n\n  def setDebugObject[T](key: String, o: T): Unit = {\n    ArtNative.logDebug(Art.logTitle, s\"Set debug object for $key\")\n    debugObjects(key) = o\n  }\n\n  def getDebugObject[T](key: String): Option[T] = {\n    debugObjects.get(key) match {\n      case scala.Some(o) => Some(o.asInstanceOf[T])\n      case _ => None[T]()\n    }\n  }\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = {\n\n    val bridge = Art.bridges(bridgeId.toZ).get\n\n    if (bridge.ports.dataOuts.elements.map(_.id).contains(port) ||\n      bridge.ports.eventOuts.elements.map(_.id).contains(port)) {\n\n      ArtNative.logDebug(Art.logTitle, s\"Injecting from port ${Art.ports(port).get.name}\")\n\n      ArtNative.putValue(port, data)\n\n      ArtNative.sendOutput(bridge.ports.eventOuts.map(_.id), bridge.ports.dataOuts.map(_.id))\n    } else {\n      ArtNative.logDebug(Art.logTitle, s\"Injecting to port ${Art.ports(port).get.name}\")\n\n      \/\/ right now, there is no difference between treatment of data and event ports, but keep the logic\n      \/\/ separate for further refactoring\n      if (bridge.ports.dataIns.elements.map(_.id).contains(port)) {\n        ArtNative_Ext.inInfrastructurePorts(port.toZ) = ArtMessage(data)\n      } else {\n        ArtNative_Ext.inInfrastructurePorts(port.toZ) = ArtMessage(data)\n      }\n    }\n  }\n\n  def registerListener(listener: ArtListener): Unit = {\n    listeners.add(listener)\n  }\n\n  def concSet[K](): MSet[K] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    val m: java.util.Set[K] = java.util.concurrent.ConcurrentHashMap.newKeySet()\n    m.asScala\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtNative.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.scheduling.Scheduler\n\n@ext object ArtNative {\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = $\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = $\n\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = $\n\n  def getValue(portId: Art.PortId): Option[DataContent] = $\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n\n  def logInfo(title: String, msg: String): Unit = $\n\n  def logError(title: String, msg: String): Unit = $\n\n  def logDebug(title: String, msg: String): Unit = $\n\n\n  def tearDownSystemState(): Unit = $\n\n  def setUpSystemState(): Unit = $\n\n  \/\/ JH: Refactor\n  def initializePhase(): Unit = $\n\n  \/\/ JH: Refactor\n  def computePhase(): Unit = $\n\n  \/\/ JH: Refactor\n  def finalizePhase(): Unit = $\n\n  def time(): Art.Time = $\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges.\n   *\n   * An analogue to this method does not show up in developer-written unit tests because\n   * the it's invoked behind the scenes by the automatically generated unit test infrastructure\n   * as a prelude to each test.\n   *\n   *\/\n  def initTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Executes the application code in the Initialize Entry Point for the component (identified\n   * by given bridge) for the purposes of testing.\n   *\n   * Precondition: testInit() has been called prior.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n  *\/\n  def testInitialise(bridge: Bridge): Unit = $\n\n  \/**\n   * Executes the application code in the Compute Entry Point for the component (identified\n   * by given bridge) for the purposes of testing.\n   *\n   * Precondition: initTest() has been called prior.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def testCompute(bridge: Bridge): Unit = $\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   *\n   * An analogue to this method does not show up in developer-written unit tests because\n   * the it's invoked behind the scenes by the automatically generated unit test infrastructure\n   * as a postlude to each test.\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = $\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def initSystemTest(scheduler: Scheduler): Unit = $\n\n  \/\/  def executeSystemTest(): Unit = $\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def finalizeSystemTest(): Unit = $\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = $\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = $\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = $\n\n  \/\/ ** Manually added method by JH to support debugging interface\n\n  \/**\n   * Returns the value of an in infrastructure port.\n   *\n   * @param portId the id of the INPUT infrastructure port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeInPortValue(portId: Art.PortId): Option[DataContent] = $\n\n  def observeOutPortVariable(portId: Art.PortId): Option[DataContent] = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtNativeSlang.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.DispatchPropertyProtocol.{Periodic, Sporadic}\nimport org.sireum.S64._\n\nobject ArtSlangMessage {\n  val UNSET_TIME: Art.Time = s64\"-1\"\n}\n\n@datatype class ArtSlangMessage(data: DataContent,\n\n                                srcPortId: Art.PortId,\n                                dstPortId: Option[Art.PortId],\n\n                                \/\/ when putValue was called by producer\n                                putValueTimestamp: Art.Time,\n\n                                \/\/ when sendOutput transferred message from out port var of producer\n                                sendOutputTimestamp: Art.Time,\n\n                                \/\/ when message arrived via transport layer\n                                dstArrivalTimestamp: Art.Time,\n\n                                \/\/ when receiveInput transferred message to in port vars of consumer\n                                receiveInputTimestamp: Art.Time\n                               )\n\nobject ArtNativeSlang {\n\n  var inInfrastructurePorts: Map[Z, ArtSlangMessage] = Map.empty\n  var outInfrastructurePorts: Map[Z, ArtSlangMessage] = Map.empty\n  var inPortVariables: Map[Z, ArtSlangMessage] = Map.empty\n  var outPortVariables: Map[Z, ArtSlangMessage] = Map.empty\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    assert(Art.bridges(bridgeId.toZ).nonEmpty, s\"Bridge ${bridgeId} does not exist\")\n\n    Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n\n        val eventIns = Art.bridges(bridgeId.toZ).get.ports.eventIns\n\n        var hasEvents = F\n        \/\/ transpiler workaround -- doesn't support .exists\n        for (e <- eventIns) {\n          if (inInfrastructurePorts.contains(e.id.toZ)) {\n            hasEvents = T\n          }\n        }\n        return hasEvents\n    }\n  }\n\n  \/\/ transpiler friendly comparator\n  def lt(a: art.UPort, b: art.UPort): B = { \/\/ reverse sort\n    val r: B = (a, b) match {\n      \/\/ sorting function to make prioritized sequence of event port ids\n      \/\/   compare p1 to p2  (p1 represents the port to process earlier, i.e., should have priority)\n      case (p1: UrgentPortProto, p2: UrgentPortProto) =>\n        \/\/ if p1 has a strictly less urgency it comes after p2\n        if (p1.urgency < p2.urgency) F\n        \/\/ if p1 has a strictly greater urgency, it comes before p2\n        else if (p1.urgency > p2.urgency) T\n        \/\/ if p1 and p2 have the same urgency, the ordering is determined by arrival timestamps\n        else inInfrastructurePorts.get(p1.id.toZ).get.dstArrivalTimestamp < inInfrastructurePorts.get(p2.id.toZ).get.dstArrivalTimestamp\n      case (_: UrgentPortProto, _: PortProto) => T \/\/ urgent ports take precedence\n      case (_: PortProto, _: UrgentPortProto) => F \/\/ urgent ports take precedence\n      case (p1: PortProto, p2: PortProto) =>\n        inInfrastructurePorts.get(p1.id.toZ).get.dstArrivalTimestamp < inInfrastructurePorts.get(p2.id.toZ).get.dstArrivalTimestamp\n    }\n    return r\n  }\n\n  \/\/ transpiler friendly sort\n  def sort(ports: ISZ[UPort]): ISZ[UPort] = {\n    def insert(p: UPort, sorted: ISZ[UPort]): ISZ[UPort] = {\n      if (sorted.isEmpty) {\n        return ISZ[UPort](p)\n      }\n      else {\n        if (lt(sorted(0), p)) {\n          return sorted(0) +: insert(p, ops.ISZOps(sorted).tail)\n        }\n        else {\n          return p +: sorted\n        }\n      }\n    }\n\n    if (ports.isEmpty) {\n      return ports\n    }\n    else {\n      val sorted = sort(ops.ISZOps(ports).tail)\n      return insert(ports(0), sorted)\n    }\n  }\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val ret: DispatchStatus = Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case Periodic(_) => TimeTriggered()\n      case Sporadic(_) =>\n        \/\/ get ids for non-empty input event ports\n        val uports: ISZ[UPort] =\n          for (p <- Art.bridges(bridgeId.toZ).get.ports.eventIns if inInfrastructurePorts.get(p.id.toZ).nonEmpty) yield p\n\n        if (uports.isEmpty) {\n          halt(s\"Unexpected: shouldDispatch() should have returned true in order to get here, however the incoming event ports are empty for bridge id ${bridgeId}\")\n        }\n\n        val urgentFifo = sort(uports)\n        EventTriggered(for (p <- urgentFifo) yield p.id)\n    }\n    return ret\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ remove any old events from previous dispatch\n    for (portId <- eventPortIds if inPortVariables.contains(portId.toZ)) {\n      inPortVariables = inPortVariables - ((portId.toZ, inPortVariables.get(portId.toZ).get))\n    }\n\n    \/\/ transfer received data\/events from the infrastructure ports to the port variables\n    for (portId <- eventPortIds) {\n      inInfrastructurePorts.get(portId.toZ) match {\n        case Some(data) =>\n          inInfrastructurePorts = inInfrastructurePorts - ((portId.toZ, data))\n          inPortVariables = inPortVariables + (portId.toZ ~> data(receiveInputTimestamp = Art.time()))\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      inInfrastructurePorts.get(portId.toZ) match {\n        case Some(data) =>\n          inPortVariables = inPortVariables + (portId.toZ ~> data)\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    \/\/ wrap the Art.DataContent value into an ArtMessage with time stamps\n    outPortVariables = outPortVariables + (portId.toZ ~>\n      ArtSlangMessage(data = data, srcPortId = portId, putValueTimestamp = Art.time(),\n        dstPortId = None(), sendOutputTimestamp = ArtSlangMessage.UNSET_TIME, dstArrivalTimestamp = ArtSlangMessage.UNSET_TIME, receiveInputTimestamp = ArtSlangMessage.UNSET_TIME))\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ To return the value of the port to the application code, project\n    \/\/ out the actual payload value (v.data) from ArtMessage (which includes timestamps, etc.)\n    \/\/ to Art.DataContent (the \"top\"\/union data type supported by Art.\n    \/\/ The projecting preserves the option of structure of ArtMessage value.\n    if (inPortVariables.contains(portId.toZ)) {\n      return Some(inPortVariables.get(portId.toZ).get.data)\n    } else {\n      return None()\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      outPortVariables.get(srcPortId.toZ) match {\n        case Some(msg) => {\n\n          \/\/ move payload from out port port variables to the out infrastructure ports\n          outInfrastructurePorts = outInfrastructurePorts + (srcPortId.toZ ~> msg)\n          outPortVariables = outPortVariables - ((srcPortId.toZ, msg))\n\n          \/\/ simulate sending msg via transport middleware\n          for (dstPortId <- Art.connections(srcPortId)) {\n            val _msg = msg(dstPortId = Some(dstPortId), sendOutputTimestamp = Art.time())\n\n            \/\/ send via middleware\n\n            inInfrastructurePorts = inInfrastructurePorts + (dstPortId.toZ ~>\n              _msg(dstArrivalTimestamp = Art.time()))\n          }\n\n          \/\/ payload delivered so remove it from out infrastructure port\n          outInfrastructurePorts = outInfrastructurePorts - ((srcPortId.toZ, msg))\n        }\n        case _ =>\n      }\n    }\n    \/\/ could clear outPortVariables for passed in portids but not strictly necessary\n  }\n\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n\n  def setUpSystemState(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n  def tearDownSystemState(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n\n  def initializePhase(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n  def computePhase(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n  def finalizePhase(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n\n  def time(): Art.Time = {\n    return Process.time()\n  }\n}\n\n@ext(name = \"art.ArtNative_Ext\") object Process {\n  def time(): Art.Time = $\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtNative_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.DispatchPropertyProtocol.{Periodic, Sporadic}\nimport art.scheduling.Scheduler\nimport org.sireum.S64._\nimport scala.collection.mutable.{Map => MMap}\n\nobject ArtMessage {\n  val UNSET_TIME: Art.Time = s64\"-1\"\n}\n\ncase class ArtMessage(data: DataContent,\n\n                      var srcPortId: Option[Art.PortId] = None(),\n                      var dstPortId: Option[Art.PortId] = None(),\n\n                      \/\/ when putValue was called by producer\n                      var putValueTimestamp: Art.Time = ArtMessage.UNSET_TIME,\n\n                      \/\/ when sendOutput transferred message from out port var of producer\n                      var sendOutputTimestamp: Art.Time = ArtMessage.UNSET_TIME,\n\n                      \/\/ when message arrived via transport layer\n                      var dstArrivalTimestamp: Art.Time = ArtMessage.UNSET_TIME,\n\n                      \/\/ when receiveInput transferred message to in port vars of consumer\n                      var receiveInputTimestamp: Art.Time = ArtMessage.UNSET_TIME\n                     )\n\nobject ArtNative_Ext {\n  val noTime: Art.Time = s64\"0\"\n\n  val slowdown: Z = 1\n\n  \/\/================================================================\n  \/\/   A r c h i t e c t u r e     D e s c r i p t i o n\n  \/\/================================================================\n\n  \/\/ Architecture description includes any data structures built from Arch information\n  \/\/ to support system execution (i.e., by making certain types of lookup of Arch\n  \/\/ information easier).   This information persists across runs, i.e., it doesn't\n  \/\/ need to be changed between different runs of the system as long as the architecture\n  \/\/ has not changed.\n\n  \/\/ JH: Refactored - moved out of legacy run method to enable separate\n  \/\/ init\/compute\/finalize phase methods.\n  \/\/    This structure is essentially a helper for accessing the Arch description.\n  \/\/    We should study the Arch description to assess (more systematically)\n  \/\/    what types of helpers are needed and where they would go.\n  \/*\n  var activeBridges: IS[Art.BridgeId, Art.BridgeId] = ISZ()\n  def setUpArchitecture() : Unit = {\n    for(e <- Art.bridges.elements if(e.nonEmpty)) {\n      activeBridges = activeBridges :+ e.get.id\n    }\n  }\n  def tearDownArchitecture() : Unit = {\n    activeBridges = IS[Art.BridgeId, Art.BridgeId]()\n  }\n  *\/\n\n  \/\/================================================================\n  \/\/   P l a t f o r m     S t a t e\n  \/\/================================================================\n\n  \/\/ Architecture description includes any infrastructure necessary to\n  \/\/ support the platform including communication instrastructure and\n  \/\/ other resources that may exist across multiple executions\n\n  \/*\n  def setUpPlatform() : Unit = {\n  }\n  def tearDownPlatform() : Unit = {\n  }\n  *\/\n\n  \/\/================================================================\n  \/\/   S y s t e m     S t a t e\n  \/\/================================================================\n\n  val inInfrastructurePorts: MMap[Z, ArtMessage] = concMap()\n  val outInfrastructurePorts: MMap[Z, ArtMessage] = concMap()\n  val inPortVariables: MMap[Z, ArtMessage] = concMap()\n  val outPortVariables: MMap[Z, ArtMessage] = concMap()\n\n\n  \/\/ Initializes system state in preparation for execution of initialize, compute, and finalize phases\n  \/\/ System state includes any state associated with system execution, e.g., things that would need to be\n  \/\/ set up and cleared between runs, but does not include things related to system architecture or platform\n  \/\/ infrastructure that could persist between runs.\n\n  def setUpSystemState(): Unit = {\n    inInfrastructurePorts.clear()\n    inPortVariables.clear()\n    outPortVariables.clear()\n    outInfrastructurePorts.clear()\n\n    \/\/ cancel pending ArtTimer callbacks (also done after a test completes)\n    ArtTimer_Ext.scheduledCallbacks.keys.foreach(ArtTimer_Ext.cancel)\n\n    \/\/scheduler.initialize()\n  }\n\n  def tearDownSystemState(): Unit = {\n    inInfrastructurePorts.clear()\n    inPortVariables.clear()\n    outPortVariables.clear()\n    outInfrastructurePorts.clear()\n\n    \/\/ cancel pending ArtTimer callbacks (also done after a test completes)\n    ArtTimer_Ext.scheduledCallbacks.keys.foreach(ArtTimer_Ext.cancel)\n  }\n\n\n  \/\/===============================================================================\n  \/\/  Port-related AADL run-time services\n  \/\/===============================================================================\n\n  \/\/ JH: Refactored -- renamed port data structures\n  \/\/ TODO -- Consider whether changing the value from ArtMessage to Art.DataContent should happen here (instead of in getValue)\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ remove any old events from previous dispatch\n    for (portId <- eventPortIds if inPortVariables.contains(portId.toZ)) {\n      inPortVariables -= portId.toZ\n    }\n\n    \/\/ transfer received data\/events from the infrastructure ports to the port variables\n    for (portId <- eventPortIds) {\n      inInfrastructurePorts.get(portId.toZ) match {\n        case scala.Some(data) =>\n          inInfrastructurePorts -= portId.toZ \/\/ dequeue from infrastructure port\n          inPortVariables(portId.toZ) = data \/\/ when we shift to queue size greater than 1, we would enqueue here\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      inInfrastructurePorts.get(portId.toZ) match {\n        case scala.Some(data) =>\n          \/\/ for data ports, we don't dequeue from infrastastructure ports\n          inPortVariables(portId.toZ) = data\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    \/\/ wrap the Art.DataContent value into an ArtMessage with time stamps\n    outPortVariables(portId.toZ) = ArtMessage(data = data, srcPortId = Some(portId), putValueTimestamp = Art.time())\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ To return the value of the port to the application code, project\n    \/\/ out the actual payload value (v.data) from ArtMessage (which includes timestamps, etc.)\n    \/\/ to Art.DataContent (the \"top\"\/union data type supported by Art.\n    \/\/ The projecting preserves the option of structure of ArtMessage value.\n    val data = inPortVariables.get(portId.toZ) match {\n      case scala.Some(v) => org.sireum.Some(v.data)\n      case _ => org.sireum.None[DataContent]()\n    }\n    return data\n  }\n\n  \/\/ JH: Refactored\n  \/\/      - change names of port data structures\n  \/\/      - introduce a distinction between output port variables and output infrastructure ports\n  \/\/ ToDo: Introduce the concept of a distinct transfer method.\n  \/\/  The way that implementation treats outPortVariables and outInfrastructurePorts is almost nonsensical\n  \/\/  until that refactoring is made.\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      outPortVariables.get(srcPortId.toZ) match {\n        case scala.Some(msg) =>\n          \/\/ move payload from out port port variables to the out infrastructure ports\n          outInfrastructurePorts(srcPortId.toZ) = outPortVariables(srcPortId.toZ)\n          outPortVariables -= srcPortId.toZ\n\n          \/\/ simulate sending msg via transport middleware\n          for (dstPortId <- Art.connections(srcPortId).elements) {\n\n            val _msg = msg.copy(dstPortId = Some(dstPortId), sendOutputTimestamp = Art.time())\n\n            Art.port(dstPortId).mode match {\n              \/\/ right now, there is no difference in the logic between data and event ports,\n              \/\/ but keep the code separate for future refactorings\n              case PortMode.DataIn | PortMode.DataOut =>\n                inInfrastructurePorts(dstPortId.toZ) = _msg\n              case PortMode.EventIn | PortMode.EventOut =>\n                inInfrastructurePorts(dstPortId.toZ) = _msg\n            }\n\n            _msg.dstArrivalTimestamp = Art.time()\n\n            ArtDebug_Ext.outputCallback(srcPortId, dstPortId, _msg.data, _msg.dstArrivalTimestamp)\n          }\n\n          \/\/ payload delivered so remove it from out infrastructure port\n          outInfrastructurePorts -= srcPortId.toZ\n        case _ =>\n      }\n    }\n  }\n\n  \/\/ JH: Refactor\n  \/\/ Manually added by JH to support debugging framework\n  \/\/  -- to support being able to see inputs and outputs of a a thread (before\/after compute),\n  \/\/     clearing of output ports is removed from send_output.\n  \/\/  This function is called by scheduler, before calling compute to initialize the\n  \/\/  component port state\n  def clearPortVariables(bridgeId: Art.BridgeId): Unit = {\n    \/\/ val b = Art.bridge(bridgeId) -- refactor\n    \/\/ ToDo: the computation of input\/output port ids should be helper functions in Bridge\n    \/\/ compute inPortIds\n    val inPortIds = Art.bridges(bridgeId.toZ).get.ports.eventIns.elements.map(_.id) ++ Art.bridges(bridgeId.toZ).get.ports.dataIns.elements.map(_.id)\n    \/\/ iterate through inPortIds and clear the value of each corresponding port variable\n    for (portId <- inPortIds) {\n      inPortVariables -= portId.toZ;\n    }\n    \/\/ compute outPortIds\n    val outPortIds = Art.bridges(bridgeId.toZ).get.ports.eventOuts.elements.map(_.id) ++ Art.bridges(bridgeId.toZ).get.ports.dataOuts.elements.map(_.id)\n    \/\/ iterate through outPortIds and clear the value of each corresponding port variable\n    for (portId <- outPortIds) {\n      outPortVariables -= portId.toZ\n    }\n  }\n\n  \/\/===============================================================================\n  \/\/  HAMR Library Services\n  \/\/===============================================================================\n\n  def logInfo(title: String, msg: String): Unit = log(\"info\", title, msg)\n\n  def logError(title: String, msg: String): Unit = log(\"error\", title, msg)\n\n  def logDebug(title: String, msg: String): Unit = log(\"debug\", title, msg)\n\n  def time(): Art.Time = toS64(System.currentTimeMillis())\n\n  \/\/===============================================================================\n  \/\/  AADL Thread\/Scheduling services\n  \/\/===============================================================================\n\n  \/\/ JH: Refactor to match logic in semantics, group with dispatch status\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    assert(Art.bridges(bridgeId.toZ).nonEmpty, s\"Bridge ${bridgeId} does not exist\")\n\n    Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        return Art.bridges(bridgeId.toZ).get.ports.eventIns.elements.exists(\n          port => inInfrastructurePorts.contains(port.id.toZ))\n    }\n  }\n\n  \/\/ JH: Refactored -- renamed port data structures\n  \/\/     ToDo: add comments justifying various sections of the logic by reference to standard clauses\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val ret: DispatchStatus = Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case Periodic(_) => TimeTriggered()\n      case Sporadic(_) =>\n        \/\/ get ids for non-empty input event ports\n        val portIds = ISZ[Art.PortId](Art.bridges(bridgeId.toZ).get.ports.eventIns.map((u: UPort) => u.id).elements.filter((i: Art.PortId) => inInfrastructurePorts.get(i.toZ).nonEmpty): _*)\n        val urgentFifo: Seq[Art.PortId] = portIds.map((pid: Art.PortId) => Art.port(pid)).elements.sortWith { \/\/ reverse sort\n          \/\/ sorting function to make prioritized sequence of event port ids\n          \/\/   compare p1 to p2  (p1 represents the port to process earlier, i.e., should have priority)\n          case (p1: UrgentPort[_], p2: UrgentPort[_]) => Z\n            \/\/ if p1 has a strictly less urgency it comes after p2\n            if (p1.urgency < p2.urgency) F\n            \/\/ if p1 has a strictly greater urgency, it comes before p2\n            else if (p1.urgency > p2.urgency) T\n            \/\/ if p1 and p2 have the same urgency, the ordering is determined by arrival timestamps\n            else inInfrastructurePorts(p1.id.toZ).dstArrivalTimestamp < inInfrastructurePorts(p2.id.toZ).dstArrivalTimestamp\n          case (_: UrgentPort[_], _: Port[_]) => T \/\/ urgent ports take precedence\n          case (_: Port[_], _: UrgentPort[_]) => F \/\/ urgent ports take precedence\n          case (p1: Port[_], p2: Port[_]) =>\n            inInfrastructurePorts(p1.id.toZ).dstArrivalTimestamp < inInfrastructurePorts(p2.id.toZ).dstArrivalTimestamp\n        }.map(_.id)\n        EventTriggered(ISZ[Art.PortId](urgentFifo: _*))\n    }\n    return ret\n  }\n\n  \/\/===============================================================================\n  \/\/  AADL Execution Phases\n  \/\/\n  \/\/   Note: this could be synchronized a bit more with thread states \/ hybrid automata\n  \/\/   in AADL standard\n  \/\/===============================================================================\n\n  def initializePhase(): Unit = {\n    logInfo(Art.logTitle, s\"Initializing component...\")\n  }\n\n  def computePhase(): Unit = {\n    logInfo(Art.logTitle, s\"Begin execution...\")\n  }\n\n  def finalizePhase(): Unit = {\n    logInfo(Art.logTitle, s\"End execution...\")\n\n    ArtTimer_Ext.finalise()\n  }\n\n  def log(kind: String, title: String, msg: String): Unit = {\n    Console.out.println(st\"\"\"{ \"log\" : \"$kind\", \"title\" : ${Json.Printer.printString(title)}, \"msg\" : ${Json.Printer.printString(msg)}, \"time\" : \"${time()}\" }\"\"\".render)\n    Console.out.flush()\n  }\n\n  def toS64(value: Long): S64 = S64(value)\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n\n\n\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Sets up the state of a thread component (identified by bridge) for the purpose of\n   * testing.\n   *\n   * An analogue to this method does not show up in developer-written unit tests because\n   * it's invoked behind the scenes by the automatically generated unit test infrastructure\n   * as a prelude to each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ delete ALL port values\n    inInfrastructurePorts.clear()\n    inPortVariables.clear()\n    outPortVariables.clear()\n    outInfrastructurePorts.clear()\n\n    \/\/ cancel pending ArtTimer callbacks (also done after a test completes)\n    ArtTimer_Ext.scheduledCallbacks.keys.foreach(ArtTimer_Ext.cancel)\n\n    bridge.entryPoints.testInitialise()\n    logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n  }\n\n  \/**\n   * Executes the application code in the Initialize Entry Point for the component (identified\n   * by given bridge) for the purposes of testing.  This is achieved by\n   * calling the testInitialise() method on given bridge.\n   *\n   * Precondition: initTest() has been called prior.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def testInitialise(bridge: Bridge): Unit = {\n    bridge.entryPoints.testInitialise()\n  }\n\n  \/**\n   * Executes the application code in the Compute Entry Point for the component (identified\n   * by given bridge) for the purposes of testing.  This is achieved by\n   * calling the testCompute() method on given bridge.\n   *\n   * Precondition: initTest() has been called prior.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def testCompute(bridge: Bridge): Unit = {\n    bridge.entryPoints.testCompute()\n  }\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.finalise()\n    logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n\n    \/\/ cancel pending ArtTimer callbacks (also done before a test begins)\n    ArtTimer_Ext.scheduledCallbacks.keys.foreach(ArtTimer_Ext.cancel)\n  }\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def initSystemTest(scheduler: Scheduler): Unit = {\n    Art.setUpArchitecture()\n    Art.setUpPlatform()\n    Art.setUpSystemState(scheduler)\n    logInfo(Art.logTitle, s\"Initialized system for system test\")\n  }\n\n  \/\/  def executeSystemTest(): Unit = $\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def finalizeSystemTest(): Unit = {\n    Art.tearDownSystemState()\n    Art.tearDownPlatform()\n    Art.tearDownArchitecture()\n  }\n\n  \/\/ JH: Refactor\n  \/\/  Add code to address the fact that out port variables are now distinct from\n  \/\/  out infrastructure ports,  i.e., we must copy from out port variables to\n  \/\/  out infrastructure ports\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in\n   * its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ testing SEND_OUTPUT\n    \/\/ note: sendOutput is usually accessed via:\n    \/\/   Art.sendOutput -> ArtNative.sendOutput -> ArtNative_Ext.sendOutput\n    \/\/JH added:\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      outPortVariables.get(srcPortId.toZ) match {\n        case scala.Some(msg) =>\n          outInfrastructurePorts(srcPortId.toZ) = outPortVariables(srcPortId.toZ)\n        case _ =>\n      }\n    }\n  }\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be\n   * used by users to manually clear the output if desired. This is useful for\n   * tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = {\n    outPortVariables.clear()\n  }\n\n  \/\/ JH: Refactor\n  \/\/ ToDo: Rename the functions below to align with the variable names inInfrastructurePort, etc.\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally\n   * this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInPortValue(dstPortId: Art.PortId, data: DataContent): Unit = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    val artMessage = ArtMessage(data = data, dstPortId = Some(dstPortId), dstArrivalTimestamp = Art.time())\n    \/\/ note: right now, there is no difference in the logic between data and event ports, but keep the\n    \/\/ logic separate for future refactoring\n    Art.port(dstPortId).mode match {\n      case PortMode.DataIn | PortMode.DataOut =>\n        inInfrastructurePorts(dstPortId.toZ) = artMessage\n      case PortMode.EventIn | PortMode.EventOut =>\n        inInfrastructurePorts(dstPortId.toZ) = artMessage\n    }\n  }\n\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutPortValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: would be changed when we refactor to support event queues of size > 1\n    outPortVariables.get(portId.toZ) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n\n  \/\/ Manually added method to support debugging framework\n  \/**\n   * Returns the value of an out port.\n   *\n   * @param portId the id of the INPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeInPortValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ right now, with event data port queues limited to size one, there is no difference in the logic\n    \/\/ between how data ports are treated, and how event\/event data ports are treated.\n    Art.port(portId).mode match {\n      case PortMode.DataIn =>\n        inInfrastructurePorts.get(portId.toZ) match {\n          case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n          case scala.None => org.sireum.None[DataContent]()\n        }\n      case PortMode.EventIn =>\n        inInfrastructurePorts.get(portId.toZ) match {\n          case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n          case scala.None => org.sireum.None[DataContent]()\n        }\n      case _ => {\n        assert(false, \"expecting in port\")\n        org.sireum.None[DataContent]()\n      }\n    }\n  }\n\n  def observeInPortVariable(portId: Art.PortId): Option[DataContent] = {\n    \/\/ right now, with event data port queues limited to size one, there is no difference in the logic\n    \/\/ between how data ports are treated, and how event\/event data ports are treated.\n    Art.port(portId).mode match {\n      case PortMode.DataIn =>\n        inPortVariables.get(portId.toZ) match {\n          case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n          case scala.None => org.sireum.None[DataContent]()\n        }\n      case PortMode.EventIn =>\n        inPortVariables.get(portId.toZ) match {\n          case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n          case scala.None => org.sireum.None[DataContent]()\n        }\n      case _ => {\n        assert(false, \"expecting in port\")\n        org.sireum.None[DataContent]()\n      }\n    }\n  }\n\n  def observeOutPortVariable(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    outPortVariables.get(portId.toZ) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtTimer.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait TimerCallback {\n  def callback(): Unit\n}\n\n@ext object ArtTimer {\n\n  def schedule(id: String, replaceExisting: B, delay: Art.Time, callback: () => Unit): Unit = $\n\n  \/\/ if transpiling then use this version as transpiler does not support function passing\n  def scheduleTrait(id: String, replaceExisting: B, delay: Art.Time, callback: TimerCallback): Unit = $\n\n  def cancel(id: String): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtTimer_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art\n\nimport org.sireum.S64._\nimport org.sireum.{B, F, String, T}\n\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.util.concurrent.{Executors, TimeUnit}\nimport scala.collection.mutable.{Map => MMap}\n\nobject ArtTimer_Ext {\n\n  protected[art] val scheduledCallbacks: MMap[String, AtomicBoolean] = ArtNative_Ext.concMap()\n  private val executor = Executors.newSingleThreadScheduledExecutor()\n\n  def finalise(): Unit = {\n    executor.shutdownNow()\n    ArtNative.logInfo(Art.logTitle, \"Finalized ArtTimer\")\n  }\n\n  def cancel(id: String): Unit = {\n    scheduledCallbacks.get(id) match {\n      case Some(b) =>\n        val userRequested = b.get()\n        b.set(F)\n        scheduledCallbacks.remove(id)\n        if (userRequested) {\n          ArtNative.logInfo(Art.logTitle, s\"Callback cleared for $id\")\n        }\n      case _ =>\n    }\n  }\n\n  def scheduleTrait(id: String, replaceExisting: B, delay: Art.Time, callback: TimerCallback): Unit = {\n    schedule(id, replaceExisting, delay, callback.callback _)\n  }\n\n  def schedule(id: String, replaceExisting: B, delay: Art.Time, callback: () => Unit): Unit = {\n    if (scheduledCallbacks.get(id).nonEmpty) {\n      if (!replaceExisting) {\n        ArtNative.logInfo(Art.logTitle, s\"Callback already scheduled for $id\")\n        return\n      } else {\n        cancel(id)\n      }\n    }\n\n    if (delay < s64\"0\") {\n      ArtNative.logInfo(Art.logTitle, s\"Invalid delay time: ${delay}.  Value must be non-negative.\")\n      return\n    }\n\n    val shouldInvokeCallback = new AtomicBoolean(T)\n\n    val task = new Runnable {\n      override def run(): Unit = {\n        if (shouldInvokeCallback.get()) {\n          shouldInvokeCallback.set(F)\n          cancel(id)\n\n          callback()\n        }\n      }\n    }\n\n    scheduledCallbacks.put(id, shouldInvokeCallback)\n\n    val adjusted = delay.toMP.toLong * ArtNative_Ext.slowdown.toMP.toLong\n    executor.schedule(task, adjusted, TimeUnit.MILLISECONDS)\n\n    ArtNative.logInfo(Art.logTitle, s\"Callback scheduled for $id\")\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/DataContent.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait DataContent\n\n@datatype class Empty extends art.DataContent",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/Scheduler.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling\n\nimport org.sireum._\n\n\/\/ msig to allow schedulers to have mutable state\n@msig trait Scheduler {\n\n  def initialize(): Unit\n\n  def initializationPhase(): Unit\n\n  def computePhase(): Unit\n\n  def finalizePhase(): Unit\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/legacy\/Legacy.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.legacy\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.Scheduler\n\n@record class Legacy(bridges: IS[Art.BridgeId, art.Bridge]) extends Scheduler {\n\n  override def initialize(): Unit = {}\n\n  override def initializationPhase(): Unit = {\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      Art.logInfo(bridge.id, s\"Initialized bridge: ${bridge.name}\")\n    }\n  }\n\n  override def computePhase(): Unit = {\n    LegacyInterface.computePhase(bridges)\n  }\n\n  override def finalizePhase(): Unit = {\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      Art.logInfo(bridge.id, s\"Finalized bridge: ${bridge.name}\")\n    }\n  }\n}\n\n@ext object LegacyInterface {\n  def computePhase(bridges: IS[Art.BridgeId, art.Bridge]): Unit = $\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/legacy\/LegacyInterface_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art.scheduling.legacy\n\nimport art.{Art, ArtNative, ArtNative_Ext, DispatchPropertyProtocol}\nimport scala.collection.mutable.{Map => MMap}\nimport org.sireum._\n\nobject LegacyInterface_Ext {\n  val slowdown: Z = 1\n\n  def computePhase(bridges: IS[Art.BridgeId, art.Bridge]): Unit = {\n    var terminated = false\n    var numTerminated: Z = 0\n\n    for (bridge <- bridges) {\n\n      val (rate, isSporadic) = bridge.dispatchProtocol match {\n        case DispatchPropertyProtocol.Periodic(period) => (period, F)\n        case DispatchPropertyProtocol.Sporadic(min) => (min, T)\n      }\n\n      new Thread(() => {\n        ArtNative.logInfo(Art.logTitle, s\"Thread for ${bridge.name} instantiated.\")\n        ArtNative_Ext.synchronized {\n          ArtNative_Ext.wait()\n        }\n        while (!terminated) {\n          Thread.sleep((rate * slowdown).toMP.toLong)\n          if (ArtNative.shouldDispatch(bridge.id)) {\n            try {\n              bridge.synchronized {\n                bridge.entryPoints.compute()\n              }\n            }\n            catch {\n              case x: Throwable =>\n                x.printStackTrace()\n                terminated = true\n            }\n          }\n        }\n        ArtNative_Ext.synchronized {\n          numTerminated += 1\n        }\n      }).start()\n    }\n\n    Thread.sleep(1000)\n\n    ArtNative.logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    ArtNative_Ext.synchronized {\n      ArtNative_Ext.notifyAll()\n    }\n\n    Console.in.readLine()\n    terminated = true\n\n    while (numTerminated != bridges.size) {\n      Thread.sleep(1000)\n    }\n  }\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/nop\/NopScheduler.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.nop\n\nimport org.sireum._\nimport art.scheduling.Scheduler\n\n@record class NopScheduler extends Scheduler {\n\n  override def initialize(): Unit = {}\n\n  override def initializationPhase(): Unit = {}\n\n  override def computePhase(): Unit = {}\n\n  override def finalizePhase(): Unit = {}\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/roundrobin\/RoundRobin.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage art.scheduling.roundrobin\n\nimport org.sireum._\nimport art.scheduling.Scheduler\nimport art.{Art, ArtNative, DispatchPropertyProtocol}\nimport org.sireum.S64._\n\n@record class RoundRobin(schedule: ISZ[Art.BridgeId]) extends Scheduler {\n\n  var lastDispatch: MS[Art.BridgeId, Art.Time] = MS.create[Art.BridgeId, Art.Time](schedule.size, s64\"0\")\n  var lastSporadic: MS[Art.BridgeId, Art.Time] = MS.create[Art.BridgeId, Art.Time](schedule.size, s64\"0\")\n\n  override def initialize(): Unit = {\n    RoundRobinExtensions.init()\n  }\n\n  override def initializationPhase(): Unit = {\n    for (bridgeId <- schedule) {\n      Art.bridges(bridgeId.toZ).get.entryPoints.initialise()\n      Art.logInfo(bridgeId, s\"Initialized bridge: ${Art.bridges(bridgeId.toZ).get.name}\")\n    }\n  }\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        if (Art.time() - lastDispatch(bridgeId) > conversions.Z.toS64(period)) {\n          return ArtNative.shouldDispatch(bridgeId) \/\/ will always return true\n        } else {\n          return F\n        }\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        if (Art.time() - lastSporadic(bridgeId) < conversions.Z.toS64(minRate)) {\n          return F\n        } else {\n          \/\/ check if there are events waiting in incoming infrastructure port\n          return ArtNative.shouldDispatch(bridgeId)\n        }\n    }\n  }\n\n  override def computePhase(): Unit = {\n    while (!RoundRobinExtensions.shouldStop()) {\n      for (bridgeId <- schedule) {\n        if (shouldDispatch(bridgeId)) {\n          lastDispatch(bridgeId) = Art.time()\n          Art.bridges(bridgeId.toZ).get.entryPoints.compute()\n\n          if (Art.bridges(bridgeId.toZ).get.dispatchProtocol.isInstanceOf[DispatchPropertyProtocol.Sporadic]) {\n            lastSporadic(bridgeId) = Art.time()\n          }\n        }\n      }\n    }\n  }\n\n  override def finalizePhase(): Unit = {\n    for (bridgeId <- schedule) {\n      Art.bridges(bridgeId.toZ).get.entryPoints.finalise()\n      Art.logInfo(bridgeId, s\"Finalized bridge: ${Art.bridges(bridgeId.toZ).get.name}\")\n    }\n  }\n}\n\n@ext object RoundRobinExtensions {\n  def init(): Unit = $\n\n  def shouldStop(): B = $\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/roundrobin\/RoundRobinExtensions_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art.scheduling.roundrobin\n\nimport art.{Art, ArtNative}\nimport org.sireum.B\nimport java.util.concurrent.atomic.AtomicBoolean\n\nobject RoundRobinExtensions_Ext {\n  var terminated = new AtomicBoolean(false)\n\n  def init(): Unit = {\n    ArtNative.logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    new Thread(() => {\n      Console.in.readLine()\n      terminated.set(true)\n    }).start()\n  }\n\n  def shouldStop(): B = {\n    return terminated.get()\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/Explorer.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.{Art, ArtNative}\nimport art.scheduling.static.Schedule._\n\n\/\/ Possible commands\/concepts\n\/\/\n\/\/ init system\n\/\/ s n - step n slots; n >= 1, if n >= remaining slots in hyper-period, then run to end of hyper-period\n\/\/ h n - step n hyper-periods; n >= 1\n\/\/ executing info display mode\n\/\/  show domain \/ bridge\n\/\/  show infrastructure input \/ output ports\n\/\/  show in\/out ports for selected components\n\/\/  inject certain values on input ports (random, specific, random with constraints, generator, seeded from test vector)\n\/\/ run until various conditions\n\/\/ check contract \/ constraint (component-wise or global)\n\/\/ checkpoint state, rollback to checkpointed state\n\/\/ save step as unit tests\n\/\/ calculate dependences during execution\n\n\n\/\/ stepDSchedule(2,dScheduleSpec1)\n\n\/\/ var inpt: Z = 0\n\/\/ inpt = readInt()\n\nobject Explorer {\n\n  \/\/================ schedule state ====================\n\n  \/\/ data structure for schedule state\n  \/\/   - zero-based indexing into the time-line of the scheduler\n  @datatype class ScheduleState(slotNum: Z, hyperperiodNum: Z)\n\n  \/\/ \"invariant\" for schedule state\n  def validState(state: ScheduleState, dScheduleSpec: DScheduleSpec) : B = {\n    val slotNum = state.slotNum\n    \/\/ TODO: also check valid scheduleSpec??\n    val slotInRange: B = slotNum >= 0 & slotNum < dScheduleSpec.schedule.slots.size\n    val hyperperiodInRange: B = state.hyperperiodNum >= 0\n    return  slotInRange & hyperperiodInRange\n  }\n\n  def isHyperPeriodBoundary(state: ScheduleState): B = {\n    return state.slotNum == 0\n  }\n\n  \/\/ no overloading in Slang\n  \/\/def isHyperPeriodBoundary(): B = {\n  \/\/  return isHyperPeriodBoundary(scheduleState)\n  \/\/}\n\n  \/\/ schedule state \"global\" variable\n  var scheduleState : ScheduleState = initialScheduleState()\n\n  \/\/ helper method to define initial state value\n  def initialScheduleState(): ScheduleState = {\n    return ScheduleState(0,0)\n  }\n\n  \/\/ method to initialize schedule state\n  def initializeScheduleStateIMP(): Unit = {\n    scheduleState = initialScheduleState()\n  }\n\n  def isInitial(scheduleState: ScheduleState): B = {\n    return scheduleState == initialScheduleState()\n  }\n\n  def isInitialIMP(): B = {\n    return isInitial(scheduleState)\n  }\n\n  \/\/=============== stepping functions ===================\n\n  \/\/ -- methods for executing thread in a particular slot in the schedule.\n  \/\/    A thread can be referenced by slot data structure or by slot number (two different methods)\n\n  \/\/ execute thread by slot data structure\n  def executeSlotIMP(slot: Slot): Unit = {\n    \/\/val domainId: Z = slot.domain\n    \/\/val bridgeId: Art.BridgeId = Schedule.domainToBridgeIdMap(domainId).get\n    val bridgeId: Art.BridgeId = slot.bridgeId\n    \/\/ val bridge: Bridge = Art.bridges(bridgeId).get  -- debug with Robby\n    \/\/ This is cause an Invalid 'None' operation 'get' exception\n    \/\/ Art.clearPortVariables(bridgeId)\n    \/\/ bridge.entryPoints.compute()  -- debug with Robby\n    \/\/ Art.bridges(bridgeId).asInstanceOf[MSome[Bridge]].value.entryPoints.compute()\n    if(ArtNative.shouldDispatch(bridgeId)) {\n      Art.bridges(bridgeId.toZ).get.entryPoints.compute()\n    }\n  }\n\n  \/\/ execute thread by slot number\n  def executeSlotNumIMP(slotNum: Z): Unit = {\n    \/\/ pre-condition\n    assert(slotNum >= 0 & slotNum < dScheduleSpec.schedule.slots.size, s\"slotNum: ${slotNum}, Slot Size: ${dScheduleSpec.schedule.slots.size}\")\n    \/\/ body\n    val slots = dScheduleSpec.schedule.slots\n    executeSlotIMP(slots(slotNum))\n  }\n\n  \/\/ -- methods for updating schedule state (these do not actually execute the thread)\n\n  \/\/ purely functional method to compute the next schedule state\n  def nextState(state: ScheduleState,dScheduleSpec: DScheduleSpec): ScheduleState = {\n    \/\/ pre-condition\n    assert(validState(state, dScheduleSpec))\n    \/\/ body\n    val slots = dScheduleSpec.schedule.slots\n    var nextSlotNum = state.slotNum + 1\n    var nextHyperPeriodNum = state.hyperperiodNum\n    \/\/ handle wrap around\n    if (nextSlotNum == slots.size) {\n      nextSlotNum = 0\n      nextHyperPeriodNum = nextHyperPeriodNum + 1\n    }\n    return ScheduleState(nextSlotNum,nextHyperPeriodNum)\n  }\n\n  \/\/ purely functional method to compute the next schedule state\n  def previousState(state: ScheduleState,dScheduleSpec: DScheduleSpec): Option[ScheduleState] = {\n    \/\/ pre-condition\n    assert(validState(state, dScheduleSpec))\n    \/\/ body\n    if (isInitial(state)) {\n      return None()\n    }\n\n    val slots = dScheduleSpec.schedule.slots\n\n    var nextSlotNum = state.slotNum - 1           \/\/ assume for now we don't wrap around\n    var nextHyperPeriodNum = state.hyperperiodNum \/\/ assume for now we stay at same hyper-period\n\n    \/\/ handle wrap around\n    if (state.slotNum == 0) {  \/\/ if current state has initial slot number, then wrap to end\n      nextSlotNum = slots.size - 1  \/\/ set nextSlotNum to last slot number\n      nextHyperPeriodNum = nextHyperPeriodNum - 1 \/\/ this is sound since we already checked that current state is not initial\n    }\n    return Some(ScheduleState(nextSlotNum,nextHyperPeriodNum))\n  }\n\n  \/\/ advance the state to the next schedule slot (side-effecting schedule state)\n  def advanceStateIMP() : Unit = {\n    scheduleState = nextState(scheduleState,dScheduleSpec)\n  }\n\n  def stepSystemOneSlotIMP(info: B): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    \/\/ assert(validDScheduleSpec(dScheduleSpec))\n    assert(validState(scheduleState, dScheduleSpec))\n    \/\/ body\n    \/\/   execute thread in current slot\n    val preScheduleState = scheduleState\n    executeSlotNumIMP(scheduleState.slotNum)\n    \/\/   advance the schedule state\n    advanceStateIMP()\n    val postScheduleState = scheduleState\n    if (info) {\n      halt(\"TODO\")\n      \/\/Cli.showStep(preScheduleState, postScheduleState, dScheduleSpec)\n    }\n  }\n\n  def stepSystemNSlotsIMP(numSlots :Z): Unit = {\n    \/\/ pre-condition\n    assert(numSlots > 0)\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    \/\/ body\n    for (i <- 1 to numSlots) {\n      stepSystemOneSlotIMP(T)\n    }\n  }\n\n  \/\/ Steps the system one hyper-period.\n  \/\/ Does not require the system to be on a hyper-period boundary.\n  \/\/ If state indicates that hyper-period is already in progress, the method will run to the start of the next hyper-period.\n  def stepSystemOneHPIMP(): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    \/\/ var currentSlotNum: Z = scheduleState.slotNum\n    val numStepsToStartOfHP : Z = dScheduleSpec.schedule.slots.size - scheduleState.slotNum\n    stepSystemNSlotsIMP(numStepsToStartOfHP)\n    \/\/ assert that current state is at the beginning of a HP\n    assert(isHyperPeriodBoundary(scheduleState))\n    halt(\"TODO\")\n    \/\/Cli.showHyperPeriodBoundary(scheduleState)\n  }\n\n  \/\/ Steps the system N hyper-periods.\n  \/\/ Make an somewhat arbitrary but rational decision that this method should not be\n  \/\/ called when the system is not on a hyper-period boundary (start of hyper-period)\n  def stepSystemNHPIMP(numHyperPeriods:Z): Unit = {\n    for (hpcount <- 1 to numHyperPeriods) {\n      \/\/ println(\"===== Hyperperiod \", scheduleState.hyperperiodNum, \" ============\")\n      stepSystemOneHPIMP()\n    }\n  }\n\n  \/\/ Runs the system to the start of the given hyper-period number\n  def runToHP(hpNum:Z): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    assert(hpNum >= 0)\n    \/\/ body\n\n    halt(\"TODO\")\n    \/\/Cli.message(s\"...Running to beginning of hyper-period# $hpNum\")\n\n    \/\/while (scheduleState.hyperperiodNum < hpNum) {\n    \/\/  stepSystemOneSlotIMP(F)\n    \/\/}\n    \/\/Cli.message(\"*********** Run to ... Completed *************\")\n    \/\/Cli.showState(scheduleState)\n  }\n\n  \/\/ Runs the system to the start of the given state (hp# and slot#)\n  def runToState(hpNum:Z, slotNum:Z): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    assert(hpNum >= 0)\n    assert(slotNum >= 0 & slotNum < Schedule.dScheduleSpec.schedule.slots.size)\n    \/\/ body\n    halt(\"TODO\")\n    \/*\n    Cli.message(s\"...Running to state [hp = $hpNum, slot = $slotNum]\")\n    while (scheduleState.hyperperiodNum < hpNum) {\n      stepSystemOneSlotIMP(F)\n    }\n    while (scheduleState.slotNum < slotNum) {\n      stepSystemOneSlotIMP(F)\n    }\n    Cli.message(\"*********** Run to ... Completed *************\")\n    Cli.showState(scheduleState)\n     *\/\n  }\n\n  \/\/ Runs the system to the start of the given slot#\n  def runToSlot(slotNum:Z): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    assert(slotNum >= 0 & slotNum < Schedule.dScheduleSpec.schedule.slots.size)\n    \/\/ body\n    while (scheduleState.slotNum != slotNum) {\n      stepSystemOneSlotIMP(F)\n    }\n    halt(\"TODO\")\n    \/*\n    Cli.message(\"*********** Run to ... Completed *************\")\n    Cli.showState(scheduleState)\n     *\/\n  }\n\n  \/\/ Runs the system to the start of the given domain\n  def runToDomain(domainId:Z): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    assert(domainId >= 0 & domainId <= Schedule.dScheduleSpec.maxDomain)\n    \/\/ body\n    halt(\"TODO\")\n    \/*\n    Cli.message(s\"...Running to domain $domainId\")\n    while (Schedule.dScheduleSpec.schedule.slots(scheduleState.slotNum).domain != domainId) {\n      stepSystemOneSlotIMP(F)\n    }\n    Cli.message(\"*********** Run to ... Completed *************\")\n    Cli.showState(scheduleState)\n\n     *\/\n  }\n\n  \/*\n  \/\/ Runs the system to the start of the given domain\n  def runToThread(threadNickName: String): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    val bridgeId = art.StaticScheduling.threadNickNames.get(threadNickName).get \/\/ ToDo: fix error handling\n    val domainId = art.StaticScheduling.bridgeIdToDomainMap(bridgeId)\n    Cli.message(s\"...Running to thread $threadNickName (domain $domainId)\")\n    while (Schedule.dScheduleSpec.schedule.slots(scheduleState.slotNum).domain != domainId) {\n      stepSystemOneSlotIMP(F)\n    }\n    Cli.message(\"*********** Run to ... Completed *************\")\n    Cli.showState(scheduleState)\n  }\n   *\/\n\n  \/\/ Runs the system according to the static schedule without debugging, but still uses the debugging scheduling state\n  def runSystem(): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    \/\/ assert valid schedule\n    \/\/ body\n    \/\/Cli.message (s\"...Running system according to static schedule\")\n    cprintln(F, \"...Running system according to static schedule\")\n    Explorer.initializeScheduleStateIMP()\n    var systemStopCondition: B = false \/\/ right now we don't have a system stop condition\n    while (!systemStopCondition) {\n      executeSlotNumIMP(scheduleState.slotNum)\n      advanceStateIMP()\n      for (i <- 1 to 100000) {\n        None[String]()\n      }\n    }\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/Schedule.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.Art\n\nobject Schedule {\n\n  \/\/ const dschedule_t ksDomSchedule[] = { \/\/ (1 tick == 2ms)\n  \/\/  { .domain = 0, .length = 100 }, \/\/ all other seL4 threads, init, 200ms\n  \/\/  { .domain = 1, .length =   5 }, \/\/ pacer        10ms\n  \/\/  { .domain = 0, .length =  95 }, \/\/ domain0     190ms\n  \/\/  { .domain = 2, .length =   5 }, \/\/ source       10ms\n  \/\/  { .domain = 0, .length =  95 }, \/\/ domain0     190ms\n  \/\/  { .domain = 3, .length =   5 }, \/\/ destination  10ms\n  \/\/  { .domain = 0, .length = 195 }, \/\/ domain0     390ms\n  \/\/ };\n\n  \/\/ const word_t ksDomScheduleLength = sizeof(ksDomSchedule) \/ sizeof(dschedule_t);\n\n  @datatype class DScheduleSpec(maxDomain: Z, \/\/ the highest domain # used\n                                hyperPeriod: Z, \/\/ the hyper period in ticks\n                                schedule: DSchedule)\n\n  \/\/ contract invariants on schedule\n\n  @datatype class DSchedule(slots: ISZ[Slot])\n\n  \/\/ contract invariants on schedule\n\n  @datatype class Slot(bridgeId: Art.BridgeId, length: Z)\n\n  val emptyDScheduleSpec: DScheduleSpec = DScheduleSpec(0, 0, DSchedule(ISZ()))\n\n  \/\/ ---------- schedule structure\n\n  var dScheduleSpec: DScheduleSpec = emptyDScheduleSpec\n  var domainToBridgeIdMap: IS[Art.BridgeId, Art.BridgeId] = IS[Art.BridgeId, Art.BridgeId]()\n\n  def setSchedule(spec: DScheduleSpec, bridgeMap: IS[Art.BridgeId, Art.BridgeId]): Unit = {\n    \/\/ pre-condition -- all structural invariants for the domain schedule hold\n    validDScheduleSpec(spec)\n    \/\/ checking period for each thread requires alignment with model -- cannot check that here -- client should guarantee\n    \/\/ body\n    dScheduleSpec = spec\n    domainToBridgeIdMap = bridgeMap\n    \/\/\n    \/\/ Technically, after this point, the schedule is \"frozen\" and we should have to check the invariant properties on the\n    \/\/ schedule again.\n  }\n\n  \/\/ --------- helper method for accessing schedule info\n\n  def getBridgeIdFromSlot(slot: Slot): Art.BridgeId = {\n    \/\/val domainId = slot.domain\n    \/\/val bridgeId = domainToBridgeIdMap(domainId).get\n    val bridgeId = slot.bridgeId\n    return bridgeId\n  }\n\n  def getBridgeIdFromSlotNumber(slotNum: Z): Art.BridgeId = {\n    val slot: Slot = dScheduleSpec.schedule.slots(slotNum)\n    return getBridgeIdFromSlot(slot)\n  }\n\n  def getBridgeId(scheduleState: Explorer.ScheduleState): Art.BridgeId = {\n    return getBridgeIdFromSlotNumber(scheduleState.slotNum)\n  }\n\n  \/\/def getDomain(slotNum: Z): Z = {\n  \/\/  val slot: Slot = dScheduleSpec.schedule.slots(slotNum)\n  \/\/  return slot.domain\n  \/\/}\n\n  \/\/def getDomain(scheduleState : Explorer.ScheduleState): Z = {\n  \/\/   return getDomain(scheduleState.slotNum)\n  \/\/}\n\n  def threadNickName(bridgeId: Art.BridgeId): String = {\n    halt(\"TODO\")\n    \/*\n    for (e <- StaticScheduling.threadNickNames.entries) {\n      if (e._2 == bridgeId) {\n        return e._1\n      }\n    }\n    return \"<not found>\"\n     *\/\n  }\n\n  def threadNickNameFromScheduleState(scheduleState: Explorer.ScheduleState): String = {\n    val bridgeId = Schedule.getBridgeIdFromSlotNumber(scheduleState.slotNum)\n    return threadNickName(bridgeId)\n  }\n\n  \/\/ --------- helper methods for contracts -------------\n\n  def mySome[T](isz: ISZ[T], pred: T => B): B = {\n    for (e <- isz) {\n      if (pred(e)) {\n        return true\n      }\n    }\n    return false\n  }\n\n  def myAll[T](isz: ISZ[T], pred: T => B): B = {\n    for (e <- isz) {\n      if (!pred(e)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  \/\/ ------------- contract invariants on schedule -------------\n\n  \/\/ aggregate invariant on static schedule\n  def validDScheduleSpec(dScheduleSpec: DScheduleSpec): B = {\n    return checkMaxDomain(dScheduleSpec) &&\n      checkNoMissingDomain(dScheduleSpec) &&\n      checkHyperPeriodTicks(dScheduleSpec)\n  }\n\n  \/\/ Invariant: no domain id referenced in a slot exceeds the specified max domain\n  def checkMaxDomain(dScheduleSpec: DScheduleSpec): B = {\n    halt(\"TODO\")\n    \/\/myAll[Slot](dScheduleSpec.schedule.slots, s => s.domain <= dScheduleSpec.maxDomain)\n    \/\/  for (s <- dScheduleSpec.schedule.slots) {\n    \/\/    if (s.domain > dScheduleSpec.maxDomain) {\n    \/\/      return false\n    \/\/    }\n    \/\/  }\n    \/\/  return true\n  }\n\n  \/\/ Invariant: every domain 0 .. maxDomain is referenced by at least one slot\n  def checkNoMissingDomain(dScheduleSpec: DScheduleSpec): B = {\n    halt(\"TODO\")\n    \/*\n    for (d <- 0 to dScheduleSpec.maxDomain) {\n      if (!mySome[Slot](dScheduleSpec.schedule.slots, s => s.domain == d)) {\n        return false\n      }\n    }\n    return true\n\n     *\/\n  }\n\n  \/\/ Invariant: the total time (in ticks) across all slots matches the specified hyper-period\n  def checkHyperPeriodTicks(dScheduleSpec: DScheduleSpec): B = {\n    var computedHyperPeriod: Z = 0\n    for (s <- dScheduleSpec.schedule.slots) {\n      computedHyperPeriod = computedHyperPeriod + s.length\n    }\n    return (computedHyperPeriod == dScheduleSpec.hyperPeriod)\n  }\n\n\n  \/\/ add Clock period\n\n  \/\/ This property is not an invariant per se, but rather a consistency property between the model-specified\n  \/\/ thread periods and the implied periods in the static schedule.  Thus, this property is omitted from the\n  \/\/ structural invariant on the static schedule.\n  \/\/\n  \/\/ Model-consistency: for a given domain, the period implied by the schedule (calculated period) matches\n  \/\/ the period (parameter) specified in the model\n  \/*\n   * @param domain identifier of domain to be checked\n   * @param period specified period of domain in ticks\n   * @param dScheduleSpec static schedule\n   *\/\n  def checkPeriodTicks(domain: Z, period: Z, dScheduleSpec: DScheduleSpec): B = {\n    halt(\"TODO\")\n    \/*\n    var computedPeriod: Z = 0 \/\/ computed period in ticks\n    var computedTicksBeforeOccurrence: Z = 0\n    \/\/ number of ticks before first occurrence\n    \/\/ used to determine period, when periods \"wraps around\" the schedule\n    var occurrence: Z = 0 \/\/ how many times has domain occurred so far in schedule\n\n    for (s <- dScheduleSpec.schedule.slots) {\n      \/\/ println(occurrence, \", \", computedTicksBeforeOccurrence, \", \", computedPeriod)\n      if (s.domain == domain) { \/\/ if we are at a slot for the domain in the schedule\n        \/\/ if this is not the first occurrence, then we have computed the time (in ticks)\n        \/\/ since the last occurrence, so compare computed period to specified period\n        if (occurrence > 0) {\n          if (computedPeriod != period) {\n            return false\n          }\n        }\n        \/\/ at all occurrences (first or otherwise), increment the occurrence counter\n        occurrence = occurrence + 1\n        \/\/ re-start the accumulation of time leading to period\n        computedPeriod = s.length \/\/ \"initialize\" the computed period with length of domain's time slot\n      } else {\n        \/\/\n        if (occurrence > 0) { \/\/ if we have previously encountered the domain in the schedule\n          computedPeriod = computedPeriod + s.length \/\/ add current time slice\n        } else {\n          \/\/ if we haven't see the domain yet, add the time to the \"before occurrence\" accumulator\n          computedTicksBeforeOccurrence = computedTicksBeforeOccurrence + s.length\n        }\n      }\n    }\n    \/\/ println(occurrence, \", \", computedTicksBeforeOccurrence, \", \", computedPeriod)\n    \/\/ at this point, we have reached the end of the schedule.  We need to check for the domain\n    \/\/ as it wraps around.  Given our other invariants, we know that the domain occurs at least\n    \/\/ once.  So computedPeriod should hold the time since it was seen, whereas\n    \/\/ computedTicksBeforeOccurrence should hold the time before it was seen.\n    \/\/ The sum of these values should equal the period.\n    return (computedPeriod + computedTicksBeforeOccurrence == period)\n\n     *\/\n  }\n\n  def computeElaspedRemainingHPTicks(slotNum: Z, dScheduleSpec: DScheduleSpec): (Z, Z) = {\n    \/\/ pre-condition\n    \/\/  TODO: well-formed dScheduleSpec\n    \/\/  TODO: valid slotNum (define function for below)\n    assert(0 <= slotNum & slotNum < dScheduleSpec.schedule.slots.size)\n    \/\/ body\n    var elaspedHPTicks: Z = 0\n    for (s <- 0 until slotNum) {\n      elaspedHPTicks = elaspedHPTicks + dScheduleSpec.schedule.slots(0).length\n    }\n    val remainingHPTicks: Z = dScheduleSpec.hyperPeriod - elaspedHPTicks\n    return (elaspedHPTicks, remainingHPTicks)\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/StateObserver.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.{Art, DataContent }\n\nobject StateObserver {\n\n\n  def observeInPortValue(bridgeId: Art.BridgeId, portId: Art.PortId): Option[DataContent] = {\n    return Art.observeInPortValue(portId)\n  }\n\n  def observeOutPortValue(bridgeId: Art.BridgeId, portId: Art.PortId): Option[DataContent] = {\n    return Art.observeOutPortVariable(portId)\n  }\n\n  def observeInPortValues(bridgeId: Art.BridgeId): ISZ[(String, Option[DataContent])] = {\n    val bridge = Art.bridges(bridgeId.toZ).get\n    var portValues: ISZ[(String, Option[DataContent])] = ISZ()\n\n    for (port <- bridge.ports.dataIns) {\n      portValues = portValues :+ ((port.name, Art.observeInPortValue(port.id)))\n    }\n\n    for (port <- bridge.ports.eventIns) {\n      portValues = portValues :+ ((port.name, Art.observeInPortValue(port.id)))\n    }\n    return portValues\n  }\n\n  def observeOutPortValues(bridgeId: Art.BridgeId): ISZ[(String, Option[DataContent])] = {\n    val bridge = Art.bridges(bridgeId.toZ).get\n    var portValues: ISZ[(String, Option[DataContent])] = ISZ()\n\n    for (port <- bridge.ports.dataOuts) {\n      portValues = portValues :+ ((port.name, Art.observeOutPortVariable(port.id)))\n    }\n\n    for (port <- bridge.ports.eventOuts) {\n      portValues = portValues :+ ((port.name, Art.observeOutPortVariable(port.id)))\n    }\n    return portValues\n  }\n\n  def observeInPortValuesByNickName(threadNickName: String): ISZ[(String, Option[DataContent])] = {\n    halt(\"TODO\")\n    \/\/val bridgeId = art.StaticScheduling.threadNickNames.get(threadNickName).get \/\/ ToDo: fix error handling\n    \/\/return observeInPortValues(bridgeId)\n  }\n\n  def observeOutPortValuesByNickName(threadNickName: String): ISZ[(String, Option[DataContent])] = {\n    halt(\"TODO\")\n    \/\/val bridgeId = art.StaticScheduling.threadNickNames.get(threadNickName).get \/\/ ToDo: fix error handling\n    \/\/return observeOutPortValues(bridgeId)\n  }\n\n  \/\/=======================================================================\n  \/\/ State Observations (primary methods for interpreting debug commands)\n  \/\/=======================================================================\n\n  def generatePortContentsInputsCurrent(): String = {\n    val bridgeId = Schedule.getBridgeIdFromSlotNumber(Explorer.scheduleState.slotNum)\n    val inPortInfo = observeInPortValues(bridgeId)\n    val result =\n      st\"\"\"****************************\n          |   Next Component: ${Schedule.threadNickName(bridgeId)} (id = $bridgeId)\n          |****************************\n          | Input Ports\n          | ===============\n          |  ${formatPortInfo(inPortInfo)}\"\"\".render\n    return result\n  }\n\n  def generatePortContentsOutputsCurrent(): String = {\n    val previousStateOpt: Option[Explorer.ScheduleState] =\n      Explorer.previousState(Explorer.scheduleState, Schedule.dScheduleSpec)\n\n    previousStateOpt match {\n      case Some(previousState) => {\n        val bridgeId = Schedule.getBridgeIdFromSlotNumber(previousState.slotNum)\n        val outPortInfo = observeOutPortValues(bridgeId)\n        val result =\n          st\"\"\"****************************\n              |   Previous Component: ${Schedule.threadNickName(bridgeId)} (id = $bridgeId)\n              |****************************\n              | Output Ports\n              | ===============\n              |  ${formatPortInfo(outPortInfo)}\"\"\".render\n        return result\n      }\n      case None() => {\n        return \"(initial state - no previous state to show)\"\n      }\n    }\n  }\n\n  def formatPortInfo(portVals: ISZ[(String, Option[DataContent])]): String = {\n    var result: String = \"\" \/\/ ToDo: Ask Robby if I can do this with a repeating template\n    for (e <- portVals) {\n      result =\n        st\"\"\"$result\n            |${e._1} = ${e._2}\"\"\".render \/\/ how do I put in new line?\n    }\n    return result\n  }\n\n  def generatePortContents(bridgeId: Art.BridgeId): String = {\n    val inPortInfo = observeInPortValues(bridgeId)\n    val outPortInfo = observeOutPortValues(bridgeId)\n    val result =\n      st\"\"\"****************************\n          |   Component: ${Schedule.threadNickName(bridgeId)} (id = $bridgeId)\n          |****************************\n          | Input Ports\n          | ===============\n          |  ${formatPortInfo(inPortInfo)}\n          |\n          | Output Ports\n          | ================\n          |  ${formatPortInfo(outPortInfo)}\"\"\".render\n    return result\n  }\n\n  def generatePortContentsByNickName(threadNickName: String): String = {\n    halt(\"TODO\")\n    \/\/val bridgeId = art.StaticScheduling.threadNickNames.get(threadNickName).get \/\/ ToDo: fix error handling\n    \/\/return generatePortContents(bridgeId)\n  }\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/StaticScheduler.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.Scheduler\nimport art.scheduling.static.Schedule.DScheduleSpec\n\n\n@record class StaticScheduler(bridges: IS[Art.BridgeId, art.Bridge],\n                              staticSchedule: DScheduleSpec) extends Scheduler {\n\n  override def initialize(): Unit = {\n    Schedule.dScheduleSpec = staticSchedule\n  }\n\n  override def initializationPhase(): Unit = {\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      art.Art.logInfo(bridge.id, s\"Initialized bridge: ${bridge.name}\")\n    }\n  }\n\n  override def computePhase(): Unit = {\n    Explorer.runSystem()\n  }\n\n  override def finalizePhase(): Unit = {\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      art.Art.logInfo(bridge.id, s\"Finalized bridge: ${bridge.name}\")\n    }\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/sergen.cmd",
        {
          "type" : "ITestResource",
          "content" : "::\/*#! 2> \/dev\/null                                   #\r\n@ 2>\/dev\/null # 2>nul & echo off & goto BOF           #\r\nif [ -z ${SIREUM_HOME} ]; then                        #\r\n  echo \"Please set SIREUM_HOME env var\"               #\r\n  exit -1                                             #\r\nfi                                                    #\r\nexec ${SIREUM_HOME}\/bin\/sireum slang run \"$0\" \"$@\"    #\r\n:BOF\r\nsetlocal\r\nif not defined SIREUM_HOME (\r\n  echo Please set SIREUM_HOME env var\r\n  exit \/B -1\r\n)\r\n%SIREUM_HOME%\\\\bin\\\\sireum.bat slang run \"%0\" %*\r\nexit \/B %errorlevel%\r\n::!#*\/\r\n\/\/ #Sireum\r\n\r\nimport org.sireum._\r\n\r\nval sireum = Os.path(Os.env(\"SIREUM_HOME\").get) \/ \"bin\" \/ (if (Os.isWin) \"sireum.bat\" else \"sireum\")\r\n\r\n\/\/ create serializers\/deserializers for the Slang types used in the project\r\n\r\nval files: ISZ[String] = ISZ(\"..\/src\/main\/data\/VPM_ben__SeL4\/Base_Types.scala\",\r\n                             \"..\/src\/main\/art\/art\/DataContent.scala\")\r\n\r\nval toolargs: String = st\"${(files, \" \")}\".render\r\n\r\nproc\"$sireum tools sergen -p VPM_ben__SeL4 -m json,msgpack -o ${Os.slashDir.up}\/src\/main\/data\/VPM_ben__SeL4 $toolargs\".at(Os.slashDir).console.runCheck()\r\n",
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : true,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/project.cmd",
        {
          "type" : "ITestResource",
          "content" : "::\/*#! 2> \/dev\/null                                   #\r\n@ 2>\/dev\/null # 2>nul & echo off & goto BOF           #\r\nif [ -z ${SIREUM_HOME} ]; then                        #\r\n  echo \"Please set SIREUM_HOME env var\"               #\r\n  exit -1                                             #\r\nfi                                                    #\r\nexec ${SIREUM_HOME}\/bin\/sireum slang run \"$0\" \"$@\"    #\r\n:BOF\r\nsetlocal\r\nif not defined SIREUM_HOME (\r\n  echo Please set SIREUM_HOME env var\r\n  exit \/B -1\r\n)\r\n%SIREUM_HOME%\\\\bin\\\\sireum.bat slang run \"%0\" %*\r\nexit \/B %errorlevel%\r\n::!#*\/\r\n\/\/ #Sireum\r\n\r\n\/\/ Example Sireum Proyek build definitions -- the contents of this file will not be overwritten\r\n\/\/\r\n\/\/ To install Sireum (Proyek and IVE) see https:\/\/sireum.org\/getting-started\/\r\n\/\/\r\n\/\/ The following commands should be executed in the parent of the 'bin' directory.\r\n\/\/\r\n\/\/ Command Line:\r\n\/\/   To run the demo from the command line using the default scheduler:\r\n\/\/     sireum proyek run . VPM_ben__SeL4.Demo\r\n\/\/\r\n\/\/   To see the available CLI options:\r\n\/\/     sireum proyek run . VPM_ben__SeL4.Demo -h\r\n\/\/\r\n\/\/   To run the example unit tests from the command line:\r\n\/\/     sireum proyek test .\r\n\/\/\r\n\/\/   To build an executable jar:\r\n\/\/     sireum proyek assemble --uber --main VPM_ben__SeL4.Demo .\r\n\/\/\r\n\/\/ Sireum IVE:\r\n\/\/\r\n\/\/   Create the IVE project if Codegen was not run locally or if its no-proyek-ive\r\n\/\/   option was used:\r\n\/\/     sireum proyek ive .\r\n\/\/\r\n\/\/   Then in IVE select 'File > Open ...' and navigate to the parent of the\r\n\/\/   'bin' directory and click 'OK'.\r\n\/\/\r\n\/\/   To run the demo from within Sireum IVE:\r\n\/\/     Right click src\/main\/architecture\/VPM_ben__SeL4\/Demo.scala and choose \"Run 'Demo'\"\r\n\/\/\r\n\/\/   To run the unit test cases from within Sireum IVE:\r\n\/\/     Right click the src\/test\/bridge and choose \"Run ScalaTests in bridge\"\r\n\r\nimport org.sireum._\r\nimport org.sireum.project.{Module, Project, Target}\r\n\r\nval home: Os.Path = Os.slashDir.up.canon\r\n\r\nval slangModule: Module = Module(\r\n  id = \"VPM_8600B_Ext_impl_Instance\",\r\n  basePath = (home \/ \"src\").string,\r\n  subPathOpt = None(),\r\n  deps = ISZ(),\r\n  targets = ISZ(Target.Jvm),\r\n  ivyDeps = ISZ(\"org.sireum.kekinian::library:\"),\r\n  sources = for(m <- ISZ(\"art\", \"architecture\", \"bridge\", \"component\", \"data\", \"nix\", \"seL4Nix\")) yield (Os.path(\"main\") \/ m).string,\r\n  resources = ISZ(),\r\n  testSources = for (m <- ISZ(\"bridge\", \"util\")) yield (Os.path(\"test\") \/ m).string,\r\n  testResources = ISZ(),\r\n  publishInfoOpt = None()\r\n)\r\n\r\nval inspectorModule: Module = slangModule(\r\n  sources = slangModule.sources :+ (Os.path(\"main\") \/ \"inspector\").string,\r\n  ivyDeps = slangModule.ivyDeps ++ ISZ(\"org.sireum:inspector-capabilities:\", \"org.sireum:inspector-gui:\", \"org.sireum:inspector-services-jvm:\")\r\n)\r\n\r\nval slangProject: Project = Project.empty + slangModule\r\nval inspectorProject: Project = Project.empty + inspectorModule\r\n\r\nval prj: Project = slangProject\r\n\/\/val prj: Project = inspectorProject()\r\n\r\nprintln(project.JSON.fromProject(prj, T))\r\n",
          "overwrite" : false,
          "makeExecutable" : true,
          "makeCRLF" : true,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/versions.properties",
        {
          "type" : "ITestResource",
          "content" : "org.sireum.slang-embedded-art%%slang-embedded-art%=adee3e3\n\norg.sireum%inspector-capabilities%=0.6-SNAPSHOT\norg.sireum%inspector-gui%=0.6-SNAPSHOT\norg.sireum%inspector-services-jvm%=0.6-SNAPSHOT\n\n\n# remove the following entries if you want to use the versions\n# that ship with sireum (i.e. $SIREUM_HOME\/bin\/sireum --version)\n\n# Scala compiler plugin for Slang\norg.sireum%%scalac-plugin%=4.20230423.6c31343\n\norg.sireum.kekinian%%library%=c52b6f7\n\norg.scala-lang%scala-library%=2.13.10\norg.scalatest%%scalatest%%=3.2.16\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/build.sc",
        {
          "type" : "ITestResource",
          "content" : "import mill._\nimport scalalib._\n\n\/\/ Example mill build -- the contents of this file will not be overwritten.\n\/\/\n\/\/ A custom mill build for Sireum can be obtained from https:\/\/github.com\/sireum\/rolling\/releases\/tag\/mill\n\/\/ On Windows, rename 'mill' to 'mill.bat'\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   mill VPM_ben__SeL4.run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   mill VPM_ben__SeL4.tests\n\/\/\n\/\/ Sireum IVE: Installation instructions available at https:\/\/sireum.org\/getting-started\/\n\/\/\n\/\/   First cd to the directory containing this file and execute the following:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/sireum tools ivegen -f -m mill -n slang ..\/\n\/\/\n\/\/   Then in IVE select 'File > Open ...' and navigate to the directory\n\/\/   containing this file then click 'OK'.  To have the codebase and its\n\/\/   test suites recompiled upon changes, run:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/mill -w VPM_ben__SeL4.tests.compile\n\/\/\n\/\/ Visual Studio Code:\n\/\/   Follow Sireum Kekinian's instructions for setting up a development\n\/\/   environment using Scala Metals: https:\/\/github.com\/sireum\/kekinian#scala-metals\n\/\/   Then open the folder containing this file in VS Code and import the\n\/\/   mill build when asked.\n\n\nobject `VPM_ben__SeL4` extends slangEmbeddedProject\n\ntrait SlangEmbeddedModule extends ScalaModule {\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n  \/\/ to get the most recent versions of the following dependencies\n\n  \/\/ versions.properties key: org.scala-lang%scala-library%\n  val scalaVer = \"2.13.10\"\n\n  \/\/ versions.properties key: org.scalatest%%scalatest%%\n  val scalaTestVersion = \"3.2.16\"\n\n  \/\/ versions.properties key: org.sireum%%scalac-plugin%\n  \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20230423.6c31343\n  val sireumScalacVersion = \"4.20230423.6c31343\"\n\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n  \/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/c52b6f7\n  val kekinianVersion = \"c52b6f7\"\n\n\n  val inspectorVersion = \"0.6-SNAPSHOT\"\n\n  val formsRtVersion = \"7.0.3\"\n\n\n  def scalaVersion = scalaVer\n\n  override def javacOptions = T { Seq(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"utf8\") }\n\n  override def scalacOptions = T { Seq(\n    \"-release:8\",\n    \"-deprecation\",\n    \"-Yrangepos\",\n    \"-Ydelambdafy:method\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Xfatal-warnings\",\n    \"-language:postfixOps\"\n  ) }\n\n  override def ivyDeps = Agg(\n    ivy\"org.sireum.kekinian::library::${kekinianVersion}\",\n\n    \/\/ Jetbrains UI Designer\n    ivy\"com.intellij:forms_rt:${formsRtVersion}\"\n  )\n\n  override def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin::${sireumScalacVersion}\")\n\n  override def repositories = super.repositories :+ coursier.Repositories.jitpack\n\n  override def mainClass = T { Some(\"VPM_ben__SeL4.Demo\") }\n\n  implicit def osPath2PathRef(p: os.Path): PathRef = PathRef(p)\n}\n\ntrait slangEmbeddedProject extends SlangEmbeddedModule {\n\n  def contributedSources: Seq[PathRef] = Seq(\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"architecture\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"art\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"bridge\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"component\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"data\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"nix\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"seL4Nix\"\n  )\n\n  override def sources = T.sources(contributedSources)\n\n  object tests extends Tests {\n\n    final override def millSourcePath = super.millSourcePath \/ os.up \/ os.up \/ \"src\" \/ \"test\"\n\n    override def sources = T.sources( millSourcePath \/ \"bridge\",\n                                      millSourcePath \/ \"util\" )\n\n    override def ivyDeps = Agg(ivy\"org.scalatest::scalatest::${scalaTestVersion}\")\n\n    override def testFrameworks = T { Seq(\"org.scalatest.tools.Framework\") }\n  }\n}\n\ntrait slangEmbeddedInspectorProject extends slangEmbeddedProject {\n\n  override def mainClass = T { Some(\"VPM_ben__SeL4.InspectorDemo\") }\n\n  override def contributedSources =\n    super.contributedSources :+ millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"inspector\"\n\n  \/\/ FIXME: 2021.01.04 - the following doesn't work due to javafx\/mill resolution issue\n  \/\/        -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767\n  \/\/ override def ivyDeps = Agg(\n  \/\/   ivy\"org.sireum::inspector-capabilities::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-gui::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-services-jvm::${inspectorVersion}\"\n\n  \/\/ workaround to #767 -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767#issuecomment-652799588\n  override def unmanagedClasspath = T {\n    import coursier._\n\n    val files = Fetch().addDependencies(\n      dep\"org.sireum:inspector-capabilities:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-gui:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-services-jvm:0.6-SNAPSHOT\"\n    ).addRepositories(\n      Repositories.sonatype(\"releases\"),\n      Repositories.jitpack\n    ).run()\n    val pathRefs = files.map(f => PathRef(os.Path(f)))\n    Agg(pathRefs : _*)\n  }\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/build.sbt",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Example sbt build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ sbt can be obtained from https:\/\/www.scala-sbt.org\/download.html\n\/\/\n\/\/ To run the demo from the command line using the default scheduler:\n\/\/   sbt run\n\/\/\n\/\/ To see the available CLI options:\n\/\/   sbt \"run -h\"\n\/\/\n\/\/ To run the example unit tests from the command line:\n\/\/   sbt test\n\/\/\n\/\/ To build a runnable\/executable jar:\n\/\/   sbt assembly\n\/\/\n\/\/ To skip running the unit tests while building the executable jar:\n\/\/   sbt 'set test in assembly := {}' assembly\n\/\/ on Linux\/Mac, or\n\/\/   sbt \"set test in assembly := {}\" assembly\n\/\/ on Windows\n\/\/\n\/\/ Sireum IVE: Installation instructions available at https:\/\/sireum.org\/getting-started\/\n\/\/\n\/\/   In IVE select 'File > Open ...' and navigate to the directory containing\n\/\/   this file then click 'OK'.\n\/\/\n\/\/   To run the demo from within Sireum IVE:\n\/\/     Right click src\/main\/architecture\/VPM_ben__SeL4\/Demo.scala and choose \"Run 'Demo'\"\n\/\/\n\/\/   To run the unit test cases from within Sireum IVE:\n\/\/     Right click the src\/test\/bridge directory and choose \"Run ScalaTests in bridge\"\n\/\/\n\/\/   NOTE: A ClassNotFoundException may be raised the first time you try to\n\/\/         run the demo or unit tests.  If this occurs simply delete the directory\n\/\/         named 'target' and retry\n\n\nlazy val VPM_8600B_Ext_impl_Instance = slangEmbeddedProject(\"VPM_8600B_Ext_impl_Instance\", \".\")\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n\/\/ to get the most recent versions of the following dependencies\n\n\/\/ versions.properties key: org.scala-lang%scala-library%\nval scalaVer = \"2.13.10\"\n\n\/\/ versions.properties key: org.scalatest%%scalatest%%\nval scalaTestVersion = \"3.2.16\"\n\n\/\/ versions.properties key: org.sireum%%scalac-plugin%\n\/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20230423.6c31343\nval sireumScalacVersion = \"4.20230423.6c31343\"\n\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n\/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/c52b6f7\nval kekinianVersion = \"c52b6f7\"\n\n\nval inspectorVersion = \"0.6-SNAPSHOT\"\n\nval formsRtVersion = \"7.0.3\"\n\n\n\nval commonSettings = Seq(\n  organization := \"org.sireum\",\n  incOptions := incOptions.value.withLogRecompileOnMacro(false),\n  scalaVersion := scalaVer,\n  scalacOptions := Seq(\"-release:8\", \"-deprecation\",\n    \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-Xfatal-warnings\"),\n  Test \/ parallelExecution := true,\n  resolvers ++= Resolver.sonatypeOssRepos(\"public\") ++ Seq(\"jitpack\" at \"https:\/\/jitpack.io\"),\n  addCompilerPlugin(\"org.sireum\" %% \"scalac-plugin\" % sireumScalacVersion),\n  ThisBuild \/ evictionErrorLevel := Level.Warn,\n  libraryDependencies ++= Seq(\n    \"org.sireum.kekinian\" %% \"library\" % kekinianVersion withSources()\n  )\n)\n\nimport sbtassembly.AssemblyPlugin.defaultUniversalScript\nval slangEmbeddedSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/art\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/architecture\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/bridge\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/component\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/data\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/seL4Nix\",\n\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/bridge\",\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/util\",\n\n  libraryDependencies += \"org.scalatest\" %% \"scalatest\" % scalaTestVersion % \"test\",\n\n  \/\/ Jetbrains UI Designer\n  libraryDependencies += \"com.intellij\" % \"forms_rt\" % formsRtVersion,\n\n  mainClass in (Compile, run) := Some(\"VPM_ben__SeL4.Demo\"),\n\n  mainClass in assembly := Some(\"VPM_ben__SeL4.Demo\"),\n  assemblyJarName in assembly := \"VPM_8600B_Ext_impl_Instance.jar\",\n  assemblyOption in assembly := (assemblyOption in assembly).value.copy(prependShellScript = Some(defaultUniversalScript(shebang = false))),\n\n  assemblyMergeStrategy in assembly := {\n    case PathList(\"META-INF\", xs @ _*) => MergeStrategy.discard\n    case x => MergeStrategy.first\n  }\n)\n\nval slangEmbeddedInspectorSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/inspector\",\n\n  libraryDependencies += \"org.sireum\" % \"inspector-capabilities\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-gui\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-services-jvm\" % inspectorVersion withSources(),\n\n  mainClass in (Compile, run) := Some(\"VPM_ben__SeL4.InspectorDemo\"),\n)\n\ndef slangEmbeddedProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings)\n\ndef slangEmbeddedInspectorProject(projId: String, projectDirectory: String) = {\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings ++ slangEmbeddedInspectorSettings)\n}\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/project\/build.properties",
        {
          "type" : "ITestResource",
          "content" : "sbt.version=1.8.0\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/project\/plugins.sbt",
        {
          "type" : "ITestResource",
          "content" : "addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.15.0\")\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "slang\/bin\/slangcheck.cmd",
        {
          "type" : "ITestResource",
          "content" : "::\/*#! 2> \/dev\/null                                   #\r\n@ 2>\/dev\/null # 2>nul & echo off & goto BOF           #\r\nif [ -z ${SIREUM_HOME} ]; then                        #\r\n  echo \"Please set SIREUM_HOME env var\"               #\r\n  exit -1                                             #\r\nfi                                                    #\r\nexec ${SIREUM_HOME}\/bin\/sireum slang run \"$0\" \"$@\"    #\r\n:BOF\r\nsetlocal\r\nif not defined SIREUM_HOME (\r\n  echo Please set SIREUM_HOME env var\r\n  exit \/B -1\r\n)\r\n%SIREUM_HOME%\\\\bin\\\\sireum.bat slang run \"%0\" %*\r\nexit \/B %errorlevel%\r\n::!#*\/\r\n\/\/ #Sireum\r\n\r\nimport org.sireum._\r\n\r\nval sireum = Os.path(Os.env(\"SIREUM_HOME\").get) \/ \"bin\" \/ (if (Os.isWin) \"sireum.bat\" else \"sireum\")\r\n\r\n\/\/ create SlangCheck generators for the types used in the project\r\n\r\nval slangCheckJar: Os.Path = {\r\n  Os.env(\"SLANG_CHECK_JAR\") match {\r\n    case Some(p) =>\r\n      val cand = Os.path(p)\r\n      if (!cand.exists) {\r\n        halt(s\"SLANG_CHECK_JAR is not a file: $p\")\r\n      } else {\r\n        cand\r\n      }\r\n    case _ => halt(s\"SLANG_CHECK_JAR is not defined\")\r\n  }\r\n}\r\n\r\nval files: ISZ[String] = ISZ(\"..\/src\/main\/data\/VPM_ben__SeL4\/Base_Types.scala\",\r\n                             \"..\/src\/main\/art\/art\/DataContent.scala\")\r\n\r\nval toolargs: String = st\"${(files, \" \")}\".render\r\n\r\nproc\"java -jar $slangCheckJar tools slangcheck -p VPM_ben__SeL4 -o ..\/src\/main\/data $toolargs\".at(Os.slashDir).console.runCheck()\r\n",
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : true,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.camkes",
        {
          "type" : "ITestResource",
          "content" : "component CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_AttestationRequest_1_notification;\n  emits ReceiveEvent sb_TrustedIds_1_notification;\n  emits ReceiveEvent sb_TerminateAttestation_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_AttestationResponse_notification;\n  consumes ReceiveEvent sb_InitiateAttestation_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sb_queue_union_art_DataContent_1_t sb_AttestationRequest_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_AttestationResponse_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_TrustedIds_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_InitiateAttestation_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_TerminateAttestation_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.camkes",
        {
          "type" : "ITestResource",
          "content" : "component CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_SHM_QUEUE_Request_Out_1_notification;\n  emits ReceiveEvent sb_Connection_Command_Out_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_SHM_QUEUE_Request_In_notification;\n  consumes ReceiveEvent sb_Connection_Command_In_notification;\n  consumes ReceiveEvent sb_TrustedIds_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sb_queue_union_art_DataContent_1_t sb_SHM_QUEUE_Request_In_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_SHM_QUEUE_Request_Out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_Connection_Command_In_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Connection_Command_Out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_TrustedIds_queue;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.camkes",
        {
          "type" : "ITestResource",
          "content" : "component CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1 {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_Suspect_Traffic_Out_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_Observed_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sb_queue_union_art_DataContent_1_t sb_Observed_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Suspect_Traffic_Out_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.camkes",
        {
          "type" : "ITestResource",
          "content" : "component CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2 {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_Suspect_Traffic_Out_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_Observed_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sb_queue_union_art_DataContent_1_t sb_Observed_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Suspect_Traffic_Out_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low.camkes",
        {
          "type" : "ITestResource",
          "content" : "component adapter_low_impl_SW_adapter_low_adapter_low {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_SHM_QUEUE_Request_Out_1_notification;\n  emits ReceiveEvent sb_AttestationResponse_1_notification;\n  emits ReceiveEvent sb_Connection_Command_Out_1_notification;\n  emits ReceiveEvent sb_InitiateAttestation_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_ADSB_Messages_In_notification;\n  consumes ReceiveEvent sb_Response_In_notification;\n  consumes ReceiveEvent sb_AttestationRequest_notification;\n  consumes ReceiveEvent sb_SHM_HEADER_adsb_to_ptab_notification;\n  consumes ReceiveEvent sb_Connection_Command_In_notification;\n  consumes ReceiveEvent sb_Suspect_Traffic_In1_notification;\n  consumes ReceiveEvent sb_Suspect_Traffic_In2_notification;\n  consumes ReceiveEvent sb_Suspect_Traffic_In3_notification;\n  consumes ReceiveEvent sb_TerminateAttestation_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sb_queue_union_art_DataContent_1_t sb_ADSB_Messages_In_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Response_In_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_AttestationRequest_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_SHM_HEADER_adsb_to_ptab_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Connection_Command_In_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Suspect_Traffic_In1_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Suspect_Traffic_In2_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Suspect_Traffic_In3_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_SHM_QUEUE_Request_Out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_AttestationResponse_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_Connection_Command_Out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_InitiateAttestation_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_TerminateAttestation_queue;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high.camkes",
        {
          "type" : "ITestResource",
          "content" : "component adapter_high_impl_SW_adapter_high_adapter_high {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_Response_Out_1_notification;\n  emits ReceiveEvent sb_ADSB_Messages_Out_1_notification;\n  emits ReceiveEvent sb_SHM_HEADER_adsb_to_ptab_1_notification;\n  emits ReceiveEvent sb_Connection_Command_Out_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_Request_In_notification;\n  consumes ReceiveEvent sb_Connection_Command_In_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sb_queue_union_art_DataContent_1_t sb_Response_Out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_ADSB_Messages_Out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_SHM_HEADER_adsb_to_ptab_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_Connection_Command_Out_queue_1;\n  dataport sb_queue_union_art_DataContent_1_t sb_Request_In_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Connection_Command_In_queue;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.camkes",
        {
          "type" : "ITestResource",
          "content" : "component CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3 {\n  include <sb_types.h>;\n  include <sb_queue_union_art_DataContent_1.h>;\n  control;\n  emits ReceiveEvent sb_Suspect_Traffic_Out_1_notification;\n  emits TickTock sb_self_pacer_tick;\n  consumes ReceiveEvent sb_Observed_notification;\n  consumes TickTock sb_self_pacer_tock;\n  dataport sb_queue_union_art_DataContent_1_t sb_Observed_queue;\n  dataport sb_queue_union_art_DataContent_1_t sb_Suspect_Traffic_Out_queue_1;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/VPM_8600B_Ext_impl_Instance.camkes",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\nimport <std_connector.camkes>;\nimport \"components\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager.camkes\";\nimport \"components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate.camkes\";\nimport \"components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1.camkes\";\nimport \"components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2.camkes\";\nimport \"components\/adapter_low_impl_SW_adapter_low_adapter_low\/adapter_low_impl_SW_adapter_low_adapter_low.camkes\";\nimport \"components\/adapter_high_impl_SW_adapter_high_adapter_high\/adapter_high_impl_SW_adapter_high_adapter_high.camkes\";\nimport \"components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3.camkes\";\n\nassembly {\n  composition {\n    component CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager SW_Attestation_Manager_CASE_AttestationManager;\n    component CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate SW_Attestation_Gate_CASE_AttestationGate;\n    component CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1 SW_Expected_Position_Monitor_CASE_Monitor1;\n    component CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2 SW_Duplicate_Entity_Monitor_CASE_Monitor2;\n    component adapter_low_impl_SW_adapter_low_adapter_low SW_adapter_low_adapter_low;\n    component adapter_high_impl_SW_adapter_high_adapter_high SW_adapter_high_adapter_high;\n    component CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3 SW_Teleport_Monitor_CASE_Monitor3;\n\n    connection seL4Notification conn1(from SW_Attestation_Manager_CASE_AttestationManager.sb_AttestationRequest_1_notification, to SW_adapter_low_adapter_low.sb_AttestationRequest_notification);\n    connection seL4SharedData conn2(from SW_Attestation_Manager_CASE_AttestationManager.sb_AttestationRequest_queue_1, to SW_adapter_low_adapter_low.sb_AttestationRequest_queue);\n    connection seL4Notification conn3(from SW_Attestation_Manager_CASE_AttestationManager.sb_TrustedIds_1_notification, to SW_Attestation_Gate_CASE_AttestationGate.sb_TrustedIds_notification);\n    connection seL4SharedData conn4(from SW_Attestation_Manager_CASE_AttestationManager.sb_TrustedIds_queue_1, to SW_Attestation_Gate_CASE_AttestationGate.sb_TrustedIds_queue);\n    connection seL4Notification conn5(from SW_Attestation_Manager_CASE_AttestationManager.sb_TerminateAttestation_1_notification, to SW_adapter_low_adapter_low.sb_TerminateAttestation_notification);\n    connection seL4SharedData conn6(from SW_Attestation_Manager_CASE_AttestationManager.sb_TerminateAttestation_queue_1, to SW_adapter_low_adapter_low.sb_TerminateAttestation_queue);\n    connection seL4Notification conn7(from SW_Attestation_Gate_CASE_AttestationGate.sb_SHM_QUEUE_Request_Out_1_notification, to SW_adapter_high_adapter_high.sb_Request_In_notification);\n    connection seL4SharedData conn8(from SW_Attestation_Gate_CASE_AttestationGate.sb_SHM_QUEUE_Request_Out_queue_1, to SW_adapter_high_adapter_high.sb_Request_In_queue);\n    connection seL4Notification conn9(from SW_Attestation_Gate_CASE_AttestationGate.sb_Connection_Command_Out_1_notification, to SW_adapter_high_adapter_high.sb_Connection_Command_In_notification);\n    connection seL4SharedData conn10(from SW_Attestation_Gate_CASE_AttestationGate.sb_Connection_Command_Out_queue_1, to SW_adapter_high_adapter_high.sb_Connection_Command_In_queue);\n    connection seL4Notification conn11(from SW_Expected_Position_Monitor_CASE_Monitor1.sb_Suspect_Traffic_Out_1_notification, to SW_adapter_low_adapter_low.sb_Suspect_Traffic_In1_notification);\n    connection seL4SharedData conn12(from SW_Expected_Position_Monitor_CASE_Monitor1.sb_Suspect_Traffic_Out_queue_1, to SW_adapter_low_adapter_low.sb_Suspect_Traffic_In1_queue);\n    connection seL4Notification conn13(from SW_Duplicate_Entity_Monitor_CASE_Monitor2.sb_Suspect_Traffic_Out_1_notification, to SW_adapter_low_adapter_low.sb_Suspect_Traffic_In2_notification);\n    connection seL4SharedData conn14(from SW_Duplicate_Entity_Monitor_CASE_Monitor2.sb_Suspect_Traffic_Out_queue_1, to SW_adapter_low_adapter_low.sb_Suspect_Traffic_In2_queue);\n    connection seL4Notification conn15(from SW_adapter_low_adapter_low.sb_SHM_QUEUE_Request_Out_1_notification, to SW_Attestation_Gate_CASE_AttestationGate.sb_SHM_QUEUE_Request_In_notification);\n    connection seL4SharedData conn16(from SW_adapter_low_adapter_low.sb_SHM_QUEUE_Request_Out_queue_1, to SW_Attestation_Gate_CASE_AttestationGate.sb_SHM_QUEUE_Request_In_queue);\n    connection seL4Notification conn17(from SW_adapter_low_adapter_low.sb_AttestationResponse_1_notification, to SW_Attestation_Manager_CASE_AttestationManager.sb_AttestationResponse_notification);\n    connection seL4SharedData conn18(from SW_adapter_low_adapter_low.sb_AttestationResponse_queue_1, to SW_Attestation_Manager_CASE_AttestationManager.sb_AttestationResponse_queue);\n    connection seL4Notification conn19(from SW_adapter_low_adapter_low.sb_Connection_Command_Out_1_notification, to SW_Attestation_Gate_CASE_AttestationGate.sb_Connection_Command_In_notification);\n    connection seL4SharedData conn20(from SW_adapter_low_adapter_low.sb_Connection_Command_Out_queue_1, to SW_Attestation_Gate_CASE_AttestationGate.sb_Connection_Command_In_queue);\n    connection seL4Notification conn21(from SW_adapter_low_adapter_low.sb_InitiateAttestation_1_notification, to SW_Attestation_Manager_CASE_AttestationManager.sb_InitiateAttestation_notification);\n    connection seL4SharedData conn22(from SW_adapter_low_adapter_low.sb_InitiateAttestation_queue_1, to SW_Attestation_Manager_CASE_AttestationManager.sb_InitiateAttestation_queue);\n    connection seL4Notification conn23(from SW_adapter_high_adapter_high.sb_Response_Out_1_notification, to SW_adapter_low_adapter_low.sb_Response_In_notification);\n    connection seL4SharedData conn24(from SW_adapter_high_adapter_high.sb_Response_Out_queue_1, to SW_adapter_low_adapter_low.sb_Response_In_queue);\n    connection seL4Notification conn25(from SW_adapter_high_adapter_high.sb_ADSB_Messages_Out_1_notification, to SW_Expected_Position_Monitor_CASE_Monitor1.sb_Observed_notification, to SW_Duplicate_Entity_Monitor_CASE_Monitor2.sb_Observed_notification, to SW_Teleport_Monitor_CASE_Monitor3.sb_Observed_notification, to SW_adapter_low_adapter_low.sb_ADSB_Messages_In_notification);\n    connection seL4SharedData conn26(from SW_adapter_high_adapter_high.sb_ADSB_Messages_Out_queue_1, to SW_Expected_Position_Monitor_CASE_Monitor1.sb_Observed_queue, to SW_Duplicate_Entity_Monitor_CASE_Monitor2.sb_Observed_queue, to SW_Teleport_Monitor_CASE_Monitor3.sb_Observed_queue, to SW_adapter_low_adapter_low.sb_ADSB_Messages_In_queue);\n    connection seL4Notification conn27(from SW_adapter_high_adapter_high.sb_SHM_HEADER_adsb_to_ptab_1_notification, to SW_adapter_low_adapter_low.sb_SHM_HEADER_adsb_to_ptab_notification);\n    connection seL4SharedData conn28(from SW_adapter_high_adapter_high.sb_SHM_HEADER_adsb_to_ptab_queue_1, to SW_adapter_low_adapter_low.sb_SHM_HEADER_adsb_to_ptab_queue);\n    connection seL4Notification conn29(from SW_adapter_high_adapter_high.sb_Connection_Command_Out_1_notification, to SW_adapter_low_adapter_low.sb_Connection_Command_In_notification);\n    connection seL4SharedData conn30(from SW_adapter_high_adapter_high.sb_Connection_Command_Out_queue_1, to SW_adapter_low_adapter_low.sb_Connection_Command_In_queue);\n    connection seL4Notification conn31(from SW_Teleport_Monitor_CASE_Monitor3.sb_Suspect_Traffic_Out_1_notification, to SW_adapter_low_adapter_low.sb_Suspect_Traffic_In3_notification);\n    connection seL4SharedData conn32(from SW_Teleport_Monitor_CASE_Monitor3.sb_Suspect_Traffic_Out_queue_1, to SW_adapter_low_adapter_low.sb_Suspect_Traffic_In3_queue);\n    connection seL4Notification conn33(from SW_Attestation_Manager_CASE_AttestationManager.sb_self_pacer_tick, to SW_Attestation_Manager_CASE_AttestationManager.sb_self_pacer_tock);\n    connection seL4Notification conn34(from SW_Attestation_Gate_CASE_AttestationGate.sb_self_pacer_tick, to SW_Attestation_Gate_CASE_AttestationGate.sb_self_pacer_tock);\n    connection seL4Notification conn35(from SW_Expected_Position_Monitor_CASE_Monitor1.sb_self_pacer_tick, to SW_Expected_Position_Monitor_CASE_Monitor1.sb_self_pacer_tock);\n    connection seL4Notification conn36(from SW_Duplicate_Entity_Monitor_CASE_Monitor2.sb_self_pacer_tick, to SW_Duplicate_Entity_Monitor_CASE_Monitor2.sb_self_pacer_tock);\n    connection seL4Notification conn37(from SW_adapter_low_adapter_low.sb_self_pacer_tick, to SW_adapter_low_adapter_low.sb_self_pacer_tock);\n    connection seL4Notification conn38(from SW_adapter_high_adapter_high.sb_self_pacer_tick, to SW_adapter_high_adapter_high.sb_self_pacer_tock);\n    connection seL4Notification conn39(from SW_Teleport_Monitor_CASE_Monitor3.sb_self_pacer_tick, to SW_Teleport_Monitor_CASE_Monitor3.sb_self_pacer_tock);\n  }\n\n  configuration {\n    SW_Attestation_Manager_CASE_AttestationManager._domain = 7;\n    SW_Attestation_Gate_CASE_AttestationGate._domain = 8;\n    SW_Expected_Position_Monitor_CASE_Monitor1._domain = 4;\n    SW_Duplicate_Entity_Monitor_CASE_Monitor2._domain = 5;\n    SW_adapter_low_adapter_low._domain = 3;\n    SW_adapter_high_adapter_high._domain = 2;\n    SW_Teleport_Monitor_CASE_Monitor3._domain = 6;\n    conn2.size = 69632;\n    SW_Attestation_Manager_CASE_AttestationManager.sb_AttestationRequest_queue_1_access = \"W\";\n    SW_adapter_low_adapter_low.sb_AttestationRequest_queue_access = \"R\";\n    conn4.size = 69632;\n    SW_Attestation_Manager_CASE_AttestationManager.sb_TrustedIds_queue_1_access = \"W\";\n    SW_Attestation_Gate_CASE_AttestationGate.sb_TrustedIds_queue_access = \"R\";\n    conn6.size = 69632;\n    SW_Attestation_Manager_CASE_AttestationManager.sb_TerminateAttestation_queue_1_access = \"W\";\n    SW_adapter_low_adapter_low.sb_TerminateAttestation_queue_access = \"R\";\n    conn8.size = 69632;\n    SW_Attestation_Gate_CASE_AttestationGate.sb_SHM_QUEUE_Request_Out_queue_1_access = \"W\";\n    SW_adapter_high_adapter_high.sb_Request_In_queue_access = \"R\";\n    conn10.size = 69632;\n    SW_Attestation_Gate_CASE_AttestationGate.sb_Connection_Command_Out_queue_1_access = \"W\";\n    SW_adapter_high_adapter_high.sb_Connection_Command_In_queue_access = \"R\";\n    conn12.size = 69632;\n    SW_Expected_Position_Monitor_CASE_Monitor1.sb_Suspect_Traffic_Out_queue_1_access = \"W\";\n    SW_adapter_low_adapter_low.sb_Suspect_Traffic_In1_queue_access = \"R\";\n    conn14.size = 69632;\n    SW_Duplicate_Entity_Monitor_CASE_Monitor2.sb_Suspect_Traffic_Out_queue_1_access = \"W\";\n    SW_adapter_low_adapter_low.sb_Suspect_Traffic_In2_queue_access = \"R\";\n    conn16.size = 69632;\n    SW_adapter_low_adapter_low.sb_SHM_QUEUE_Request_Out_queue_1_access = \"W\";\n    SW_Attestation_Gate_CASE_AttestationGate.sb_SHM_QUEUE_Request_In_queue_access = \"R\";\n    conn18.size = 69632;\n    SW_adapter_low_adapter_low.sb_AttestationResponse_queue_1_access = \"W\";\n    SW_Attestation_Manager_CASE_AttestationManager.sb_AttestationResponse_queue_access = \"R\";\n    conn20.size = 69632;\n    SW_adapter_low_adapter_low.sb_Connection_Command_Out_queue_1_access = \"W\";\n    SW_Attestation_Gate_CASE_AttestationGate.sb_Connection_Command_In_queue_access = \"R\";\n    conn22.size = 69632;\n    SW_adapter_low_adapter_low.sb_InitiateAttestation_queue_1_access = \"W\";\n    SW_Attestation_Manager_CASE_AttestationManager.sb_InitiateAttestation_queue_access = \"R\";\n    conn24.size = 69632;\n    SW_adapter_high_adapter_high.sb_Response_Out_queue_1_access = \"W\";\n    SW_adapter_low_adapter_low.sb_Response_In_queue_access = \"R\";\n    conn26.size = 69632;\n    SW_adapter_high_adapter_high.sb_ADSB_Messages_Out_queue_1_access = \"W\";\n    SW_Expected_Position_Monitor_CASE_Monitor1.sb_Observed_queue_access = \"R\";\n    SW_Duplicate_Entity_Monitor_CASE_Monitor2.sb_Observed_queue_access = \"R\";\n    SW_Teleport_Monitor_CASE_Monitor3.sb_Observed_queue_access = \"R\";\n    SW_adapter_low_adapter_low.sb_ADSB_Messages_In_queue_access = \"R\";\n    conn28.size = 69632;\n    SW_adapter_high_adapter_high.sb_SHM_HEADER_adsb_to_ptab_queue_1_access = \"W\";\n    SW_adapter_low_adapter_low.sb_SHM_HEADER_adsb_to_ptab_queue_access = \"R\";\n    conn30.size = 69632;\n    SW_adapter_high_adapter_high.sb_Connection_Command_Out_queue_1_access = \"W\";\n    SW_adapter_low_adapter_low.sb_Connection_Command_In_queue_access = \"R\";\n    conn32.size = 69632;\n    SW_Teleport_Monitor_CASE_Monitor3.sb_Suspect_Traffic_Out_queue_1_access = \"W\";\n    SW_adapter_low_adapter_low.sb_Suspect_Traffic_In3_queue_access = \"R\";\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/CMake_CakeMLOptions.cmake",
        {
          "type" : "ITestResource",
          "content" : "option(CAKEML_DUMP_BUFFERS\n       \"Print the contents of byte-arrays being sent to CakeML\"\n       OFF)\n\nif(CAKEML_DUMP_BUFFERS OR \"$ENV{CAKEML_DUMP_BUFFERS}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_DUMP_BUFFERS)\nendif()\n\noption(CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n       \"Print warning messages if byte-arrays being sent to CakeML are larger than expected\"\n       OFF)\n\nif(CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS OR \"$ENV{CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS)\nendif()\n\noption(CAKEML_ASSEMBLIES_PRESENT\n       \"Enable if CakeML assembly files have been included\"\n       OFF)\n\nif(CAKEML_ASSEMBLIES_PRESENT OR \"$ENV{CAKEML_ASSEMBLIES_PRESENT}\" STREQUAL \"ON\")\n   add_definitions(-DCAKEML_ASSEMBLIES_PRESENT)\nendif()",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/CMake_TranspilerOptions.cmake",
        {
          "type" : "ITestResource",
          "content" : "option(BOUND_CHECK\n       \"Build the program with sequence bound checking.\"\n       OFF)\n\nif(BOUND_CHECK OR \"$ENV{BOUND_CHECK}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_BOUND_CHECK)\nendif()\n\noption(NO_PRINT\n       \"Build the program without console output.\"\n       OFF)\n\nif(NO_PRINT OR \"$ENV{NO_PRINT}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_NO_PRINT)\nendif()\n\noption(RANGE_CHECK\n       \"Build the program with range checking.\"\n       OFF)\n\nif(RANGE_CHECK OR \"$ENV{RANGE_CHECK}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_RANGE_CHECK)\nendif()\n\noption(WITH_LOC\n       \"Build the program with Slang location info.\"\n       OFF)\n\nif(WITH_LOC OR \"$ENV{WITH_LOC}\" STREQUAL \"ON\")\n   add_definitions(-DSIREUM_LOC)\nendif()",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (VPM_8600B_Ext_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_CakeMLOptions.cmake)\n\ninclude(${CMAKE_CURRENT_LIST_DIR}\/CMake_TranspilerOptions.cmake)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/adapter_low_impl_SW_adapter_low_adapter_low)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/adapter_high_impl_SW_adapter_high_adapter_high)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/slang_libraries\/SlangTypeLibrary)\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\n  SOURCES components\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/src\/sb_CASE_AttestationManager_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/includes\/ types\/includes\n  LIBS CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\n)\n\nDeclareCAmkESComponent(CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\n  SOURCES components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_Impl_ffi.c components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_Impl.S components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/includes\/ types\/includes\n  LIBS CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\n)\n\nDeclareCAmkESComponent(CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\n  SOURCES components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/src\/sb_CASE_Monitor1_Impl_ffi.c components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/src\/sb_CASE_Monitor1_Impl.S components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/src\/sb_CASE_Monitor1_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/includes\/ types\/includes\n  LIBS CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\n)\n\nDeclareCAmkESComponent(CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\n  SOURCES components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/src\/sb_CASE_Monitor2_Impl_ffi.c components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/src\/sb_CASE_Monitor2_Impl.S components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/src\/sb_CASE_Monitor2_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/includes\/ types\/includes\n  LIBS CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\n)\n\nDeclareCAmkESComponent(adapter_low_impl_SW_adapter_low_adapter_low\n  SOURCES components\/adapter_low_impl_SW_adapter_low_adapter_low\/src\/sb_adapter_low_impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/adapter_low_impl_SW_adapter_low_adapter_low\/includes\/ types\/includes\n  LIBS adapter_low_impl_SW_adapter_low_adapter_low\n)\n\nDeclareCAmkESComponent(adapter_high_impl_SW_adapter_high_adapter_high\n  SOURCES components\/adapter_high_impl_SW_adapter_high_adapter_high\/src\/sb_adapter_high_impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/adapter_high_impl_SW_adapter_high_adapter_high\/includes\/ types\/includes\n  LIBS adapter_high_impl_SW_adapter_high_adapter_high\n)\n\nDeclareCAmkESComponent(CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\n  SOURCES components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/src\/sb_CASE_Monitor3_Impl_ffi.c components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/src\/sb_CASE_Monitor3_Impl.S components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/src\/sb_CASE_Monitor3_Impl.c types\/src\/sb_queue_union_art_DataContent_1.c types\/src\/sb_queue_union_art_DataContent_1.c\n  INCLUDES components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/includes\/ types\/includes\n  LIBS CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\n)\n\nDeclareCAmkESRootserver(VPM_8600B_Ext_impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/bin\/run-camkes.sh",
        {
          "type" : "ITestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:sh\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate,help\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"-c, --camkes-dir       Location of CAmkES project\"\n  echo \"-n, --non-interactive  Non-interactive mode.  Symlink in apps directory will be replaced\"\n  echo \"                         if present\"\n  echo \"-o, --camkes-options   CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"-s, --simulate         Simulate via QEMU\"\n  echo \"-h, --help             Display this information\"\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\n    exit 2\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    -h|--help) usage; exit 0 ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\n  exit 3\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    rm -rf ${BUILD_DIR}\n    mkdir ${BUILD_DIR}\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\ncat >${BUILD_DIR}\/sim << EOL\n#!\/usr\/bin\/env bash\n\nexport SCRIPT_HOME=\\$( cd \"\\$( dirname \"\\$0\" )\" &> \/dev\/null && pwd )\ncd \\${SCRIPT_HOME}\n\n# console output from simulation disappears when QEMU shuts down when run from\n# the CAmkES generated .\/simulate script. Instead call QEMU directly using the\n# default values .\/simulate would pass\n\nqemu-system-x86_64 \\\\\n    -cpu Nehalem,-vme,+pdpe1gb,-xsave,-xsaveopt,-xsavec,-fsgsbase,-invpcid,enforce \\\\\n    -nographic \\\\\n    -serial mon:stdio \\\\\n    -m size=512M \\\\\n    -kernel images\/kernel-x86_64-pc99 \\\\\n    -initrd images\/capdl-loader-image-x86_64-pc99\nEOL\n\nchmod 700 ${BUILD_DIR}\/sim\necho \"Wrote: ${BUILD_DIR}\/sim\"\n\nif [ \"${SIMULATE}\" = true ]; then\n  # ${BUILD_DIR}\/simulate\n  ${BUILD_DIR}\/sim\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/src\/sb_CASE_AttestationManager_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_AttestationManager_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nbool sb_AttestationRequest_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_AttestationRequest_queue_1, (union_art_DataContent*) data);\n  sb_AttestationRequest_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_AttestationResponse_recv_queue;\n\n\/************************************************************************\n * sb_AttestationResponse_dequeue_poll:\n ************************************************************************\/\nbool sb_AttestationResponse_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_AttestationResponse_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_AttestationResponse_dequeue:\n ************************************************************************\/\nbool sb_AttestationResponse_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_AttestationResponse_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_AttestationResponse_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_AttestationResponse_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_AttestationResponse_recv_queue);\n}\n\nbool sb_TrustedIds_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_TrustedIds_queue_1, (union_art_DataContent*) data);\n  sb_TrustedIds_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_InitiateAttestation_recv_queue;\n\n\/************************************************************************\n * sb_InitiateAttestation_dequeue_poll:\n ************************************************************************\/\nbool sb_InitiateAttestation_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_InitiateAttestation_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_InitiateAttestation_dequeue:\n ************************************************************************\/\nbool sb_InitiateAttestation_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_InitiateAttestation_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_InitiateAttestation_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_InitiateAttestation_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_InitiateAttestation_recv_queue);\n}\n\nbool sb_TerminateAttestation_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_TerminateAttestation_queue_1, (union_art_DataContent*) data);\n  sb_TerminateAttestation_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send AttestationRequest: Out EventDataPort VPM__CASE_AttestationRequestMsg_impl\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_AttestationRequest_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationManager_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_AttestationRequest_Send\", 0);\n\n  sb_AttestationRequest_enqueue(d);\n}\n\n\/\/ send TrustedIds: Out EventDataPort CASE_Proxies__WhiteList_impl\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_TrustedIds_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationManager_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_TrustedIds_Send\", 0);\n\n  sb_TrustedIds_enqueue(d);\n}\n\n\/\/ send TerminateAttestation: Out EventDataPort Common_Types__Unsigned_32\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_TerminateAttestation_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationManager_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_TerminateAttestation_Send\", 0);\n\n  sb_TerminateAttestation_enqueue(d);\n}\n\n\/\/ is_empty AttestationResponse: In EventDataPort\nB VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_AttestationResponse_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_AttestationResponse_is_empty();\n}\n\n\/\/ receive AttestationResponse: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_AttestationResponse_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationManager_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_AttestationResponse_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_AttestationResponse_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty InitiateAttestation: In EventDataPort\nB VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_InitiateAttestation_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_InitiateAttestation_is_empty();\n}\n\n\/\/ receive InitiateAttestation: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_InitiateAttestation_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationManager_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_seL4Nix_InitiateAttestation_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_InitiateAttestation_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationManager_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\\n\");\n\n  \/\/ initialise data structure for outgoing event data port AttestationRequest\n  sb_queue_union_art_DataContent_1_init(sb_AttestationRequest_queue_1);\n\n  \/\/ initialise data structure for incoming event data port AttestationResponse\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_AttestationResponse_recv_queue, sb_AttestationResponse_queue);\n\n  \/\/ initialise data structure for outgoing event data port TrustedIds\n  sb_queue_union_art_DataContent_1_init(sb_TrustedIds_queue_1);\n\n  \/\/ initialise data structure for incoming event data port InitiateAttestation\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_InitiateAttestation_recv_queue, sb_InitiateAttestation_queue);\n\n  \/\/ initialise data structure for outgoing event data port TerminateAttestation\n  sb_queue_union_art_DataContent_1_init(sb_TerminateAttestation_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationManager_Impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    VPM_ben__SeL4_VPM_CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_AttestationManager_Impl_SW_Attestation_Manager_CASE_AttestationManager\/includes\/sb_CASE_AttestationManager_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_ATTESTATIONMANAGER_IMPL_H\n#define SB_CASE_ATTESTATIONMANAGER_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_AttestationRequest_enqueue(const union_art_DataContent *);\n\nbool sb_AttestationResponse_dequeue(union_art_DataContent *);\n\nbool sb_TrustedIds_enqueue(const union_art_DataContent *);\n\nbool sb_InitiateAttestation_dequeue(union_art_DataContent *);\n\nbool sb_TerminateAttestation_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_CASE_ATTESTATIONMANAGER_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_Impl_ffi.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <all.h>\n#include <camkes.h>\n#include <stdbool.h>\n#include <CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_api.h>\n#include <CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.h>\n\nVPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints entryPoints;\n\n\/\/ IS_D10119=IS[Z, art.Art.PortId]\nIS_D10119 event_in_port_ids;\nIS_D10119 data_in_port_ids;\nIS_D10119 event_out_port_ids;\nIS_D10119 data_out_port_ids;\nbool initialized = false;\n\nvoid init(STACK_FRAME_ONLY) {\n  if(!initialized) {\n    DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"init\", 0);\n\n    entryPoints = (VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_entryPoints(SF_LAST);\n    event_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n    data_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n    event_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n    data_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n    initialized = true;\n  }\n}\n\nvoid ffiinitializeComponent(unsigned char *parameter, long parameterSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiinitializeComponent\", 0);\n\n  entryPoints = (VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_entryPoints(SF_LAST);\n  event_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n  data_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n  event_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n  data_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n}\n\nvoid checkAndReportBufferOverrun(STACK_FRAME long bytesWritten, long bufferSizeBytes) {\n  #ifdef CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"checkAndReportBufferOverrun\", 0);\n\n  init(SF_LAST);\n  if (bytesWritten > bufferSizeBytes) {\n    DeclNewString(_str);\n    String str = (String)&_str;\n    String__append(SF str, string(\"Wrote too many bytes to buffer\"));\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF str);\n  }\n  #endif\n}\n\nvoid dumpBuffer(STACK_FRAME size_t numBits, U8* buffer) {\n  #ifdef CAKEML_DUMP_BUFFERS\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"dumpBuffer\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  String__append(SF str, string(\"[\"));\n  size_t end = ((numBits \/ 8) > 80) ? 80 : (numBits \/ 8);\n  for (int i = 0 ; i < end ; ++i) {\n    U8_string_(SF str, buffer[i]);\n  }\n  String__append(SF str, string(\"]\"));\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF str);\n  #endif\n}\n\nvoid ffiapi_receiveInput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_receiveInput\", 0);\n\n  init(SF_LAST);\n  art_Art_receiveInput(SF event_in_port_ids, data_in_port_ids);\n}\n\nvoid ffiapi_sendOutput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_sendOutput\", 0);\n\n  init(SF_LAST);\n  art_Art_sendOutput(SF event_out_port_ids, data_out_port_ids);\n}\n\nvoid ffiapi_logInfo(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_logInfo\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_logDebug(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_logDebug\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_logError(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_logError\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF str);\n} \n\nvoid ffiapi_get_SHM_QUEUE_Request_In(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_get_SHM_QUEUE_Request_In\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_SHM_QUEUE_Request_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_SHM_QUEUE_Request_Out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_send_SHM_QUEUE_Request_Out\", 0);\n\n  init(SF_LAST);\n  api_put_SHM_QUEUE_Request_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffiapi_get_Connection_Command_In(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_get_Connection_Command_In\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_Connection_Command_In__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_Connection_Command_Out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_send_Connection_Command_Out\", 0);\n\n  init(SF_LAST);\n  api_put_Connection_Command_Out__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffiapi_get_TrustedIds(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl_ffi.c\", \"\", \"ffiapi_get_TrustedIds\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_TrustedIds__VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffisb_pacer_notification_wait(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tock_wait();\n  output[0] = 1;\n}\n\nvoid ffisb_pacer_notification_emit(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tick_emit();\n  output[0] = 1;\n}\n\nvoid ffiraw_print_buffer(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n\n  int elideAfter = 20; \/\/ stop printing after this many consecutive 0's seen\n  int stopAfter = 50; \/\/ exit after this many consecutive 0's seen, lessens 'busy-wait'\n\n  U8* buffer = (U8 *) parameter;\n\n  printf(\"%i bytes\\n\", parameterSizeBytes); \/\/ doesn't include the bool byte\n\n  if(parameterSizeBytes > 0) {\n    int numZerosSeen = 0;\n    printf(\"[%02x\\n\", buffer[0]); \/\/ first byte is a bool\n    for(int i = 1; i < parameterSizeBytes + 1; i++) {\n      numZerosSeen = buffer[i] == 0 ? (numZerosSeen + 1) : 0;\n      if(numZerosSeen >= elideAfter) {\n        if(numZerosSeen % stopAfter == 0) { printf(\"...\"); break; }\n      } else {\n      \tprintf(\"%02x \", buffer[i]);\n      \tif(i % 16 == 0) printf(\"\\n\");\n      }\n    }\n    printf(\"]\\n\");\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_Impl.S",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ placeholder for CakeML assembly",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/src\/sb_CASE_AttestationGate_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_AttestationGate_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_SHM_QUEUE_Request_In_recv_queue;\n\n\/************************************************************************\n * sb_SHM_QUEUE_Request_In_dequeue_poll:\n ************************************************************************\/\nbool sb_SHM_QUEUE_Request_In_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_SHM_QUEUE_Request_In_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_SHM_QUEUE_Request_In_dequeue:\n ************************************************************************\/\nbool sb_SHM_QUEUE_Request_In_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_SHM_QUEUE_Request_In_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_SHM_QUEUE_Request_In_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_SHM_QUEUE_Request_In_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_SHM_QUEUE_Request_In_recv_queue);\n}\n\nbool sb_SHM_QUEUE_Request_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_SHM_QUEUE_Request_Out_queue_1, (union_art_DataContent*) data);\n  sb_SHM_QUEUE_Request_Out_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Connection_Command_In_recv_queue;\n\n\/************************************************************************\n * sb_Connection_Command_In_dequeue_poll:\n ************************************************************************\/\nbool sb_Connection_Command_In_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Connection_Command_In_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Connection_Command_In_dequeue:\n ************************************************************************\/\nbool sb_Connection_Command_In_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Connection_Command_In_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Connection_Command_In_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Connection_Command_In_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Connection_Command_In_recv_queue);\n}\n\nbool sb_Connection_Command_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_Connection_Command_Out_queue_1, (union_art_DataContent*) data);\n  sb_Connection_Command_Out_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_TrustedIds_recv_queue;\n\n\/************************************************************************\n * sb_TrustedIds_dequeue_poll:\n ************************************************************************\/\nbool sb_TrustedIds_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_TrustedIds_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_TrustedIds_dequeue:\n ************************************************************************\/\nbool sb_TrustedIds_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_TrustedIds_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_TrustedIds_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_TrustedIds_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_TrustedIds_recv_queue);\n}\n\n\/\/ send SHM_QUEUE_Request_Out: Out EventDataPort CASE_Proxies__shm_queue_request_array_impl\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_SHM_QUEUE_Request_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_SHM_QUEUE_Request_Out_Send\", 0);\n\n  sb_SHM_QUEUE_Request_Out_enqueue(d);\n}\n\n\/\/ send Connection_Command_Out: Out EventDataPort CASE_Proxies__connection_command_impl\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_Connection_Command_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_Connection_Command_Out_Send\", 0);\n\n  sb_Connection_Command_Out_enqueue(d);\n}\n\n\/\/ is_empty SHM_QUEUE_Request_In: In EventDataPort\nB VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_SHM_QUEUE_Request_In_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_SHM_QUEUE_Request_In_is_empty();\n}\n\n\/\/ receive SHM_QUEUE_Request_In: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_SHM_QUEUE_Request_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_SHM_QUEUE_Request_In_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_SHM_QUEUE_Request_In_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty Connection_Command_In: In EventDataPort\nB VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_Connection_Command_In_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Connection_Command_In_is_empty();\n}\n\n\/\/ receive Connection_Command_In: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_Connection_Command_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_Connection_Command_In_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Connection_Command_In_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty TrustedIds: In EventDataPort\nB VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_TrustedIds_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_TrustedIds_is_empty();\n}\n\n\/\/ receive TrustedIds: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_TrustedIds_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_AttestationGate_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_seL4Nix_TrustedIds_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_TrustedIds_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\\n\");\n\n  \/\/ initialise data structure for incoming event data port SHM_QUEUE_Request_In\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_SHM_QUEUE_Request_In_recv_queue, sb_SHM_QUEUE_Request_In_queue);\n\n  \/\/ initialise data structure for outgoing event data port SHM_QUEUE_Request_Out\n  sb_queue_union_art_DataContent_1_init(sb_SHM_QUEUE_Request_Out_queue_1);\n\n  \/\/ initialise data structure for incoming event data port Connection_Command_In\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Connection_Command_In_recv_queue, sb_Connection_Command_In_queue);\n\n  \/\/ initialise data structure for outgoing event data port Connection_Command_Out\n  sb_queue_union_art_DataContent_1_init(sb_Connection_Command_Out_queue_1);\n\n  \/\/ initialise data structure for incoming event data port TrustedIds\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_TrustedIds_recv_queue, sb_TrustedIds_queue);\n\n  \/\/ initialise slang-embedded components\/ports\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\\n\");\n}\n\n#ifndef CAKEML_ASSEMBLIES_PRESENT\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_AttestationGate_Impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    VPM_ben__SeL4_VPM_CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_AttestationGate_Impl_SW_Attestation_Gate_CASE_AttestationGate\/includes\/sb_CASE_AttestationGate_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_ATTESTATIONGATE_IMPL_H\n#define SB_CASE_ATTESTATIONGATE_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_SHM_QUEUE_Request_In_dequeue(union_art_DataContent *);\n\nbool sb_SHM_QUEUE_Request_Out_enqueue(const union_art_DataContent *);\n\nbool sb_Connection_Command_In_dequeue(union_art_DataContent *);\n\nbool sb_Connection_Command_Out_enqueue(const union_art_DataContent *);\n\nbool sb_TrustedIds_dequeue(union_art_DataContent *);\n\n#endif \/\/ SB_CASE_ATTESTATIONGATE_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/src\/sb_CASE_Monitor1_Impl_ffi.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <all.h>\n#include <camkes.h>\n#include <stdbool.h>\n#include <CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_api.h>\n#include <CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.h>\n\nVPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints entryPoints;\n\n\/\/ IS_D10119=IS[Z, art.Art.PortId]\nIS_D10119 event_in_port_ids;\nIS_D10119 data_in_port_ids;\nIS_D10119 event_out_port_ids;\nIS_D10119 data_out_port_ids;\nbool initialized = false;\n\nvoid init(STACK_FRAME_ONLY) {\n  if(!initialized) {\n    DeclNewStackFrame(caller, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"init\", 0);\n\n    entryPoints = (VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_entryPoints(SF_LAST);\n    event_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n    data_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n    event_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n    data_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n    initialized = true;\n  }\n}\n\nvoid ffiinitializeComponent(unsigned char *parameter, long parameterSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"ffiinitializeComponent\", 0);\n\n  entryPoints = (VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_entryPoints(SF_LAST);\n  event_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n  data_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n  event_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n  data_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n}\n\nvoid checkAndReportBufferOverrun(STACK_FRAME long bytesWritten, long bufferSizeBytes) {\n  #ifdef CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"checkAndReportBufferOverrun\", 0);\n\n  init(SF_LAST);\n  if (bytesWritten > bufferSizeBytes) {\n    DeclNewString(_str);\n    String str = (String)&_str;\n    String__append(SF str, string(\"Wrote too many bytes to buffer\"));\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF str);\n  }\n  #endif\n}\n\nvoid dumpBuffer(STACK_FRAME size_t numBits, U8* buffer) {\n  #ifdef CAKEML_DUMP_BUFFERS\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"dumpBuffer\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  String__append(SF str, string(\"[\"));\n  size_t end = ((numBits \/ 8) > 80) ? 80 : (numBits \/ 8);\n  for (int i = 0 ; i < end ; ++i) {\n    U8_string_(SF str, buffer[i]);\n  }\n  String__append(SF str, string(\"]\"));\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF str);\n  #endif\n}\n\nvoid ffiapi_receiveInput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"ffiapi_receiveInput\", 0);\n\n  init(SF_LAST);\n  art_Art_receiveInput(SF event_in_port_ids, data_in_port_ids);\n}\n\nvoid ffiapi_sendOutput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"ffiapi_sendOutput\", 0);\n\n  init(SF_LAST);\n  art_Art_sendOutput(SF event_out_port_ids, data_out_port_ids);\n}\n\nvoid ffiapi_logInfo(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"ffiapi_logInfo\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF str);\n} \n\nvoid ffiapi_logDebug(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"ffiapi_logDebug\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF str);\n} \n\nvoid ffiapi_logError(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"ffiapi_logError\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF str);\n} \n\nvoid ffiapi_get_Observed(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"ffiapi_get_Observed\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_Suspect_Traffic_Out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl_ffi.c\", \"\", \"ffiapi_send_Suspect_Traffic_Out\", 0);\n\n  init(SF_LAST);\n  api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffisb_pacer_notification_wait(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tock_wait();\n  output[0] = 1;\n}\n\nvoid ffisb_pacer_notification_emit(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tick_emit();\n  output[0] = 1;\n}\n\nvoid ffiraw_print_buffer(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n\n  int elideAfter = 20; \/\/ stop printing after this many consecutive 0's seen\n  int stopAfter = 50; \/\/ exit after this many consecutive 0's seen, lessens 'busy-wait'\n\n  U8* buffer = (U8 *) parameter;\n\n  printf(\"%i bytes\\n\", parameterSizeBytes); \/\/ doesn't include the bool byte\n\n  if(parameterSizeBytes > 0) {\n    int numZerosSeen = 0;\n    printf(\"[%02x\\n\", buffer[0]); \/\/ first byte is a bool\n    for(int i = 1; i < parameterSizeBytes + 1; i++) {\n      numZerosSeen = buffer[i] == 0 ? (numZerosSeen + 1) : 0;\n      if(numZerosSeen >= elideAfter) {\n        if(numZerosSeen % stopAfter == 0) { printf(\"...\"); break; }\n      } else {\n      \tprintf(\"%02x \", buffer[i]);\n      \tif(i % 16 == 0) printf(\"\\n\");\n      }\n    }\n    printf(\"]\\n\");\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/src\/sb_CASE_Monitor1_Impl.S",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ placeholder for CakeML assembly",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/src\/sb_CASE_Monitor1_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_Monitor1_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Observed_recv_queue;\n\n\/************************************************************************\n * sb_Observed_dequeue_poll:\n ************************************************************************\/\nbool sb_Observed_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Observed_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Observed_dequeue:\n ************************************************************************\/\nbool sb_Observed_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Observed_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Observed_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Observed_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Observed_recv_queue);\n}\n\nbool sb_Suspect_Traffic_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_Suspect_Traffic_Out_queue_1, (union_art_DataContent*) data);\n  sb_Suspect_Traffic_Out_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send Suspect_Traffic_Out: Out EventDataPort ADSB_Types__MonitorReport_impl\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix_Suspect_Traffic_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor1_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix_Suspect_Traffic_Out_Send\", 0);\n\n  sb_Suspect_Traffic_Out_enqueue(d);\n}\n\n\/\/ is_empty Observed: In EventDataPort\nB VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix_Observed_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Observed_is_empty();\n}\n\n\/\/ receive Observed: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix_Observed_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor1_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_seL4Nix_Observed_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Observed_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\\n\");\n\n  \/\/ initialise data structure for incoming event data port Observed\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Observed_recv_queue, sb_Observed_queue);\n\n  \/\/ initialise data structure for outgoing event data port Suspect_Traffic_Out\n  sb_queue_union_art_DataContent_1_init(sb_Suspect_Traffic_Out_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\\n\");\n}\n\n#ifndef CAKEML_ASSEMBLIES_PRESENT\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor1_Impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    VPM_ben__SeL4_VPM_CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor1_Impl_SW_Expected_Position_Monitor_CASE_Monitor1\/includes\/sb_CASE_Monitor1_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_MONITOR1_IMPL_H\n#define SB_CASE_MONITOR1_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_Observed_dequeue(union_art_DataContent *);\n\nbool sb_Suspect_Traffic_Out_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_CASE_MONITOR1_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/src\/sb_CASE_Monitor2_Impl_ffi.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <all.h>\n#include <camkes.h>\n#include <stdbool.h>\n#include <CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_api.h>\n#include <CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.h>\n\nVPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints entryPoints;\n\n\/\/ IS_D10119=IS[Z, art.Art.PortId]\nIS_D10119 event_in_port_ids;\nIS_D10119 data_in_port_ids;\nIS_D10119 event_out_port_ids;\nIS_D10119 data_out_port_ids;\nbool initialized = false;\n\nvoid init(STACK_FRAME_ONLY) {\n  if(!initialized) {\n    DeclNewStackFrame(caller, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"init\", 0);\n\n    entryPoints = (VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_entryPoints(SF_LAST);\n    event_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n    data_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n    event_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n    data_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n    initialized = true;\n  }\n}\n\nvoid ffiinitializeComponent(unsigned char *parameter, long parameterSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"ffiinitializeComponent\", 0);\n\n  entryPoints = (VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_entryPoints(SF_LAST);\n  event_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n  data_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n  event_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n  data_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n}\n\nvoid checkAndReportBufferOverrun(STACK_FRAME long bytesWritten, long bufferSizeBytes) {\n  #ifdef CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"checkAndReportBufferOverrun\", 0);\n\n  init(SF_LAST);\n  if (bytesWritten > bufferSizeBytes) {\n    DeclNewString(_str);\n    String str = (String)&_str;\n    String__append(SF str, string(\"Wrote too many bytes to buffer\"));\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF str);\n  }\n  #endif\n}\n\nvoid dumpBuffer(STACK_FRAME size_t numBits, U8* buffer) {\n  #ifdef CAKEML_DUMP_BUFFERS\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"dumpBuffer\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  String__append(SF str, string(\"[\"));\n  size_t end = ((numBits \/ 8) > 80) ? 80 : (numBits \/ 8);\n  for (int i = 0 ; i < end ; ++i) {\n    U8_string_(SF str, buffer[i]);\n  }\n  String__append(SF str, string(\"]\"));\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF str);\n  #endif\n}\n\nvoid ffiapi_receiveInput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"ffiapi_receiveInput\", 0);\n\n  init(SF_LAST);\n  art_Art_receiveInput(SF event_in_port_ids, data_in_port_ids);\n}\n\nvoid ffiapi_sendOutput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"ffiapi_sendOutput\", 0);\n\n  init(SF_LAST);\n  art_Art_sendOutput(SF event_out_port_ids, data_out_port_ids);\n}\n\nvoid ffiapi_logInfo(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"ffiapi_logInfo\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF str);\n} \n\nvoid ffiapi_logDebug(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"ffiapi_logDebug\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF str);\n} \n\nvoid ffiapi_logError(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"ffiapi_logError\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF str);\n} \n\nvoid ffiapi_get_Observed(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"ffiapi_get_Observed\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_Suspect_Traffic_Out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl_ffi.c\", \"\", \"ffiapi_send_Suspect_Traffic_Out\", 0);\n\n  init(SF_LAST);\n  api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffisb_pacer_notification_wait(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tock_wait();\n  output[0] = 1;\n}\n\nvoid ffisb_pacer_notification_emit(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tick_emit();\n  output[0] = 1;\n}\n\nvoid ffiraw_print_buffer(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n\n  int elideAfter = 20; \/\/ stop printing after this many consecutive 0's seen\n  int stopAfter = 50; \/\/ exit after this many consecutive 0's seen, lessens 'busy-wait'\n\n  U8* buffer = (U8 *) parameter;\n\n  printf(\"%i bytes\\n\", parameterSizeBytes); \/\/ doesn't include the bool byte\n\n  if(parameterSizeBytes > 0) {\n    int numZerosSeen = 0;\n    printf(\"[%02x\\n\", buffer[0]); \/\/ first byte is a bool\n    for(int i = 1; i < parameterSizeBytes + 1; i++) {\n      numZerosSeen = buffer[i] == 0 ? (numZerosSeen + 1) : 0;\n      if(numZerosSeen >= elideAfter) {\n        if(numZerosSeen % stopAfter == 0) { printf(\"...\"); break; }\n      } else {\n      \tprintf(\"%02x \", buffer[i]);\n      \tif(i % 16 == 0) printf(\"\\n\");\n      }\n    }\n    printf(\"]\\n\");\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/src\/sb_CASE_Monitor2_Impl.S",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ placeholder for CakeML assembly",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/src\/sb_CASE_Monitor2_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_Monitor2_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Observed_recv_queue;\n\n\/************************************************************************\n * sb_Observed_dequeue_poll:\n ************************************************************************\/\nbool sb_Observed_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Observed_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Observed_dequeue:\n ************************************************************************\/\nbool sb_Observed_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Observed_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Observed_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Observed_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Observed_recv_queue);\n}\n\nbool sb_Suspect_Traffic_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_Suspect_Traffic_Out_queue_1, (union_art_DataContent*) data);\n  sb_Suspect_Traffic_Out_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send Suspect_Traffic_Out: Out EventDataPort ADSB_Types__MonitorReport_impl\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix_Suspect_Traffic_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor2_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix_Suspect_Traffic_Out_Send\", 0);\n\n  sb_Suspect_Traffic_Out_enqueue(d);\n}\n\n\/\/ is_empty Observed: In EventDataPort\nB VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix_Observed_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Observed_is_empty();\n}\n\n\/\/ receive Observed: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix_Observed_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor2_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_seL4Nix_Observed_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Observed_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\\n\");\n\n  \/\/ initialise data structure for incoming event data port Observed\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Observed_recv_queue, sb_Observed_queue);\n\n  \/\/ initialise data structure for outgoing event data port Suspect_Traffic_Out\n  sb_queue_union_art_DataContent_1_init(sb_Suspect_Traffic_Out_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\\n\");\n}\n\n#ifndef CAKEML_ASSEMBLIES_PRESENT\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor2_Impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    VPM_ben__SeL4_VPM_CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor2_Impl_SW_Duplicate_Entity_Monitor_CASE_Monitor2\/includes\/sb_CASE_Monitor2_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_MONITOR2_IMPL_H\n#define SB_CASE_MONITOR2_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_Observed_dequeue(union_art_DataContent *);\n\nbool sb_Suspect_Traffic_Out_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_CASE_MONITOR2_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/adapter_low_impl_SW_adapter_low_adapter_low\/src\/sb_adapter_low_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_adapter_low_impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <adapter_low_impl_SW_adapter_low_adapter_low_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_ADSB_Messages_In_recv_queue;\n\n\/************************************************************************\n * sb_ADSB_Messages_In_dequeue_poll:\n ************************************************************************\/\nbool sb_ADSB_Messages_In_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_ADSB_Messages_In_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_ADSB_Messages_In_dequeue:\n ************************************************************************\/\nbool sb_ADSB_Messages_In_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_ADSB_Messages_In_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_ADSB_Messages_In_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_ADSB_Messages_In_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_ADSB_Messages_In_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Response_In_recv_queue;\n\n\/************************************************************************\n * sb_Response_In_dequeue_poll:\n ************************************************************************\/\nbool sb_Response_In_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Response_In_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Response_In_dequeue:\n ************************************************************************\/\nbool sb_Response_In_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Response_In_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Response_In_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Response_In_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Response_In_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_AttestationRequest_recv_queue;\n\n\/************************************************************************\n * sb_AttestationRequest_dequeue_poll:\n ************************************************************************\/\nbool sb_AttestationRequest_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_AttestationRequest_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_AttestationRequest_dequeue:\n ************************************************************************\/\nbool sb_AttestationRequest_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_AttestationRequest_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_AttestationRequest_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_AttestationRequest_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_AttestationRequest_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_SHM_HEADER_adsb_to_ptab_recv_queue;\n\n\/************************************************************************\n * sb_SHM_HEADER_adsb_to_ptab_dequeue_poll:\n ************************************************************************\/\nbool sb_SHM_HEADER_adsb_to_ptab_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_SHM_HEADER_adsb_to_ptab_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_SHM_HEADER_adsb_to_ptab_dequeue:\n ************************************************************************\/\nbool sb_SHM_HEADER_adsb_to_ptab_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_SHM_HEADER_adsb_to_ptab_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_SHM_HEADER_adsb_to_ptab_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_SHM_HEADER_adsb_to_ptab_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_SHM_HEADER_adsb_to_ptab_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Connection_Command_In_recv_queue;\n\n\/************************************************************************\n * sb_Connection_Command_In_dequeue_poll:\n ************************************************************************\/\nbool sb_Connection_Command_In_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Connection_Command_In_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Connection_Command_In_dequeue:\n ************************************************************************\/\nbool sb_Connection_Command_In_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Connection_Command_In_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Connection_Command_In_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Connection_Command_In_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Connection_Command_In_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Suspect_Traffic_In1_recv_queue;\n\n\/************************************************************************\n * sb_Suspect_Traffic_In1_dequeue_poll:\n ************************************************************************\/\nbool sb_Suspect_Traffic_In1_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Suspect_Traffic_In1_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Suspect_Traffic_In1_dequeue:\n ************************************************************************\/\nbool sb_Suspect_Traffic_In1_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Suspect_Traffic_In1_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Suspect_Traffic_In1_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Suspect_Traffic_In1_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Suspect_Traffic_In1_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Suspect_Traffic_In2_recv_queue;\n\n\/************************************************************************\n * sb_Suspect_Traffic_In2_dequeue_poll:\n ************************************************************************\/\nbool sb_Suspect_Traffic_In2_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Suspect_Traffic_In2_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Suspect_Traffic_In2_dequeue:\n ************************************************************************\/\nbool sb_Suspect_Traffic_In2_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Suspect_Traffic_In2_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Suspect_Traffic_In2_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Suspect_Traffic_In2_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Suspect_Traffic_In2_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Suspect_Traffic_In3_recv_queue;\n\n\/************************************************************************\n * sb_Suspect_Traffic_In3_dequeue_poll:\n ************************************************************************\/\nbool sb_Suspect_Traffic_In3_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Suspect_Traffic_In3_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Suspect_Traffic_In3_dequeue:\n ************************************************************************\/\nbool sb_Suspect_Traffic_In3_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Suspect_Traffic_In3_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Suspect_Traffic_In3_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Suspect_Traffic_In3_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Suspect_Traffic_In3_recv_queue);\n}\n\nbool sb_SHM_QUEUE_Request_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_SHM_QUEUE_Request_Out_queue_1, (union_art_DataContent*) data);\n  sb_SHM_QUEUE_Request_Out_1_notification_emit();\n\n  return true;\n}\n\nbool sb_AttestationResponse_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_AttestationResponse_queue_1, (union_art_DataContent*) data);\n  sb_AttestationResponse_1_notification_emit();\n\n  return true;\n}\n\nbool sb_Connection_Command_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_Connection_Command_Out_queue_1, (union_art_DataContent*) data);\n  sb_Connection_Command_Out_1_notification_emit();\n\n  return true;\n}\n\nbool sb_InitiateAttestation_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_InitiateAttestation_queue_1, (union_art_DataContent*) data);\n  sb_InitiateAttestation_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_TerminateAttestation_recv_queue;\n\n\/************************************************************************\n * sb_TerminateAttestation_dequeue_poll:\n ************************************************************************\/\nbool sb_TerminateAttestation_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_TerminateAttestation_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_TerminateAttestation_dequeue:\n ************************************************************************\/\nbool sb_TerminateAttestation_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_TerminateAttestation_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_TerminateAttestation_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_TerminateAttestation_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_TerminateAttestation_recv_queue);\n}\n\n\/\/ send SHM_QUEUE_Request_Out: Out EventDataPort CASE_Proxies__shm_queue_request_array_impl\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Request_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Request_Out_Send\", 0);\n\n  sb_SHM_QUEUE_Request_Out_enqueue(d);\n}\n\n\/\/ send AttestationResponse: Out EventDataPort VPM__CASE_AttestationResponseMsg_impl\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_AttestationResponse_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_AttestationResponse_Send\", 0);\n\n  sb_AttestationResponse_enqueue(d);\n}\n\n\/\/ send Connection_Command_Out: Out EventDataPort CASE_Proxies__connection_command_impl\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Connection_Command_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Connection_Command_Out_Send\", 0);\n\n  sb_Connection_Command_Out_enqueue(d);\n}\n\n\/\/ send InitiateAttestation: Out EventDataPort Common_Types__Unsigned_32\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_InitiateAttestation_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_InitiateAttestation_Send\", 0);\n\n  sb_InitiateAttestation_enqueue(d);\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_ADSB_Heartbeat_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_ADSB_Heartbeat_Out_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_ADSB_Ownship_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_ADSB_Ownship_Out_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_ADSB_Traffic_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_ADSB_Traffic_Out_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Response_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Response_Out_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_AttestationRequest_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_AttestationRequest_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Suspect_Traffic_Out1_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Suspect_Traffic_Out1_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Suspect_Traffic_Out2_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Suspect_Traffic_Out2_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Suspect_Traffic_Out3_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Suspect_Traffic_Out3_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ is_empty ADSB_Messages_In: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_ADSB_Messages_In_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_ADSB_Messages_In_is_empty();\n}\n\n\/\/ receive ADSB_Messages_In: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_ADSB_Messages_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_ADSB_Messages_In_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_ADSB_Messages_In_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty Response_In: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Response_In_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Response_In_is_empty();\n}\n\n\/\/ receive Response_In: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Response_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Response_In_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Response_In_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty AttestationRequest: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_AttestationRequest_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_AttestationRequest_is_empty();\n}\n\n\/\/ receive AttestationRequest: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_AttestationRequest_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_AttestationRequest_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_AttestationRequest_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty SHM_HEADER_adsb_to_ptab: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_HEADER_adsb_to_ptab_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_SHM_HEADER_adsb_to_ptab_is_empty();\n}\n\n\/\/ receive SHM_HEADER_adsb_to_ptab: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_HEADER_adsb_to_ptab_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_HEADER_adsb_to_ptab_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_SHM_HEADER_adsb_to_ptab_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty Connection_Command_In: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Connection_Command_In_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Connection_Command_In_is_empty();\n}\n\n\/\/ receive Connection_Command_In: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Connection_Command_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Connection_Command_In_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Connection_Command_In_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty Suspect_Traffic_In1: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In1_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Suspect_Traffic_In1_is_empty();\n}\n\n\/\/ receive Suspect_Traffic_In1: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In1_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In1_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Suspect_Traffic_In1_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty Suspect_Traffic_In2: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In2_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Suspect_Traffic_In2_is_empty();\n}\n\n\/\/ receive Suspect_Traffic_In2: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In2_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In2_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Suspect_Traffic_In2_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty Suspect_Traffic_In3: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In3_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Suspect_Traffic_In3_is_empty();\n}\n\n\/\/ receive Suspect_Traffic_In3: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In3_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_Suspect_Traffic_In3_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Suspect_Traffic_In3_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty TerminateAttestation: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_TerminateAttestation_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_TerminateAttestation_is_empty();\n}\n\n\/\/ receive TerminateAttestation: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_TerminateAttestation_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_TerminateAttestation_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_TerminateAttestation_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Request_In_IsEmpty(STACK_FRAME_ONLY) {\n  return T;\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Request_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_Request_In_Receive\", 0);\n\n  \/\/ FIXME: dummy implementation\n\n  \/\/ put None in result\n  DeclNewNone_964667(none);\n  Type_assign(result, &none, sizeof(union Option_8E9F45));\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nB VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_AttestationResponse_IsEmpty(STACK_FRAME_ONLY) {\n  return T;\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nUnit VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_AttestationResponse_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_low_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_seL4Nix_SHM_QUEUE_AttestationResponse_Receive\", 0);\n\n  \/\/ FIXME: dummy implementation\n\n  \/\/ put None in result\n  DeclNewNone_964667(none);\n  Type_assign(result, &none, sizeof(union Option_8E9F45));\n}\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_adapter_low_impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of adapter_low_impl_SW_adapter_low_adapter_low\\n\");\n\n  \/\/ initialise data structure for incoming event data port ADSB_Messages_In\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_ADSB_Messages_In_recv_queue, sb_ADSB_Messages_In_queue);\n\n  \/\/ initialise data structure for incoming event data port Response_In\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Response_In_recv_queue, sb_Response_In_queue);\n\n  \/\/ initialise data structure for incoming event data port AttestationRequest\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_AttestationRequest_recv_queue, sb_AttestationRequest_queue);\n\n  \/\/ initialise data structure for incoming event data port SHM_HEADER_adsb_to_ptab\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_SHM_HEADER_adsb_to_ptab_recv_queue, sb_SHM_HEADER_adsb_to_ptab_queue);\n\n  \/\/ initialise data structure for incoming event data port Connection_Command_In\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Connection_Command_In_recv_queue, sb_Connection_Command_In_queue);\n\n  \/\/ initialise data structure for incoming event data port Suspect_Traffic_In1\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Suspect_Traffic_In1_recv_queue, sb_Suspect_Traffic_In1_queue);\n\n  \/\/ initialise data structure for incoming event data port Suspect_Traffic_In2\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Suspect_Traffic_In2_recv_queue, sb_Suspect_Traffic_In2_queue);\n\n  \/\/ initialise data structure for incoming event data port Suspect_Traffic_In3\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Suspect_Traffic_In3_recv_queue, sb_Suspect_Traffic_In3_queue);\n\n  \/\/ initialise data structure for outgoing event data port SHM_QUEUE_Request_Out\n  sb_queue_union_art_DataContent_1_init(sb_SHM_QUEUE_Request_Out_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port AttestationResponse\n  sb_queue_union_art_DataContent_1_init(sb_AttestationResponse_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port Connection_Command_Out\n  sb_queue_union_art_DataContent_1_init(sb_Connection_Command_Out_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port InitiateAttestation\n  sb_queue_union_art_DataContent_1_init(sb_InitiateAttestation_queue_1);\n\n  \/\/ initialise data structure for incoming event data port TerminateAttestation\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_TerminateAttestation_recv_queue, sb_TerminateAttestation_queue);\n\n  \/\/ initialise slang-embedded components\/ports\n  VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of adapter_low_impl_SW_adapter_low_adapter_low\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_adapter_low_impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    VPM_ben__SeL4_VPM_adapter_low_impl_SW_adapter_low_adapter_low_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/adapter_low_impl_SW_adapter_low_adapter_low\/includes\/sb_adapter_low_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_ADAPTER_LOW_IMPL_H\n#define SB_ADAPTER_LOW_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_ADSB_Messages_In_dequeue(union_art_DataContent *);\n\nbool sb_Response_In_dequeue(union_art_DataContent *);\n\nbool sb_AttestationRequest_dequeue(union_art_DataContent *);\n\nbool sb_SHM_HEADER_adsb_to_ptab_dequeue(union_art_DataContent *);\n\nbool sb_Connection_Command_In_dequeue(union_art_DataContent *);\n\nbool sb_Suspect_Traffic_In1_dequeue(union_art_DataContent *);\n\nbool sb_Suspect_Traffic_In2_dequeue(union_art_DataContent *);\n\nbool sb_Suspect_Traffic_In3_dequeue(union_art_DataContent *);\n\nbool sb_SHM_QUEUE_Request_Out_enqueue(const union_art_DataContent *);\n\nbool sb_AttestationResponse_enqueue(const union_art_DataContent *);\n\nbool sb_Connection_Command_Out_enqueue(const union_art_DataContent *);\n\nbool sb_InitiateAttestation_enqueue(const union_art_DataContent *);\n\nbool sb_TerminateAttestation_dequeue(union_art_DataContent *);\n\n#endif \/\/ SB_ADAPTER_LOW_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/adapter_high_impl_SW_adapter_high_adapter_high\/src\/sb_adapter_high_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_adapter_high_impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <adapter_high_impl_SW_adapter_high_adapter_high_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nbool sb_Response_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_Response_Out_queue_1, (union_art_DataContent*) data);\n  sb_Response_Out_1_notification_emit();\n\n  return true;\n}\n\nbool sb_ADSB_Messages_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_ADSB_Messages_Out_queue_1, (union_art_DataContent*) data);\n  sb_ADSB_Messages_Out_1_notification_emit();\n\n  return true;\n}\n\nbool sb_SHM_HEADER_adsb_to_ptab_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_SHM_HEADER_adsb_to_ptab_queue_1, (union_art_DataContent*) data);\n  sb_SHM_HEADER_adsb_to_ptab_1_notification_emit();\n\n  return true;\n}\n\nbool sb_Connection_Command_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_Connection_Command_Out_queue_1, (union_art_DataContent*) data);\n  sb_Connection_Command_Out_1_notification_emit();\n\n  return true;\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Request_In_recv_queue;\n\n\/************************************************************************\n * sb_Request_In_dequeue_poll:\n ************************************************************************\/\nbool sb_Request_In_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Request_In_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Request_In_dequeue:\n ************************************************************************\/\nbool sb_Request_In_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Request_In_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Request_In_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Request_In_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Request_In_recv_queue);\n}\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Connection_Command_In_recv_queue;\n\n\/************************************************************************\n * sb_Connection_Command_In_dequeue_poll:\n ************************************************************************\/\nbool sb_Connection_Command_In_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Connection_Command_In_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Connection_Command_In_dequeue:\n ************************************************************************\/\nbool sb_Connection_Command_In_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Connection_Command_In_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Connection_Command_In_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Connection_Command_In_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Connection_Command_In_recv_queue);\n}\n\n\/\/ send Response_Out: Out EventDataPort DTU_Types__Response_Message_impl\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Response_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Response_Out_Send\", 0);\n\n  sb_Response_Out_enqueue(d);\n}\n\n\/\/ send ADSB_Messages_Out: Out EventDataPort ADSB_Types__ADSB_Aggregated_Message_impl\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_ADSB_Messages_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_ADSB_Messages_Out_Send\", 0);\n\n  sb_ADSB_Messages_Out_enqueue(d);\n}\n\n\/\/ send SHM_HEADER_adsb_to_ptab: Out EventDataPort CASE_Proxies__shm_queue_header_impl\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_HEADER_adsb_to_ptab_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_HEADER_adsb_to_ptab_Send\", 0);\n\n  sb_SHM_HEADER_adsb_to_ptab_enqueue(d);\n}\n\n\/\/ send Connection_Command_Out: Out EventDataPort CASE_Proxies__connection_command_impl\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Connection_Command_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Connection_Command_Out_Send\", 0);\n\n  sb_Connection_Command_Out_enqueue(d);\n}\n\n\/\/ FIXME: dummy implementation for unconnected outgoing port\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_Request_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_Request_Out_Send\", 0);\n  \/\/ FIXME: dummy implementation\n}\n\n\/\/ is_empty Request_In: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Request_In_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Request_In_is_empty();\n}\n\n\/\/ receive Request_In: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Request_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Request_In_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Request_In_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ is_empty Connection_Command_In: In EventDataPort\nB VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Connection_Command_In_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Connection_Command_In_is_empty();\n}\n\n\/\/ receive Connection_Command_In: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Connection_Command_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_Connection_Command_In_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Connection_Command_In_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nB VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Heartbeat_In_IsEmpty(STACK_FRAME_ONLY) {\n  return T;\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Heartbeat_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Heartbeat_In_Receive\", 0);\n\n  \/\/ FIXME: dummy implementation\n\n  \/\/ put None in result\n  DeclNewNone_964667(none);\n  Type_assign(result, &none, sizeof(union Option_8E9F45));\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nB VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Ownship_In_IsEmpty(STACK_FRAME_ONLY) {\n  return T;\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Ownship_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Ownship_In_Receive\", 0);\n\n  \/\/ FIXME: dummy implementation\n\n  \/\/ put None in result\n  DeclNewNone_964667(none);\n  Type_assign(result, &none, sizeof(union Option_8E9F45));\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nB VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Traffic_In_IsEmpty(STACK_FRAME_ONLY) {\n  return T;\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Traffic_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_ADSB_Traffic_In_Receive\", 0);\n\n  \/\/ FIXME: dummy implementation\n\n  \/\/ put None in result\n  DeclNewNone_964667(none);\n  Type_assign(result, &none, sizeof(union Option_8E9F45));\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nB VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_Response_In_IsEmpty(STACK_FRAME_ONLY) {\n  return T;\n}\n\n\/\/ FIXME: dummy implementation for unconnected incoming port\nUnit VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_Response_In_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_adapter_high_impl.c\", \"\", \"VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_seL4Nix_SHM_QUEUE_Response_In_Receive\", 0);\n\n  \/\/ FIXME: dummy implementation\n\n  \/\/ put None in result\n  DeclNewNone_964667(none);\n  Type_assign(result, &none, sizeof(union Option_8E9F45));\n}\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_adapter_high_impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of adapter_high_impl_SW_adapter_high_adapter_high\\n\");\n\n  \/\/ initialise data structure for outgoing event data port Response_Out\n  sb_queue_union_art_DataContent_1_init(sb_Response_Out_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port ADSB_Messages_Out\n  sb_queue_union_art_DataContent_1_init(sb_ADSB_Messages_Out_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port SHM_HEADER_adsb_to_ptab\n  sb_queue_union_art_DataContent_1_init(sb_SHM_HEADER_adsb_to_ptab_queue_1);\n\n  \/\/ initialise data structure for outgoing event data port Connection_Command_Out\n  sb_queue_union_art_DataContent_1_init(sb_Connection_Command_Out_queue_1);\n\n  \/\/ initialise data structure for incoming event data port Request_In\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Request_In_recv_queue, sb_Request_In_queue);\n\n  \/\/ initialise data structure for incoming event data port Connection_Command_In\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Connection_Command_In_recv_queue, sb_Connection_Command_In_queue);\n\n  \/\/ initialise slang-embedded components\/ports\n  VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of adapter_high_impl_SW_adapter_high_adapter_high\\n\");\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_adapter_high_impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    VPM_ben__SeL4_VPM_adapter_high_impl_SW_adapter_high_adapter_high_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/adapter_high_impl_SW_adapter_high_adapter_high\/includes\/sb_adapter_high_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_ADAPTER_HIGH_IMPL_H\n#define SB_ADAPTER_HIGH_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_Response_Out_enqueue(const union_art_DataContent *);\n\nbool sb_ADSB_Messages_Out_enqueue(const union_art_DataContent *);\n\nbool sb_SHM_HEADER_adsb_to_ptab_enqueue(const union_art_DataContent *);\n\nbool sb_Connection_Command_Out_enqueue(const union_art_DataContent *);\n\nbool sb_Request_In_dequeue(union_art_DataContent *);\n\nbool sb_Connection_Command_In_dequeue(union_art_DataContent *);\n\n#endif \/\/ SB_ADAPTER_HIGH_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/src\/sb_CASE_Monitor3_Impl_ffi.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <all.h>\n#include <camkes.h>\n#include <stdbool.h>\n#include <CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_api.h>\n#include <CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.h>\n\nVPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints entryPoints;\n\n\/\/ IS_D10119=IS[Z, art.Art.PortId]\nIS_D10119 event_in_port_ids;\nIS_D10119 data_in_port_ids;\nIS_D10119 event_out_port_ids;\nIS_D10119 data_out_port_ids;\nbool initialized = false;\n\nvoid init(STACK_FRAME_ONLY) {\n  if(!initialized) {\n    DeclNewStackFrame(caller, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"init\", 0);\n\n    entryPoints = (VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_entryPoints(SF_LAST);\n    event_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n    data_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n    event_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n    data_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n    initialized = true;\n  }\n}\n\nvoid ffiinitializeComponent(unsigned char *parameter, long parameterSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"ffiinitializeComponent\", 0);\n\n  entryPoints = (VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_entryPoints(SF_LAST);\n  event_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints_eventInPortIds_(entryPoints);\n  data_in_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints_dataInPortIds_(entryPoints);\n  event_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints_eventOutPortIds_(entryPoints);\n  data_out_port_ids = (IS_D10119) VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_Bridge_EntryPoints_dataOutPortIds_(entryPoints);\n}\n\nvoid checkAndReportBufferOverrun(STACK_FRAME long bytesWritten, long bufferSizeBytes) {\n  #ifdef CAKEML_CHECK_AND_REPORT_BUFFER_OVERRUNS\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"checkAndReportBufferOverrun\", 0);\n\n  init(SF_LAST);\n  if (bytesWritten > bufferSizeBytes) {\n    DeclNewString(_str);\n    String str = (String)&_str;\n    String__append(SF str, string(\"Wrote too many bytes to buffer\"));\n    api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF str);\n  }\n  #endif\n}\n\nvoid dumpBuffer(STACK_FRAME size_t numBits, U8* buffer) {\n  #ifdef CAKEML_DUMP_BUFFERS\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"dumpBuffer\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  String__append(SF str, string(\"[\"));\n  size_t end = ((numBits \/ 8) > 80) ? 80 : (numBits \/ 8);\n  for (int i = 0 ; i < end ; ++i) {\n    U8_string_(SF str, buffer[i]);\n  }\n  String__append(SF str, string(\"]\"));\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF str);\n  #endif\n}\n\nvoid ffiapi_receiveInput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"ffiapi_receiveInput\", 0);\n\n  init(SF_LAST);\n  art_Art_receiveInput(SF event_in_port_ids, data_in_port_ids);\n}\n\nvoid ffiapi_sendOutput(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"ffiapi_sendOutput\", 0);\n\n  init(SF_LAST);\n  art_Art_sendOutput(SF event_out_port_ids, data_out_port_ids);\n}\n\nvoid ffiapi_logInfo(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"ffiapi_logInfo\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logInfo__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF str);\n} \n\nvoid ffiapi_logDebug(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"ffiapi_logDebug\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logDebug__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF str);\n} \n\nvoid ffiapi_logError(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes){\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"ffiapi_logError\", 0);\n\n  init(SF_LAST);\n  DeclNewString(_str);\n  String str = (String)&_str;\n  str->size = parameterSizeBytes;\n  memcpy(str->value, parameter, parameterSizeBytes);\n\n  api_logError__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF str);\n} \n\nvoid ffiapi_get_Observed(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"ffiapi_get_Observed\", 0);\n\n  init(SF_LAST);\n  size_t numBits = 0;\n  output[0] = api_get_Observed__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF &numBits, (U8 *)(output + 1));\n  checkAndReportBufferOverrun(SF numBits \/ 8, (outputSizeBytes - 1));\n  dumpBuffer(SF numBits, output);\n}\n\nvoid ffiapi_send_Suspect_Traffic_Out(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl_ffi.c\", \"\", \"ffiapi_send_Suspect_Traffic_Out\", 0);\n\n  init(SF_LAST);\n  api_put_Suspect_Traffic_Out__VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3(SF parameterSizeBytes*8, (U8 *)parameter);\n}\n\nvoid ffisb_pacer_notification_wait(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tock_wait();\n  output[0] = 1;\n}\n\nvoid ffisb_pacer_notification_emit(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n  sb_self_pacer_tick_emit();\n  output[0] = 1;\n}\n\nvoid ffiraw_print_buffer(unsigned char *parameter, long parameterSizeBytes, unsigned char *output, long outputSizeBytes) {\n\n  int elideAfter = 20; \/\/ stop printing after this many consecutive 0's seen\n  int stopAfter = 50; \/\/ exit after this many consecutive 0's seen, lessens 'busy-wait'\n\n  U8* buffer = (U8 *) parameter;\n\n  printf(\"%i bytes\\n\", parameterSizeBytes); \/\/ doesn't include the bool byte\n\n  if(parameterSizeBytes > 0) {\n    int numZerosSeen = 0;\n    printf(\"[%02x\\n\", buffer[0]); \/\/ first byte is a bool\n    for(int i = 1; i < parameterSizeBytes + 1; i++) {\n      numZerosSeen = buffer[i] == 0 ? (numZerosSeen + 1) : 0;\n      if(numZerosSeen >= elideAfter) {\n        if(numZerosSeen % stopAfter == 0) { printf(\"...\"); break; }\n      } else {\n      \tprintf(\"%02x \", buffer[i]);\n      \tif(i % 16 == 0) printf(\"\\n\");\n      }\n    }\n    printf(\"]\\n\");\n  }\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/src\/sb_CASE_Monitor3_Impl.S",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ placeholder for CakeML assembly",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/src\/sb_CASE_Monitor3_Impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#include <sb_CASE_Monitor3_Impl.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <sb_event_counter.h>\n#include <sb_queue_union_art_DataContent_1.h>\n#include <CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter.h>\n#include <string.h>\n#include <camkes.h>\n\nsb_queue_union_art_DataContent_1_Recv_t sb_Observed_recv_queue;\n\n\/************************************************************************\n * sb_Observed_dequeue_poll:\n ************************************************************************\/\nbool sb_Observed_dequeue_poll(sb_event_counter_t *numDropped, union_art_DataContent *data) {\n  return sb_queue_union_art_DataContent_1_dequeue(&sb_Observed_recv_queue, numDropped, data);\n}\n\n\/************************************************************************\n * sb_Observed_dequeue:\n ************************************************************************\/\nbool sb_Observed_dequeue(union_art_DataContent *data) {\n  sb_event_counter_t numDropped;\n  return sb_Observed_dequeue_poll(&numDropped, data);\n}\n\n\/************************************************************************\n * sb_Observed_is_empty:\n *\n * Helper method to determine if infrastructure port has received new\n * events\n ************************************************************************\/\nbool sb_Observed_is_empty(){\n  return sb_queue_union_art_DataContent_1_is_empty(&sb_Observed_recv_queue);\n}\n\nbool sb_Suspect_Traffic_Out_enqueue(const union_art_DataContent *data) {\n  sb_queue_union_art_DataContent_1_enqueue(sb_Suspect_Traffic_Out_queue_1, (union_art_DataContent*) data);\n  sb_Suspect_Traffic_Out_1_notification_emit();\n\n  return true;\n}\n\n\/\/ send Suspect_Traffic_Out: Out EventDataPort ADSB_Types__MonitorReport_impl\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix_Suspect_Traffic_Out_Send(\n  STACK_FRAME\n  art_DataContent d) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor3_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix_Suspect_Traffic_Out_Send\", 0);\n\n  sb_Suspect_Traffic_Out_enqueue(d);\n}\n\n\/\/ is_empty Observed: In EventDataPort\nB VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix_Observed_IsEmpty(STACK_FRAME_ONLY) {\n  return sb_Observed_is_empty();\n}\n\n\/\/ receive Observed: In EventDataPort union_art_DataContent\nUnit VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix_Observed_Receive(\n  STACK_FRAME\n  Option_8E9F45 result) {\n  DeclNewStackFrame(caller, \"sb_CASE_Monitor3_Impl.c\", \"\", \"VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_seL4Nix_Observed_Receive\", 0);\n\n  union_art_DataContent val;\n  if(sb_Observed_dequeue((union_art_DataContent *) &val)) {\n    \/\/ wrap payload in Some and place in result\n    DeclNewSome_D29615(some);\n    Some_D29615_apply(SF &some, (art_DataContent) &val);\n    Type_assign(result, &some, sizeof(union Option_8E9F45));\n  } else {\n    \/\/ put None in result\n    DeclNewNone_964667(none);\n    Type_assign(result, &none, sizeof(union Option_8E9F45));\n  }\n}\n\n\nvoid pre_init(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl.c\", \"\", \"pre_init\", 0);\n\n  printf(\"Entering pre-init of CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\\n\");\n\n  \/\/ initialise data structure for incoming event data port Observed\n  sb_queue_union_art_DataContent_1_Recv_init(&sb_Observed_recv_queue, sb_Observed_queue);\n\n  \/\/ initialise data structure for outgoing event data port Suspect_Traffic_Out\n  sb_queue_union_art_DataContent_1_init(sb_Suspect_Traffic_Out_queue_1);\n\n  \/\/ initialise slang-embedded components\/ports\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_initialiseArchitecture(SF_LAST);\n\n  \/\/ call the component's initialise entrypoint\n  VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_initialiseEntryPoint(SF_LAST);\n\n  printf(\"Leaving pre-init of CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\\n\");\n}\n\n#ifndef CAKEML_ASSEMBLIES_PRESENT\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n  DeclNewStackFrame(NULL, \"sb_CASE_Monitor3_Impl.c\", \"\", \"run\", 0);\n\n  sb_self_pacer_tick_emit();\n  for(;;) {\n    sb_self_pacer_tock_wait();\n    \/\/ call the component's compute entrypoint\n    VPM_ben__SeL4_VPM_CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3_adapter_computeEntryPoint(SF_LAST);\n    sb_self_pacer_tick_emit();\n  }\n  return 0;\n}\n#endif\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/CASE_Monitor3_Impl_SW_Teleport_Monitor_CASE_Monitor3\/includes\/sb_CASE_Monitor3_Impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will be regenerated, do not edit\n\n#ifndef SB_CASE_MONITOR3_IMPL_H\n#define SB_CASE_MONITOR3_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_Observed_dequeue(union_art_DataContent *);\n\nbool sb_Suspect_Traffic_Out_enqueue(const union_art_DataContent *);\n\n#endif \/\/ SB_CASE_MONITOR3_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/types\/includes\/sb_queue_union_art_DataContent_1.h",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL Event Data\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h>\n#include <sb_types.h>\n#include <stdbool.h>\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain\n\/\/ SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE-1 elements.\n#define SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ CAmkES component definition files. The seL4 CAmkES runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_union_art_DataContent_1 {\n  \/\/ Number of elements enqueued since the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type union_art_DataContent\n  \/\/ (see sb_types.h) implemented as a ring buffer.\n  \/\/ No initialization necessary.\n  union_art_DataContent elt[SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE];\n\n} sb_queue_union_art_DataContent_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue,\n  union_art_DataContent *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_union_art_DataContent_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_union_art_DataContent_1_t *queue;\n\n} sb_queue_union_art_DataContent_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue,\n  sb_queue_union_art_DataContent_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time.\n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_union_art_DataContent_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_union_art_DataContent_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue,\n  sb_event_counter_t *numDropped,\n  union_art_DataContent *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue);\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/types\/src\/sb_queue_union_art_DataContent_1.c",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_union_art_DataContent_1.h>\n#include <stdint.h>\n#include <stddef.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_init(sb_queue_union_art_DataContent_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_union_art_DataContent_1_enqueue(\n  sb_queue_union_art_DataContent_1_t *queue,\n  union_art_DataContent *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization.\n  \/\/ elt[queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n\n  queue->elt[index] = *data; \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_union_art_DataContent_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_union_art_DataContent_1_Recv_init(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue,\n  sb_queue_union_art_DataContent_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_union_art_DataContent_1_dequeue(\n  sb_queue_union_art_DataContent_1_Recv_t *recvQueue,\n  sb_event_counter_t *numDropped,\n  union_art_DataContent *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_union_art_DataContent_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE;\n  *data = queue->elt[index]; \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_UNION_ART_DATACONTENT_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped);\n    return false;\n  }\n}\n\nbool sb_queue_union_art_DataContent_1_is_empty(sb_queue_union_art_DataContent_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/types\/includes\/sb_types.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <all.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\ntypedef union art_DataContent union_art_DataContent;\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/types\/includes\/sb_event_counter.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t;\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/kernel\/domain_schedule.c",
        {
          "type" : "ITestResource",
          "content" : "#include <config.h>\n#include <object\/structures.h>\n#include <model\/statedata.h>\n\n\/\/ this file will not be overwritten and is safe to edit\n\n\/************************************************************\n\n   This is a kernel data structure containing an example schedule.\n   The length is in seL4 ticks (2 ms).\n   This schedule should be generated from the AADL model\n   using execution time and data flow latency specifications.\n\n\n   Properties from AADL Model\n   --------------------------\n\n     Timing_Properties::Clock_Period : 2 ms\n     Timing_Properties::Frame_Period : 500 ms\n\n     SW_Attestation_Manager_CASE_AttestationManager : Thread\n     -------------------------------------------------------\n\n       CASE_Scheduling::Domain : 7\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 50 ms\n       Timing_Properties::Period : 500 ms\n\n     SW_Attestation_Gate_CASE_AttestationGate : Thread\n     -------------------------------------------------\n\n       CASE_Scheduling::Domain : 8\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 50 ms\n       Timing_Properties::Period : 500 ms\n\n     SW_Expected_Position_Monitor_CASE_Monitor1 : Thread\n     ---------------------------------------------------\n\n       CASE_Scheduling::Domain : 4\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 50 ms\n       Timing_Properties::Period : 500 ms\n\n     SW_Duplicate_Entity_Monitor_CASE_Monitor2 : Thread\n     --------------------------------------------------\n\n       CASE_Scheduling::Domain : 5\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 50 ms\n       Timing_Properties::Period : 500 ms\n\n     SW_adapter_low_adapter_low : Thread\n     -----------------------------------\n\n       CASE_Scheduling::Domain : 3\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 50 ms\n       Timing_Properties::Period : 500 ms\n\n     SW_adapter_high_adapter_high : Thread\n     -------------------------------------\n\n       CASE_Scheduling::Domain : 2\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 50 ms\n       Timing_Properties::Period : 250 ms\n\n     SW_Teleport_Monitor_CASE_Monitor3 : Thread\n     ------------------------------------------\n\n       CASE_Scheduling::Domain : 6\n       Thread_Properties::Dispatch_Protocol : Periodic\n       Timing_Properties::Compute_Execution_Time : 50 ms\n       Timing_Properties::Period : 500 ms\n\n *********************************************************\/\n\nconst dschedule_t ksDomSchedule[] = {\n  { .domain = 0, .length = 100 },  \/\/ all other seL4 threads, init, 200ms\n  { .domain = 7, .length = 25 },  \/\/ SW_Attestation_Manager_CASE_AttestationManager 50 ms\n  { .domain = 0, .length = 5 },  \/\/ switch to domain 0 to allow seL4 to deliver messages\n  { .domain = 8, .length = 25 },  \/\/ SW_Attestation_Gate_CASE_AttestationGate 50 ms\n  { .domain = 0, .length = 5 },  \/\/ switch to domain 0 to allow seL4 to deliver messages\n  { .domain = 4, .length = 25 },  \/\/ SW_Expected_Position_Monitor_CASE_Monitor1 50 ms\n  { .domain = 0, .length = 5 },  \/\/ switch to domain 0 to allow seL4 to deliver messages\n  { .domain = 5, .length = 25 },  \/\/ SW_Duplicate_Entity_Monitor_CASE_Monitor2 50 ms\n  { .domain = 0, .length = 5 },  \/\/ switch to domain 0 to allow seL4 to deliver messages\n  { .domain = 3, .length = 25 },  \/\/ SW_adapter_low_adapter_low 50 ms\n  { .domain = 0, .length = 5 },  \/\/ switch to domain 0 to allow seL4 to deliver messages\n  { .domain = 2, .length = 25 },  \/\/ SW_adapter_high_adapter_high 50 ms\n  { .domain = 0, .length = 5 },  \/\/ switch to domain 0 to allow seL4 to deliver messages\n  { .domain = 6, .length = 25 },  \/\/ SW_Teleport_Monitor_CASE_Monitor3 50 ms\n  { .domain = 0, .length = -55 },  \/\/ pad rest of frame period\n};\n\nconst word_t ksDomScheduleLength = sizeof(ksDomSchedule) \/ sizeof(dschedule_t);\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/settings.cmake",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nset(KernelDomainSchedule \"${CMAKE_CURRENT_LIST_DIR}\/kernel\/domain_schedule.c\" CACHE INTERNAL \"\")\nset(KernelNumDomains 9 CACHE STRING \"\" FORCE)\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/types\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# This file will be regenerated, do not edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            src\/sb_queue_union_art_DataContent_1.c)\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           PUBLIC includes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/proof\/smt2_case.smt2",
        {
          "type" : "ITestResource",
          "content" : "(set-logic ALL)\n\n(declare-datatypes ((Option 1))\n  ((par (T) ((Some (value T))\n             (None)))))\n\n(declare-datatypes ((Mode 0)) ((\n  (SeL4)\n  (SeL4_Only)\n  (SeL4_TB))))\n\n(declare-datatypes ((ComponentCategory 0)) ((\n  (Abstract)\n  (Bus)\n  (Data)\n  (Device)\n  (Memory)\n  (Process)\n  (Processor)\n  (Subprogram)\n  (SubprogramGroup)\n  (System)\n  (Thread)\n  (ThreadGroup)\n  (VirtualBus)\n  (VirtualProcessor))))\n\n(declare-datatypes ((DispatchProtocol 0)) ((\n  (Periodic)\n  (Sporadic))))\n\n(declare-datatypes ((SchedulingType 0)) ((\n  (Pacing)\n  (SelfPacing)\n  (PeriodicDispatching)\n  (UNSPECIFIED_SCHEDULING_TYPE))))\n\n(declare-datatypes ((Direction 0)) ((\n  (In)\n  (Out)\n  (InOut))))\n\n(declare-datatypes ((FeatureCategory 0)) ((\n  (AbstractFeature)\n  (BusAccess)\n  (DataAccess)\n  (DataPort)\n  (EventPort)\n  (EventDataPort)\n  (FeatureGroup)\n  (Parameter)\n  (SubprogramAccess)\n  (SubprogramAccessGroup))))\n\n\n(declare-const CodegenMode Mode)\n(assert (= CodegenMode SeL4))\n\n(declare-const ModelSchedulingType SchedulingType)\n(assert (= ModelSchedulingType SelfPacing))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                                AADL Model                              ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare-datatypes ((AadlComponent 0)) ((\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)\n  (VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)\n  (VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)\n  (VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)\n  (VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)\n)))\n(declare-const AadlComponent_count Int)\n(assert (= 8 AadlComponent_count))\n\n(declare-const AadlComponentCategory (Array AadlComponent (Option ComponentCategory)))\n  (assert (= (Some Thread) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)))\n  (assert (= (Some Processor) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0)))\n  (assert (= (Some Thread) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)))\n  (assert (= (Some Processor) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0)))\n  (assert (= (Some Thread) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)))\n  (assert (= (Some Processor) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0)))\n  (assert (= (Some Thread) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)))\n  (assert (= (Some Processor) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0)))\n  (assert (= (Some Thread) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)))\n  (assert (= (Some Processor) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0)))\n  (assert (= (Some Thread) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)))\n  (assert (= (Some Processor) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0)))\n  (assert (= (Some Thread) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)))\n  (assert (= (Some Processor) (select AadlComponentCategory VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0)))\n\n(declare-const ProcessorBindings (Array AadlComponent (Option AadlComponent)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0) (select ProcessorBindings VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0) (select ProcessorBindings VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0) (select ProcessorBindings VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0) (select ProcessorBindings VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0) (select ProcessorBindings VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0) (select ProcessorBindings VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_A1_Basecard_application_proc_Core0) (select ProcessorBindings VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)))\n\n(declare-const AadlDispatchProtocol (Array AadlComponent (Option DispatchProtocol)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)))\n(declare-const AadlDispatchProtocol_size Int)\n(assert (= 7 AadlDispatchProtocol_size))\n\n(declare-datatypes ((AadlPort 0)) ((\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds)\n  (VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed)\n  (VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed)\n  (VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In)\n  (VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In)\n  (VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed)\n  (VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out))))\n(declare-const AadlPort_count Int)\n(assert (= 35 AadlPort_count))\n\n(declare-const AadlPortComponent (Array AadlPort (Option AadlComponent)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed)))\n  (assert (= (Some VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3) (select AadlPortComponent VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out)))\n(declare-const AadlPortComponent_size Int)\n(assert (= 35 AadlPortComponent_size))\n\n(declare-const AadlFeatureCategory (Array AadlPort FeatureCategory))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed)))\n  (assert (= EventDataPort (select AadlFeatureCategory VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out)))\n(declare-const AadlFeatureCategory_size Int)\n(assert (= 35 AadlFeatureCategory_size))\n\n(declare-const AadlPortDirection (Array AadlPort Direction))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In)))\n  (assert (= In (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed)))\n  (assert (= Out (select AadlPortDirection VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out)))\n(declare-const AadlPortDirection_size Int)\n(assert (= 35 AadlPortDirection_size))\n\n(define-fun AadlConnectionFlowTos ((p1 AadlPort) (p2 AadlPort)) Bool\n  (or\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds) (= p2 VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse) (= p2 VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation) (= p2 VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In))\n    (and (= p1 VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out) (= p2 VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3))\n    false))\n(declare-const AadlConnectionFlowsTos_count Int)\n(assert (= 19 AadlConnectionFlowsTos_count))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                              CAmkES Model                              ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare-datatypes ((AccessType 0)) ((\n  (R)\n  (W)\n  (RW))))\n\n(declare-datatypes ((seL4ConnectorType 0)) ((\n  (seL4GlobalAsynch)\n  (seL4GlobalAsynchCallback)\n  (seL4Notification)\n  (seL4RPCCall)\n  (seL4RPCDataport)\n  (seL4SharedData)\n  (seL4SharedDataWithCaps)\n  (seL4SerialServer)\n  (seL4TimeServer)\n  (seL4VMDTBPassthrough)\n  (CASE_AADL_EventDataport))))\n\n(declare-datatypes ((CAmkESComponent 0)) ((\n  (SW_Attestation_Manager_CASE_AttestationManager)\n  (SW_Attestation_Gate_CASE_AttestationGate)\n  (SW_Expected_Position_Monitor_CASE_Monitor1)\n  (SW_Duplicate_Entity_Monitor_CASE_Monitor2)\n  (SW_adapter_low_adapter_low)\n  (SW_adapter_high_adapter_high)\n  (SW_Teleport_Monitor_CASE_Monitor3))))\n(declare-const CAmkESComponent_count Int)\n(assert (= 7 CAmkESComponent_count))\n\n(define-fun isPeriodicDispatcher ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       false))\n\n(define-fun isPacer ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType Pacing)\n       false))\n\n(define-fun isFileServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a file server is expected\n       false))\n\n(define-fun isTimeServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a time server is expected\n       false))\n\n(define-fun isSerialServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a serial server is expected\n       false))\n\n(declare-datatypes ((CAmkESPort 0)) ((\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_queue_1)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_queue)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_queue_1)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_queue)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_queue_1)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_1_notification)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_1_notification)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_1_notification)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_self_pacer_tick)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_notification)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_notification)\n  (SW_Attestation_Manager_CASE_AttestationManager_sb_self_pacer_tock)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_queue)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_queue_1)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_queue)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_queue_1)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_queue)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_1_notification)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_1_notification)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_self_pacer_tick)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_notification)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_notification)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_notification)\n  (SW_Attestation_Gate_CASE_AttestationGate_sb_self_pacer_tock)\n  (SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_queue)\n  (SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_queue_1)\n  (SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_1_notification)\n  (SW_Expected_Position_Monitor_CASE_Monitor1_sb_self_pacer_tick)\n  (SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_notification)\n  (SW_Expected_Position_Monitor_CASE_Monitor1_sb_self_pacer_tock)\n  (SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_queue)\n  (SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_queue_1)\n  (SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_1_notification)\n  (SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_self_pacer_tick)\n  (SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_notification)\n  (SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_self_pacer_tock)\n  (SW_adapter_low_adapter_low_sb_ADSB_Messages_In_queue)\n  (SW_adapter_low_adapter_low_sb_Response_In_queue)\n  (SW_adapter_low_adapter_low_sb_AttestationRequest_queue)\n  (SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_queue)\n  (SW_adapter_low_adapter_low_sb_Connection_Command_In_queue)\n  (SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_queue)\n  (SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_queue)\n  (SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_queue)\n  (SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_queue_1)\n  (SW_adapter_low_adapter_low_sb_AttestationResponse_queue_1)\n  (SW_adapter_low_adapter_low_sb_Connection_Command_Out_queue_1)\n  (SW_adapter_low_adapter_low_sb_InitiateAttestation_queue_1)\n  (SW_adapter_low_adapter_low_sb_TerminateAttestation_queue)\n  (SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_1_notification)\n  (SW_adapter_low_adapter_low_sb_AttestationResponse_1_notification)\n  (SW_adapter_low_adapter_low_sb_Connection_Command_Out_1_notification)\n  (SW_adapter_low_adapter_low_sb_InitiateAttestation_1_notification)\n  (SW_adapter_low_adapter_low_sb_self_pacer_tick)\n  (SW_adapter_low_adapter_low_sb_ADSB_Messages_In_notification)\n  (SW_adapter_low_adapter_low_sb_Response_In_notification)\n  (SW_adapter_low_adapter_low_sb_AttestationRequest_notification)\n  (SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_notification)\n  (SW_adapter_low_adapter_low_sb_Connection_Command_In_notification)\n  (SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_notification)\n  (SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_notification)\n  (SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_notification)\n  (SW_adapter_low_adapter_low_sb_TerminateAttestation_notification)\n  (SW_adapter_low_adapter_low_sb_self_pacer_tock)\n  (SW_adapter_high_adapter_high_sb_Response_Out_queue_1)\n  (SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_queue_1)\n  (SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_queue_1)\n  (SW_adapter_high_adapter_high_sb_Connection_Command_Out_queue_1)\n  (SW_adapter_high_adapter_high_sb_Request_In_queue)\n  (SW_adapter_high_adapter_high_sb_Connection_Command_In_queue)\n  (SW_adapter_high_adapter_high_sb_Response_Out_1_notification)\n  (SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_1_notification)\n  (SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_1_notification)\n  (SW_adapter_high_adapter_high_sb_Connection_Command_Out_1_notification)\n  (SW_adapter_high_adapter_high_sb_self_pacer_tick)\n  (SW_adapter_high_adapter_high_sb_Request_In_notification)\n  (SW_adapter_high_adapter_high_sb_Connection_Command_In_notification)\n  (SW_adapter_high_adapter_high_sb_self_pacer_tock)\n  (SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_queue)\n  (SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_queue_1)\n  (SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_1_notification)\n  (SW_Teleport_Monitor_CASE_Monitor3_sb_self_pacer_tick)\n  (SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_notification)\n  (SW_Teleport_Monitor_CASE_Monitor3_sb_self_pacer_tock))))\n(declare-const CAmkESPort_count Int)\n(assert (= 84 CAmkESPort_count))\n\n(declare-const CAmkESAccessRestrictions (Array CAmkESPort AccessType))\n  (assert (= W (select CAmkESAccessRestrictions SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_AttestationRequest_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_TerminateAttestation_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_high_adapter_high_sb_Request_In_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_high_adapter_high_sb_Connection_Command_In_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_AttestationResponse_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_Connection_Command_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_InitiateAttestation_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_adapter_high_adapter_high_sb_Response_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_Response_In_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_queue)))\n  (assert (= R (select CAmkESAccessRestrictions SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_queue)))\n  (assert (= R (select CAmkESAccessRestrictions SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_queue)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_ADSB_Messages_In_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_adapter_high_adapter_high_sb_Connection_Command_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_Connection_Command_In_queue)))\n  (assert (= W (select CAmkESAccessRestrictions SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_queue_1)))\n  (assert (= R (select CAmkESAccessRestrictions SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_queue)))\n(declare-const CAmkESAccessRestrictions_size Int)\n(assert (= 35 CAmkESAccessRestrictions_size))\n\n(declare-datatypes ((CAmkESConnection 0)) ((\n  (conn1)\n  (conn2)\n  (conn3)\n  (conn4)\n  (conn5)\n  (conn6)\n  (conn7)\n  (conn8)\n  (conn9)\n  (conn10)\n  (conn11)\n  (conn12)\n  (conn13)\n  (conn14)\n  (conn15)\n  (conn16)\n  (conn17)\n  (conn18)\n  (conn19)\n  (conn20)\n  (conn21)\n  (conn22)\n  (conn23)\n  (conn24)\n  (conn25)\n  (conn26)\n  (conn27)\n  (conn28)\n  (conn29)\n  (conn30)\n  (conn31)\n  (conn32)\n  (conn33)\n  (conn34)\n  (conn35)\n  (conn36)\n  (conn37)\n  (conn38)\n  (conn39))))\n(declare-const CAmkESConnection_count Int)\n(assert (= 39 CAmkESConnection_count))\n\n(define-fun isSelfPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType SelfPacing)\n       (or (= _conn conn33)\n           (= _conn conn34)\n           (= _conn conn35)\n           (= _conn conn36)\n           (= _conn conn37)\n           (= _conn conn38)\n           (= _conn conn39)\n           false)))\n\n(define-fun isPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or \n           false)))\n\n(define-fun isPeriodicDispatchingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or \n           false)))\n(declare-const PeriodicDispatchingConnection_count Int)\n(assert (= 0 PeriodicDispatchingConnection_count))\n\n; non Aadl connection refinement connections required by a VM\n(define-fun isVMAuxConnection ((_conn CAmkESConnection)) Bool\n  (or \n      false))\n\n(declare-const CAmkESConnectionType (Array CAmkESConnection seL4ConnectorType))\n  (assert (= seL4Notification (select CAmkESConnectionType conn1)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn2)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn3)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn4)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn5)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn6)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn7)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn8)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn9)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn10)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn11)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn12)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn13)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn14)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn15)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn16)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn17)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn18)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn19)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn20)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn21)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn22)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn23)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn24)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn25)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn26)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn27)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn28)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn29)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn30)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn31)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn32)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn33)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn34)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn35)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn36)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn37)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn38)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn39)))\n(declare-const CAmkESConnectionType_count Int)\n(assert (= 39 CAmkESConnectionType_count))\n\n(declare-const CAmkESPortComponent (Array CAmkESPort CAmkESComponent))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_queue_1)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_queue)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_queue_1)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_queue)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_queue_1)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_1_notification)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_1_notification)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_1_notification)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_self_pacer_tick)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_notification)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_notification)))\n  (assert (= SW_Attestation_Manager_CASE_AttestationManager (select CAmkESPortComponent SW_Attestation_Manager_CASE_AttestationManager_sb_self_pacer_tock)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_queue)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_queue_1)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_queue)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_queue_1)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_queue)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_1_notification)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_1_notification)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_self_pacer_tick)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_notification)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_notification)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_notification)))\n  (assert (= SW_Attestation_Gate_CASE_AttestationGate (select CAmkESPortComponent SW_Attestation_Gate_CASE_AttestationGate_sb_self_pacer_tock)))\n  (assert (= SW_Expected_Position_Monitor_CASE_Monitor1 (select CAmkESPortComponent SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_queue)))\n  (assert (= SW_Expected_Position_Monitor_CASE_Monitor1 (select CAmkESPortComponent SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_queue_1)))\n  (assert (= SW_Expected_Position_Monitor_CASE_Monitor1 (select CAmkESPortComponent SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_1_notification)))\n  (assert (= SW_Expected_Position_Monitor_CASE_Monitor1 (select CAmkESPortComponent SW_Expected_Position_Monitor_CASE_Monitor1_sb_self_pacer_tick)))\n  (assert (= SW_Expected_Position_Monitor_CASE_Monitor1 (select CAmkESPortComponent SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_notification)))\n  (assert (= SW_Expected_Position_Monitor_CASE_Monitor1 (select CAmkESPortComponent SW_Expected_Position_Monitor_CASE_Monitor1_sb_self_pacer_tock)))\n  (assert (= SW_Duplicate_Entity_Monitor_CASE_Monitor2 (select CAmkESPortComponent SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_queue)))\n  (assert (= SW_Duplicate_Entity_Monitor_CASE_Monitor2 (select CAmkESPortComponent SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_queue_1)))\n  (assert (= SW_Duplicate_Entity_Monitor_CASE_Monitor2 (select CAmkESPortComponent SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_1_notification)))\n  (assert (= SW_Duplicate_Entity_Monitor_CASE_Monitor2 (select CAmkESPortComponent SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_self_pacer_tick)))\n  (assert (= SW_Duplicate_Entity_Monitor_CASE_Monitor2 (select CAmkESPortComponent SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_notification)))\n  (assert (= SW_Duplicate_Entity_Monitor_CASE_Monitor2 (select CAmkESPortComponent SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_self_pacer_tock)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_ADSB_Messages_In_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Response_In_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_AttestationRequest_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Connection_Command_In_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_queue_1)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_AttestationResponse_queue_1)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Connection_Command_Out_queue_1)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_InitiateAttestation_queue_1)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_TerminateAttestation_queue)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_1_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_AttestationResponse_1_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Connection_Command_Out_1_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_InitiateAttestation_1_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_self_pacer_tick)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_ADSB_Messages_In_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Response_In_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_AttestationRequest_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Connection_Command_In_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_TerminateAttestation_notification)))\n  (assert (= SW_adapter_low_adapter_low (select CAmkESPortComponent SW_adapter_low_adapter_low_sb_self_pacer_tock)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_Response_Out_queue_1)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_queue_1)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_queue_1)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_Connection_Command_Out_queue_1)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_Request_In_queue)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_Connection_Command_In_queue)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_Response_Out_1_notification)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_1_notification)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_1_notification)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_Connection_Command_Out_1_notification)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_self_pacer_tick)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_Request_In_notification)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_Connection_Command_In_notification)))\n  (assert (= SW_adapter_high_adapter_high (select CAmkESPortComponent SW_adapter_high_adapter_high_sb_self_pacer_tock)))\n  (assert (= SW_Teleport_Monitor_CASE_Monitor3 (select CAmkESPortComponent SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_queue)))\n  (assert (= SW_Teleport_Monitor_CASE_Monitor3 (select CAmkESPortComponent SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_queue_1)))\n  (assert (= SW_Teleport_Monitor_CASE_Monitor3 (select CAmkESPortComponent SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_1_notification)))\n  (assert (= SW_Teleport_Monitor_CASE_Monitor3 (select CAmkESPortComponent SW_Teleport_Monitor_CASE_Monitor3_sb_self_pacer_tick)))\n  (assert (= SW_Teleport_Monitor_CASE_Monitor3 (select CAmkESPortComponent SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_notification)))\n  (assert (= SW_Teleport_Monitor_CASE_Monitor3 (select CAmkESPortComponent SW_Teleport_Monitor_CASE_Monitor3_sb_self_pacer_tock)))\n(declare-const CAmkESPortComponent_size Int)\n(assert (= 84 CAmkESPortComponent_size))\n\n(define-fun CAmkESConnectionFlowTos ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort)) Bool\n  (or\n    (and (= _conn conn1) (= _p1 SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_AttestationRequest_notification))\n    (and (= _conn conn2) (= _p1 SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_AttestationRequest_queue))\n    (and (= _conn conn3) (= _p1 SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_1_notification) (= _p2 SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_notification))\n    (and (= _conn conn4) (= _p1 SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_queue_1) (= _p2 SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_queue))\n    (and (= _conn conn5) (= _p1 SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_TerminateAttestation_notification))\n    (and (= _conn conn6) (= _p1 SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_TerminateAttestation_queue))\n    (and (= _conn conn7) (= _p1 SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_1_notification) (= _p2 SW_adapter_high_adapter_high_sb_Request_In_notification))\n    (and (= _conn conn8) (= _p1 SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_queue_1) (= _p2 SW_adapter_high_adapter_high_sb_Request_In_queue))\n    (and (= _conn conn9) (= _p1 SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_1_notification) (= _p2 SW_adapter_high_adapter_high_sb_Connection_Command_In_notification))\n    (and (= _conn conn10) (= _p1 SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_queue_1) (= _p2 SW_adapter_high_adapter_high_sb_Connection_Command_In_queue))\n    (and (= _conn conn11) (= _p1 SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_notification))\n    (and (= _conn conn12) (= _p1 SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_queue))\n    (and (= _conn conn13) (= _p1 SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_notification))\n    (and (= _conn conn14) (= _p1 SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_queue))\n    (and (= _conn conn15) (= _p1 SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_1_notification) (= _p2 SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_notification))\n    (and (= _conn conn16) (= _p1 SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_queue_1) (= _p2 SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_queue))\n    (and (= _conn conn17) (= _p1 SW_adapter_low_adapter_low_sb_AttestationResponse_1_notification) (= _p2 SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_notification))\n    (and (= _conn conn18) (= _p1 SW_adapter_low_adapter_low_sb_AttestationResponse_queue_1) (= _p2 SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_queue))\n    (and (= _conn conn19) (= _p1 SW_adapter_low_adapter_low_sb_Connection_Command_Out_1_notification) (= _p2 SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_notification))\n    (and (= _conn conn20) (= _p1 SW_adapter_low_adapter_low_sb_Connection_Command_Out_queue_1) (= _p2 SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_queue))\n    (and (= _conn conn21) (= _p1 SW_adapter_low_adapter_low_sb_InitiateAttestation_1_notification) (= _p2 SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_notification))\n    (and (= _conn conn22) (= _p1 SW_adapter_low_adapter_low_sb_InitiateAttestation_queue_1) (= _p2 SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_queue))\n    (and (= _conn conn23) (= _p1 SW_adapter_high_adapter_high_sb_Response_Out_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_Response_In_notification))\n    (and (= _conn conn24) (= _p1 SW_adapter_high_adapter_high_sb_Response_Out_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_Response_In_queue))\n    (and (= _conn conn25) (= _p1 SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_1_notification) (= _p2 SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_notification))\n    (and (= _conn conn25) (= _p1 SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_1_notification) (= _p2 SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_notification))\n    (and (= _conn conn25) (= _p1 SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_1_notification) (= _p2 SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_notification))\n    (and (= _conn conn25) (= _p1 SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_ADSB_Messages_In_notification))\n    (and (= _conn conn26) (= _p1 SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_queue_1) (= _p2 SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_queue))\n    (and (= _conn conn26) (= _p1 SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_queue_1) (= _p2 SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_queue))\n    (and (= _conn conn26) (= _p1 SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_queue_1) (= _p2 SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_queue))\n    (and (= _conn conn26) (= _p1 SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_ADSB_Messages_In_queue))\n    (and (= _conn conn27) (= _p1 SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_notification))\n    (and (= _conn conn28) (= _p1 SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_queue))\n    (and (= _conn conn29) (= _p1 SW_adapter_high_adapter_high_sb_Connection_Command_Out_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_Connection_Command_In_notification))\n    (and (= _conn conn30) (= _p1 SW_adapter_high_adapter_high_sb_Connection_Command_Out_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_Connection_Command_In_queue))\n    (and (= _conn conn31) (= _p1 SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_1_notification) (= _p2 SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_notification))\n    (and (= _conn conn32) (= _p1 SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_queue_1) (= _p2 SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_queue))\n    (and (= _conn conn33) (= _p1 SW_Attestation_Manager_CASE_AttestationManager_sb_self_pacer_tick) (= _p2 SW_Attestation_Manager_CASE_AttestationManager_sb_self_pacer_tock))\n    (and (= _conn conn34) (= _p1 SW_Attestation_Gate_CASE_AttestationGate_sb_self_pacer_tick) (= _p2 SW_Attestation_Gate_CASE_AttestationGate_sb_self_pacer_tock))\n    (and (= _conn conn35) (= _p1 SW_Expected_Position_Monitor_CASE_Monitor1_sb_self_pacer_tick) (= _p2 SW_Expected_Position_Monitor_CASE_Monitor1_sb_self_pacer_tock))\n    (and (= _conn conn36) (= _p1 SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_self_pacer_tick) (= _p2 SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_self_pacer_tock))\n    (and (= _conn conn37) (= _p1 SW_adapter_low_adapter_low_sb_self_pacer_tick) (= _p2 SW_adapter_low_adapter_low_sb_self_pacer_tock))\n    (and (= _conn conn38) (= _p1 SW_adapter_high_adapter_high_sb_self_pacer_tick) (= _p2 SW_adapter_high_adapter_high_sb_self_pacer_tock))\n    (and (= _conn conn39) (= _p1 SW_Teleport_Monitor_CASE_Monitor3_sb_self_pacer_tick) (= _p2 SW_Teleport_Monitor_CASE_Monitor3_sb_self_pacer_tock))\n    false))\n(declare-const CAmkESConnectionFlowTos_count Int)\n(assert (= 45 CAmkESConnectionFlowTos_count))\n\n(define-fun ComponentRefinement ((ac (Option AadlComponent)) (cc CAmkESComponent)) Bool\n  (or\n    (and (= ac (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager)) (= cc SW_Attestation_Manager_CASE_AttestationManager))\n    (and (= ac (Some VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate)) (= cc SW_Attestation_Gate_CASE_AttestationGate))\n    (and (= ac (Some VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1)) (= cc SW_Expected_Position_Monitor_CASE_Monitor1))\n    (and (= ac (Some VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2)) (= cc SW_Duplicate_Entity_Monitor_CASE_Monitor2))\n    (and (= ac (Some VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low)) (= cc SW_adapter_low_adapter_low))\n    (and (= ac (Some VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high)) (= cc SW_adapter_high_adapter_high))\n    (and (= ac (Some VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3)) (= cc SW_Teleport_Monitor_CASE_Monitor3))\n    false))\n(declare-const ComponentRefinement_count Int)\n(assert (= 7 ComponentRefinement_count))\n\n(define-fun PortRefinement ((ap AadlPort) (cp CAmkESPort)) Bool\n  (or\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationRequest) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationRequest_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TrustedIds) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_TrustedIds_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_TerminateAttestation) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_TerminateAttestation_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_AttestationResponse) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_AttestationResponse_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Manager_CASE_AttestationManager_InitiateAttestation) (= cp SW_Attestation_Manager_CASE_AttestationManager_sb_InitiateAttestation_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_Out) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_Out) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_SHM_QUEUE_Request_In) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_SHM_QUEUE_Request_In_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_Connection_Command_In) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_Connection_Command_In_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Attestation_Gate_CASE_AttestationGate_TrustedIds) (= cp SW_Attestation_Gate_CASE_AttestationGate_sb_TrustedIds_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed) (= cp SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out) (= cp SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Suspect_Traffic_Out) (= cp SW_Expected_Position_Monitor_CASE_Monitor1_sb_Suspect_Traffic_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Expected_Position_Monitor_CASE_Monitor1_Observed) (= cp SW_Expected_Position_Monitor_CASE_Monitor1_sb_Observed_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed) (= cp SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out) (= cp SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Suspect_Traffic_Out) (= cp SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Suspect_Traffic_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Duplicate_Entity_Monitor_CASE_Monitor2_Observed) (= cp SW_Duplicate_Entity_Monitor_CASE_Monitor2_sb_Observed_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In) (= cp SW_adapter_low_adapter_low_sb_ADSB_Messages_In_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In) (= cp SW_adapter_low_adapter_low_sb_Response_In_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest) (= cp SW_adapter_low_adapter_low_sb_AttestationRequest_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab) (= cp SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In) (= cp SW_adapter_low_adapter_low_sb_Connection_Command_In_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1) (= cp SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2) (= cp SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3) (= cp SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out) (= cp SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse) (= cp SW_adapter_low_adapter_low_sb_AttestationResponse_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out) (= cp SW_adapter_low_adapter_low_sb_Connection_Command_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation) (= cp SW_adapter_low_adapter_low_sb_InitiateAttestation_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation) (= cp SW_adapter_low_adapter_low_sb_TerminateAttestation_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_QUEUE_Request_Out) (= cp SW_adapter_low_adapter_low_sb_SHM_QUEUE_Request_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationResponse) (= cp SW_adapter_low_adapter_low_sb_AttestationResponse_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_Out) (= cp SW_adapter_low_adapter_low_sb_Connection_Command_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_InitiateAttestation) (= cp SW_adapter_low_adapter_low_sb_InitiateAttestation_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_ADSB_Messages_In) (= cp SW_adapter_low_adapter_low_sb_ADSB_Messages_In_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Response_In) (= cp SW_adapter_low_adapter_low_sb_Response_In_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_AttestationRequest) (= cp SW_adapter_low_adapter_low_sb_AttestationRequest_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_SHM_HEADER_adsb_to_ptab) (= cp SW_adapter_low_adapter_low_sb_SHM_HEADER_adsb_to_ptab_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Connection_Command_In) (= cp SW_adapter_low_adapter_low_sb_Connection_Command_In_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In1) (= cp SW_adapter_low_adapter_low_sb_Suspect_Traffic_In1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In2) (= cp SW_adapter_low_adapter_low_sb_Suspect_Traffic_In2_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_Suspect_Traffic_In3) (= cp SW_adapter_low_adapter_low_sb_Suspect_Traffic_In3_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_low_adapter_low_TerminateAttestation) (= cp SW_adapter_low_adapter_low_sb_TerminateAttestation_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out) (= cp SW_adapter_high_adapter_high_sb_Response_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out) (= cp SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab) (= cp SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out) (= cp SW_adapter_high_adapter_high_sb_Connection_Command_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In) (= cp SW_adapter_high_adapter_high_sb_Request_In_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In) (= cp SW_adapter_high_adapter_high_sb_Connection_Command_In_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Response_Out) (= cp SW_adapter_high_adapter_high_sb_Response_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_ADSB_Messages_Out) (= cp SW_adapter_high_adapter_high_sb_ADSB_Messages_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_SHM_HEADER_adsb_to_ptab) (= cp SW_adapter_high_adapter_high_sb_SHM_HEADER_adsb_to_ptab_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_Out) (= cp SW_adapter_high_adapter_high_sb_Connection_Command_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Request_In) (= cp SW_adapter_high_adapter_high_sb_Request_In_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_adapter_high_adapter_high_Connection_Command_In) (= cp SW_adapter_high_adapter_high_sb_Connection_Command_In_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed) (= cp SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_queue))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out) (= cp SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_queue_1))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Suspect_Traffic_Out) (= cp SW_Teleport_Monitor_CASE_Monitor3_sb_Suspect_Traffic_Out_1_notification))\n    (and (= ap VPM_8600B_Ext_impl_Instance_SW_Teleport_Monitor_CASE_Monitor3_Observed) (= cp SW_Teleport_Monitor_CASE_Monitor3_sb_Observed_notification))\n    false))\n(declare-const PortRefinement_count Int)\n(assert (= 70 PortRefinement_count))\n\n(define-fun isVMAuxPort ((cp CAmkESPort)) Bool\n  (exists ((cc CAmkESComponent))\n    (and (= cc (select CAmkESPortComponent cp))\n         (or \n             false))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                             Proof Functions                            ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(define-fun isVMComponent ((cc CAmkESComponent)) Bool\n  (exists ((ap AadlComponent))\n    (and (ComponentRefinement (Some ap) cc)                   ; cc refines ap\n         (= (Some Process) (select AadlComponentCategory ap)) ; ap is a process\n         (match (select ProcessorBindings ap) (\n           ((Some x) (= (Some VirtualProcessor) (select AadlComponentCategory x))) ; ap is bound to virtual processor\n           (None false))))))\n\n(define-fun AadlFlowDirectionality () Bool\n  (forall ((p1 AadlPort) (p2 AadlPort))\n    (=> (AadlConnectionFlowTos p1 p2)\n        (and (= Out (select AadlPortDirection p1)) (= In (select AadlPortDirection p2))))))\n\n(define-fun AadlFlowNoSelfConnection () Bool\n  (forall ((p1 AadlPort) (p2 AadlPort))\n    (=> (AadlConnectionFlowTos p1 p2)\n        (not (= p1 p2)))))\n\n(define-fun AadlConnectedPortTypeMatch () Bool\n  (forall ((src AadlPort) (dst AadlPort))\n    (=> (AadlConnectionFlowTos src dst)\n        (or (and (= AbstractFeature (select AadlFeatureCategory src)) (= AbstractFeature (select AadlFeatureCategory dst)))\n            (and (= BusAccess (select AadlFeatureCategory src)) (= BusAccess (select AadlFeatureCategory dst)))\n            (and (= DataAccess (select AadlFeatureCategory src)) (= DataAccess (select AadlFeatureCategory dst)))\n            (and (= DataPort (select AadlFeatureCategory src)) (= DataPort (select AadlFeatureCategory dst)))\n            (and (= EventPort (select AadlFeatureCategory src)) (= EventPort (select AadlFeatureCategory dst)))\n            (and (= EventDataPort (select AadlFeatureCategory src)) (= EventDataPort (select AadlFeatureCategory dst)))\n            (and (= FeatureGroup (select AadlFeatureCategory src)) (= FeatureGroup (select AadlFeatureCategory dst)))\n            (and (= Parameter (select AadlFeatureCategory src)) (= Parameter (select AadlFeatureCategory dst)))\n            (and (= SubprogramAccess (select AadlFeatureCategory src)) (= SubprogramAccess (select AadlFeatureCategory dst)))\n            (and (= SubprogramAccessGroup (select AadlFeatureCategory src)) (= SubprogramAccessGroup (select AadlFeatureCategory dst)))\n             false))))\n(declare-const AadlConnectedPortTypeMatch_count Int)\n(assert (= 10 AadlConnectedPortTypeMatch_count))\n\n(define-fun AadlDispatchProtocolSpecified () Bool\n  (forall ((_comp AadlComponent))\n    (match (select AadlComponentCategory _comp) (\n      ((Some _category_) (\n        ; threads and virtual processors must have an assigned dispatch protocol, all others are 'don't care'\n        match _category_ (\n          (Thread (not (= (as None (Option DispatchProtocol)) (select AadlDispatchProtocol _comp))))\n          (VirtualProcessor (not (= (as None (Option DispatchProtocol)) (select AadlDispatchProtocol _comp))))\n          (_z_ true)\n        )))\n      (None false) ; sanity check: all AADL components must have an assigned component category\n      ))))\n\n(define-fun AadlAllPortsAssigned () Bool\n  (forall ((_p AadlPort))\n    (not (= (as None (Option AadlComponent)) (select AadlPortComponent _p)))))\n\n(define-fun AADLWellFormedness () Bool\n  (and\n    (= AadlPort_count AadlPortComponent_size) ; all Aadl ports belong to an Aadl component\n    AadlAllPortsAssigned\n    AadlDispatchProtocolSpecified\n    AadlFlowDirectionality\n    AadlFlowNoSelfConnection\n    AadlConnectedPortTypeMatch))\n\n\n(define-fun CAmkESFlowNoSelfConnection () Bool\n  (forall ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _p1 _p2)\n        (not (= _p1 _p2)))))\n\n(define-fun CAmkESDataPortAccess () Bool\n  (forall ((_conn CAmkESConnection) (_src CAmkESPort) (_dst CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _src _dst)\n        (and\n             (=> (= seL4SharedData (select CAmkESConnectionType _conn))\n                 (and (= W (select CAmkESAccessRestrictions _src))\n                      (= R (select CAmkESAccessRestrictions _dst))))\n             (=> (= seL4SharedDataWithCaps (select CAmkESConnectionType _conn))\n                 (and (ite (isVMComponent (select CAmkESPortComponent _src))\n                           (= RW (select CAmkESAccessRestrictions _src))\n                           (= W (select CAmkESAccessRestrictions _src)))\n                      (= R (select CAmkESAccessRestrictions _dst))))))))\n\n(define-fun UniqueComponentRefinements () Bool\n  (forall ((aadlComponent1 AadlComponent) (camkesComponent CAmkESComponent))\n    (=> (ComponentRefinement (Some aadlComponent1) camkesComponent)\n        (not (exists ((aadlComponent2 AadlComponent))\n               (and (not (= aadlComponent1 aadlComponent2))\n                    (ComponentRefinement (Some aadlComponent2) camkesComponent)))))))\n\n(define-fun UniquePortRefinements () Bool\n  (forall ((aadlPort1 AadlPort) (camkesPort CAmkESPort))\n    (=> (PortRefinement aadlPort1 camkesPort)\n        (not (exists ((aadlPort2 AadlPort))\n               (and (not (= aadlPort1 aadlPort2))\n                    (PortRefinement aadlPort2 camkesPort)))))))\n\n(define-fun CAmkESWellFormedness () Bool\n  (and\n    (= CAmkESPort_count CAmkESPortComponent_size) ; all CAmkES ports belong to a CAmkES component\n    CAmkESDataPortAccess\n    CAmkESFlowNoSelfConnection))\n\n; helper method: if either port belongs to a VM component then any data connection between the two of them\n; must be seL4SharedDataWithCaps, seL4SharedData otherwise\n(define-fun getExpectedDataConnectionType ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) seL4ConnectorType\n  (ite (or (isVMComponent (select CAmkESPortComponent camkesSource))\n           (isVMComponent (select CAmkESPortComponent camkesDest))\n           false)\n       seL4SharedDataWithCaps\n       seL4SharedData))\n\n; helper method: if the destination port belongs to a VM component than any event connection between the two ports\n; must be seL4GlobalAsynch, seL4Notification otherwise\n(define-fun getExpectedEventConnectionType ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) seL4ConnectorType\n  (ite (isVMComponent (select CAmkESPortComponent camkesDest))\n       seL4GlobalAsynch\n       seL4Notification))\n\n(define-fun SB_DataPortRefinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n      (and (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n           (= (select CAmkESConnectionType conn) (getExpectedDataConnectionType camkesSource camkesDest)) ; actual connector type must match expected\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest  camkesDest)\n           (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_EventPortRefinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (and\n      (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (= (select CAmkESConnectionType conn) (getExpectedEventConnectionType camkesSource camkesDest)) ; actual connector type must match expected\n      (PortRefinement aadlSource camkesSource)\n      (PortRefinement aadlDest camkesDest)\n      (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n      (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_Refinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (or\n         (and\n           (= DataPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)) ; payload\n         (and\n           (= EventPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; event counter\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         (and\n           (= EventDataPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; payload\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         false)))\n\n(define-fun ConnectionPreservation () Bool\n  (forall ((aadlSource AadlPort) (aadlDest AadlPort))\n    (=> (AadlConnectionFlowTos aadlSource aadlDest)\n        (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n             (SB_Refinement aadlSource aadlDest)))))\n\n\n(define-fun isAadl_SB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (exists ((aadlSource AadlPort) (aadlDest AadlPort))\n         (and\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest camkesDest)\n           (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest))\n           (AadlConnectionFlowTos aadlSource aadlDest)))))\n\n(define-fun isCAmkESSchedulingConnection ((_conn CAmkESConnection)) Bool\n  (or\n    (isSelfPacingConnection _conn)\n    (isPacingConnection _conn)\n    (isPeriodicDispatchingConnection _conn)\n    false))\n\n(define-fun isVirtualMachineInducedConnection ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (or\n    (and (isVMAuxConnection conn)\n         (or (isVMAuxPort camkesSource)\n             (isVMAuxPort camkesDest)\n             false))\n    (and (isSerialServer (select CAmkESPortComponent camkesSource)) ; connection b\/w serial and time server\n         (isTimeServer (select CAmkESPortComponent camkesDest)))\n    false))\n\n(define-fun NoNewConnections () Bool\n  (forall ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (=> (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (or\n        (isAadl_SB_ConnectionRefinement camkesSource camkesDest)\n        (isCAmkESSchedulingConnection conn)\n        (isVirtualMachineInducedConnection conn camkesSource camkesDest)\n        false))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                              Proof                                     ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(echo \"RefinementProof: Shows that there is a model satisfying all the constraints (should be sat):\")\n(push)\n(assert (and\n  AADLWellFormedness\n  CAmkESWellFormedness\n  ConnectionPreservation\n  UniqueComponentRefinements\n  UniquePortRefinements\n  NoNewConnections\n))\n(check-sat)\n;(get-model)\n(pop)\n\n(echo \"AADLWellFormedness: Proves that the generated AADL evidence is well-formed (should be unsat):\")\n(push)\n(assert (not AADLWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"CAmkESWellFormedness: Proves that the generated CAmkES evidence is well-formed (should be unsat):\")\n(push)\n(assert (not CAmkESWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"ConnectionPreservation: Proves that the generated CAmkES connections preserve AADL's (should be unsat):\")\n(push)\n(assert (not ConnectionPreservation))\n(check-sat)\n(pop)\n\n(echo \"NoNewConnections: Proves that the generated CAmkES connections does not contain more than AADL's (should be unsat):\")\n(push)\n(assert (not NoNewConnections))\n(check-sat)\n(pop)\n\n\n(exit)",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ]
    ]
  }
}
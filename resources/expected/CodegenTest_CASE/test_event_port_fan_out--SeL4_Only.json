{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "camkes\/components\/emitter_impl_test_event_port_src\/emitter_impl_test_event_port_src.camkes",
        {
          "type" : "ITestResource",
          "content" : "import <std_connector.camkes>;\ncomponent emitter_impl_test_event_port_src {\n  include <sb_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  emits ReceiveEvent sb_e;\n  consumes Notification sb_periodic_dispatch_notification;\n  dataport sb_event_counter_t sb_e_counter;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_default_impl_test_event_port_snkDefault\/consumer_queue_default_impl_test_event_port_snkDefault.camkes",
        {
          "type" : "ITestResource",
          "content" : "component consumer_queue_default_impl_test_event_port_snkDefault {\n  include <sb_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  consumes ReceiveEvent sb_s;\n  dataport sb_event_counter_t sb_s_counter;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_2_impl_test_event_port_snkQueue2_A\/consumer_queue_2_impl_test_event_port_snkQueue2_A.camkes",
        {
          "type" : "ITestResource",
          "content" : "component consumer_queue_2_impl_test_event_port_snkQueue2_A {\n  include <sb_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  consumes ReceiveEvent sb_s;\n  dataport sb_event_counter_t sb_s_counter;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_2_impl_test_event_port_snkQueue2_B\/consumer_queue_2_impl_test_event_port_snkQueue2_B.camkes",
        {
          "type" : "ITestResource",
          "content" : "component consumer_queue_2_impl_test_event_port_snkQueue2_B {\n  include <sb_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  consumes ReceiveEvent sb_s;\n  dataport sb_event_counter_t sb_s_counter;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_5_impl_test_event_port_snkQueue5\/consumer_queue_5_impl_test_event_port_snkQueue5.camkes",
        {
          "type" : "ITestResource",
          "content" : "component consumer_queue_5_impl_test_event_port_snkQueue5 {\n  include <sb_types.h>;\n  include <sb_event_counter.h>;\n  control;\n  consumes ReceiveEvent sb_s;\n  dataport sb_event_counter_t sb_s_counter;\n  has semaphore sb_dispatch_sem;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/dispatch_periodic\/dispatch_periodic.camkes",
        {
          "type" : "ITestResource",
          "content" : "import <global-connectors.camkes>;\ncomponent dispatch_periodic {\n  control;\n  uses Timer timer;\n  emits Notification sb_test_event_port_src_periodic_dispatch_notification;\n  consumes Notification timer_complete;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/top_impl_Instance.camkes",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nimport <std_connector.camkes>;\nimport <global-connectors.camkes>;\nimport <TimeServer\/TimeServer.camkes>;;\nimport \"components\/emitter_impl_test_event_port_src\/emitter_impl_test_event_port_src.camkes\";\nimport \"components\/consumer_queue_default_impl_test_event_port_snkDefault\/consumer_queue_default_impl_test_event_port_snkDefault.camkes\";\nimport \"components\/consumer_queue_2_impl_test_event_port_snkQueue2_A\/consumer_queue_2_impl_test_event_port_snkQueue2_A.camkes\";\nimport \"components\/consumer_queue_2_impl_test_event_port_snkQueue2_B\/consumer_queue_2_impl_test_event_port_snkQueue2_B.camkes\";\nimport \"components\/consumer_queue_5_impl_test_event_port_snkQueue5\/consumer_queue_5_impl_test_event_port_snkQueue5.camkes\";\nimport \"components\/dispatch_periodic\/dispatch_periodic.camkes\";\n\nassembly {\n  composition {\n    component emitter_impl_test_event_port_src test_event_port_src;\n    component consumer_queue_default_impl_test_event_port_snkDefault test_event_port_snkDefault;\n    component consumer_queue_2_impl_test_event_port_snkQueue2_A test_event_port_snkQueue2_A;\n    component consumer_queue_2_impl_test_event_port_snkQueue2_B test_event_port_snkQueue2_B;\n    component consumer_queue_5_impl_test_event_port_snkQueue5 test_event_port_snkQueue5;\n    component dispatch_periodic dispatch_periodic_inst;\n    component TimeServer time_server;\n\n    connection seL4Notification conn1(from test_event_port_src.sb_e, to test_event_port_snkDefault.sb_s, to test_event_port_snkQueue2_A.sb_s, to test_event_port_snkQueue2_B.sb_s, to test_event_port_snkQueue5.sb_s);\n    connection seL4SharedData conn2(from test_event_port_src.sb_e_counter, to test_event_port_snkDefault.sb_s_counter, to test_event_port_snkQueue2_A.sb_s_counter, to test_event_port_snkQueue2_B.sb_s_counter, to test_event_port_snkQueue5.sb_s_counter);\n    connection seL4Notification conn3(from dispatch_periodic_inst.sb_test_event_port_src_periodic_dispatch_notification, to test_event_port_src.sb_periodic_dispatch_notification);\n    connection seL4TimeServer conn4(from dispatch_periodic_inst.timer, to time_server.the_timer);\n    connection seL4GlobalAsynchCallback conn5(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);\n  }\n\n  configuration {\n    test_event_port_src.sb_e_counter_access = \"W\";\n    test_event_port_snkDefault.sb_s_counter_access = \"R\";\n    test_event_port_snkQueue2_A.sb_s_counter_access = \"R\";\n    test_event_port_snkQueue2_B.sb_s_counter_access = \"R\";\n    test_event_port_snkQueue5.sb_s_counter_access = \"R\";\n    time_server.timers_per_client = 1;\n    dispatch_periodic_inst.timer_attributes = 1;\n    dispatch_periodic_inst.priority = 201;\n  }\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/emitter_impl_test_event_port_src\/src\/emitter.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_emitter_impl.h>\n\nint32_t counter = 0;\n\nvoid test_event_port_emitter_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_emitter_component_init called\\n\", get_instance_name());\n}\n\nvoid run_emitter(const int64_t *in_arg) {\n  for(int32_t i = 0; i < counter; i++) {\n    sb_e_enqueue();\n  }\n  printf(\"---------------------------------------\\n\");\n  printf(\"[%s] Sent %i events.\\n\", get_instance_name(), counter);\n\n  counter = (counter + 1) % 7; \/\/ send b\/w 0 to 6 events per dispatch\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_default_impl_test_event_port_snkDefault\/src\/consumer_queue_default.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_queue_default_impl.h>\n\nvoid test_event_port_consumer_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_port_consumer_s_event_handler() {\n int32_t counter = 1; \/\/ 1 for the event that triggered the handler\n  while(sb_s_dequeue()) {\n    counter++;\n  }\n\n  printf(\"[%s] Received %i events\\n\", get_instance_name(), counter);\n}\n\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_2_impl_test_event_port_snkQueue2_A\/src\/consumer_queue_2.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_queue_2_impl.h>\n\nvoid test_event_port_consumer_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_port_consumer_s_event_handler() {\n int32_t counter = 1; \/\/ 1 for the event that triggered the handler\n  while(sb_s_dequeue()) {\n    counter++;\n  }\n\n  printf(\"[%s] Received %i events\\n\", get_instance_name(), counter);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_2_impl_test_event_port_snkQueue2_B\/src\/consumer_queue_2.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_queue_2_impl.h>\n\nvoid test_event_port_consumer_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_port_consumer_s_event_handler() {\n int32_t counter = 1; \/\/ 1 for the event that triggered the handler\n  while(sb_s_dequeue()) {\n    counter++;\n  }\n\n  printf(\"[%s] Received %i events\\n\", get_instance_name(), counter);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_5_impl_test_event_port_snkQueue5\/src\/consumer_queue_5.c",
        {
          "type" : "ITestResource",
          "content" : "#include <camkes.h>\n#include <stdio.h>\n#include <sb_consumer_queue_5_impl.h>\n\nvoid test_event_port_consumer_component_init(const int64_t *in_arg) {\n  printf(\"[%s] test_event_port_consumer_component_init called\\n\", get_instance_name());\n}\n\nvoid test_event_port_consumer_s_event_handler() {\n int32_t counter = 1; \/\/ 1 for the event that triggered the handler\n  while(sb_s_dequeue()) {\n    counter++;\n  }\n\n  printf(\"[%s] Received %i events\\n\", get_instance_name(), counter);\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject (top_impl_Instance C)\n\nadd_definitions(-DCAMKES)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nincludeGlobalComponents()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}\/types)\n\nDeclareCAmkESComponent(emitter_impl_test_event_port_src\n  SOURCES components\/emitter_impl_test_event_port_src\/\/src\/emitter.c components\/emitter_impl_test_event_port_src\/src\/sb_emitter_impl.c\n  INCLUDES components\/emitter_impl_test_event_port_src\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_queue_default_impl_test_event_port_snkDefault\n  SOURCES components\/consumer_queue_default_impl_test_event_port_snkDefault\/\/src\/consumer_queue_default.c components\/consumer_queue_default_impl_test_event_port_snkDefault\/src\/sb_consumer_queue_default_impl.c\n  INCLUDES components\/consumer_queue_default_impl_test_event_port_snkDefault\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_queue_2_impl_test_event_port_snkQueue2_A\n  SOURCES components\/consumer_queue_2_impl_test_event_port_snkQueue2_A\/\/src\/consumer_queue_2.c components\/consumer_queue_2_impl_test_event_port_snkQueue2_A\/src\/sb_consumer_queue_2_impl.c\n  INCLUDES components\/consumer_queue_2_impl_test_event_port_snkQueue2_A\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_queue_2_impl_test_event_port_snkQueue2_B\n  SOURCES components\/consumer_queue_2_impl_test_event_port_snkQueue2_B\/\/src\/consumer_queue_2.c components\/consumer_queue_2_impl_test_event_port_snkQueue2_B\/src\/sb_consumer_queue_2_impl.c\n  INCLUDES components\/consumer_queue_2_impl_test_event_port_snkQueue2_B\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(consumer_queue_5_impl_test_event_port_snkQueue5\n  SOURCES components\/consumer_queue_5_impl_test_event_port_snkQueue5\/\/src\/consumer_queue_5.c components\/consumer_queue_5_impl_test_event_port_snkQueue5\/src\/sb_consumer_queue_5_impl.c\n  INCLUDES components\/consumer_queue_5_impl_test_event_port_snkQueue5\/includes\/ types\/includes\n)\n\nDeclareCAmkESComponent(dispatch_periodic\n  SOURCES components\/dispatch_periodic\/src\/sb_dispatch_periodic.c\n  LIBS SB_Type_Library\n)\n\nDeclareCAmkESRootserver(top_impl_Instance.camkes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/bin\/run-camkes.sh",
        {
          "type" : "ITestResource",
          "content" : "#!\/usr\/bin\/env bash\n\nset -o errexit -o pipefail -o nounset\n\nexport SCRIPT_HOME=$( cd \"$( dirname \"$0\" )\" &> \/dev\/null && pwd )\nexport PROJECT_HOME=$( cd \"$( dirname \"$0\" )\/..\" &> \/dev\/null && pwd )\ncd ${PROJECT_HOME}\n\n! getopt --test > \/dev\/null\nif [[ ${PIPESTATUS[0]} -ne 4 ]]; then\n  echo '`getopt --test` failed in this environment.'\n  exit 1\nfi\n\nNON_INTERACTIVE=false\nCAMKES_DIR=\"\"\nSIMULATE=false\nCAMKES_OPTIONS=\"\"\n\nOPTIONS=c:no:sh\nLONGOPTS=camkes-dir:,non-interactive,camkes-options:,simulate,help\n\nfunction usage {\n  echo \"\"\n  echo \"Usage: <option>*\"\n  echo \"\"\n  echo \"Available Options:\"\n  echo \"-c, --camkes-dir       Location of CAmkES project\"\n  echo \"-n, --non-interactive  Non-interactive mode.  Symlink in apps directory will be replaced\"\n  echo \"                         if present\"\n  echo \"-o, --camkes-options   CAmkES options (e.g -o \\\"-DWITH_LOC=ON -DCapDLLoaderMaxObjects=40000\\\")\"\n  echo \"-s, --simulate         Simulate via QEMU\"\n  echo \"-h, --help             Display this information\"\n}\n\n! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name \"$0\" -- \"$@\")\nif [[ ${PIPESTATUS[0]} -ne 0 ]]; then\n    usage\n    exit 2\nfi\n\neval set -- \"$PARSED\"\n\nwhile true; do\n  case \"$1\" in\n    -c|--camkes-dir) CAMKES_DIR=\"$2\"; shift 2 ;;\n    -n|--non-interactive) NON_INTERACTIVE=true; shift ;;\n    -o|--camkes-options) CAMKES_OPTIONS=\"$2\"; shift 2 ;;\n    -s|--simulate) SIMULATE=true; shift ;;\n    -h|--help) usage; exit 0 ;;\n    --) shift; break ;;\n  esac\ndone\n\n# handle non-option arguments\nif [[ $# -ne 0 ]]; then\n  echo \"$0: Unexpected non-option arguments\"\n  usage\n  exit 3\nfi\n\n# if CAMKES_DIR option not set then look in some common locations\nif [[ -z \"${CAMKES_DIR}\" && -d \"\/host\/camkes-project\" ]]; then\n  # docker location\n  CAMKES_DIR=\"\/host\/camkes-project\"\nelif [[ -z \"$CAMKES_DIR\" && -d \"${HOME}\/CASE\/camkes\" ]]; then\n  # CASE Vagrant VM location\n  CAMKES_DIR=\"${HOME}\/CASE\/camkes\"\nfi\n\nif [[ -z \"${CAMKES_DIR}\" || ! -d \"${CAMKES_DIR}\" ]]; then\n  echo \"Directory '${CAMKES_DIR}' does not exist.  Please specify the location of your camkes project directory.\"\n  echo \"See https:\/\/docs.sel4.systems\/projects\/camkes\"\n  exit -1\nfi\n\n\n# use the directory name for the CAmkES apps directory name\nHAMR_CAMKES_PROJ=${PWD##*\/}\n\n\nCAMKES_APPS_DIR=${CAMKES_DIR}\/projects\/camkes\/apps\/$HAMR_CAMKES_PROJ\n\n# create a sym-link to the project in the CAmkES app directory\nif [ -e \"${CAMKES_APPS_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ]; then\n    rm -rf ${CAMKES_APPS_DIR}\n  else\n    read -p \"The following app directory already exists, replace ${CAMKES_APPS_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${CAMKES_APPS_DIR}\n    else\n      exit -1\n    fi\n  fi\nfi\n\nln -sv $PROJECT_HOME $CAMKES_APPS_DIR\n\n########################\n# run CAmkES\/seL4 build\n########################\n\nBUILD_DIR=${CAMKES_DIR}\/build_$HAMR_CAMKES_PROJ\n\nif [ -e \"${BUILD_DIR}\" ]; then\n  if [ \"${NON_INTERACTIVE}\" = true ];then\n    rm -rf ${BUILD_DIR}\n    mkdir ${BUILD_DIR}\n  else\n    read -p \"The following build directory already exists, replace ${BUILD_DIR} [Y|y]? \" -n 1 -r; echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      rm -rf ${BUILD_DIR}\n      mkdir ${BUILD_DIR}\n    fi\n  fi\nelse\n  mkdir ${BUILD_DIR}\nfi\n\ncd ${BUILD_DIR}\n\n..\/init-build.sh ${CAMKES_OPTIONS} -DCAMKES_APP=$HAMR_CAMKES_PROJ\n\nninja\n\n########################\n# simulate via QEMU\n########################\n\ncat >${BUILD_DIR}\/sim << EOL\n#!\/usr\/bin\/env bash\n\nexport SCRIPT_HOME=\\$( cd \"\\$( dirname \"\\$0\" )\" &> \/dev\/null && pwd )\ncd \\${SCRIPT_HOME}\n\n# console output from simulation disappears when QEMU shuts down when run from\n# the CAmkES generated .\/simulate script. Instead call QEMU directly using the\n# default values .\/simulate would pass\n\nqemu-system-x86_64 \\\\\n    -cpu Nehalem,-vme,+pdpe1gb,-xsave,-xsaveopt,-xsavec,-fsgsbase,-invpcid,enforce \\\\\n    -nographic \\\\\n    -serial mon:stdio \\\\\n    -m size=512M \\\\\n    -kernel images\/kernel-x86_64-pc99 \\\\\n    -initrd images\/capdl-loader-image-x86_64-pc99\nEOL\n\nchmod 700 ${BUILD_DIR}\/sim\necho \"Wrote: ${BUILD_DIR}\/sim\"\n\nif [ \"${SIMULATE}\" = true ]; then\n  # ${BUILD_DIR}\/simulate\n  ${BUILD_DIR}\/sim\nfi\n",
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/emitter_impl_test_event_port_src\/src\/sb_emitter_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#include <sb_emitter_impl.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\nstatic bool sb_occurred_periodic_dispatcher;\nstatic int64_t sb_time_periodic_dispatcher;\n\n\/************************************************************************\n * periodic_dispatcher_write_int64_t\n * Invoked from remote periodic dispatch thread.\n *\n * This function records the current time and triggers the active thread\n * dispatch from a periodic event.  Note that the periodic dispatch\n * thread is the *only* thread that triggers a dispatch, so we do not\n * mutex lock the function.\n *\n ************************************************************************\/\n\nbool periodic_dispatcher_write_int64_t(const int64_t * arg) {\n    sb_occurred_periodic_dispatcher = true;\n    sb_time_periodic_dispatcher = *arg;\n    MUTEXOP(sb_dispatch_sem_post());\n    return true;\n}\n\nvoid sb_periodic_dispatch_notification_callback(void *_ UNUSED) {\n   \/\/ we want time in microseconds, not nanoseconds, so we divide by 1000.\n   int64_t sb_time_periodic_dispatcher = 0; \/\/ sb_timer_time() \/ 1000LL -- timer connection disabled;\n   (void)periodic_dispatcher_write_int64_t(&sb_time_periodic_dispatcher);\n   CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n}\n\n\nvoid sb_entrypoint_emitter_impl_periodic_dispatcher(const int64_t * in_arg) {\n  run_emitter((int64_t *) in_arg);\n}\n\n\/************************************************************************\n * sb_e_enqueue\n * Invoked from user code in the local thread.\n *\n * This is the function invoked by the local thread to make a\n * call to send to a remote event port.\n *\n ************************************************************************\/\nbool sb_e_enqueue(void) {\n  \/\/ sb_e_counter is a dataport (shared memory) that is written by the sender\n  \/\/ and read by the receiver(s). This counter is monotonicly increasing,\n  \/\/ but can wrap.\n  (*sb_e_counter)++;\n\n  \/\/ Release memory fence - ensure subsequent write occurs after any preceeding read or write\n  sb_e_counter_release();\n\n  sb_e_emit();\n\n  return true;\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_emitter_impl_test_event_port_src_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_emitter_impl_test_event_port_src_initializer(const int64_t * in_arg) {\n  test_event_port_emitter_component_init((int64_t *) in_arg);\n}\n\nvoid pre_init(void) {\n  \/\/ initialise shared counter for event port e\n  *sb_e_counter = 0;\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  CALLBACKOP(sb_periodic_dispatch_notification_reg_callback(sb_periodic_dispatch_notification_callback, NULL));\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_emitter_impl_test_event_port_src_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n\n    if(sb_occurred_periodic_dispatcher){\n      sb_occurred_periodic_dispatcher = false;\n      sb_entrypoint_emitter_impl_periodic_dispatcher(&sb_time_periodic_dispatcher);\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/emitter_impl_test_event_port_src\/includes\/sb_emitter_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#ifndef SB_EMITTER_IMPL_H\n#define SB_EMITTER_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_e_enqueue(void);\n\nvoid run_emitter(const int64_t *);\n\nvoid test_event_port_emitter_component_init(const int64_t *arg);\n\n#endif \/\/ SB_EMITTER_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_default_impl_test_event_port_snkDefault\/src\/sb_consumer_queue_default_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#include <sb_consumer_queue_default_impl.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic sb_event_counter_t sb_s_received_events = 0;\nstatic sb_event_counter_t sb_s_last_counter = 0;\n\n\/************************************************************************\n * sb_s_dequeue:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_dequeue() {\n  if(sb_s_received_events > 0) {\n    sb_s_received_events--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n * sb_s_is_empty;\n *\n * Helper method to determine if infrastructure port has not received\n * any new events since the last dispatch\n *\n ************************************************************************\/\nbool sb_s_is_empty() {\n  return sb_s_received_events == 0;\n}\n\nvoid sb_freeze_event_port_s() {\n  sb_event_counter_t current_sb_s_counter;\n\n  sb_s_received_events = 0; \/\/ drop any events not handled during last dispatch\n\n  \/\/ get current shared counter value\n  current_sb_s_counter = *sb_s_counter;\n\n  \/\/ Acquire memory fence - ensure preceding read occurs before any subsequent read or write\n  sb_s_counter_acquire();\n\n  \/\/ NOTE: Counters can wrap, so we must use != below instead of >\n  while(current_sb_s_counter != sb_s_last_counter){\n    sb_s_last_counter++;\n    sb_s_received_events++;\n  }\n\n  if(sb_s_received_events > 0) {\n\n    \/\/ s's queue size is 1\n    if(sb_s_received_events > 1) {\n      \/\/printf(\"consumer_queue_default_impl: dropping %i event(s) from incoming event port s\\n\", (sb_s_received_events - 1));\n\n      \/\/ drop events\n      sb_s_received_events = 1;\n    }\n  }\n}\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * s\n *\n ************************************************************************\/\nstatic void sb_s_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_default_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_default_impl_s(void){\n  test_event_port_consumer_s_event_handler();\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_default_impl_test_event_port_snkDefault_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_default_impl_test_event_port_snkDefault_initializer(const int64_t * in_arg) {\n  test_event_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventPort port s\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_default_impl_test_event_port_snkDefault_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    sb_freeze_event_port_s();\n\n    {\n      if(sb_s_received_events > 0) {\n        \/\/ dequeue one event and call the event handler\n        sb_s_dequeue();\n        sb_entrypoint_consumer_queue_default_impl_s();\n      }\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_default_impl_test_event_port_snkDefault\/includes\/sb_consumer_queue_default_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#ifndef SB_CONSUMER_QUEUE_DEFAULT_IMPL_H\n#define SB_CONSUMER_QUEUE_DEFAULT_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_s_dequeue(void);\n\nvoid test_event_port_consumer_s_event_handler(void);\n\nvoid test_event_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_QUEUE_DEFAULT_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_2_impl_test_event_port_snkQueue2_A\/src\/sb_consumer_queue_2_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#include <sb_consumer_queue_2_impl.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic sb_event_counter_t sb_s_received_events = 0;\nstatic sb_event_counter_t sb_s_last_counter = 0;\n\n\/************************************************************************\n * sb_s_dequeue:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_dequeue() {\n  if(sb_s_received_events > 0) {\n    sb_s_received_events--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n * sb_s_is_empty;\n *\n * Helper method to determine if infrastructure port has not received\n * any new events since the last dispatch\n *\n ************************************************************************\/\nbool sb_s_is_empty() {\n  return sb_s_received_events == 0;\n}\n\nvoid sb_freeze_event_port_s() {\n  sb_event_counter_t current_sb_s_counter;\n\n  sb_s_received_events = 0; \/\/ drop any events not handled during last dispatch\n\n  \/\/ get current shared counter value\n  current_sb_s_counter = *sb_s_counter;\n\n  \/\/ Acquire memory fence - ensure preceding read occurs before any subsequent read or write\n  sb_s_counter_acquire();\n\n  \/\/ NOTE: Counters can wrap, so we must use != below instead of >\n  while(current_sb_s_counter != sb_s_last_counter){\n    sb_s_last_counter++;\n    sb_s_received_events++;\n  }\n\n  if(sb_s_received_events > 0) {\n\n    \/\/ s's queue size is 2\n    if(sb_s_received_events > 2) {\n      \/\/printf(\"consumer_queue_2_impl: dropping %i event(s) from incoming event port s\\n\", (sb_s_received_events - 2));\n\n      \/\/ drop events\n      sb_s_received_events = 2;\n    }\n  }\n}\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * s\n *\n ************************************************************************\/\nstatic void sb_s_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_2_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_s(void){\n  test_event_port_consumer_s_event_handler();\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_2_impl_test_event_port_snkQueue2_A_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_test_event_port_snkQueue2_A_initializer(const int64_t * in_arg) {\n  test_event_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventPort port s\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_2_impl_test_event_port_snkQueue2_A_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    sb_freeze_event_port_s();\n\n    {\n      if(sb_s_received_events > 0) {\n        \/\/ dequeue one event and call the event handler\n        sb_s_dequeue();\n        sb_entrypoint_consumer_queue_2_impl_s();\n      }\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_2_impl_test_event_port_snkQueue2_A\/includes\/sb_consumer_queue_2_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#ifndef SB_CONSUMER_QUEUE_2_IMPL_H\n#define SB_CONSUMER_QUEUE_2_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_s_dequeue(void);\n\nvoid test_event_port_consumer_s_event_handler(void);\n\nvoid test_event_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_QUEUE_2_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_2_impl_test_event_port_snkQueue2_B\/src\/sb_consumer_queue_2_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#include <sb_consumer_queue_2_impl.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic sb_event_counter_t sb_s_received_events = 0;\nstatic sb_event_counter_t sb_s_last_counter = 0;\n\n\/************************************************************************\n * sb_s_dequeue:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_dequeue() {\n  if(sb_s_received_events > 0) {\n    sb_s_received_events--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n * sb_s_is_empty;\n *\n * Helper method to determine if infrastructure port has not received\n * any new events since the last dispatch\n *\n ************************************************************************\/\nbool sb_s_is_empty() {\n  return sb_s_received_events == 0;\n}\n\nvoid sb_freeze_event_port_s() {\n  sb_event_counter_t current_sb_s_counter;\n\n  sb_s_received_events = 0; \/\/ drop any events not handled during last dispatch\n\n  \/\/ get current shared counter value\n  current_sb_s_counter = *sb_s_counter;\n\n  \/\/ Acquire memory fence - ensure preceding read occurs before any subsequent read or write\n  sb_s_counter_acquire();\n\n  \/\/ NOTE: Counters can wrap, so we must use != below instead of >\n  while(current_sb_s_counter != sb_s_last_counter){\n    sb_s_last_counter++;\n    sb_s_received_events++;\n  }\n\n  if(sb_s_received_events > 0) {\n\n    \/\/ s's queue size is 2\n    if(sb_s_received_events > 2) {\n      \/\/printf(\"consumer_queue_2_impl: dropping %i event(s) from incoming event port s\\n\", (sb_s_received_events - 2));\n\n      \/\/ drop events\n      sb_s_received_events = 2;\n    }\n  }\n}\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * s\n *\n ************************************************************************\/\nstatic void sb_s_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_2_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_s(void){\n  test_event_port_consumer_s_event_handler();\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_2_impl_test_event_port_snkQueue2_B_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_2_impl_test_event_port_snkQueue2_B_initializer(const int64_t * in_arg) {\n  test_event_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventPort port s\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_2_impl_test_event_port_snkQueue2_B_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    sb_freeze_event_port_s();\n\n    {\n      if(sb_s_received_events > 0) {\n        \/\/ dequeue one event and call the event handler\n        sb_s_dequeue();\n        sb_entrypoint_consumer_queue_2_impl_s();\n      }\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_2_impl_test_event_port_snkQueue2_B\/includes\/sb_consumer_queue_2_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#ifndef SB_CONSUMER_QUEUE_2_IMPL_H\n#define SB_CONSUMER_QUEUE_2_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_s_dequeue(void);\n\nvoid test_event_port_consumer_s_event_handler(void);\n\nvoid test_event_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_QUEUE_2_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_5_impl_test_event_port_snkQueue5\/src\/sb_consumer_queue_5_impl.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#include <sb_consumer_queue_5_impl.h>\n#include <sb_event_counter.h>\n#include <string.h>\n#include <camkes.h>\n\n\/************************************************************************\n *\n * Static variables and queue management functions for event port:\n *     s\n *\n ************************************************************************\/\nstatic sb_event_counter_t sb_s_received_events = 0;\nstatic sb_event_counter_t sb_s_last_counter = 0;\n\n\/************************************************************************\n * sb_s_dequeue:\n * Invoked from local active thread.\n *\n * This is the function invoked by the active thread to decrement the\n * input event index.\n *\n ************************************************************************\/\nbool sb_s_dequeue() {\n  if(sb_s_received_events > 0) {\n    sb_s_received_events--;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\/************************************************************************\n * sb_s_is_empty;\n *\n * Helper method to determine if infrastructure port has not received\n * any new events since the last dispatch\n *\n ************************************************************************\/\nbool sb_s_is_empty() {\n  return sb_s_received_events == 0;\n}\n\nvoid sb_freeze_event_port_s() {\n  sb_event_counter_t current_sb_s_counter;\n\n  sb_s_received_events = 0; \/\/ drop any events not handled during last dispatch\n\n  \/\/ get current shared counter value\n  current_sb_s_counter = *sb_s_counter;\n\n  \/\/ Acquire memory fence - ensure preceding read occurs before any subsequent read or write\n  sb_s_counter_acquire();\n\n  \/\/ NOTE: Counters can wrap, so we must use != below instead of >\n  while(current_sb_s_counter != sb_s_last_counter){\n    sb_s_last_counter++;\n    sb_s_received_events++;\n  }\n\n  if(sb_s_received_events > 0) {\n\n    \/\/ s's queue size is 5\n    if(sb_s_received_events > 5) {\n      \/\/printf(\"consumer_queue_5_impl: dropping %i event(s) from incoming event port s\\n\", (sb_s_received_events - 5));\n\n      \/\/ drop events\n      sb_s_received_events = 5;\n    }\n  }\n}\n\n\/************************************************************************\n * sb_s_handler:\n * Invoked by: seL4 notification callback\n *\n * This is the function invoked by an seL4 notification callback to \n * dispatch the component due to the arrival of an event on port\n * s\n *\n ************************************************************************\/\nstatic void sb_s_handler(void * unused) {\n  MUTEXOP(sb_dispatch_sem_post())\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_5_impl_s\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_5_impl_s(void){\n  test_event_port_consumer_s_event_handler();\n}\n\n\/************************************************************************\n *  sb_entrypoint_consumer_queue_5_impl_test_event_port_snkQueue5_initializer:\n *\n * This is the function invoked by an active thread dispatcher to\n * call to a user-defined entrypoint function.  It sets up the dispatch\n * context for the user-defined entrypoint, then calls it.\n *\n ************************************************************************\/\nvoid sb_entrypoint_consumer_queue_5_impl_test_event_port_snkQueue5_initializer(const int64_t * in_arg) {\n  test_event_port_consumer_component_init((int64_t *) in_arg);\n}\n\nvoid post_init(void) {\n  \/\/ register callback for EventPort port s\n  CALLBACKOP(sb_s_reg_callback(sb_s_handler, NULL));\n}\n\n\/************************************************************************\n * int run(void)\n * Main active thread function.\n ************************************************************************\/\nint run(void) {\n\n  {\n    int64_t sb_dummy;\n    sb_entrypoint_consumer_queue_5_impl_test_event_port_snkQueue5_initializer(&sb_dummy);\n  }\n  MUTEXOP(sb_dispatch_sem_wait())\n  for(;;) {\n    MUTEXOP(sb_dispatch_sem_wait())\n    sb_freeze_event_port_s();\n\n    {\n      if(sb_s_received_events > 0) {\n        \/\/ dequeue one event and call the event handler\n        sb_s_dequeue();\n        sb_entrypoint_consumer_queue_5_impl_s();\n      }\n    }\n  }\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/consumer_queue_5_impl_test_event_port_snkQueue5\/includes\/sb_consumer_queue_5_impl.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n#ifndef SB_CONSUMER_QUEUE_5_IMPL_H\n#define SB_CONSUMER_QUEUE_5_IMPL_H\n\n#include <sb_types.h>\n\nbool sb_s_dequeue(void);\n\nvoid test_event_port_consumer_s_event_handler(void);\n\nvoid test_event_port_consumer_component_init(const int64_t *arg);\n\n#endif \/\/ SB_CONSUMER_QUEUE_5_IMPL_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/components\/dispatch_periodic\/src\/sb_dispatch_periodic.c",
        {
          "type" : "ITestResource",
          "content" : "#include <string.h>\n#include <camkes.h>\n#include <sb_types.h>\n\n\/\/ prototypes for clock functions\nvoid clock_init();\nvoid clock_set_interval_in_ms(uint32_t interval);\nvoid clock_start_timer(void);\nvoid clock_irq_callback(void);\nuint64_t clock_get_time();\n\n\/\/ Declarations for managing periodic thread dispatch\nconst uint32_t aadl_tick_interval = 1;\nuint32_t aadl_calendar_counter = 0;\n\nvoid sb_thread_calendar() {\n  if ((aadl_calendar_counter % (2000 \/ aadl_tick_interval)) == 0) {\n    sb_test_event_port_src_periodic_dispatch_notification_emit();\n  }\n\n  aadl_calendar_counter++;\n}\n\nvoid timer_complete_callback() {\n  sb_thread_calendar();\n}\n\n\/\/ no op under the new time server scheme.\nvoid clock_init() { }\n\n\/\/ Set interrupt interval, in milliseconds.\nvoid clock_set_interval_in_ms(uint32_t interval) {\n  timer_periodic(0, ((uint64_t)interval) * NS_IN_MS);\n}\n\n\/\/ no op under the new time server scheme\nvoid clock_start_timer(void) { }\n\n\/\/ defer to time server\nuint64_t clock_get_time() {\n  return (timer_time() \/ NS_IN_MS);\n}\n\nint run(void) {\n  clock_init();\n  clock_set_interval_in_ms(1);\n  clock_start_timer();\n  return 0;\n}\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/types\/includes\/sb_types.h",
        {
          "type" : "ITestResource",
          "content" : "#ifndef SB_TYPES_H\n#define SB_TYPES_H\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifndef SB_VERIFY\n#include <stddef.h>\n#endif \/\/ SB_VERIFY\n\n#define __SB_OS_CAMKES__\n\n#ifndef SB_VERIFY\n#define MUTEXOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define MUTEXOP(OP) OP\n#endif \/\/ SB_VERIFY\n#ifndef SB_VERIFY\n#define CALLBACKOP(OP)\\\nif((OP) != 0) {\\\n  fprintf(stderr,\"Operation \" #OP \" failed in %s at %d.\\n\",__FILE__,__LINE__);\\\n  *((int*)0)=0xdeadbeef;\\\n}\n#else\n#define CALLBACKOP(OP) OP\n#endif \/\/ SB_VERIFY\n\n\n#endif \/\/ SB_TYPES_H\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/types\/includes\/sb_event_counter.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\ntypedef _Atomic uintmax_t sb_event_counter_t;\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/settings.cmake",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten so is safe to edit\n\ncmake_minimum_required(VERSION 3.8.2)\n\n",
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/types\/CMakeLists.txt",
        {
          "type" : "ITestResource",
          "content" : "# Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(SB_Type_Library)\n\nset(CMAKE_C_STANDARD 99)\n\nadd_compile_options(-Werror)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"(C|c?)lang\")\n  add_compile_options(\"$<$<CONFIG:Release>:-Oz>\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-fstack-usage)\n  add_compile_options(\"$<$<CONFIG:Release>:-Os>\")\nendif()\n\nadd_library(SB_Type_Library\n            INTERFACE\n            )\n\n# Assume that if the muslc target exists then this project is in an seL4 native\n# component build environment, otherwise it is in a linux userlevel environment.\n# In the linux userlevel environment, the C library will be linked automatically.\nif(TARGET muslc)\n  target_link_libraries(SB_Type_Library\n                        INTERFACE\n                        muslc)\nendif()\n\nadd_definitions(-DCAMKES)\n\nif(TARGET SlangTypeLibrary)\n  target_link_libraries(SB_Type_Library\n                        INTERFACE\n                        SlangTypeLibrary)\nendif()\n\ntarget_include_directories(SB_Type_Library\n                           INTERFACE\n                           includes)\n",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ],
      [
        "camkes\/proof\/smt2_case.smt2",
        {
          "type" : "ITestResource",
          "content" : "(set-logic ALL)\n\n(declare-datatypes ((Option 1))\n  ((par (T) ((Some (value T))\n             (None)))))\n\n(declare-datatypes ((Mode 0)) ((\n  (SeL4)\n  (SeL4_Only)\n  (SeL4_TB))))\n\n(declare-datatypes ((ComponentCategory 0)) ((\n  (Abstract)\n  (Bus)\n  (Data)\n  (Device)\n  (Memory)\n  (Process)\n  (Processor)\n  (Subprogram)\n  (SubprogramGroup)\n  (System)\n  (Thread)\n  (ThreadGroup)\n  (VirtualBus)\n  (VirtualProcessor))))\n\n(declare-datatypes ((DispatchProtocol 0)) ((\n  (Periodic)\n  (Sporadic))))\n\n(declare-datatypes ((SchedulingType 0)) ((\n  (Pacing)\n  (SelfPacing)\n  (PeriodicDispatching)\n  (UNSPECIFIED_SCHEDULING_TYPE))))\n\n(declare-datatypes ((Direction 0)) ((\n  (In)\n  (Out)\n  (InOut))))\n\n(declare-datatypes ((FeatureCategory 0)) ((\n  (AbstractFeature)\n  (BusAccess)\n  (DataAccess)\n  (DataPort)\n  (EventPort)\n  (EventDataPort)\n  (FeatureGroup)\n  (Parameter)\n  (SubprogramAccess)\n  (SubprogramAccessGroup))))\n\n\n(declare-const CodegenMode Mode)\n(assert (= CodegenMode SeL4_Only))\n\n(declare-const ModelSchedulingType SchedulingType)\n(assert (= ModelSchedulingType PeriodicDispatching))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                                AADL Model                              ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare-datatypes ((AadlComponent 0)) ((\n  (top_impl_Instance_test_event_port_src)\n  (top_impl_Instance_proc)\n  (top_impl_Instance_test_event_port_snkDefault)\n  (top_impl_Instance_test_event_port_snkQueue2_A)\n  (top_impl_Instance_test_event_port_snkQueue2_B)\n  (top_impl_Instance_test_event_port_snkQueue5)\n)))\n(declare-const AadlComponent_count Int)\n(assert (= 6 AadlComponent_count))\n\n(declare-const AadlComponentCategory (Array AadlComponent (Option ComponentCategory)))\n  (assert (= (Some Thread) (select AadlComponentCategory top_impl_Instance_test_event_port_src)))\n  (assert (= (Some Processor) (select AadlComponentCategory top_impl_Instance_proc)))\n  (assert (= (Some Thread) (select AadlComponentCategory top_impl_Instance_test_event_port_snkDefault)))\n  (assert (= (Some Processor) (select AadlComponentCategory top_impl_Instance_proc)))\n  (assert (= (Some Thread) (select AadlComponentCategory top_impl_Instance_test_event_port_snkQueue2_A)))\n  (assert (= (Some Processor) (select AadlComponentCategory top_impl_Instance_proc)))\n  (assert (= (Some Thread) (select AadlComponentCategory top_impl_Instance_test_event_port_snkQueue2_B)))\n  (assert (= (Some Processor) (select AadlComponentCategory top_impl_Instance_proc)))\n  (assert (= (Some Thread) (select AadlComponentCategory top_impl_Instance_test_event_port_snkQueue5)))\n  (assert (= (Some Processor) (select AadlComponentCategory top_impl_Instance_proc)))\n\n(declare-const ProcessorBindings (Array AadlComponent (Option AadlComponent)))\n  (assert (= (Some top_impl_Instance_proc) (select ProcessorBindings top_impl_Instance_test_event_port_src)))\n  (assert (= (Some top_impl_Instance_proc) (select ProcessorBindings top_impl_Instance_test_event_port_snkDefault)))\n  (assert (= (Some top_impl_Instance_proc) (select ProcessorBindings top_impl_Instance_test_event_port_snkQueue2_A)))\n  (assert (= (Some top_impl_Instance_proc) (select ProcessorBindings top_impl_Instance_test_event_port_snkQueue2_B)))\n  (assert (= (Some top_impl_Instance_proc) (select ProcessorBindings top_impl_Instance_test_event_port_snkQueue5)))\n\n(declare-const AadlDispatchProtocol (Array AadlComponent (Option DispatchProtocol)))\n  (assert (= (Some Periodic) (select AadlDispatchProtocol top_impl_Instance_test_event_port_src)))\n  (assert (= (Some Sporadic) (select AadlDispatchProtocol top_impl_Instance_test_event_port_snkDefault)))\n  (assert (= (Some Sporadic) (select AadlDispatchProtocol top_impl_Instance_test_event_port_snkQueue2_A)))\n  (assert (= (Some Sporadic) (select AadlDispatchProtocol top_impl_Instance_test_event_port_snkQueue2_B)))\n  (assert (= (Some Sporadic) (select AadlDispatchProtocol top_impl_Instance_test_event_port_snkQueue5)))\n(declare-const AadlDispatchProtocol_size Int)\n(assert (= 5 AadlDispatchProtocol_size))\n\n(declare-datatypes ((AadlPort 0)) ((\n  (top_impl_Instance_test_event_port_src_e)\n  (top_impl_Instance_test_event_port_snkDefault_s)\n  (top_impl_Instance_test_event_port_snkQueue2_A_s)\n  (top_impl_Instance_test_event_port_snkQueue2_B_s)\n  (top_impl_Instance_test_event_port_snkQueue5_s))))\n(declare-const AadlPort_count Int)\n(assert (= 5 AadlPort_count))\n\n(declare-const AadlPortComponent (Array AadlPort (Option AadlComponent)))\n  (assert (= (Some top_impl_Instance_test_event_port_src) (select AadlPortComponent top_impl_Instance_test_event_port_src_e)))\n  (assert (= (Some top_impl_Instance_test_event_port_snkDefault) (select AadlPortComponent top_impl_Instance_test_event_port_snkDefault_s)))\n  (assert (= (Some top_impl_Instance_test_event_port_snkQueue2_A) (select AadlPortComponent top_impl_Instance_test_event_port_snkQueue2_A_s)))\n  (assert (= (Some top_impl_Instance_test_event_port_snkQueue2_B) (select AadlPortComponent top_impl_Instance_test_event_port_snkQueue2_B_s)))\n  (assert (= (Some top_impl_Instance_test_event_port_snkQueue5) (select AadlPortComponent top_impl_Instance_test_event_port_snkQueue5_s)))\n(declare-const AadlPortComponent_size Int)\n(assert (= 5 AadlPortComponent_size))\n\n(declare-const AadlFeatureCategory (Array AadlPort FeatureCategory))\n  (assert (= EventPort (select AadlFeatureCategory top_impl_Instance_test_event_port_src_e)))\n  (assert (= EventPort (select AadlFeatureCategory top_impl_Instance_test_event_port_snkDefault_s)))\n  (assert (= EventPort (select AadlFeatureCategory top_impl_Instance_test_event_port_snkQueue2_A_s)))\n  (assert (= EventPort (select AadlFeatureCategory top_impl_Instance_test_event_port_snkQueue2_B_s)))\n  (assert (= EventPort (select AadlFeatureCategory top_impl_Instance_test_event_port_snkQueue5_s)))\n(declare-const AadlFeatureCategory_size Int)\n(assert (= 5 AadlFeatureCategory_size))\n\n(declare-const AadlPortDirection (Array AadlPort Direction))\n  (assert (= Out (select AadlPortDirection top_impl_Instance_test_event_port_src_e)))\n  (assert (= In (select AadlPortDirection top_impl_Instance_test_event_port_snkDefault_s)))\n  (assert (= In (select AadlPortDirection top_impl_Instance_test_event_port_snkQueue2_A_s)))\n  (assert (= In (select AadlPortDirection top_impl_Instance_test_event_port_snkQueue2_B_s)))\n  (assert (= In (select AadlPortDirection top_impl_Instance_test_event_port_snkQueue5_s)))\n(declare-const AadlPortDirection_size Int)\n(assert (= 5 AadlPortDirection_size))\n\n(define-fun AadlConnectionFlowTos ((p1 AadlPort) (p2 AadlPort)) Bool\n  (or\n    (and (= p1 top_impl_Instance_test_event_port_src_e) (= p2 top_impl_Instance_test_event_port_snkDefault_s))\n    (and (= p1 top_impl_Instance_test_event_port_src_e) (= p2 top_impl_Instance_test_event_port_snkQueue2_A_s))\n    (and (= p1 top_impl_Instance_test_event_port_src_e) (= p2 top_impl_Instance_test_event_port_snkQueue2_B_s))\n    (and (= p1 top_impl_Instance_test_event_port_src_e) (= p2 top_impl_Instance_test_event_port_snkQueue5_s))\n    false))\n(declare-const AadlConnectionFlowsTos_count Int)\n(assert (= 4 AadlConnectionFlowsTos_count))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                              CAmkES Model                              ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare-datatypes ((AccessType 0)) ((\n  (R)\n  (W)\n  (RW))))\n\n(declare-datatypes ((seL4ConnectorType 0)) ((\n  (seL4GlobalAsynch)\n  (seL4GlobalAsynchCallback)\n  (seL4Notification)\n  (seL4RPCCall)\n  (seL4RPCDataport)\n  (seL4SharedData)\n  (seL4SharedDataWithCaps)\n  (seL4SerialServer)\n  (seL4TimeServer)\n  (seL4VMDTBPassthrough)\n  (CASE_AADL_EventDataport))))\n\n(declare-datatypes ((CAmkESComponent 0)) ((\n  (test_event_port_src)\n  (test_event_port_snkDefault)\n  (test_event_port_snkQueue2_A)\n  (test_event_port_snkQueue2_B)\n  (test_event_port_snkQueue5)\n  (dispatch_periodic_inst)\n  (time_server))))\n(declare-const CAmkESComponent_count Int)\n(assert (= 7 CAmkESComponent_count))\n\n(define-fun isPeriodicDispatcher ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (= _component dispatch_periodic_inst)))\n\n(define-fun isPacer ((_component CAmkESComponent)) Bool\n  (and (= ModelSchedulingType Pacing)\n       false))\n\n(define-fun isFileServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a file server is expected\n       false))\n\n(define-fun isTimeServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a time server is expected\n       (= _component time_server)))\n\n(define-fun isSerialServer ((_component CAmkESComponent)) Bool\n  (and ; TODO: list scenarios where a serial server is expected\n       false))\n\n(declare-datatypes ((CAmkESPort 0)) ((\n  (test_event_port_src_sb_e_counter)\n  (test_event_port_src_sb_e)\n  (test_event_port_src_sb_periodic_dispatch_notification)\n  (test_event_port_snkDefault_sb_s_counter)\n  (test_event_port_snkDefault_sb_s)\n  (test_event_port_snkQueue2_A_sb_s_counter)\n  (test_event_port_snkQueue2_A_sb_s)\n  (test_event_port_snkQueue2_B_sb_s_counter)\n  (test_event_port_snkQueue2_B_sb_s)\n  (test_event_port_snkQueue5_sb_s_counter)\n  (test_event_port_snkQueue5_sb_s)\n  (dispatch_periodic_inst_sb_test_event_port_src_periodic_dispatch_notification)\n  (dispatch_periodic_inst_timer)\n  (dispatch_periodic_inst_timer_complete)\n  (time_server_timer_notification)\n  (time_server_the_timer))))\n(declare-const CAmkESPort_count Int)\n(assert (= 16 CAmkESPort_count))\n\n(declare-const CAmkESAccessRestrictions (Array CAmkESPort AccessType))\n  (assert (= W (select CAmkESAccessRestrictions test_event_port_src_sb_e_counter)))\n  (assert (= R (select CAmkESAccessRestrictions test_event_port_snkDefault_sb_s_counter)))\n  (assert (= R (select CAmkESAccessRestrictions test_event_port_snkQueue2_A_sb_s_counter)))\n  (assert (= R (select CAmkESAccessRestrictions test_event_port_snkQueue2_B_sb_s_counter)))\n  (assert (= R (select CAmkESAccessRestrictions test_event_port_snkQueue5_sb_s_counter)))\n(declare-const CAmkESAccessRestrictions_size Int)\n(assert (= 5 CAmkESAccessRestrictions_size))\n\n(declare-datatypes ((CAmkESConnection 0)) ((\n  (conn1)\n  (conn2)\n  (conn3)\n  (conn4)\n  (conn5))))\n(declare-const CAmkESConnection_count Int)\n(assert (= 5 CAmkESConnection_count))\n\n(define-fun isSelfPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType SelfPacing)\n       (or \n           false)))\n\n(define-fun isPacingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType Pacing)\n       (or \n           false)))\n\n(define-fun isPeriodicDispatchingConnection ((_conn CAmkESConnection)) Bool\n  (and (= ModelSchedulingType PeriodicDispatching)\n       (or (= _conn conn3)\n           (= _conn conn4)\n           (= _conn conn5)\n           false)))\n(declare-const PeriodicDispatchingConnection_count Int)\n(assert (= 3 PeriodicDispatchingConnection_count))\n\n; non Aadl connection refinement connections required by a VM\n(define-fun isVMAuxConnection ((_conn CAmkESConnection)) Bool\n  (or \n      false))\n\n(declare-const CAmkESConnectionType (Array CAmkESConnection seL4ConnectorType))\n  (assert (= seL4Notification (select CAmkESConnectionType conn1)))\n  (assert (= seL4SharedData (select CAmkESConnectionType conn2)))\n  (assert (= seL4Notification (select CAmkESConnectionType conn3)))\n  (assert (= seL4TimeServer (select CAmkESConnectionType conn4)))\n  (assert (= seL4GlobalAsynchCallback (select CAmkESConnectionType conn5)))\n(declare-const CAmkESConnectionType_count Int)\n(assert (= 5 CAmkESConnectionType_count))\n\n(declare-const CAmkESPortComponent (Array CAmkESPort CAmkESComponent))\n  (assert (= test_event_port_src (select CAmkESPortComponent test_event_port_src_sb_e_counter)))\n  (assert (= test_event_port_src (select CAmkESPortComponent test_event_port_src_sb_e)))\n  (assert (= test_event_port_src (select CAmkESPortComponent test_event_port_src_sb_periodic_dispatch_notification)))\n  (assert (= test_event_port_snkDefault (select CAmkESPortComponent test_event_port_snkDefault_sb_s_counter)))\n  (assert (= test_event_port_snkDefault (select CAmkESPortComponent test_event_port_snkDefault_sb_s)))\n  (assert (= test_event_port_snkQueue2_A (select CAmkESPortComponent test_event_port_snkQueue2_A_sb_s_counter)))\n  (assert (= test_event_port_snkQueue2_A (select CAmkESPortComponent test_event_port_snkQueue2_A_sb_s)))\n  (assert (= test_event_port_snkQueue2_B (select CAmkESPortComponent test_event_port_snkQueue2_B_sb_s_counter)))\n  (assert (= test_event_port_snkQueue2_B (select CAmkESPortComponent test_event_port_snkQueue2_B_sb_s)))\n  (assert (= test_event_port_snkQueue5 (select CAmkESPortComponent test_event_port_snkQueue5_sb_s_counter)))\n  (assert (= test_event_port_snkQueue5 (select CAmkESPortComponent test_event_port_snkQueue5_sb_s)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_sb_test_event_port_src_periodic_dispatch_notification)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_timer)))\n  (assert (= dispatch_periodic_inst (select CAmkESPortComponent dispatch_periodic_inst_timer_complete)))\n  (assert (= time_server (select CAmkESPortComponent time_server_timer_notification)))\n  (assert (= time_server (select CAmkESPortComponent time_server_the_timer)))\n(declare-const CAmkESPortComponent_size Int)\n(assert (= 16 CAmkESPortComponent_size))\n\n(define-fun CAmkESConnectionFlowTos ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort)) Bool\n  (or\n    (and (= _conn conn1) (= _p1 test_event_port_src_sb_e) (= _p2 test_event_port_snkDefault_sb_s))\n    (and (= _conn conn1) (= _p1 test_event_port_src_sb_e) (= _p2 test_event_port_snkQueue2_A_sb_s))\n    (and (= _conn conn1) (= _p1 test_event_port_src_sb_e) (= _p2 test_event_port_snkQueue2_B_sb_s))\n    (and (= _conn conn1) (= _p1 test_event_port_src_sb_e) (= _p2 test_event_port_snkQueue5_sb_s))\n    (and (= _conn conn2) (= _p1 test_event_port_src_sb_e_counter) (= _p2 test_event_port_snkDefault_sb_s_counter))\n    (and (= _conn conn2) (= _p1 test_event_port_src_sb_e_counter) (= _p2 test_event_port_snkQueue2_A_sb_s_counter))\n    (and (= _conn conn2) (= _p1 test_event_port_src_sb_e_counter) (= _p2 test_event_port_snkQueue2_B_sb_s_counter))\n    (and (= _conn conn2) (= _p1 test_event_port_src_sb_e_counter) (= _p2 test_event_port_snkQueue5_sb_s_counter))\n    (and (= _conn conn3) (= _p1 dispatch_periodic_inst_sb_test_event_port_src_periodic_dispatch_notification) (= _p2 test_event_port_src_sb_periodic_dispatch_notification))\n    (and (= _conn conn4) (= _p1 dispatch_periodic_inst_timer) (= _p2 time_server_the_timer))\n    (and (= _conn conn5) (= _p1 time_server_timer_notification) (= _p2 dispatch_periodic_inst_timer_complete))\n    false))\n(declare-const CAmkESConnectionFlowTos_count Int)\n(assert (= 11 CAmkESConnectionFlowTos_count))\n\n(define-fun ComponentRefinement ((ac (Option AadlComponent)) (cc CAmkESComponent)) Bool\n  (or\n    (and (= ac (Some top_impl_Instance_test_event_port_src)) (= cc test_event_port_src))\n    (and (= ac (Some top_impl_Instance_test_event_port_snkDefault)) (= cc test_event_port_snkDefault))\n    (and (= ac (Some top_impl_Instance_test_event_port_snkQueue2_A)) (= cc test_event_port_snkQueue2_A))\n    (and (= ac (Some top_impl_Instance_test_event_port_snkQueue2_B)) (= cc test_event_port_snkQueue2_B))\n    (and (= ac (Some top_impl_Instance_test_event_port_snkQueue5)) (= cc test_event_port_snkQueue5))\n    false))\n(declare-const ComponentRefinement_count Int)\n(assert (= 5 ComponentRefinement_count))\n\n(define-fun PortRefinement ((ap AadlPort) (cp CAmkESPort)) Bool\n  (or\n    (and (= ap top_impl_Instance_test_event_port_src_e) (= cp test_event_port_src_sb_e_counter))\n    (and (= ap top_impl_Instance_test_event_port_src_e) (= cp test_event_port_src_sb_e))\n    (and (= ap top_impl_Instance_test_event_port_snkDefault_s) (= cp test_event_port_snkDefault_sb_s_counter))\n    (and (= ap top_impl_Instance_test_event_port_snkDefault_s) (= cp test_event_port_snkDefault_sb_s))\n    (and (= ap top_impl_Instance_test_event_port_snkQueue2_A_s) (= cp test_event_port_snkQueue2_A_sb_s_counter))\n    (and (= ap top_impl_Instance_test_event_port_snkQueue2_A_s) (= cp test_event_port_snkQueue2_A_sb_s))\n    (and (= ap top_impl_Instance_test_event_port_snkQueue2_B_s) (= cp test_event_port_snkQueue2_B_sb_s_counter))\n    (and (= ap top_impl_Instance_test_event_port_snkQueue2_B_s) (= cp test_event_port_snkQueue2_B_sb_s))\n    (and (= ap top_impl_Instance_test_event_port_snkQueue5_s) (= cp test_event_port_snkQueue5_sb_s_counter))\n    (and (= ap top_impl_Instance_test_event_port_snkQueue5_s) (= cp test_event_port_snkQueue5_sb_s))\n    false))\n(declare-const PortRefinement_count Int)\n(assert (= 10 PortRefinement_count))\n\n(define-fun isVMAuxPort ((cp CAmkESPort)) Bool\n  (exists ((cc CAmkESComponent))\n    (and (= cc (select CAmkESPortComponent cp))\n         (or \n             false))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                             Proof Functions                            ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(define-fun isVMComponent ((cc CAmkESComponent)) Bool\n  (exists ((ap AadlComponent))\n    (and (ComponentRefinement (Some ap) cc)                   ; cc refines ap\n         (= (Some Process) (select AadlComponentCategory ap)) ; ap is a process\n         (match (select ProcessorBindings ap) (\n           ((Some x) (= (Some VirtualProcessor) (select AadlComponentCategory x))) ; ap is bound to virtual processor\n           (None false))))))\n\n(define-fun AadlFlowDirectionality () Bool\n  (forall ((p1 AadlPort) (p2 AadlPort))\n    (=> (AadlConnectionFlowTos p1 p2)\n        (and (= Out (select AadlPortDirection p1)) (= In (select AadlPortDirection p2))))))\n\n(define-fun AadlFlowNoSelfConnection () Bool\n  (forall ((p1 AadlPort) (p2 AadlPort))\n    (=> (AadlConnectionFlowTos p1 p2)\n        (not (= p1 p2)))))\n\n(define-fun AadlConnectedPortTypeMatch () Bool\n  (forall ((src AadlPort) (dst AadlPort))\n    (=> (AadlConnectionFlowTos src dst)\n        (or (and (= AbstractFeature (select AadlFeatureCategory src)) (= AbstractFeature (select AadlFeatureCategory dst)))\n            (and (= BusAccess (select AadlFeatureCategory src)) (= BusAccess (select AadlFeatureCategory dst)))\n            (and (= DataAccess (select AadlFeatureCategory src)) (= DataAccess (select AadlFeatureCategory dst)))\n            (and (= DataPort (select AadlFeatureCategory src)) (= DataPort (select AadlFeatureCategory dst)))\n            (and (= EventPort (select AadlFeatureCategory src)) (= EventPort (select AadlFeatureCategory dst)))\n            (and (= EventDataPort (select AadlFeatureCategory src)) (= EventDataPort (select AadlFeatureCategory dst)))\n            (and (= FeatureGroup (select AadlFeatureCategory src)) (= FeatureGroup (select AadlFeatureCategory dst)))\n            (and (= Parameter (select AadlFeatureCategory src)) (= Parameter (select AadlFeatureCategory dst)))\n            (and (= SubprogramAccess (select AadlFeatureCategory src)) (= SubprogramAccess (select AadlFeatureCategory dst)))\n            (and (= SubprogramAccessGroup (select AadlFeatureCategory src)) (= SubprogramAccessGroup (select AadlFeatureCategory dst)))\n             false))))\n(declare-const AadlConnectedPortTypeMatch_count Int)\n(assert (= 10 AadlConnectedPortTypeMatch_count))\n\n(define-fun AadlDispatchProtocolSpecified () Bool\n  (forall ((_comp AadlComponent))\n    (match (select AadlComponentCategory _comp) (\n      ((Some _category_) (\n        ; threads and virtual processors must have an assigned dispatch protocol, all others are 'don't care'\n        match _category_ (\n          (Thread (not (= (as None (Option DispatchProtocol)) (select AadlDispatchProtocol _comp))))\n          (VirtualProcessor (not (= (as None (Option DispatchProtocol)) (select AadlDispatchProtocol _comp))))\n          (_z_ true)\n        )))\n      (None false) ; sanity check: all AADL components must have an assigned component category\n      ))))\n\n(define-fun AadlAllPortsAssigned () Bool\n  (forall ((_p AadlPort))\n    (not (= (as None (Option AadlComponent)) (select AadlPortComponent _p)))))\n\n(define-fun AADLWellFormedness () Bool\n  (and\n    (= AadlPort_count AadlPortComponent_size) ; all Aadl ports belong to an Aadl component\n    AadlAllPortsAssigned\n    AadlDispatchProtocolSpecified\n    AadlFlowDirectionality\n    AadlFlowNoSelfConnection\n    AadlConnectedPortTypeMatch))\n\n\n(define-fun CAmkESFlowNoSelfConnection () Bool\n  (forall ((_conn CAmkESConnection) (_p1 CAmkESPort) (_p2 CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _p1 _p2)\n        (not (= _p1 _p2)))))\n\n(define-fun CAmkESDataPortAccess () Bool\n  (forall ((_conn CAmkESConnection) (_src CAmkESPort) (_dst CAmkESPort))\n    (=> (CAmkESConnectionFlowTos _conn _src _dst)\n        (and\n             (=> (= seL4SharedData (select CAmkESConnectionType _conn))\n                 (and (= W (select CAmkESAccessRestrictions _src))\n                      (= R (select CAmkESAccessRestrictions _dst))))\n             (=> (= seL4SharedDataWithCaps (select CAmkESConnectionType _conn))\n                 (and (ite (isVMComponent (select CAmkESPortComponent _src))\n                           (= RW (select CAmkESAccessRestrictions _src))\n                           (= W (select CAmkESAccessRestrictions _src)))\n                      (= R (select CAmkESAccessRestrictions _dst))))))))\n\n(define-fun UniqueComponentRefinements () Bool\n  (forall ((aadlComponent1 AadlComponent) (camkesComponent CAmkESComponent))\n    (=> (ComponentRefinement (Some aadlComponent1) camkesComponent)\n        (not (exists ((aadlComponent2 AadlComponent))\n               (and (not (= aadlComponent1 aadlComponent2))\n                    (ComponentRefinement (Some aadlComponent2) camkesComponent)))))))\n\n(define-fun UniquePortRefinements () Bool\n  (forall ((aadlPort1 AadlPort) (camkesPort CAmkESPort))\n    (=> (PortRefinement aadlPort1 camkesPort)\n        (not (exists ((aadlPort2 AadlPort))\n               (and (not (= aadlPort1 aadlPort2))\n                    (PortRefinement aadlPort2 camkesPort)))))))\n\n(define-fun CAmkESWellFormedness () Bool\n  (and\n    (= CAmkESPort_count CAmkESPortComponent_size) ; all CAmkES ports belong to a CAmkES component\n    CAmkESDataPortAccess\n    CAmkESFlowNoSelfConnection))\n\n; helper method: if either port belongs to a VM component then any data connection between the two of them\n; must be seL4SharedDataWithCaps, seL4SharedData otherwise\n(define-fun getExpectedDataConnectionType ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) seL4ConnectorType\n  (ite (or (isVMComponent (select CAmkESPortComponent camkesSource))\n           (isVMComponent (select CAmkESPortComponent camkesDest))\n           false)\n       seL4SharedDataWithCaps\n       seL4SharedData))\n\n; helper method: if the destination port belongs to a VM component than any event connection between the two ports\n; must be seL4GlobalAsynch, seL4Notification otherwise\n(define-fun getExpectedEventConnectionType ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) seL4ConnectorType\n  (ite (isVMComponent (select CAmkESPortComponent camkesDest))\n       seL4GlobalAsynch\n       seL4Notification))\n\n(define-fun SB_DataPortRefinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n      (and (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n           (= (select CAmkESConnectionType conn) (getExpectedDataConnectionType camkesSource camkesDest)) ; actual connector type must match expected\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest  camkesDest)\n           (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_EventPortRefinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (exists ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (and\n      (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (= (select CAmkESConnectionType conn) (getExpectedEventConnectionType camkesSource camkesDest)) ; actual connector type must match expected\n      (PortRefinement aadlSource camkesSource)\n      (PortRefinement aadlDest camkesDest)\n      (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n      (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest)))))\n\n(define-fun SB_Refinement ((aadlSource AadlPort) (aadlDest AadlPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (or\n         (and\n           (= DataPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)) ; payload\n         (and\n           (= EventPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; event counter\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         (and\n           (= EventDataPort (select AadlFeatureCategory aadlSource))\n           (SB_DataPortRefinement aadlSource aadlDest)   ; payload\n           (SB_EventPortRefinement aadlSource aadlDest)) ; event\n         false)))\n\n(define-fun ConnectionPreservation () Bool\n  (forall ((aadlSource AadlPort) (aadlDest AadlPort))\n    (=> (AadlConnectionFlowTos aadlSource aadlDest)\n        (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n             (SB_Refinement aadlSource aadlDest)))))\n\n\n(define-fun isAadl_SB_ConnectionRefinement ((camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (and (or (= CodegenMode SeL4) (= CodegenMode SeL4_Only) false)\n       (exists ((aadlSource AadlPort) (aadlDest AadlPort))\n         (and\n           (PortRefinement aadlSource camkesSource)\n           (PortRefinement aadlDest camkesDest)\n           (ComponentRefinement (select AadlPortComponent aadlSource) (select CAmkESPortComponent camkesSource))\n           (ComponentRefinement (select AadlPortComponent aadlDest) (select CAmkESPortComponent camkesDest))\n           (AadlConnectionFlowTos aadlSource aadlDest)))))\n\n(define-fun isCAmkESSchedulingConnection ((_conn CAmkESConnection)) Bool\n  (or\n    (isSelfPacingConnection _conn)\n    (isPacingConnection _conn)\n    (isPeriodicDispatchingConnection _conn)\n    false))\n\n(define-fun isVirtualMachineInducedConnection ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort)) Bool\n  (or\n    (and (isVMAuxConnection conn)\n         (or (isVMAuxPort camkesSource)\n             (isVMAuxPort camkesDest)\n             false))\n    (and (isSerialServer (select CAmkESPortComponent camkesSource)) ; connection b\/w serial and time server\n         (isTimeServer (select CAmkESPortComponent camkesDest)))\n    false))\n\n(define-fun NoNewConnections () Bool\n  (forall ((conn CAmkESConnection) (camkesSource CAmkESPort) (camkesDest CAmkESPort))\n    (=> (CAmkESConnectionFlowTos conn camkesSource camkesDest)\n      (or\n        (isAadl_SB_ConnectionRefinement camkesSource camkesDest)\n        (isCAmkESSchedulingConnection conn)\n        (isVirtualMachineInducedConnection conn camkesSource camkesDest)\n        false))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                                                                        ;;\n;;                              Proof                                     ;;\n;;                                                                        ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(echo \"RefinementProof: Shows that there is a model satisfying all the constraints (should be sat):\")\n(push)\n(assert (and\n  AADLWellFormedness\n  CAmkESWellFormedness\n  ConnectionPreservation\n  UniqueComponentRefinements\n  UniquePortRefinements\n  NoNewConnections\n))\n(check-sat)\n;(get-model)\n(pop)\n\n(echo \"AADLWellFormedness: Proves that the generated AADL evidence is well-formed (should be unsat):\")\n(push)\n(assert (not AADLWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"CAmkESWellFormedness: Proves that the generated CAmkES evidence is well-formed (should be unsat):\")\n(push)\n(assert (not CAmkESWellFormedness))\n(check-sat)\n(pop)\n\n(echo \"ConnectionPreservation: Proves that the generated CAmkES connections preserve AADL's (should be unsat):\")\n(push)\n(assert (not ConnectionPreservation))\n(check-sat)\n(pop)\n\n(echo \"NoNewConnections: Proves that the generated CAmkES connections does not contain more than AADL's (should be unsat):\")\n(push)\n(assert (not NoNewConnections))\n(check-sat)\n(pop)\n\n\n(exit)",
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "markers" : [
          ]
        }
      ]
    ]
  }
}
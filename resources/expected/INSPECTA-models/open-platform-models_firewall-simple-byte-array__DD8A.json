{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "microkit\/types\/include\/sb_aadl_types.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <stdbool.h>\n#include <stdint.h>\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n#define SW_RawEthernetMessage_BYTE_SIZE 1600\n#define SW_RawEthernetMessage_DIM_0 1600\n\ntypedef uint8_t SW_RawEthernetMessage [SW_RawEthernetMessage_DIM_0];\n\n#define SW_u16Array_BYTE_SIZE 8\n#define SW_u16Array_DIM_0 4\n\ntypedef uint16_t SW_u16Array [SW_u16Array_DIM_0];\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/types\/include\/sb_event_counter.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <stdint.h>\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\ntypedef _Atomic uintmax_t sb_event_counter_t;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/types\/include\/sb_queue_SW_RawEthernetMessage_1.h",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n\/\/ Single sender multiple receiver Queue implementation for AADL\n\/\/ Ports. Every receiver receives the sent data (ie broadcast). The queue\n\/\/ operations are all non-blocking. The sender enqueue always succeeds. A\n\/\/ receiver dequeue can fail and drop data if the sender writes while the\n\/\/ receiver is reading. This situation is detected unless the sender gets\n\/\/ ahead of a receiver by more than COUNTER_MAX. Since COUNTER_MAX is typically\n\/\/ 2^64 (see sb_event_counter.h), this is extremely unlikely. If it does happen the\n\/\/ only adverse effect is that the receiver will not detect all dropped\n\/\/ elements.\n\n#pragma once\n\n#include <sb_event_counter.h>\n#include <sb_aadl_types.h>\n\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n\n#if __has_include(\"util.h\")\n#include <util.h>\n#elif __has_include(\"libvmm\/util.util.h\")\n#include <libvmm\/util\/util.h>\n#endif\n\n\/\/ Queue size must be an integer factor of the size for sb_event_counter_t (an unsigned\n\/\/ integer type). Since we are using standard C unsigned integers for the\n\/\/ counter, picking a queue size that is a power of 2 is a good choice. We\n\/\/ could alternatively set the size of our counter to the largest possible\n\/\/ multiple of queue size. But then we would need to do our own modulo\n\/\/ operations on the counter rather than depending on c's unsigned integer\n\/\/ operations.\n\/\/\n\/\/ Note: One cell in the queue is always considered dirty. Its the next\n\/\/ element to be written. Thus the queue can only contain\n\/\/ SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE-1 elements.\n#define SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE 2\n\n\/\/ This is the type of the seL4 dataport (shared memory) that is shared by the\n\/\/ sender and all receivers. This type is referenced in the sender and receiver\n\/\/ component definition files. The seL4 runtime creates an\n\/\/ instance of this struct.\ntypedef struct sb_queue_SW_RawEthernetMessage_1 {\n  \/\/ Number of elements enqueued by the sender. The implementation depends\n  \/\/ on C's standard module behaviour for unsigned integers. The counter never\n  \/\/ overflows. It just wraps modulo the size of the counter type. The counter\n  \/\/ is typically very large (see sb_event_counter.h), so this should happen very\n  \/\/ infrequently. Depending in C to initialize this to zero.\n  _Atomic sb_event_counter_t numSent;\n\n  \/\/ Queue of elements of type SW_RawEthernetMessage\n  \/\/ (see sb_types.h) implemented as a ring buffer.\n  \/\/ No initialization necessary.\n  SW_RawEthernetMessage elt[SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE];\n\n} sb_queue_SW_RawEthernetMessage_1_t;\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ Could split this into separate header and source file since only sender\n\/\/ code needs this.\n\n\/\/ Initialize the queue. Sender must call this exactly once before any calls to queue_enqueue();\nvoid sb_queue_SW_RawEthernetMessage_1_init(sb_queue_SW_RawEthernetMessage_1_t *queue);\n\n\/\/ Enqueue data. This always succeeds and never blocks. Data is copied.\nvoid sb_queue_SW_RawEthernetMessage_1_enqueue(\n  sb_queue_SW_RawEthernetMessage_1_t *queue,\n  SW_RawEthernetMessage *data);\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ Could split this into separate header and source file since only receiver\n\/\/ code needs this.\n\n\/\/ Each receiver needs to create an instance of this.\ntypedef struct sb_queue_SW_RawEthernetMessage_1_Recv {\n  \/\/ Number of elements dequeued (or dropped) by a receiver. The implementation\n  \/\/ depends on C's standard module behaviour for unsigned integers. The\n  \/\/ counter never overflows. It just wraps modulo the size of the counter\n  \/\/ type. The counter is typically very large (see counter.h), so this should\n  \/\/ happen very infrequently.\n  sb_event_counter_t numRecv;\n\n  \/\/ Pointer to the actual queue. This is the seL4 dataport (shared memory)\n  \/\/ that is shared by the sender and all receivers.\n  sb_queue_SW_RawEthernetMessage_1_t *queue;\n\n} sb_queue_SW_RawEthernetMessage_1_Recv_t;\n\n\/\/ Each receiver must call this exactly once before any calls to other queue\n\/\/ API functions.\nvoid sb_queue_SW_RawEthernetMessage_1_Recv_init(\n  sb_queue_SW_RawEthernetMessage_1_Recv_t *recvQueue,\n  sb_queue_SW_RawEthernetMessage_1_t *queue);\n\n\/\/ Dequeue data. Never blocks but can fail if the sender writes at same\n\/\/ time.\n\n\/\/ When successful returns true. The dequeued data will be copied to\n\/\/ *data. *numDropped will contain the number of elements that were dropped\n\/\/ since the last call to queue_dequeue().\n\/\/\n\/\/ When queue is empty, returns false and *numDropped is zero. *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ When dequeue fails due to possible write of data being read, returns false\n\/\/ and *numDropped will be >= 1 specifying the number of elements that were\n\/\/ dropped since the last call to sb_queue_SW_RawEthernetMessage_1_dequeue(). *data is left in\n\/\/ unspecified state.\n\/\/\n\/\/ If the sender ever gets ahead of a receiver by more than COUNTER_MAX,\n\/\/ sb_queue_SW_RawEthernetMessage_1_dequeue will fail to count a multiple of COUNTER_MAX in\n\/\/ numDropped. Since COUNTER_MAX is very large (typically on the order of 2^64,\n\/\/ see sb_event_counter.h), this is very unlikely.  If the sender is ever this far\n\/\/ ahead of a receiver the system is probably in a very bad state.\nbool sb_queue_SW_RawEthernetMessage_1_dequeue(\n  sb_queue_SW_RawEthernetMessage_1_Recv_t *recvQueue,\n  sb_event_counter_t *numDropped,\n  SW_RawEthernetMessage *data);\n\n\/\/ Is queue empty? If the queue is not empty, it will stay that way until the\n\/\/ receiver dequeues all data. If the queue is empty you can make no\n\/\/ assumptions about how long it will stay empty.\nbool sb_queue_SW_RawEthernetMessage_1_is_empty(sb_queue_SW_RawEthernetMessage_1_Recv_t *recvQueue);\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/types\/src\/sb_queue_SW_RawEthernetMessage_1.c",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2017, Data61\n * Commonwealth Scientific and Industrial Research Organisation (CSIRO)\n * ABN 41 687 119 230.\n *\n * Copyright 2019 Adventium Labs\n * Modifications made to original\n *\n * This software may be distributed and modified according to the terms of\n * the BSD 2-Clause license. Note that NO WARRANTY is provided.\n * See \"LICENSE_BSD2.txt\" for details.\n *\n * @TAG(DATA61_Adventium_BSD)\n *\/\n\n#include <sb_queue_SW_RawEthernetMessage_1.h>\n\n\/\/------------------------------------------------------------------------------\n\/\/ Sender API\n\/\/\n\/\/ See sb_queue_SW_RawEthernetMessage_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_SW_RawEthernetMessage_1_init(sb_queue_SW_RawEthernetMessage_1_t *queue) {\n  \/\/ NOOP for now. C's struct initialization is sufficient.  If we ever do need\n  \/\/ initialization logic, we may also need to synchronize with receiver\n  \/\/ startup.\n}\n\nvoid sb_queue_SW_RawEthernetMessage_1_enqueue(\n  sb_queue_SW_RawEthernetMessage_1_t *queue,\n  SW_RawEthernetMessage *data) {\n\n  \/\/ Simple ring with one dirty element that will be written next. Only one\n  \/\/ writer, so no need for any synchronization.\n  \/\/ elt[queue->numSent % SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE]\n  \/\/ is always considered dirty. So do not advance queue->NumSent\n  \/\/ till AFTER data is copied.\n\n  size_t index = queue->numSent % SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE;\n\n  memcpy(&queue->elt[index], data, SW_RawEthernetMessage_BYTE_SIZE); \/\/ Copy data into queue\n\n  \/\/ Release memory fence - ensure that data write above completes BEFORE we advance queue->numSent\n  __atomic_thread_fence(__ATOMIC_RELEASE);\n\n  ++(queue->numSent);\n}\n\n\/\/------------------------------------------------------------------------------\n\/\/ Receiver API\n\/\/\n\/\/ See sb_queue_SW_RawEthernetMessage_1.h for API documentation. Only implementation details are documented here.\n\nvoid sb_queue_SW_RawEthernetMessage_1_Recv_init(\n  sb_queue_SW_RawEthernetMessage_1_Recv_t *recvQueue,\n  sb_queue_SW_RawEthernetMessage_1_t *queue) {\n\n  recvQueue->numRecv = 0;\n  recvQueue->queue = queue;\n}\n\nbool sb_queue_SW_RawEthernetMessage_1_dequeue(\n  sb_queue_SW_RawEthernetMessage_1_Recv_t *recvQueue,\n  sb_event_counter_t *numDropped,\n  SW_RawEthernetMessage *data) {\n\n  sb_event_counter_t *numRecv = &recvQueue->numRecv;\n  sb_queue_SW_RawEthernetMessage_1_t *queue = recvQueue->queue;\n\n  \/\/ Get a copy of numSent so we can see if it changes during read\n  sb_event_counter_t numSent = queue->numSent;\n\n  \/\/ Acquire memory fence - ensure read of queue->numSent BEFORE reading data\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  \/\/ How many new elements have been sent? Since we are using unsigned\n  \/\/ integers, this correctly computes the value as counters wrap.\n  sb_event_counter_t numNew = numSent - *numRecv;\n  if (0 == numNew) {\n    \/\/ Queue is empty\n    return false;\n  }\n\n  \/\/ One element in the ring buffer is always considered dirty. Its the next\n  \/\/ element we will write.  It's not safe to read it until numSent has been\n  \/\/ incremented. Thus there are really only (SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE - 1)\n  \/\/ elements in the queue.\n  *numDropped = (numNew <= SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE - 1) ? 0 : numNew - SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE + 1;\n\n  \/\/ Increment numRecv by *numDropped plus one for the element we are about to read.\n  *numRecv += *numDropped + 1;\n\n  \/\/ UNUSED - number of elements left to be consumed\n  \/\/sb_event_counter_t numRemaining = numSent - *numRecv;\n\n  size_t index = (*numRecv - 1) % SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE;\n  memcpy(data, &queue->elt[index], SW_RawEthernetMessage_BYTE_SIZE); \/\/ Copy data\n\n  \/\/ Acquire memory fence - ensure read of data BEFORE reading queue->numSent again\n  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n\n  if (queue->numSent - *numRecv + 1 < SB_QUEUE_SW_RAWETHERNETMESSAGE_1_SIZE) {\n    \/\/ Sender did not write element we were reading. Copied data is coherent.\n    return true;\n  } else {\n    \/\/ Sender may have written element we were reading. Copied data may be incoherent.\n    \/\/ We dropped the element we were trying to read, so increment *numDropped.\n    ++(*numDropped);\n    return false;\n  }\n}\n\nbool sb_queue_SW_RawEthernetMessage_1_is_empty(sb_queue_SW_RawEthernetMessage_1_Recv_t *recvQueue) {\n  return (recvQueue->queue->numSent == recvQueue->numRecv);\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/types\/include\/sb_types.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n#include <sb_aadl_types.h>\n#include <sb_queue_SW_RawEthernetMessage_1.h>\n#include <sb_queue_SW_RawEthernetMessage_1.h>\n#include <sb_queue_SW_RawEthernetMessage_1.h>\n#include <sb_queue_SW_RawEthernetMessage_1.h>\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/components\/ArduPilot_ArduPilot\/src\/ArduPilot_ArduPilot_MON.c",
        {
          "type" : "ITestResource",
          "content" : "#include <microkit.h>\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n#define PORT_PACER 61\n\n#define PORT_TO_CHILD 60\n\nvoid init(void) {\n  microkit_notify(PORT_PACER);\n}\n\nvoid notified(microkit_channel channel) {\n  switch (channel) {\n    case PORT_PACER:\n      \/\/ notify child\n      microkit_notify(PORT_TO_CHILD);\n\n      \/\/ send response back to pacer\n      microkit_notify(PORT_PACER);\n      break;\n  }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/ArduPilot_ArduPilot\/src\/ArduPilot_ArduPilot.c",
        {
          "type" : "ITestResource",
          "content" : "#include \"ArduPilot_ArduPilot.h\"\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nvoid ArduPilot_ArduPilot_initialize(void);\nvoid ArduPilot_ArduPilot_notify(microkit_channel channel);\nvoid ArduPilot_ArduPilot_timeTriggered(void);\n\nvolatile sb_queue_SW_RawEthernetMessage_1_t *EthernetFramesTx_queue_1;\nvolatile sb_queue_SW_RawEthernetMessage_1_t *EthernetFramesRx_queue_1;\nsb_queue_SW_RawEthernetMessage_1_Recv_t EthernetFramesRx_recv_queue;\n\n#define PORT_FROM_MON 60\n\nbool put_EthernetFramesTx(const SW_RawEthernetMessage *data) {\n  sb_queue_SW_RawEthernetMessage_1_enqueue((sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesTx_queue_1, (SW_RawEthernetMessage *) data);\n\n  return true;\n}\n\nbool EthernetFramesRx_is_empty(void) {\n  return sb_queue_SW_RawEthernetMessage_1_is_empty(&EthernetFramesRx_recv_queue);\n}\n\nbool get_EthernetFramesRx_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data) {\n  return sb_queue_SW_RawEthernetMessage_1_dequeue((sb_queue_SW_RawEthernetMessage_1_Recv_t *) &EthernetFramesRx_recv_queue, numDropped, data);\n}\n\nbool get_EthernetFramesRx(SW_RawEthernetMessage *data) {\n  sb_event_counter_t numDropped;\n  return get_EthernetFramesRx_poll (&numDropped, data);\n}\n\nvoid init(void) {\n  sb_queue_SW_RawEthernetMessage_1_init((sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesTx_queue_1);\n\n  sb_queue_SW_RawEthernetMessage_1_Recv_init(&EthernetFramesRx_recv_queue, (sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesRx_queue_1);\n\n  ArduPilot_ArduPilot_initialize();\n}\n\nvoid notified(microkit_channel channel) {\n  switch (channel) {\n    case PORT_FROM_MON:\n      ArduPilot_ArduPilot_timeTriggered();\n      break;\n    default:\n      ArduPilot_ArduPilot_notify(channel);\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/ArduPilot_ArduPilot\/src\/ArduPilot_ArduPilot_user.c",
        {
          "type" : "ITestResource",
          "content" : "#include \"ArduPilot_ArduPilot.h\"\n\n\/\/ This file will not be overwritten if codegen is rerun\n\nvoid ArduPilot_ArduPilot_initialize(void) {\n  printf(\"%s: ArduPilot_ArduPilot_initialize invoked\\n\", microkit_name);\n}\n\nvoid ArduPilot_ArduPilot_timeTriggered(void) {\n  printf(\"%s: ArduPilot_ArduPilot_timeTriggered invoked\\n\", microkit_name);\n}\n\nvoid ArduPilot_ArduPilot_notify(microkit_channel channel) {\n  \/\/ this method is called when the monitor does not handle the passed in channel\n  switch (channel) {\n    default:\n      printf(\"%s: Unexpected channel %d\\n\", microkit_name, channel);\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/ArduPilot_ArduPilot\/include\/ArduPilot_ArduPilot.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <printf.h>\n#include <util.h>\n#include <stdint.h>\n#include <microkit.h>\n#include <sb_types.h>\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n\nbool put_EthernetFramesTx(const SW_RawEthernetMessage *data);\nbool EthernetFramesRx_is_empty(void);\nbool get_EthernetFramesRx_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);\nbool get_EthernetFramesRx(SW_RawEthernetMessage *data);\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/Firewall_Firewall\/src\/Firewall_Firewall_MON.c",
        {
          "type" : "ITestResource",
          "content" : "#include <microkit.h>\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n#define PORT_PACER 59\n\n#define PORT_TO_CHILD 58\n\nvoid init(void) {\n  microkit_notify(PORT_PACER);\n}\n\nvoid notified(microkit_channel channel) {\n  switch (channel) {\n    case PORT_PACER:\n      \/\/ notify child\n      microkit_notify(PORT_TO_CHILD);\n\n      \/\/ send response back to pacer\n      microkit_notify(PORT_PACER);\n      break;\n  }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/Firewall_Firewall\/src\/Firewall_Firewall.c",
        {
          "type" : "ITestResource",
          "content" : "#include \"Firewall_Firewall.h\"\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nvoid Firewall_Firewall_initialize(void);\nvoid Firewall_Firewall_notify(microkit_channel channel);\nvoid Firewall_Firewall_timeTriggered(void);\n\nvolatile sb_queue_SW_RawEthernetMessage_1_t *EthernetFramesTxIn_queue_1;\nsb_queue_SW_RawEthernetMessage_1_Recv_t EthernetFramesTxIn_recv_queue;\nvolatile sb_queue_SW_RawEthernetMessage_1_t *EthernetFramesRxOut_queue_1;\nvolatile sb_queue_SW_RawEthernetMessage_1_t *EthernetFramesTxOut_queue_1;\nvolatile sb_queue_SW_RawEthernetMessage_1_t *EthernetFramesRxIn_queue_1;\nsb_queue_SW_RawEthernetMessage_1_Recv_t EthernetFramesRxIn_recv_queue;\n\n#define PORT_FROM_MON 58\n\nbool EthernetFramesTxIn_is_empty(void) {\n  return sb_queue_SW_RawEthernetMessage_1_is_empty(&EthernetFramesTxIn_recv_queue);\n}\n\nbool get_EthernetFramesTxIn_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data) {\n  return sb_queue_SW_RawEthernetMessage_1_dequeue((sb_queue_SW_RawEthernetMessage_1_Recv_t *) &EthernetFramesTxIn_recv_queue, numDropped, data);\n}\n\nbool get_EthernetFramesTxIn(SW_RawEthernetMessage *data) {\n  sb_event_counter_t numDropped;\n  return get_EthernetFramesTxIn_poll (&numDropped, data);\n}\n\nbool put_EthernetFramesRxOut(const SW_RawEthernetMessage *data) {\n  sb_queue_SW_RawEthernetMessage_1_enqueue((sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesRxOut_queue_1, (SW_RawEthernetMessage *) data);\n\n  return true;\n}\n\nbool put_EthernetFramesTxOut(const SW_RawEthernetMessage *data) {\n  sb_queue_SW_RawEthernetMessage_1_enqueue((sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesTxOut_queue_1, (SW_RawEthernetMessage *) data);\n\n  return true;\n}\n\nbool EthernetFramesRxIn_is_empty(void) {\n  return sb_queue_SW_RawEthernetMessage_1_is_empty(&EthernetFramesRxIn_recv_queue);\n}\n\nbool get_EthernetFramesRxIn_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data) {\n  return sb_queue_SW_RawEthernetMessage_1_dequeue((sb_queue_SW_RawEthernetMessage_1_Recv_t *) &EthernetFramesRxIn_recv_queue, numDropped, data);\n}\n\nbool get_EthernetFramesRxIn(SW_RawEthernetMessage *data) {\n  sb_event_counter_t numDropped;\n  return get_EthernetFramesRxIn_poll (&numDropped, data);\n}\n\nvoid init(void) {\n  sb_queue_SW_RawEthernetMessage_1_Recv_init(&EthernetFramesTxIn_recv_queue, (sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesTxIn_queue_1);\n\n  sb_queue_SW_RawEthernetMessage_1_init((sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesRxOut_queue_1);\n\n  sb_queue_SW_RawEthernetMessage_1_init((sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesTxOut_queue_1);\n\n  sb_queue_SW_RawEthernetMessage_1_Recv_init(&EthernetFramesRxIn_recv_queue, (sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesRxIn_queue_1);\n\n  Firewall_Firewall_initialize();\n}\n\nvoid notified(microkit_channel channel) {\n  switch (channel) {\n    case PORT_FROM_MON:\n      Firewall_Firewall_timeTriggered();\n      break;\n    default:\n      Firewall_Firewall_notify(channel);\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/Firewall_Firewall\/src\/Firewall_Firewall_user.c",
        {
          "type" : "ITestResource",
          "content" : "#include \"Firewall_Firewall.h\"\n\n\/\/ This file will not be overwritten if codegen is rerun\n\nvoid Firewall_Firewall_initialize(void) {\n  printf(\"%s: Firewall_Firewall_initialize invoked\\n\", microkit_name);\n}\n\nvoid Firewall_Firewall_timeTriggered(void) {\n  printf(\"%s: Firewall_Firewall_timeTriggered invoked\\n\", microkit_name);\n}\n\nvoid Firewall_Firewall_notify(microkit_channel channel) {\n  \/\/ this method is called when the monitor does not handle the passed in channel\n  switch (channel) {\n    default:\n      printf(\"%s: Unexpected channel %d\\n\", microkit_name, channel);\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/Firewall_Firewall\/include\/Firewall_Firewall.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <printf.h>\n#include <util.h>\n#include <stdint.h>\n#include <microkit.h>\n#include <sb_types.h>\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n\nbool EthernetFramesTxIn_is_empty(void);\nbool get_EthernetFramesTxIn_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);\nbool get_EthernetFramesTxIn(SW_RawEthernetMessage *data);\nbool put_EthernetFramesRxOut(const SW_RawEthernetMessage *data);\nbool put_EthernetFramesTxOut(const SW_RawEthernetMessage *data);\nbool EthernetFramesRxIn_is_empty(void);\nbool get_EthernetFramesRxIn_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);\nbool get_EthernetFramesRxIn(SW_RawEthernetMessage *data);\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/LowLevelEthernetDriver_LowLevelEthernetDriver_MON.c",
        {
          "type" : "ITestResource",
          "content" : "#include <microkit.h>\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n#define PORT_PACER 57\n\n#define PORT_TO_CHILD 56\n\nvoid init(void) {\n  microkit_notify(PORT_PACER);\n}\n\nvoid notified(microkit_channel channel) {\n  switch (channel) {\n    case PORT_PACER:\n      \/\/ notify child\n      microkit_notify(PORT_TO_CHILD);\n\n      \/\/ send response back to pacer\n      microkit_notify(PORT_PACER);\n      break;\n  }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/LowLevelEthernetDriver_LowLevelEthernetDriver.c",
        {
          "type" : "ITestResource",
          "content" : "#include \"LowLevelEthernetDriver_LowLevelEthernetDriver.h\"\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nvoid LowLevelEthernetDriver_LowLevelEthernetDriver_initialize(void);\nvoid LowLevelEthernetDriver_LowLevelEthernetDriver_notify(microkit_channel channel);\nvoid LowLevelEthernetDriver_LowLevelEthernetDriver_timeTriggered(void);\n\nvolatile sb_queue_SW_RawEthernetMessage_1_t *EthernetFramesTx_queue_1;\nsb_queue_SW_RawEthernetMessage_1_Recv_t EthernetFramesTx_recv_queue;\nvolatile sb_queue_SW_RawEthernetMessage_1_t *EthernetFramesRx_queue_1;\n\n#define PORT_FROM_MON 56\n\nbool EthernetFramesTx_is_empty(void) {\n  return sb_queue_SW_RawEthernetMessage_1_is_empty(&EthernetFramesTx_recv_queue);\n}\n\nbool get_EthernetFramesTx_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data) {\n  return sb_queue_SW_RawEthernetMessage_1_dequeue((sb_queue_SW_RawEthernetMessage_1_Recv_t *) &EthernetFramesTx_recv_queue, numDropped, data);\n}\n\nbool get_EthernetFramesTx(SW_RawEthernetMessage *data) {\n  sb_event_counter_t numDropped;\n  return get_EthernetFramesTx_poll (&numDropped, data);\n}\n\nbool put_EthernetFramesRx(const SW_RawEthernetMessage *data) {\n  sb_queue_SW_RawEthernetMessage_1_enqueue((sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesRx_queue_1, (SW_RawEthernetMessage *) data);\n\n  return true;\n}\n\nvoid init(void) {\n  sb_queue_SW_RawEthernetMessage_1_Recv_init(&EthernetFramesTx_recv_queue, (sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesTx_queue_1);\n\n  sb_queue_SW_RawEthernetMessage_1_init((sb_queue_SW_RawEthernetMessage_1_t *) EthernetFramesRx_queue_1);\n\n  LowLevelEthernetDriver_LowLevelEthernetDriver_initialize();\n}\n\nvoid notified(microkit_channel channel) {\n  switch (channel) {\n    case PORT_FROM_MON:\n      LowLevelEthernetDriver_LowLevelEthernetDriver_timeTriggered();\n      break;\n    default:\n      LowLevelEthernetDriver_LowLevelEthernetDriver_notify(channel);\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/LowLevelEthernetDriver_LowLevelEthernetDriver_user.c",
        {
          "type" : "ITestResource",
          "content" : "#include \"LowLevelEthernetDriver_LowLevelEthernetDriver.h\"\n\n\/\/ This file will not be overwritten if codegen is rerun\n\nvoid LowLevelEthernetDriver_LowLevelEthernetDriver_initialize(void) {\n  printf(\"%s: LowLevelEthernetDriver_LowLevelEthernetDriver_initialize invoked\\n\", microkit_name);\n}\n\nvoid LowLevelEthernetDriver_LowLevelEthernetDriver_timeTriggered(void) {\n  printf(\"%s: LowLevelEthernetDriver_LowLevelEthernetDriver_timeTriggered invoked\\n\", microkit_name);\n}\n\nvoid LowLevelEthernetDriver_LowLevelEthernetDriver_notify(microkit_channel channel) {\n  \/\/ this method is called when the monitor does not handle the passed in channel\n  switch (channel) {\n    default:\n      printf(\"%s: Unexpected channel %d\\n\", microkit_name, channel);\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/LowLevelEthernetDriver_LowLevelEthernetDriver\/include\/LowLevelEthernetDriver_LowLevelEthernetDriver.h",
        {
          "type" : "ITestResource",
          "content" : "#pragma once\n\n#include <printf.h>\n#include <util.h>\n#include <stdint.h>\n#include <microkit.h>\n#include <sb_types.h>\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n\nbool EthernetFramesTx_is_empty(void);\nbool get_EthernetFramesTx_poll(sb_event_counter_t *numDropped, SW_RawEthernetMessage *data);\nbool get_EthernetFramesTx(SW_RawEthernetMessage *data);\nbool put_EthernetFramesRx(const SW_RawEthernetMessage *data);\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/components\/pacer\/src\/pacer.c",
        {
          "type" : "ITestResource",
          "content" : "#include <stdint.h>\n#include <microkit.h>\n\n#define PORT_TO_ARDUPILOT_ARDUPILOT_MON 61\n#define PORT_TO_FIREWALL_FIREWALL_MON 59\n#define PORT_TO_LOWLEVELETHERNETDRIVER_LOWLEVELETHERNETDRIVER_MON 57\n\nvoid init(void) {}\n\nvoid notified(microkit_channel channel) {\n  switch(channel) {\n    case PORT_TO_ARDUPILOT_ARDUPILOT_MON:\n      microkit_notify(PORT_TO_ARDUPILOT_ARDUPILOT_MON);\n      break;\n    case PORT_TO_FIREWALL_FIREWALL_MON:\n      microkit_notify(PORT_TO_FIREWALL_FIREWALL_MON);\n      break;\n    case PORT_TO_LOWLEVELETHERNETDRIVER_LOWLEVELETHERNETDRIVER_MON:\n      microkit_notify(PORT_TO_LOWLEVELETHERNETDRIVER_LOWLEVELETHERNETDRIVER_MON);\n      break;\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/microkit.system",
        {
          "type" : "ITestResource",
          "content" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<system>\n  <!-- Content in between markers will be preserved if codegen is rerun -->\n\n  <domain_schedule>\n    <domain name=\"domain_1\" length=\"10\" \/>\n    <domain name=\"domain_2\" length=\"100\" \/>\n    <domain name=\"domain_1\" length=\"10\" \/>\n    <domain name=\"domain_3\" length=\"100\" \/>\n    <domain name=\"domain_1\" length=\"10\" \/>\n    <domain name=\"domain_4\" length=\"100\" \/>\n    <domain name=\"domain_0\" length=\"670\" \/>\n  <\/domain_schedule>\n\n  <protection_domain name=\"ArduPilot_ArduPilot_MON\" domain=\"domain_4\">\n    <program_image path=\"ArduPilot_ArduPilot_MON.elf\" \/>\n    <protection_domain name=\"ArduPilot_ArduPilot\" domain=\"domain_4\" id=\"1\" stack_size=\"0x100_000\">\n      <program_image path=\"ArduPilot_ArduPilot.elf\" \/>\n      <map mr=\"seL4_Impl_Instance_ArduPilot_ArduPilot_EthernetFramesTx_1_Memory_Region\"\n           vaddr=\"0x10_000_000\"\n           perms=\"rw\"\n           setvar_vaddr=\"EthernetFramesTx_queue_1\"\n      \/>\n      <map mr=\"seL4_Impl_Instance_Firewall_Firewall_EthernetFramesRxOut_1_Memory_Region\"\n           vaddr=\"0x10_001_000\"\n           perms=\"r\"\n           setvar_vaddr=\"EthernetFramesRx_queue_1\"\n      \/>\n\n      <!-- BEGIN CONTENT MARKER ArduPilot_ArduPilot -->\n      <!-- END CONTENT MARKER ArduPilot_ArduPilot -->\n    <\/protection_domain>\n\n    <!-- BEGIN CONTENT MARKER ArduPilot_ArduPilot_MON -->\n    <!-- END CONTENT MARKER ArduPilot_ArduPilot_MON -->\n  <\/protection_domain>\n\n  <protection_domain name=\"Firewall_Firewall_MON\" domain=\"domain_3\">\n    <program_image path=\"Firewall_Firewall_MON.elf\" \/>\n    <protection_domain name=\"Firewall_Firewall\" domain=\"domain_3\" id=\"1\" stack_size=\"0x100_000\">\n      <program_image path=\"Firewall_Firewall.elf\" \/>\n      <map mr=\"seL4_Impl_Instance_ArduPilot_ArduPilot_EthernetFramesTx_1_Memory_Region\"\n           vaddr=\"0x10_000_000\"\n           perms=\"r\"\n           setvar_vaddr=\"EthernetFramesTxIn_queue_1\"\n      \/>\n      <map mr=\"seL4_Impl_Instance_Firewall_Firewall_EthernetFramesRxOut_1_Memory_Region\"\n           vaddr=\"0x10_001_000\"\n           perms=\"rw\"\n           setvar_vaddr=\"EthernetFramesRxOut_queue_1\"\n      \/>\n      <map mr=\"seL4_Impl_Instance_Firewall_Firewall_EthernetFramesTxOut_1_Memory_Region\"\n           vaddr=\"0x10_002_000\"\n           perms=\"rw\"\n           setvar_vaddr=\"EthernetFramesTxOut_queue_1\"\n      \/>\n      <map mr=\"seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesRx_1_Memory_Region\"\n           vaddr=\"0x10_003_000\"\n           perms=\"r\"\n           setvar_vaddr=\"EthernetFramesRxIn_queue_1\"\n      \/>\n\n      <!-- BEGIN CONTENT MARKER Firewall_Firewall -->\n      <!-- END CONTENT MARKER Firewall_Firewall -->\n    <\/protection_domain>\n\n    <!-- BEGIN CONTENT MARKER Firewall_Firewall_MON -->\n    <!-- END CONTENT MARKER Firewall_Firewall_MON -->\n  <\/protection_domain>\n\n  <protection_domain name=\"LowLevelEthernetDriver_LowLevelEthernetDriver_MON\" domain=\"domain_2\">\n    <program_image path=\"LowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf\" \/>\n    <protection_domain name=\"LowLevelEthernetDriver_LowLevelEthernetDriver\" domain=\"domain_2\" id=\"1\" stack_size=\"0x100_000\">\n      <program_image path=\"LowLevelEthernetDriver_LowLevelEthernetDriver.elf\" \/>\n      <map mr=\"seL4_Impl_Instance_Firewall_Firewall_EthernetFramesTxOut_1_Memory_Region\"\n           vaddr=\"0x10_000_000\"\n           perms=\"r\"\n           setvar_vaddr=\"EthernetFramesTx_queue_1\"\n      \/>\n      <map mr=\"seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesRx_1_Memory_Region\"\n           vaddr=\"0x10_001_000\"\n           perms=\"rw\"\n           setvar_vaddr=\"EthernetFramesRx_queue_1\"\n      \/>\n\n      <!-- BEGIN CONTENT MARKER LowLevelEthernetDriver_LowLevelEthernetDriver -->\n      <!-- END CONTENT MARKER LowLevelEthernetDriver_LowLevelEthernetDriver -->\n    <\/protection_domain>\n\n    <!-- BEGIN CONTENT MARKER LowLevelEthernetDriver_LowLevelEthernetDriver_MON -->\n    <!-- END CONTENT MARKER LowLevelEthernetDriver_LowLevelEthernetDriver_MON -->\n  <\/protection_domain>\n\n  <protection_domain name=\"pacer\" domain=\"domain_1\">\n    <program_image path=\"pacer.elf\" \/>\n\n    <!-- BEGIN CONTENT MARKER pacer -->\n    <!-- END CONTENT MARKER pacer -->\n  <\/protection_domain>\n\n  <memory_region name=\"seL4_Impl_Instance_ArduPilot_ArduPilot_EthernetFramesTx_1_Memory_Region\"\n                 size=\"0x1_000\" \/>\n\n  <memory_region name=\"seL4_Impl_Instance_Firewall_Firewall_EthernetFramesRxOut_1_Memory_Region\"\n                 size=\"0x1_000\" \/>\n\n  <memory_region name=\"seL4_Impl_Instance_Firewall_Firewall_EthernetFramesTxOut_1_Memory_Region\"\n                 size=\"0x1_000\" \/>\n\n  <memory_region name=\"seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesRx_1_Memory_Region\"\n                 size=\"0x1_000\" \/>\n\n  <channel>\n    <end pd=\"pacer\" id=\"61\" \/>\n    <end pd=\"ArduPilot_ArduPilot_MON\" id=\"61\" \/>\n  <\/channel>\n\n  <channel>\n    <end pd=\"ArduPilot_ArduPilot_MON\" id=\"60\" \/>\n    <end pd=\"ArduPilot_ArduPilot\" id=\"60\" \/>\n  <\/channel>\n\n  <channel>\n    <end pd=\"pacer\" id=\"59\" \/>\n    <end pd=\"Firewall_Firewall_MON\" id=\"59\" \/>\n  <\/channel>\n\n  <channel>\n    <end pd=\"Firewall_Firewall_MON\" id=\"58\" \/>\n    <end pd=\"Firewall_Firewall\" id=\"58\" \/>\n  <\/channel>\n\n  <channel>\n    <end pd=\"pacer\" id=\"57\" \/>\n    <end pd=\"LowLevelEthernetDriver_LowLevelEthernetDriver_MON\" id=\"57\" \/>\n  <\/channel>\n\n  <channel>\n    <end pd=\"LowLevelEthernetDriver_LowLevelEthernetDriver_MON\" id=\"56\" \/>\n    <end pd=\"LowLevelEthernetDriver_LowLevelEthernetDriver\" id=\"56\" \/>\n  <\/channel>\n\n  <!-- BEGIN MSD CONTENT MARKER -->\n  <!-- END MSD CONTENT MARKER -->\n<\/system>",
          "markers" : [
            {
              "type" : "TestMarker",
              "beginMarker" : "<!-- BEGIN CONTENT MARKER ArduPilot_ArduPilot_MON -->",
              "endMarker" : "<!-- END CONTENT MARKER ArduPilot_ArduPilot_MON -->"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "<!-- BEGIN CONTENT MARKER ArduPilot_ArduPilot -->",
              "endMarker" : "<!-- END CONTENT MARKER ArduPilot_ArduPilot -->"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "<!-- BEGIN CONTENT MARKER Firewall_Firewall_MON -->",
              "endMarker" : "<!-- END CONTENT MARKER Firewall_Firewall_MON -->"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "<!-- BEGIN CONTENT MARKER Firewall_Firewall -->",
              "endMarker" : "<!-- END CONTENT MARKER Firewall_Firewall -->"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "<!-- BEGIN CONTENT MARKER LowLevelEthernetDriver_LowLevelEthernetDriver_MON -->",
              "endMarker" : "<!-- END CONTENT MARKER LowLevelEthernetDriver_LowLevelEthernetDriver_MON -->"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "<!-- BEGIN CONTENT MARKER LowLevelEthernetDriver_LowLevelEthernetDriver -->",
              "endMarker" : "<!-- END CONTENT MARKER LowLevelEthernetDriver_LowLevelEthernetDriver -->"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "<!-- BEGIN CONTENT MARKER pacer -->",
              "endMarker" : "<!-- END CONTENT MARKER pacer -->"
            }
          ],
          "invertMarkers" : true,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/microkit.dot",
        {
          "type" : "ITestResource",
          "content" : "digraph microkit {\n  compound=true;\n\n  \/\/ protection domains\n  graph [style=rounded]\n  subgraph cluster_ArduPilot_ArduPilot_MON {\n    label = \"ArduPilot_ArduPilot_MON\";\n    ArduPilot_ArduPilot_MON_INVIS [label=\"\", style=invis, width=.5, height=.5, fixedsize=true]\n\n    graph [style=rounded]\n    subgraph cluster_ArduPilot_ArduPilot {\n      label = \"ArduPilot_ArduPilot\";\n      ArduPilot_ArduPilot_INVIS [label=\"\", style=invis, width=.5, height=.5, fixedsize=true]\n\n      pd_ArduPilot_ArduPilot_EthernetFramesTx_queue_1 [label=EthernetFramesTx_queue_1];\n      pd_ArduPilot_ArduPilot_EthernetFramesRx_queue_1 [label=EthernetFramesRx_queue_1];\n    }\n  }\n\n  graph [style=rounded]\n  subgraph cluster_Firewall_Firewall_MON {\n    label = \"Firewall_Firewall_MON\";\n    Firewall_Firewall_MON_INVIS [label=\"\", style=invis, width=.5, height=.5, fixedsize=true]\n\n    graph [style=rounded]\n    subgraph cluster_Firewall_Firewall {\n      label = \"Firewall_Firewall\";\n      Firewall_Firewall_INVIS [label=\"\", style=invis, width=.5, height=.5, fixedsize=true]\n\n      pd_Firewall_Firewall_EthernetFramesTxIn_queue_1 [label=EthernetFramesTxIn_queue_1];\n      pd_Firewall_Firewall_EthernetFramesRxOut_queue_1 [label=EthernetFramesRxOut_queue_1];\n      pd_Firewall_Firewall_EthernetFramesTxOut_queue_1 [label=EthernetFramesTxOut_queue_1];\n      pd_Firewall_Firewall_EthernetFramesRxIn_queue_1 [label=EthernetFramesRxIn_queue_1];\n    }\n  }\n\n  graph [style=rounded]\n  subgraph cluster_LowLevelEthernetDriver_LowLevelEthernetDriver_MON {\n    label = \"LowLevelEthernetDriver_LowLevelEthernetDriver_MON\";\n    LowLevelEthernetDriver_LowLevelEthernetDriver_MON_INVIS [label=\"\", style=invis, width=.5, height=.5, fixedsize=true]\n\n    graph [style=rounded]\n    subgraph cluster_LowLevelEthernetDriver_LowLevelEthernetDriver {\n      label = \"LowLevelEthernetDriver_LowLevelEthernetDriver\";\n      LowLevelEthernetDriver_LowLevelEthernetDriver_INVIS [label=\"\", style=invis, width=.5, height=.5, fixedsize=true]\n\n      pd_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesTx_queue_1 [label=EthernetFramesTx_queue_1];\n      pd_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesRx_queue_1 [label=EthernetFramesRx_queue_1];\n    }\n  }\n\n  graph [style=rounded]\n  subgraph cluster_pacer {\n    label = \"pacer\";\n    pacer_INVIS [label=\"\", style=invis, width=.5, height=.5, fixedsize=true]\n\n  }\n\n  \/\/ memory regions\n  seL4_Impl_Instance_ArduPilot_ArduPilot_EthernetFramesTx_1_Memory_Region;\n\n  seL4_Impl_Instance_Firewall_Firewall_EthernetFramesRxOut_1_Memory_Region;\n\n  seL4_Impl_Instance_Firewall_Firewall_EthernetFramesTxOut_1_Memory_Region;\n\n  seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesRx_1_Memory_Region;\n\n  \/\/ channels\n  pacer_INVIS -> ArduPilot_ArduPilot_MON_INVIS [lhead=cluster_ArduPilot_ArduPilot_MON, minlen=2, dir=both];\n  ArduPilot_ArduPilot_MON_INVIS -> ArduPilot_ArduPilot_INVIS [lhead=cluster_ArduPilot_ArduPilot, minlen=2, dir=both];\n  pacer_INVIS -> Firewall_Firewall_MON_INVIS [lhead=cluster_Firewall_Firewall_MON, minlen=2, dir=both];\n  Firewall_Firewall_MON_INVIS -> Firewall_Firewall_INVIS [lhead=cluster_Firewall_Firewall, minlen=2, dir=both];\n  pacer_INVIS -> LowLevelEthernetDriver_LowLevelEthernetDriver_MON_INVIS [lhead=cluster_LowLevelEthernetDriver_LowLevelEthernetDriver_MON, minlen=2, dir=both];\n  LowLevelEthernetDriver_LowLevelEthernetDriver_MON_INVIS -> LowLevelEthernetDriver_LowLevelEthernetDriver_INVIS [lhead=cluster_LowLevelEthernetDriver_LowLevelEthernetDriver, minlen=2, dir=both];\n\n  \/\/ shared memory mappings\n  pd_ArduPilot_ArduPilot_EthernetFramesTx_queue_1 -> seL4_Impl_Instance_ArduPilot_ArduPilot_EthernetFramesTx_1_Memory_Region [dir=both, style=dashed];\n  pd_ArduPilot_ArduPilot_EthernetFramesRx_queue_1 -> seL4_Impl_Instance_Firewall_Firewall_EthernetFramesRxOut_1_Memory_Region [dir=back, style=dashed];\n  pd_Firewall_Firewall_EthernetFramesTxIn_queue_1 -> seL4_Impl_Instance_ArduPilot_ArduPilot_EthernetFramesTx_1_Memory_Region [dir=back, style=dashed];\n  pd_Firewall_Firewall_EthernetFramesRxOut_queue_1 -> seL4_Impl_Instance_Firewall_Firewall_EthernetFramesRxOut_1_Memory_Region [dir=both, style=dashed];\n  pd_Firewall_Firewall_EthernetFramesTxOut_queue_1 -> seL4_Impl_Instance_Firewall_Firewall_EthernetFramesTxOut_1_Memory_Region [dir=both, style=dashed];\n  pd_Firewall_Firewall_EthernetFramesRxIn_queue_1 -> seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesRx_1_Memory_Region [dir=back, style=dashed];\n  pd_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesTx_queue_1 -> seL4_Impl_Instance_Firewall_Firewall_EthernetFramesTxOut_1_Memory_Region [dir=back, style=dashed];\n  pd_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesRx_queue_1 -> seL4_Impl_Instance_LowLevelEthernetDriver_LowLevelEthernetDriver_EthernetFramesRx_1_Memory_Region [dir=both, style=dashed];\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/Makefile",
        {
          "type" : "ITestResource",
          "content" : "# Do not edit this file as it will be overwritten if codegen is rerun\n\nifeq ($(strip $(MICROKIT_SDK)),)\n$(error MICROKIT_SDK must be specified)\nendif\noverride MICROKIT_SDK := $(abspath ${MICROKIT_SDK})\n\nSYSTEM_MAKEFILE ?= system.mk\n\nexport CPU = cortex-a53\nexport QEMU = qemu-system-aarch64\n\nexport AR := ar\nexport CC := clang\nexport DTC := dtc\nexport LD := ld.lld\nexport RANLIB := llvm-ranlib\n\nexport TOP_DIR := $(abspath $(dir ${MAKEFILE_LIST}))\nexport TOP_BUILD_DIR := $(abspath build)\n\nexport CRATES_DIR := $(TOP_DIR)\/crates\n\nexport TARGET := aarch64-none-elf\n\n# By default we make a debug build so that the client debug prints can be seen.\nexport MICROKIT_CONFIG ?= debug\n\nexport MICROKIT_SDK := $(abspath $(MICROKIT_SDK))\nexport MICROKIT_TOOL := $(abspath $(MICROKIT_SDK)\/bin\/microkit)\nexport MICROKIT_BOARD_DIR := $(abspath $(MICROKIT_SDK)\/board\/$(MICROKIT_BOARD)\/$(MICROKIT_CONFIG))\n\n\nIMAGE_FILE := $(TOP_BUILD_DIR)\/loader.img\nREPORT_FILE := $(TOP_BUILD_DIR)\/report.txt\n\n# By default, cargo-verus is used to build Rust crates, and it fails if verification does not succeed.\n# To skip verification, set the RUST_MAKE_TARGET environment variable to use a cargo build target.\n# Example:\n#\n#   RUST_MAKE_TARGET=build-release make\n\nall: ${IMAGE_FILE}\n\nqemu ${IMAGE_FILE} ${REPORT_FILE} clean clobber: $(IMAGE_FILE) ${TOP_BUILD_DIR}\/Makefile FORCE\n\t${MAKE} -C ${TOP_BUILD_DIR} $(notdir $@)\n\n${TOP_BUILD_DIR}\/Makefile: $(SYSTEM_MAKEFILE)\n\tmkdir -p ${TOP_BUILD_DIR}\n\tcp $(SYSTEM_MAKEFILE) ${TOP_BUILD_DIR}\/Makefile\n\ntest: \n\tmake -C ${CRATES_DIR}\/ArduPilot_ArduPilot test\n\tmake -C ${CRATES_DIR}\/Firewall_Firewall test\n\tmake -C ${CRATES_DIR}\/LowLevelEthernetDriver_LowLevelEthernetDriver test\n\nverus: \n\tmake -C ${CRATES_DIR}\/Firewall_Firewall verus\n\nFORCE:\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/system.mk",
        {
          "type" : "ITestResource",
          "content" : "# Do not edit this file as it will be overwritten if codegen is rerun\n\nifeq ($(strip $(MICROKIT_SDK)),)\n$(error MICROKIT_SDK must be specified)\nendif\n\nMICROKIT_TOOL ?= $(MICROKIT_SDK)\/bin\/microkit\n\nifeq (\"$(wildcard $(MICROKIT_TOOL))\",\"\")\n$(error Microkit tool not found at ${MICROKIT_TOOL})\nendif\n\nifeq ($(strip $(MICROKIT_BOARD)),)\n$(error MICROKIT_BOARD must be specified)\nendif\n\nCFLAGS := -mcpu=$(CPU) \\\n\t-mstrict-align \\\n\t-ffreestanding \\\n\t-nostdlib \\\n\t-g3 \\\n\t-O3 \\\n\t-Wall -Wno-unused-function -Werror -Wno-unused-command-line-argument \\\n\t-I$(MICROKIT_BOARD_DIR)\/include \\\n\t-target $(TARGET)\n\nLDFLAGS := -L$(MICROKIT_BOARD_DIR)\/lib\nLIBS := --start-group -lmicrokit -Tmicrokit.ld --end-group\n\nSYSTEM_FILE := $(TOP_DIR)\/microkit.system\n\nIMAGES := ArduPilot_ArduPilot.elf ArduPilot_ArduPilot_MON.elf Firewall_Firewall.elf Firewall_Firewall_MON.elf LowLevelEthernetDriver_LowLevelEthernetDriver.elf LowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf pacer.elf\nIMAGE_FILE = loader.img\nREPORT_FILE = report.txt\n\nUTIL_OBJS = printf.o util.o\n\nTYPES_DIR = $(TOP_DIR)\/types\nTYPE_OBJS := $(TOP_DIR)\/build\/sb_queue_SW_RawEthernetMessage_1.o $(TOP_DIR)\/build\/sb_queue_SW_RawEthernetMessage_1.o $(TOP_DIR)\/build\/sb_queue_SW_RawEthernetMessage_1.o $(TOP_DIR)\/build\/sb_queue_SW_RawEthernetMessage_1.o\n\n# exporting TOP_TYPES_INCLUDE in case other makefiles need it\nexport TOP_TYPES_INCLUDE = -I$(TYPES_DIR)\/include\n\nTOP_INCLUDE = $(TOP_TYPES_INCLUDE) -I$(TOP_DIR)\/util\/include\n\nall: $(IMAGE_FILE)\n\tCHECK_FLAGS_BOARD_MD5:=.board_cflags-$(shell echo -- ${CFLAGS} ${MICROKIT_BOARD} ${MICROKIT_CONFIG}| shasum | sed 's\/ *-\/\/')\n\n${CHECK_FLAGS_BOARD_MD5}:\n\t-rm -f .board_cflags-*\n\ttouch $@\n\n%.o: ${TOP_DIR}\/util\/src\/%.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ -I$(TOP_DIR)\/util\/include\n\n$(TOP_DIR)\/build\/sb_queue_SW_RawEthernetMessage_1.o: $(TOP_DIR)\/types\/src\/sb_queue_SW_RawEthernetMessage_1.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE)\n\n\n# monitor\nArduPilot_ArduPilot_MON.o: $(TOP_DIR)\/components\/ArduPilot_ArduPilot\/src\/ArduPilot_ArduPilot_MON.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)\/components\/ArduPilot_ArduPilot\/include\n\n# user code\nArduPilot_ArduPilot_rust:\n\tmake -C ${CRATES_DIR}\/ArduPilot_ArduPilot $(RUST_MAKE_TARGET)\n\nArduPilot_ArduPilot.o: $(TOP_DIR)\/components\/ArduPilot_ArduPilot\/src\/ArduPilot_ArduPilot.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)\/components\/ArduPilot_ArduPilot\/include\n\n# monitor\nFirewall_Firewall_MON.o: $(TOP_DIR)\/components\/Firewall_Firewall\/src\/Firewall_Firewall_MON.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)\/components\/Firewall_Firewall\/include\n\n# user code\nFirewall_Firewall_rust:\n\tmake -C ${CRATES_DIR}\/Firewall_Firewall $(RUST_MAKE_TARGET)\n\nFirewall_Firewall.o: $(TOP_DIR)\/components\/Firewall_Firewall\/src\/Firewall_Firewall.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)\/components\/Firewall_Firewall\/include\n\n# monitor\nLowLevelEthernetDriver_LowLevelEthernetDriver_MON.o: $(TOP_DIR)\/components\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/LowLevelEthernetDriver_LowLevelEthernetDriver_MON.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)\/components\/LowLevelEthernetDriver_LowLevelEthernetDriver\/include\n\n# user code\nLowLevelEthernetDriver_LowLevelEthernetDriver_rust:\n\tmake -C ${CRATES_DIR}\/LowLevelEthernetDriver_LowLevelEthernetDriver $(RUST_MAKE_TARGET)\n\nLowLevelEthernetDriver_LowLevelEthernetDriver.o: $(TOP_DIR)\/components\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/LowLevelEthernetDriver_LowLevelEthernetDriver.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ $(TOP_INCLUDE) -I$(TOP_DIR)\/components\/LowLevelEthernetDriver_LowLevelEthernetDriver\/include\n\npacer.o: $(TOP_DIR)\/components\/pacer\/src\/pacer.c Makefile\n\t$(CC) -c $(CFLAGS) $< -o $@ -I$(TOP_INCLUDE)\n\nArduPilot_ArduPilot_MON.elf: ArduPilot_ArduPilot_MON.o\n\t$(LD) $(LDFLAGS) $^ $(LIBS) -o $@\n\nArduPilot_ArduPilot.elf: $(UTIL_OBJS) $(TYPE_OBJS) ArduPilot_ArduPilot_rust ArduPilot_ArduPilot.o\n\t$(LD) $(LDFLAGS) -L ${CRATES_DIR}\/ArduPilot_ArduPilot\/target\/aarch64-unknown-none\/release $(filter %.o, $^) $(LIBS) -lArduPilot_ArduPilot -o $@\n\nFirewall_Firewall_MON.elf: Firewall_Firewall_MON.o\n\t$(LD) $(LDFLAGS) $^ $(LIBS) -o $@\n\nFirewall_Firewall.elf: $(UTIL_OBJS) $(TYPE_OBJS) Firewall_Firewall_rust Firewall_Firewall.o\n\t$(LD) $(LDFLAGS) -L ${CRATES_DIR}\/Firewall_Firewall\/target\/aarch64-unknown-none\/release $(filter %.o, $^) $(LIBS) -lFirewall_Firewall -o $@\n\nLowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf: LowLevelEthernetDriver_LowLevelEthernetDriver_MON.o\n\t$(LD) $(LDFLAGS) $^ $(LIBS) -o $@\n\nLowLevelEthernetDriver_LowLevelEthernetDriver.elf: $(UTIL_OBJS) $(TYPE_OBJS) LowLevelEthernetDriver_LowLevelEthernetDriver_rust LowLevelEthernetDriver_LowLevelEthernetDriver.o\n\t$(LD) $(LDFLAGS) -L ${CRATES_DIR}\/LowLevelEthernetDriver_LowLevelEthernetDriver\/target\/aarch64-unknown-none\/release $(filter %.o, $^) $(LIBS) -lLowLevelEthernetDriver_LowLevelEthernetDriver -o $@\n\npacer.elf: $(UTIL_OBJS) $(TYPE_OBJS) pacer.o\n\t$(LD) $(LDFLAGS) $^ $(LIBS) -o $@\n\n$(IMAGE_FILE): $(IMAGES) $(SYSTEM_FILE)\n\t$(MICROKIT_TOOL) $(SYSTEM_FILE) --search-path $(TOP_BUILD_DIR) --board $(MICROKIT_BOARD) --config $(MICROKIT_CONFIG) -o $(IMAGE_FILE) -r $(REPORT_FILE)\n\n\nqemu: $(IMAGE_FILE)\n\t$(QEMU) -machine virt,virtualization=on \\\n\t\t\t-cpu cortex-a53 \\\n\t\t\t-serial mon:stdio \\\n\t\t\t-device loader,file=$(IMAGE_FILE),addr=0x70000000,cpu-num=0 \\\n\t\t\t-m size=2G \\\n\t\t\t-nographic\n\nclean::\n\trm -f ${(oFiles, \" \")}\n\nclobber:: clean\n\trm -f ArduPilot_ArduPilot.elf ArduPilot_ArduPilot_MON.elf Firewall_Firewall.elf Firewall_Firewall_MON.elf LowLevelEthernetDriver_LowLevelEthernetDriver.elf LowLevelEthernetDriver_LowLevelEthernetDriver_MON.elf pacer.elf ${IMAGE_FILE} ${REPORT_FILE}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/util\/include\/printf.h",
        {
          "type" : "ITestResource",
          "content" : "\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ \\author (c) Marco Paland (info@paland.com)\n\/\/             2014-2019, PALANDesign Hannover, Germany\n\/\/\n\/\/ \\license The MIT License (MIT)\n\/\/\n\/\/ Permission is hereby granted, free of charge, to any person obtaining a copy\n\/\/ of this software and associated documentation files (the \"Software\"), to deal\n\/\/ in the Software without restriction, including without limitation the rights\n\/\/ to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n\/\/ copies of the Software, and to permit persons to whom the Software is\n\/\/ furnished to do so, subject to the following conditions:\n\/\/\n\/\/ The above copyright notice and this permission notice shall be included in\n\/\/ all copies or substantial portions of the Software.\n\/\/\n\/\/ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\/\/ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\/\/ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\/\/ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\/\/ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\/\/ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\/\/ THE SOFTWARE.\n\/\/\n\/\/ \\brief Tiny printf, sprintf and snprintf implementation, optimized for speed on\n\/\/        embedded systems with a very limited resources.\n\/\/        Use this instead of bloated standard\/newlib printf.\n\/\/        These routines are thread safe and reentrant.\n\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n#ifndef _PRINTF_H_\n#define _PRINTF_H_\n\n#include <stdarg.h>\n#include <stddef.h>\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n\/**\n * Output a character to a custom device like UART, used by the printf() function\n * This function is declared here only. You have to write your custom implementation somewhere\n * \\param character Character to output\n *\/\nvoid _putchar(char character);\n\n\n\/**\n * Tiny printf implementation\n * You have to implement _putchar if you use printf()\n * To avoid conflicts with the regular printf() API it is overridden by macro defines\n * and internal underscore-appended functions like printf_() are used\n * \\param format A string that specifies the format of the output\n * \\return The number of characters that are written into the array, not counting the terminating null character\n *\/\n#define printf printf_\nint printf_(const char* format, ...);\n\n\n\/**\n * Tiny sprintf implementation\n * Due to security reasons (buffer overflow) YOU SHOULD CONSIDER USING (V)SNPRINTF INSTEAD!\n * \\param buffer A pointer to the buffer where to store the formatted string. MUST be big enough to store the output!\n * \\param format A string that specifies the format of the output\n * \\return The number of characters that are WRITTEN into the buffer, not counting the terminating null character\n *\/\n#define sprintf sprintf_\nint sprintf_(char* buffer, const char* format, ...);\n\n\n\/**\n * Tiny snprintf\/vsnprintf implementation\n * \\param buffer A pointer to the buffer where to store the formatted string\n * \\param count The maximum number of characters to store in the buffer, including a terminating null character\n * \\param format A string that specifies the format of the output\n * \\param va A value identifying a variable arguments list\n * \\return The number of characters that COULD have been written into the buffer, not counting the terminating\n *         null character. A value equal or larger than count indicates truncation. Only when the returned value\n *         is non-negative and less than count, the string has been completely written.\n *\/\n#define snprintf  snprintf_\n#define vsnprintf vsnprintf_\nint  snprintf_(char* buffer, size_t count, const char* format, ...);\nint vsnprintf_(char* buffer, size_t count, const char* format, va_list va);\n\n\n\/**\n * Tiny vprintf implementation\n * \\param format A string that specifies the format of the output\n * \\param va A value identifying a variable arguments list\n * \\return The number of characters that are WRITTEN into the buffer, not counting the terminating null character\n *\/\n#define vprintf vprintf_\nint vprintf_(const char* format, va_list va);\n\n\n\/**\n * printf with output function\n * You may use this as dynamic alternative to printf() with its fixed _putchar() output\n * \\param out An output function which takes one character and an argument pointer\n * \\param arg An argument pointer for user data passed to output function\n * \\param format A string that specifies the format of the output\n * \\return The number of characters that are sent to the output function, not counting the terminating null character\n *\/\nint fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...);\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n#endif  \/\/ _PRINTF_H_\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/util\/src\/printf.c",
        {
          "type" : "ITestResource",
          "content" : "\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ \\author (c) Marco Paland (info@paland.com)\n\/\/             2014-2019, PALANDesign Hannover, Germany\n\/\/\n\/\/ \\license The MIT License (MIT)\n\/\/\n\/\/ Permission is hereby granted, free of charge, to any person obtaining a copy\n\/\/ of this software and associated documentation files (the \"Software\"), to deal\n\/\/ in the Software without restriction, including without limitation the rights\n\/\/ to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n\/\/ copies of the Software, and to permit persons to whom the Software is\n\/\/ furnished to do so, subject to the following conditions:\n\/\/\n\/\/ The above copyright notice and this permission notice shall be included in\n\/\/ all copies or substantial portions of the Software.\n\/\/\n\/\/ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\/\/ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\/\/ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\/\/ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\/\/ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\/\/ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\/\/ THE SOFTWARE.\n\/\/\n\/\/ \\brief Tiny printf, sprintf and (v)snprintf implementation, optimized for speed on\n\/\/        embedded systems with a very limited resources. These routines are thread\n\/\/        safe and reentrant!\n\/\/        Use this instead of the bloated standard\/newlib printf cause these use\n\/\/        malloc for printf (and may not be thread safe).\n\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#include \"printf.h\"\n\n\n\/\/ define this globally (e.g. gcc -DPRINTF_INCLUDE_CONFIG_H ...) to include the\n\/\/ printf_config.h header file\n\/\/ default: undefined\n#ifdef PRINTF_INCLUDE_CONFIG_H\n#include \"printf_config.h\"\n#endif\n\n\n\/\/ 'ntoa' conversion buffer size, this must be big enough to hold one converted\n\/\/ numeric number including padded zeros (dynamically created on stack)\n\/\/ default: 32 byte\n#ifndef PRINTF_NTOA_BUFFER_SIZE\n#define PRINTF_NTOA_BUFFER_SIZE    32U\n#endif\n\n\/\/ 'ftoa' conversion buffer size, this must be big enough to hold one converted\n\/\/ float number including padded zeros (dynamically created on stack)\n\/\/ default: 32 byte\n#ifndef PRINTF_FTOA_BUFFER_SIZE\n#define PRINTF_FTOA_BUFFER_SIZE    32U\n#endif\n\n\/\/ support for the floating point type (%f)\n\/\/ default: activated\n#ifndef PRINTF_DISABLE_SUPPORT_FLOAT\n#define PRINTF_SUPPORT_FLOAT\n#endif\n\n\/\/ support for exponential floating point notation (%e\/%g)\n\/\/ default: activated\n#ifndef PRINTF_DISABLE_SUPPORT_EXPONENTIAL\n#define PRINTF_SUPPORT_EXPONENTIAL\n#endif\n\n\/\/ define the default floating point precision\n\/\/ default: 6 digits\n#ifndef PRINTF_DEFAULT_FLOAT_PRECISION\n#define PRINTF_DEFAULT_FLOAT_PRECISION  6U\n#endif\n\n\/\/ define the largest float suitable to print with %f\n\/\/ default: 1e9\n#ifndef PRINTF_MAX_FLOAT\n#define PRINTF_MAX_FLOAT  1e9\n#endif\n\n\/\/ support for the long long types (%llu or %p)\n\/\/ default: activated\n#ifndef PRINTF_DISABLE_SUPPORT_LONG_LONG\n#define PRINTF_SUPPORT_LONG_LONG\n#endif\n\n\/\/ support for the ptrdiff_t type (%t)\n\/\/ ptrdiff_t is normally defined in <stddef.h> as long or long long type\n\/\/ default: activated\n#ifndef PRINTF_DISABLE_SUPPORT_PTRDIFF_T\n#define PRINTF_SUPPORT_PTRDIFF_T\n#endif\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/\/ internal flag definitions\n#define FLAGS_ZEROPAD   (1U <<  0U)\n#define FLAGS_LEFT      (1U <<  1U)\n#define FLAGS_PLUS      (1U <<  2U)\n#define FLAGS_SPACE     (1U <<  3U)\n#define FLAGS_HASH      (1U <<  4U)\n#define FLAGS_UPPERCASE (1U <<  5U)\n#define FLAGS_CHAR      (1U <<  6U)\n#define FLAGS_SHORT     (1U <<  7U)\n#define FLAGS_LONG      (1U <<  8U)\n#define FLAGS_LONG_LONG (1U <<  9U)\n#define FLAGS_PRECISION (1U << 10U)\n#define FLAGS_ADAPT_EXP (1U << 11U)\n\n\n\/\/ import float.h for DBL_MAX\n#if defined(PRINTF_SUPPORT_FLOAT)\n#include <float.h>\n#endif\n\n\n\/\/ output function type\ntypedef void (*out_fct_type)(char character, void* buffer, size_t idx, size_t maxlen);\n\n\n\/\/ wrapper (used as buffer) for output function type\ntypedef struct {\n  void  (*fct)(char character, void* arg);\n  void* arg;\n} out_fct_wrap_type;\n\n\n\/\/ internal buffer output\nstatic inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)\n{\n  if (idx < maxlen) {\n    ((char*)buffer)[idx] = character;\n  }\n}\n\n\n\/\/ internal null output\nstatic inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)\n{\n  (void)character; (void)buffer; (void)idx; (void)maxlen;\n}\n\n\n\/\/ internal _putchar wrapper\nstatic inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)\n{\n  (void)buffer; (void)idx; (void)maxlen;\n  if (character) {\n    _putchar(character);\n  }\n}\n\n\n\/\/ internal output function wrapper\nstatic inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)\n{\n  (void)idx; (void)maxlen;\n  if (character) {\n    \/\/ buffer is the output fct pointer\n    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);\n  }\n}\n\n\n\/\/ internal secure strlen\n\/\/ \\return The length of the string (excluding the terminating 0) limited by 'maxsize'\nstatic inline unsigned int _strnlen_s(const char* str, size_t maxsize)\n{\n  const char* s;\n  for (s = str; *s && maxsize--; ++s);\n  return (unsigned int)(s - str);\n}\n\n\n\/\/ internal test if char is a digit (0-9)\n\/\/ \\return true if char is a digit\nstatic inline bool _is_digit(char ch)\n{\n  return (ch >= '0') && (ch <= '9');\n}\n\n\n\/\/ internal ASCII string to unsigned int conversion\nstatic unsigned int _atoi(const char** str)\n{\n  unsigned int i = 0U;\n  while (_is_digit(**str)) {\n    i = i * 10U + (unsigned int)(*((*str)++) - '0');\n  }\n  return i;\n}\n\n\n\/\/ output the specified string in reverse, taking care of any zero-padding\nstatic size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)\n{\n  const size_t start_idx = idx;\n\n  \/\/ pad spaces up to given width\n  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {\n    for (size_t i = len; i < width; i++) {\n      out(' ', buffer, idx++, maxlen);\n    }\n  }\n\n  \/\/ reverse string\n  while (len) {\n    out(buf[--len], buffer, idx++, maxlen);\n  }\n\n  \/\/ append pad spaces up to given width\n  if (flags & FLAGS_LEFT) {\n    while (idx - start_idx < width) {\n      out(' ', buffer, idx++, maxlen);\n    }\n  }\n\n  return idx;\n}\n\n\n\/\/ internal itoa format\nstatic size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)\n{\n  \/\/ pad leading zeros\n  if (!(flags & FLAGS_LEFT)) {\n    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {\n      width--;\n    }\n    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {\n      buf[len++] = '0';\n    }\n    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {\n      buf[len++] = '0';\n    }\n  }\n\n  \/\/ handle hash\n  if (flags & FLAGS_HASH) {\n    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {\n      len--;\n      if (len && (base == 16U)) {\n        len--;\n      }\n    }\n    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {\n      buf[len++] = 'x';\n    }\n    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {\n      buf[len++] = 'X';\n    }\n    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {\n      buf[len++] = 'b';\n    }\n    if (len < PRINTF_NTOA_BUFFER_SIZE) {\n      buf[len++] = '0';\n    }\n  }\n\n  if (len < PRINTF_NTOA_BUFFER_SIZE) {\n    if (negative) {\n      buf[len++] = '-';\n    }\n    else if (flags & FLAGS_PLUS) {\n      buf[len++] = '+';  \/\/ ignore the space if the '+' exists\n    }\n    else if (flags & FLAGS_SPACE) {\n      buf[len++] = ' ';\n    }\n  }\n\n  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);\n}\n\n\n\/\/ internal itoa for 'long' type\nstatic size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)\n{\n  char buf[PRINTF_NTOA_BUFFER_SIZE];\n  size_t len = 0U;\n\n  \/\/ no hash for 0 values\n  if (!value) {\n    flags &= ~FLAGS_HASH;\n  }\n\n  \/\/ write if precision != 0 and value is != 0\n  if (!(flags & FLAGS_PRECISION) || value) {\n    do {\n      const char digit = (char)(value % base);\n      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;\n      value \/= base;\n    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));\n  }\n\n  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);\n}\n\n\n\/\/ internal itoa for 'long long' type\n#if defined(PRINTF_SUPPORT_LONG_LONG)\nstatic size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)\n{\n  char buf[PRINTF_NTOA_BUFFER_SIZE];\n  size_t len = 0U;\n\n  \/\/ no hash for 0 values\n  if (!value) {\n    flags &= ~FLAGS_HASH;\n  }\n\n  \/\/ write if precision != 0 and value is != 0\n  if (!(flags & FLAGS_PRECISION) || value) {\n    do {\n      const char digit = (char)(value % base);\n      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;\n      value \/= base;\n    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));\n  }\n\n  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);\n}\n#endif  \/\/ PRINTF_SUPPORT_LONG_LONG\n\n\n#if defined(PRINTF_SUPPORT_FLOAT)\n\n#if defined(PRINTF_SUPPORT_EXPONENTIAL)\n\/\/ forward declaration so that _ftoa can switch to exp notation for values > PRINTF_MAX_FLOAT\nstatic size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags);\n#endif\n\n\n\/\/ internal ftoa for fixed decimal floating point\nstatic size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)\n{\n  char buf[PRINTF_FTOA_BUFFER_SIZE];\n  size_t len  = 0U;\n  double diff = 0.0;\n\n  \/\/ powers of 10\n  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };\n\n  \/\/ test for special values\n  if (value != value)\n    return _out_rev(out, buffer, idx, maxlen, \"nan\", 3, width, flags);\n  if (value < -DBL_MAX)\n    return _out_rev(out, buffer, idx, maxlen, \"fni-\", 4, width, flags);\n  if (value > DBL_MAX)\n    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? \"fni+\" : \"fni\", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);\n\n  \/\/ test for very large values\n  \/\/ standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad\n  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {\n#if defined(PRINTF_SUPPORT_EXPONENTIAL)\n    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);\n#else\n    return 0U;\n#endif\n  }\n\n  \/\/ test for negative\n  bool negative = false;\n  if (value < 0) {\n    negative = true;\n    value = 0 - value;\n  }\n\n  \/\/ set default precision, if not set explicitly\n  if (!(flags & FLAGS_PRECISION)) {\n    prec = PRINTF_DEFAULT_FLOAT_PRECISION;\n  }\n  \/\/ limit precision to 9, cause a prec >= 10 can lead to overflow errors\n  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {\n    buf[len++] = '0';\n    prec--;\n  }\n\n  int whole = (int)value;\n  double tmp = (value - whole) * pow10[prec];\n  unsigned long frac = (unsigned long)tmp;\n  diff = tmp - frac;\n\n  if (diff > 0.5) {\n    ++frac;\n    \/\/ handle rollover, e.g. case 0.99 with prec 1 is 1.0\n    if (frac >= pow10[prec]) {\n      frac = 0;\n      ++whole;\n    }\n  }\n  else if (diff < 0.5) {\n  }\n  else if ((frac == 0U) || (frac & 1U)) {\n    \/\/ if halfway, round up if odd OR if last digit is 0\n    ++frac;\n  }\n\n  if (prec == 0U) {\n    diff = value - (double)whole;\n    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {\n      \/\/ exactly 0.5 and ODD, then round up\n      \/\/ 1.5 -> 2, but 2.5 -> 2\n      ++whole;\n    }\n  }\n  else {\n    unsigned int count = prec;\n    \/\/ now do fractional part, as an unsigned number\n    while (len < PRINTF_FTOA_BUFFER_SIZE) {\n      --count;\n      buf[len++] = (char)(48U + (frac % 10U));\n      if (!(frac \/= 10U)) {\n        break;\n      }\n    }\n    \/\/ add extra 0s\n    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {\n      buf[len++] = '0';\n    }\n    if (len < PRINTF_FTOA_BUFFER_SIZE) {\n      \/\/ add decimal\n      buf[len++] = '.';\n    }\n  }\n\n  \/\/ do whole part, number is reversed\n  while (len < PRINTF_FTOA_BUFFER_SIZE) {\n    buf[len++] = (char)(48 + (whole % 10));\n    if (!(whole \/= 10)) {\n      break;\n    }\n  }\n\n  \/\/ pad leading zeros\n  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {\n    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {\n      width--;\n    }\n    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {\n      buf[len++] = '0';\n    }\n  }\n\n  if (len < PRINTF_FTOA_BUFFER_SIZE) {\n    if (negative) {\n      buf[len++] = '-';\n    }\n    else if (flags & FLAGS_PLUS) {\n      buf[len++] = '+';  \/\/ ignore the space if the '+' exists\n    }\n    else if (flags & FLAGS_SPACE) {\n      buf[len++] = ' ';\n    }\n  }\n\n  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);\n}\n\n\n#if defined(PRINTF_SUPPORT_EXPONENTIAL)\n\/\/ internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>\nstatic size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)\n{\n  \/\/ check for NaN and special values\n  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {\n    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);\n  }\n\n  \/\/ determine the sign\n  const bool negative = value < 0;\n  if (negative) {\n    value = -value;\n  }\n\n  \/\/ default precision\n  if (!(flags & FLAGS_PRECISION)) {\n    prec = PRINTF_DEFAULT_FLOAT_PRECISION;\n  }\n\n  \/\/ determine the decimal exponent\n  \/\/ based on the algorithm by David Gay (https:\/\/www.ampl.com\/netlib\/fp\/dtoa.c)\n  union {\n    uint64_t U;\n    double   F;\n  } conv;\n\n  conv.F = value;\n  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           \/\/ effectively log2\n  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  \/\/ drop the exponent so conv.F is now in [1,2)\n  \/\/ now approximate log10 from the log2 integer part and an expansion of ln around 1.5\n  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);\n  \/\/ now we want to compute 10^expval but we want to be sure it won't overflow\n  exp2 = (int)(expval * 3.321928094887362 + 0.5);\n  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;\n  const double z2 = z * z;\n  conv.U = (uint64_t)(exp2 + 1023) << 52U;\n  \/\/ compute exp(z) using continued fractions, see https:\/\/en.wikipedia.org\/wiki\/Exponential_function#Continued_fractions_for_ex\n  conv.F *= 1 + 2 * z \/ (2 - z + (z2 \/ (6 + (z2 \/ (10 + z2 \/ 14)))));\n  \/\/ correct for rounding errors\n  if (value < conv.F) {\n    expval--;\n    conv.F \/= 10;\n  }\n\n  \/\/ the exponent format is \"%+03d\" and largest value is \"307\", so set aside 4-5 characters\n  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;\n\n  \/\/ in \"%g\" mode, \"prec\" is the number of *significant figures* not decimals\n  if (flags & FLAGS_ADAPT_EXP) {\n    \/\/ do we want to fall-back to \"%f\" mode?\n    if ((value >= 1e-4) && (value < 1e6)) {\n      if ((int)prec > expval) {\n        prec = (unsigned)((int)prec - expval - 1);\n      }\n      else {\n        prec = 0;\n      }\n      flags |= FLAGS_PRECISION;   \/\/ make sure _ftoa respects precision\n      \/\/ no characters in exponent\n      minwidth = 0U;\n      expval   = 0;\n    }\n    else {\n      \/\/ we use one sigfig for the whole part\n      if ((prec > 0) && (flags & FLAGS_PRECISION)) {\n        --prec;\n      }\n    }\n  }\n\n  \/\/ will everything fit?\n  unsigned int fwidth = width;\n  if (width > minwidth) {\n    \/\/ we didn't fall-back so subtract the characters required for the exponent\n    fwidth -= minwidth;\n  } else {\n    \/\/ not enough characters, so go back to default sizing\n    fwidth = 0U;\n  }\n  if ((flags & FLAGS_LEFT) && minwidth) {\n    \/\/ if we're padding on the right, DON'T pad the floating part\n    fwidth = 0U;\n  }\n\n  \/\/ rescale the float value\n  if (expval) {\n    value \/= conv.F;\n  }\n\n  \/\/ output the floating part\n  const size_t start_idx = idx;\n  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);\n\n  \/\/ output the exponent part\n  if (minwidth) {\n    \/\/ output the exponential symbol\n    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);\n    \/\/ output the exponent value\n    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);\n    \/\/ might need to right-pad spaces\n    if (flags & FLAGS_LEFT) {\n      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);\n    }\n  }\n  return idx;\n}\n#endif  \/\/ PRINTF_SUPPORT_EXPONENTIAL\n#endif  \/\/ PRINTF_SUPPORT_FLOAT\n\n\n\/\/ internal vsnprintf\nstatic int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)\n{\n  unsigned int flags, width, precision, n;\n  size_t idx = 0U;\n\n  if (!buffer) {\n    \/\/ use null output function\n    out = _out_null;\n  }\n\n  while (*format)\n  {\n    \/\/ format specifier?  %[flags][width][.precision][length]\n    if (*format != '%') {\n      \/\/ no\n      out(*format, buffer, idx++, maxlen);\n      format++;\n      continue;\n    }\n    else {\n      \/\/ yes, evaluate it\n      format++;\n    }\n\n    \/\/ evaluate flags\n    flags = 0U;\n    do {\n      switch (*format) {\n        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;\n        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;\n        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;\n        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;\n        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;\n        default :                                   n = 0U; break;\n      }\n    } while (n);\n\n    \/\/ evaluate width field\n    width = 0U;\n    if (_is_digit(*format)) {\n      width = _atoi(&format);\n    }\n    else if (*format == '*') {\n      const int w = va_arg(va, int);\n      if (w < 0) {\n        flags |= FLAGS_LEFT;    \/\/ reverse padding\n        width = (unsigned int)-w;\n      }\n      else {\n        width = (unsigned int)w;\n      }\n      format++;\n    }\n\n    \/\/ evaluate precision field\n    precision = 0U;\n    if (*format == '.') {\n      flags |= FLAGS_PRECISION;\n      format++;\n      if (_is_digit(*format)) {\n        precision = _atoi(&format);\n      }\n      else if (*format == '*') {\n        const int prec = (int)va_arg(va, int);\n        precision = prec > 0 ? (unsigned int)prec : 0U;\n        format++;\n      }\n    }\n\n    \/\/ evaluate length field\n    switch (*format) {\n      case 'l' :\n        flags |= FLAGS_LONG;\n        format++;\n        if (*format == 'l') {\n          flags |= FLAGS_LONG_LONG;\n          format++;\n        }\n        break;\n      case 'h' :\n        flags |= FLAGS_SHORT;\n        format++;\n        if (*format == 'h') {\n          flags |= FLAGS_CHAR;\n          format++;\n        }\n        break;\n#if defined(PRINTF_SUPPORT_PTRDIFF_T)\n      case 't' :\n        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);\n        format++;\n        break;\n#endif\n      case 'j' :\n        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);\n        format++;\n        break;\n      case 'z' :\n        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);\n        format++;\n        break;\n      default :\n        break;\n    }\n\n    \/\/ evaluate specifier\n    switch (*format) {\n      case 'd' :\n      case 'i' :\n      case 'u' :\n      case 'x' :\n      case 'X' :\n      case 'o' :\n      case 'b' : {\n        \/\/ set the base\n        unsigned int base;\n        if (*format == 'x' || *format == 'X') {\n          base = 16U;\n        }\n        else if (*format == 'o') {\n          base =  8U;\n        }\n        else if (*format == 'b') {\n          base =  2U;\n        }\n        else {\n          base = 10U;\n          flags &= ~FLAGS_HASH;   \/\/ no hash for dec format\n        }\n        \/\/ uppercase\n        if (*format == 'X') {\n          flags |= FLAGS_UPPERCASE;\n        }\n\n        \/\/ no plus or space flag for u, x, X, o, b\n        if ((*format != 'i') && (*format != 'd')) {\n          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);\n        }\n\n        \/\/ ignore '0' flag when precision is given\n        if (flags & FLAGS_PRECISION) {\n          flags &= ~FLAGS_ZEROPAD;\n        }\n\n        \/\/ convert the integer\n        if ((*format == 'i') || (*format == 'd')) {\n          \/\/ signed\n          if (flags & FLAGS_LONG_LONG) {\n#if defined(PRINTF_SUPPORT_LONG_LONG)\n            const long long value = va_arg(va, long long);\n            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);\n#endif\n          }\n          else if (flags & FLAGS_LONG) {\n            const long value = va_arg(va, long);\n            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);\n          }\n          else {\n            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);\n            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);\n          }\n        }\n        else {\n          \/\/ unsigned\n          if (flags & FLAGS_LONG_LONG) {\n#if defined(PRINTF_SUPPORT_LONG_LONG)\n            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);\n#endif\n          }\n          else if (flags & FLAGS_LONG) {\n            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);\n          }\n          else {\n            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);\n            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);\n          }\n        }\n        format++;\n        break;\n      }\n#if defined(PRINTF_SUPPORT_FLOAT)\n      case 'f' :\n      case 'F' :\n        if (*format == 'F') flags |= FLAGS_UPPERCASE;\n        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);\n        format++;\n        break;\n#if defined(PRINTF_SUPPORT_EXPONENTIAL)\n      case 'e':\n      case 'E':\n      case 'g':\n      case 'G':\n        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;\n        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;\n        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);\n        format++;\n        break;\n#endif  \/\/ PRINTF_SUPPORT_EXPONENTIAL\n#endif  \/\/ PRINTF_SUPPORT_FLOAT\n      case 'c' : {\n        unsigned int l = 1U;\n        \/\/ pre padding\n        if (!(flags & FLAGS_LEFT)) {\n          while (l++ < width) {\n            out(' ', buffer, idx++, maxlen);\n          }\n        }\n        \/\/ char output\n        out((char)va_arg(va, int), buffer, idx++, maxlen);\n        \/\/ post padding\n        if (flags & FLAGS_LEFT) {\n          while (l++ < width) {\n            out(' ', buffer, idx++, maxlen);\n          }\n        }\n        format++;\n        break;\n      }\n\n      case 's' : {\n        const char* p = va_arg(va, char*);\n        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);\n        \/\/ pre padding\n        if (flags & FLAGS_PRECISION) {\n          l = (l < precision ? l : precision);\n        }\n        if (!(flags & FLAGS_LEFT)) {\n          while (l++ < width) {\n            out(' ', buffer, idx++, maxlen);\n          }\n        }\n        \/\/ string output\n        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {\n          out(*(p++), buffer, idx++, maxlen);\n        }\n        \/\/ post padding\n        if (flags & FLAGS_LEFT) {\n          while (l++ < width) {\n            out(' ', buffer, idx++, maxlen);\n          }\n        }\n        format++;\n        break;\n      }\n\n      case 'p' : {\n        width = sizeof(void*) * 2U;\n        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;\n#if defined(PRINTF_SUPPORT_LONG_LONG)\n        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);\n        if (is_ll) {\n          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);\n        }\n        else {\n#endif\n          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);\n#if defined(PRINTF_SUPPORT_LONG_LONG)\n        }\n#endif\n        format++;\n        break;\n      }\n\n      case '%' :\n        out('%', buffer, idx++, maxlen);\n        format++;\n        break;\n\n      default :\n        out(*format, buffer, idx++, maxlen);\n        format++;\n        break;\n    }\n  }\n\n  \/\/ termination\n  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);\n\n  \/\/ return written chars without terminating \\0\n  return (int)idx;\n}\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\nint printf_(const char* format, ...)\n{\n  va_list va;\n  va_start(va, format);\n  char buffer[1];\n  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);\n  va_end(va);\n  return ret;\n}\n\n\nint sprintf_(char* buffer, const char* format, ...)\n{\n  va_list va;\n  va_start(va, format);\n  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);\n  va_end(va);\n  return ret;\n}\n\n\nint snprintf_(char* buffer, size_t count, const char* format, ...)\n{\n  va_list va;\n  va_start(va, format);\n  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);\n  va_end(va);\n  return ret;\n}\n\n\nint vprintf_(const char* format, va_list va)\n{\n  char buffer[1];\n  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);\n}\n\n\nint vsnprintf_(char* buffer, size_t count, const char* format, va_list va)\n{\n  return _vsnprintf(_out_buffer, buffer, count, format, va);\n}\n\n\nint fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)\n{\n  va_list va;\n  va_start(va, format);\n  const out_fct_wrap_type out_fct_wrap = { out, arg };\n  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);\n  va_end(va);\n  return ret;\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/util\/include\/util.h",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2021, Breakaway Consulting Pty. Ltd.\n * Copyright 2022, UNSW (ABN 57 195 873 179)\n *\n * SPDX-License-Identifier: BSD-2-Clause\n *\/\n\n#pragma once\n\n#include <stdint.h>\n#include <microkit.h>\n#include \"printf.h\"\n\n\/\/ @ivanv: these are here for convience, should not be here though\n#define GUEST_ID 0\n#define GUEST_VCPU_ID 0\n#define GUEST_NUM_VCPUS 1\n\/\/ Note that this is AArch64 specific\n#if defined(CONFIG_ARCH_AARCH64)\n    #define SEL4_USER_CONTEXT_SIZE 0x24\n#endif\n\n#define PAGE_SIZE_4K 4096\n\n#define ARRAY_SIZE(x) (sizeof(x)\/sizeof((x)[0]))\n\n#define CTZ(x) __builtin_ctz(x)\n\n#if __STDC_VERSION__ >= 201112L && !defined(__cplusplus)\n#define static_assert _Static_assert\n#endif\n\n\/\/  __attribute__ ((__noreturn__))\n\/\/ void __assert_func(const char *file, int line, const char *function, const char *str);\n\nvoid _putchar(char character);\n\n#define LOG_VMM(...) do{ printf(\"%s|INFO: \", microkit_name); printf(__VA_ARGS__); }while(0)\n#define LOG_VMM_ERR(...) do{ printf(\"%s|ERROR: \", microkit_name); printf(__VA_ARGS__); }while(0)\n\nstatic char\ndecchar(unsigned int v) {\n    return '0' + v;\n}\n\nstatic void\nput8(uint8_t x)\n{\n    char tmp[4];\n    unsigned i = 3;\n    tmp[3] = 0;\n    do {\n        uint8_t c = x % 10;\n        tmp[--i] = decchar(c);\n        x \/= 10;\n    } while (x);\n    microkit_dbg_puts(&tmp[i]);\n}\n\n\/\/ @ivanv: sort this out...\nstatic void\nreply_to_fault()\n{\n    microkit_msginfo msg = microkit_msginfo_new(0, 0);\n    seL4_Send(4, msg);\n}\n\nstatic uint64_t get_vmm_id(char *microkit_name)\n{\n    \/\/ @ivanv: Absolute hack\n    return microkit_name[4] - '0';\n}\n\nstatic void\nprint_tcb_regs(seL4_UserContext *ctx) {\n#if defined(ARCH_aarch64)\n    \/\/ I don't know if it's the best idea, but here we'll just dump the\n    \/\/ registers in the same order they are defined in seL4_UserContext\n    printf(\"VMM|INFO: TCB registers:\\n\");\n    \/\/ Frame registers\n    printf(\"    pc:   0x%016lx\\n\", ctx->pc);\n    printf(\"    sp:   0x%016lx\\n\", ctx->sp);\n    printf(\"    spsr: 0x%016lx\\n\", ctx->spsr);\n    printf(\"    x0:   0x%016lx\\n\", ctx->x0);\n    printf(\"    x1:   0x%016lx\\n\", ctx->x1);\n    printf(\"    x2:   0x%016lx\\n\", ctx->x2);\n    printf(\"    x3:   0x%016lx\\n\", ctx->x3);\n    printf(\"    x4:   0x%016lx\\n\", ctx->x4);\n    printf(\"    x5:   0x%016lx\\n\", ctx->x5);\n    printf(\"    x6:   0x%016lx\\n\", ctx->x6);\n    printf(\"    x7:   0x%016lx\\n\", ctx->x7);\n    printf(\"    x8:   0x%016lx\\n\", ctx->x8);\n    printf(\"    x16:  0x%016lx\\n\", ctx->x16);\n    printf(\"    x17:  0x%016lx\\n\", ctx->x17);\n    printf(\"    x18:  0x%016lx\\n\", ctx->x18);\n    printf(\"    x29:  0x%016lx\\n\", ctx->x29);\n    printf(\"    x30:  0x%016lx\\n\", ctx->x30);\n    \/\/ Other integer registers\n    printf(\"    x9:   0x%016lx\\n\", ctx->x9);\n    printf(\"    x10:  0x%016lx\\n\", ctx->x10);\n    printf(\"    x11:  0x%016lx\\n\", ctx->x11);\n    printf(\"    x12:  0x%016lx\\n\", ctx->x12);\n    printf(\"    x13:  0x%016lx\\n\", ctx->x13);\n    printf(\"    x14:  0x%016lx\\n\", ctx->x14);\n    printf(\"    x15:  0x%016lx\\n\", ctx->x15);\n    printf(\"    x19:  0x%016lx\\n\", ctx->x19);\n    printf(\"    x20:  0x%016lx\\n\", ctx->x20);\n    printf(\"    x21:  0x%016lx\\n\", ctx->x21);\n    printf(\"    x22:  0x%016lx\\n\", ctx->x22);\n    printf(\"    x23:  0x%016lx\\n\", ctx->x23);\n    printf(\"    x24:  0x%016lx\\n\", ctx->x24);\n    printf(\"    x25:  0x%016lx\\n\", ctx->x25);\n    printf(\"    x26:  0x%016lx\\n\", ctx->x26);\n    printf(\"    x27:  0x%016lx\\n\", ctx->x27);\n    printf(\"    x28:  0x%016lx\\n\", ctx->x28);\n    \/\/ TODO(ivanv): print out thread ID registers?\n#endif\n}\n\nvoid *memcpy(void *restrict dest, const void *restrict src, size_t n);\nvoid *memset(void *dest, int c, size_t n);\n\nstatic void assert_fail(\n    const char  *assertion,\n    const char  *file,\n    unsigned int line,\n    const char  *function)\n{\n    printf(\"Failed assertion '%s' at %s:%u in function %s\\n\", assertion, file, line, function);\n    while (1) {}\n}\n\n#define assert(expr) \\\n    do { \\\n        if (!(expr)) { \\\n            assert_fail(#expr, __FILE__, __LINE__, __FUNCTION__); \\\n        } \\\n    } while(0)\n\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/util\/src\/util.c",
        {
          "type" : "ITestResource",
          "content" : "\/*\n * Copyright 2022, UNSW (ABN 57 195 873 179)\n *\n * SPDX-License-Identifier: BSD-2-Clause\n *\/\n\n#include \"util.h\"\n\n\/* This is required to use the printf library we brought in, it is\n   simply for convenience since there's a lot of logging\/debug printing\n   in the VMM. *\/\nvoid _putchar(char character)\n{\n    microkit_dbg_putc(character);\n}\n\n __attribute__ ((__noreturn__))\nvoid __assert_func(const char *file, int line, const char *function, const char *str)\n{\n    microkit_dbg_puts(\"assert failed: \");\n    microkit_dbg_puts(str);\n    microkit_dbg_puts(\" \");\n    microkit_dbg_puts(file);\n    microkit_dbg_puts(\" \");\n    microkit_dbg_puts(function);\n    microkit_dbg_puts(\"\\n\");\n    while (1) {}\n}\n\nvoid *memcpy(void *restrict dest, const void *restrict src, size_t n)\n{\n    unsigned char *d = dest;\n    const unsigned char *s = src;\n    for (; n; n--) *d++ = *s++;\n    return dest;\n}\n\nvoid *memset(void *dest, int c, size_t n)\n{\n    unsigned char *s = dest;\n    for (; n; n--, s++) *s = c;\n    return dest;\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/data\/src\/SW\/RawEthernetMessage.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse vstd::prelude::*;\n\nuse super::*;\n\nverus! {\n  pub const SW_RawEthernetMessage_BYTE_SIZE: usize = 1600;\n  pub const SW_RawEthernetMessage_DIM_0: usize = 1600;\n\n  pub type RawEthernetMessage = [u8; SW_RawEthernetMessage_DIM_0];\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/crates\/data\/src\/SW\/u16Array.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse vstd::prelude::*;\n\nuse super::*;\n\nverus! {\n  pub const SW_u16Array_BYTE_SIZE: usize = 8;\n  pub const SW_u16Array_DIM_0: usize = 4;\n\n  pub type u16Array = [u16; SW_u16Array_DIM_0];\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/crates\/data\/src\/SW\/mod.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\ninclude!(\"RawEthernetMessage.rs\");\ninclude!(\"u16Array.rs\");\n\n\/*\nNOTE: the include!(\"xx.rs\") inlines the file contents directly so a module for\nxx is not created.  An alternative would be to do\n\npub mod xx.rs;\npub use xx::*;\n\nhowever this would create a module out of xx.rs so to refer to the datatype\nit contains you'd have to do something like \"use data::xx::xx\"\nin lib.rs. A workaround is to rename the file, e.g. xx_STRUCT.rs but leave the\nfile contents unchanged.  Then in this file do\n\npub mod xx_STRUCT;\npub use xx_STRUCT::*;\n\nthen xx would be imported in lib.rs via \"use data::SW::*\"\n*\/\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/crates\/data\/src\/sb_event_counter.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub type sb_event_counter_t = usize;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/crates\/data\/src\/sb_microkit_types.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub type microkit_channel = u32;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/crates\/data\/src\/lib.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg_attr(not(test), no_std)]\n\n#![allow(non_camel_case_types)]\n#![allow(non_snake_case)]\n#![allow(non_upper_case_globals)]\n\n#![allow(dead_code)]\n#![allow(static_mut_refs)]\n#![allow(unused_imports)]\n#![allow(unused_macros)]\n#![allow(unused_parens)]\n#![allow(unused_unsafe)]\n#![allow(unused_variables)]\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub mod SW;\n\ninclude!(\"sb_event_counter.rs\");\ninclude!(\"sb_microkit_types.rs\");\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/crates\/data\/Cargo.toml",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\n[package]\nname = \"data\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nvstd = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", default-features=false, tag=\"release\/0.2025.09.25.04e8687\"}\nverus_builtin = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", tag=\"release\/0.2025.09.25.04e8687\" }\nverus_builtin_macros = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", tag=\"release\/0.2025.09.25.04e8687\" }\n\n[package.metadata.verus]\nverify = true\n\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/crates\/data\/rust-toolchain.toml",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\n[toolchain]\nchannel = \"nightly\"\ncomponents = [ \"rustfmt\", \"rust-src\", \"rustc-dev\", \"llvm-tools-preview\", \"rust-analyzer\" ]\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/bridge\/extern_c_api.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n\/\/! C-interface for the component.\n\/\/! This code must be unsafe.\n\/\/! Assumptions about correctness are introduced and need to be verified by other means.\n\nuse data::*;\n\n#[cfg(test)]\nuse std::sync::Mutex;\n\n#[cfg(not(test))]\nextern \"C\" {\n  fn get_EthernetFramesRx(value: *mut SW::RawEthernetMessage) -> bool;\n  fn put_EthernetFramesTx(value: *mut SW::RawEthernetMessage) -> bool;\n}\n\npub fn unsafe_get_EthernetFramesRx() -> Option<SW::RawEthernetMessage>\n{\n  unsafe {\n    let value: *mut SW::RawEthernetMessage = &mut [0; SW::SW_RawEthernetMessage_DIM_0];\n    if (get_EthernetFramesRx(value)) {\n      return Some(*value);\n    } else {\n      return None;\n    }\n  }\n}\n\npub fn unsafe_put_EthernetFramesTx(value: &SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    return put_EthernetFramesTx(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);\n  }\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Testing Versions\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n#[cfg(test)]\nlazy_static::lazy_static! {\n  \/\/ simulate the global C variables that point to the microkit shared memory regions.  In a full\n  \/\/ microkit system we would be able to mutate the shared memory for out ports since they're r\/w,\n  \/\/ but we couldn't do that for in ports since they are read-only\n  pub static ref IN_EthernetFramesRx: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);\n  pub static ref OUT_EthernetFramesTx: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);\n}\n\n#[cfg(test)]\npub fn initialize_test_globals() {\n  unsafe {\n    *IN_EthernetFramesRx.lock().unwrap() = None;\n    *OUT_EthernetFramesTx.lock().unwrap() = None;\n  }\n}\n\n#[cfg(test)]\npub fn get_EthernetFramesRx(value: *mut SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    match *IN_EthernetFramesRx.lock().unwrap() {\n      Some(v) => {\n        *value = v;\n        return true;\n      },\n      None => return false,\n    }\n  }\n}\n\n#[cfg(test)]\npub fn put_EthernetFramesTx(value: *mut SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    *OUT_EthernetFramesTx.lock().unwrap() = Some(*value);\n    return true;\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/bridge\/ArduPilot_ArduPilot_api.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse vstd::prelude::*;\nuse data::*;\nuse super::extern_c_api as extern_api;\n\nverus! {\n  pub trait ArduPilot_ArduPilot_Api {}\n\n  pub trait ArduPilot_ArduPilot_Put_Api: ArduPilot_ArduPilot_Api {\n    #[verifier::external_body]\n    fn unverified_put_EthernetFramesTx(\n      &mut self,\n      value: SW::RawEthernetMessage)\n    {\n      extern_api::unsafe_put_EthernetFramesTx(&value);\n    }\n  }\n\n  pub trait ArduPilot_ArduPilot_Get_Api: ArduPilot_ArduPilot_Api {\n    #[verifier::external_body]\n    fn unverified_get_EthernetFramesRx(\n      &mut self,\n      value: &Ghost<Option<SW::RawEthernetMessage>>) -> (res : Option<SW::RawEthernetMessage>)\n      ensures\n        res == value@\n    {\n      return extern_api::unsafe_get_EthernetFramesRx();\n    }\n  }\n\n  pub trait ArduPilot_ArduPilot_Full_Api: ArduPilot_ArduPilot_Put_Api + ArduPilot_ArduPilot_Get_Api {}\n\n  pub struct ArduPilot_ArduPilot_Application_Api<API: ArduPilot_ArduPilot_Api> {\n    pub api: API,\n\n    pub ghost EthernetFramesRx: Option<SW::RawEthernetMessage>,\n    pub ghost EthernetFramesTx: Option<SW::RawEthernetMessage>\n  }\n\n  impl<API: ArduPilot_ArduPilot_Put_Api> ArduPilot_ArduPilot_Application_Api<API> {\n    pub fn put_EthernetFramesTx(\n      &mut self,\n      value: SW::RawEthernetMessage)\n      ensures\n        old(self).EthernetFramesRx == self.EthernetFramesRx,\n        self.EthernetFramesTx == Some(value)\n    {\n      self.api.unverified_put_EthernetFramesTx(value);\n      self.EthernetFramesTx = Some(value);\n    }\n  }\n\n  impl<API: ArduPilot_ArduPilot_Get_Api> ArduPilot_ArduPilot_Application_Api<API> {\n    pub fn get_EthernetFramesRx(&mut self) -> (res : Option<SW::RawEthernetMessage>)\n      ensures\n        old(self).EthernetFramesRx == self.EthernetFramesRx,\n        res == self.EthernetFramesRx,\n        old(self).EthernetFramesTx == self.EthernetFramesTx\n    {\n      self.api.unverified_get_EthernetFramesRx(&Ghost(self.EthernetFramesRx))\n    }\n  }\n\n  pub struct ArduPilot_ArduPilot_Initialization_Api;\n  impl ArduPilot_ArduPilot_Api for ArduPilot_ArduPilot_Initialization_Api {}\n  impl ArduPilot_ArduPilot_Put_Api for ArduPilot_ArduPilot_Initialization_Api {}\n\n  pub const fn init_api() -> ArduPilot_ArduPilot_Application_Api<ArduPilot_ArduPilot_Initialization_Api> {\n    return ArduPilot_ArduPilot_Application_Api {\n      api: ArduPilot_ArduPilot_Initialization_Api {},\n\n      EthernetFramesRx: None,\n      EthernetFramesTx: None\n    }\n  }\n\n  pub struct ArduPilot_ArduPilot_Compute_Api;\n  impl ArduPilot_ArduPilot_Api for ArduPilot_ArduPilot_Compute_Api {}\n  impl ArduPilot_ArduPilot_Put_Api for ArduPilot_ArduPilot_Compute_Api {}\n  impl ArduPilot_ArduPilot_Get_Api for ArduPilot_ArduPilot_Compute_Api {}\n  impl ArduPilot_ArduPilot_Full_Api for ArduPilot_ArduPilot_Compute_Api {}\n\n  pub const fn compute_api() -> ArduPilot_ArduPilot_Application_Api<ArduPilot_ArduPilot_Compute_Api> {\n    return ArduPilot_ArduPilot_Application_Api {\n      api: ArduPilot_ArduPilot_Compute_Api {},\n\n      EthernetFramesRx: None,\n      EthernetFramesTx: None\n    }\n  }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/bridge\/test_api.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg(test)]\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse crate::bridge::extern_c_api as extern_api;\nuse data::*;\n\nuse proptest::prelude::*;\n\npub struct PreStateContainer {\n  pub api_EthernetFramesRx: Option<SW::RawEthernetMessage>\n}\n\npub fn put_concrete_inputs_container(container: PreStateContainer)\n{\n  put_EthernetFramesRx(container.api_EthernetFramesRx);\n}\n\npub fn put_concrete_inputs(EthernetFramesRx: Option<SW::RawEthernetMessage>)\n{\n  put_EthernetFramesRx(EthernetFramesRx);\n}\n\n\/\/\/ setter for IN EventDataPort\npub fn put_EthernetFramesRx(value: Option<SW::RawEthernetMessage>)\n{\n  *extern_api::IN_EthernetFramesRx.lock().unwrap() = value\n}\n\n\/\/\/ getter for OUT EventDataPort\npub fn get_EthernetFramesTx() -> Option<SW::RawEthernetMessage>\n{\n  return extern_api::OUT_EthernetFramesTx.lock().unwrap().clone()\n}\n\npub fn option_strategy_default\n  <T: Clone + std::fmt::Debug, \n   S:  Strategy<Value = T>> (base: S) -> impl Strategy<Value = Option<T>>\n{\n  option_strategy_bias(1, base)\n}\n\npub fn option_strategy_bias\n  <T: Clone + std::fmt::Debug, \n   S:  Strategy<Value = T>> (\n  bias: u32,\n  base: S) -> impl Strategy<Value = Option<T>>\n{\n  prop_oneof![\n    bias => base.prop_map(Some),\n    1 => Just(None),\n  ]\n}\n\npub fn SW_RawEthernetMessage_strategy_default() -> impl Strategy<Value = SW::RawEthernetMessage>\n{\n  SW_RawEthernetMessage_strategy_cust(any::<u8>())\n}\n\npub fn SW_RawEthernetMessage_strategy_cust<u8_strategy: Strategy<Value = u8>> (base_strategy: u8_strategy) -> impl Strategy<Value = SW::RawEthernetMessage>\n{\n  proptest::collection::vec(base_strategy, SW::SW_RawEthernetMessage_DIM_0)\n    .prop_map(|v| {\n      let boxed: Box<[u8; SW::SW_RawEthernetMessage_DIM_0]> = v.into_boxed_slice().try_into().unwrap();\n      *boxed\n  })\n}\n\npub fn SW_u16Array_strategy_default() -> impl Strategy<Value = SW::u16Array>\n{\n  SW_u16Array_strategy_cust(any::<u16>())\n}\n\npub fn SW_u16Array_strategy_cust<u16_strategy: Strategy<Value = u16>> (base_strategy: u16_strategy) -> impl Strategy<Value = SW::u16Array>\n{\n  proptest::collection::vec(base_strategy, SW::SW_u16Array_DIM_0)\n    .prop_map(|v| {\n      let boxed: Box<[u16; SW::SW_u16Array_DIM_0]> = v.into_boxed_slice().try_into().unwrap();\n      *boxed\n  })\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/bridge\/mod.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub mod extern_c_api;\npub mod test_api;\npub mod ArduPilot_ArduPilot_api;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/bridge\/extern_c_api.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n\/\/! C-interface for the component.\n\/\/! This code must be unsafe.\n\/\/! Assumptions about correctness are introduced and need to be verified by other means.\n\nuse data::*;\n\n#[cfg(test)]\nuse std::sync::Mutex;\n\n#[cfg(not(test))]\nextern \"C\" {\n  fn get_EthernetFramesRxIn(value: *mut SW::RawEthernetMessage) -> bool;\n  fn get_EthernetFramesTxIn(value: *mut SW::RawEthernetMessage) -> bool;\n  fn put_EthernetFramesRxOut(value: *mut SW::RawEthernetMessage) -> bool;\n  fn put_EthernetFramesTxOut(value: *mut SW::RawEthernetMessage) -> bool;\n}\n\npub fn unsafe_get_EthernetFramesRxIn() -> Option<SW::RawEthernetMessage>\n{\n  unsafe {\n    let value: *mut SW::RawEthernetMessage = &mut [0; SW::SW_RawEthernetMessage_DIM_0];\n    if (get_EthernetFramesRxIn(value)) {\n      return Some(*value);\n    } else {\n      return None;\n    }\n  }\n}\n\npub fn unsafe_get_EthernetFramesTxIn() -> Option<SW::RawEthernetMessage>\n{\n  unsafe {\n    let value: *mut SW::RawEthernetMessage = &mut [0; SW::SW_RawEthernetMessage_DIM_0];\n    if (get_EthernetFramesTxIn(value)) {\n      return Some(*value);\n    } else {\n      return None;\n    }\n  }\n}\n\npub fn unsafe_put_EthernetFramesRxOut(value: &SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    return put_EthernetFramesRxOut(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);\n  }\n}\n\npub fn unsafe_put_EthernetFramesTxOut(value: &SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    return put_EthernetFramesTxOut(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);\n  }\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Testing Versions\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n#[cfg(test)]\nlazy_static::lazy_static! {\n  \/\/ simulate the global C variables that point to the microkit shared memory regions.  In a full\n  \/\/ microkit system we would be able to mutate the shared memory for out ports since they're r\/w,\n  \/\/ but we couldn't do that for in ports since they are read-only\n  pub static ref IN_EthernetFramesRxIn: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);\n  pub static ref IN_EthernetFramesTxIn: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);\n  pub static ref OUT_EthernetFramesRxOut: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);\n  pub static ref OUT_EthernetFramesTxOut: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);\n}\n\n#[cfg(test)]\npub fn initialize_test_globals() {\n  unsafe {\n    *IN_EthernetFramesRxIn.lock().unwrap() = None;\n    *IN_EthernetFramesTxIn.lock().unwrap() = None;\n    *OUT_EthernetFramesRxOut.lock().unwrap() = None;\n    *OUT_EthernetFramesTxOut.lock().unwrap() = None;\n  }\n}\n\n#[cfg(test)]\npub fn get_EthernetFramesRxIn(value: *mut SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    match *IN_EthernetFramesRxIn.lock().unwrap() {\n      Some(v) => {\n        *value = v;\n        return true;\n      },\n      None => return false,\n    }\n  }\n}\n\n#[cfg(test)]\npub fn get_EthernetFramesTxIn(value: *mut SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    match *IN_EthernetFramesTxIn.lock().unwrap() {\n      Some(v) => {\n        *value = v;\n        return true;\n      },\n      None => return false,\n    }\n  }\n}\n\n#[cfg(test)]\npub fn put_EthernetFramesRxOut(value: *mut SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    *OUT_EthernetFramesRxOut.lock().unwrap() = Some(*value);\n    return true;\n  }\n}\n\n#[cfg(test)]\npub fn put_EthernetFramesTxOut(value: *mut SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    *OUT_EthernetFramesTxOut.lock().unwrap() = Some(*value);\n    return true;\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/bridge\/Firewall_Firewall_api.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse vstd::prelude::*;\nuse data::*;\nuse super::extern_c_api as extern_api;\n\nverus! {\n  pub trait Firewall_Firewall_Api {}\n\n  pub trait Firewall_Firewall_Put_Api: Firewall_Firewall_Api {\n    #[verifier::external_body]\n    fn unverified_put_EthernetFramesRxOut(\n      &mut self,\n      value: SW::RawEthernetMessage)\n    {\n      extern_api::unsafe_put_EthernetFramesRxOut(&value);\n    }\n\n    #[verifier::external_body]\n    fn unverified_put_EthernetFramesTxOut(\n      &mut self,\n      value: SW::RawEthernetMessage)\n    {\n      extern_api::unsafe_put_EthernetFramesTxOut(&value);\n    }\n  }\n\n  pub trait Firewall_Firewall_Get_Api: Firewall_Firewall_Api {\n    #[verifier::external_body]\n    fn unverified_get_EthernetFramesRxIn(\n      &mut self,\n      value: &Ghost<Option<SW::RawEthernetMessage>>) -> (res : Option<SW::RawEthernetMessage>)\n      ensures\n        res == value@\n    {\n      return extern_api::unsafe_get_EthernetFramesRxIn();\n    }\n\n    #[verifier::external_body]\n    fn unverified_get_EthernetFramesTxIn(\n      &mut self,\n      value: &Ghost<Option<SW::RawEthernetMessage>>) -> (res : Option<SW::RawEthernetMessage>)\n      ensures\n        res == value@\n    {\n      return extern_api::unsafe_get_EthernetFramesTxIn();\n    }\n  }\n\n  pub trait Firewall_Firewall_Full_Api: Firewall_Firewall_Put_Api + Firewall_Firewall_Get_Api {}\n\n  pub struct Firewall_Firewall_Application_Api<API: Firewall_Firewall_Api> {\n    pub api: API,\n\n    pub ghost EthernetFramesRxIn: Option<SW::RawEthernetMessage>,\n    pub ghost EthernetFramesTxIn: Option<SW::RawEthernetMessage>,\n    pub ghost EthernetFramesRxOut: Option<SW::RawEthernetMessage>,\n    pub ghost EthernetFramesTxOut: Option<SW::RawEthernetMessage>\n  }\n\n  impl<API: Firewall_Firewall_Put_Api> Firewall_Firewall_Application_Api<API> {\n    pub fn put_EthernetFramesRxOut(\n      &mut self,\n      value: SW::RawEthernetMessage)\n      ensures\n        old(self).EthernetFramesRxIn == self.EthernetFramesRxIn,\n        self.EthernetFramesRxOut == Some(value),\n        old(self).EthernetFramesTxIn == self.EthernetFramesTxIn,\n        old(self).EthernetFramesTxOut == self.EthernetFramesTxOut\n    {\n      self.api.unverified_put_EthernetFramesRxOut(value);\n      self.EthernetFramesRxOut = Some(value);\n    }\n    pub fn put_EthernetFramesTxOut(\n      &mut self,\n      value: SW::RawEthernetMessage)\n      ensures\n        old(self).EthernetFramesRxIn == self.EthernetFramesRxIn,\n        old(self).EthernetFramesRxOut == self.EthernetFramesRxOut,\n        old(self).EthernetFramesTxIn == self.EthernetFramesTxIn,\n        self.EthernetFramesTxOut == Some(value)\n    {\n      self.api.unverified_put_EthernetFramesTxOut(value);\n      self.EthernetFramesTxOut = Some(value);\n    }\n  }\n\n  impl<API: Firewall_Firewall_Get_Api> Firewall_Firewall_Application_Api<API> {\n    pub fn get_EthernetFramesRxIn(&mut self) -> (res : Option<SW::RawEthernetMessage>)\n      ensures\n        old(self).EthernetFramesRxIn == self.EthernetFramesRxIn,\n        res == self.EthernetFramesRxIn,\n        old(self).EthernetFramesRxOut == self.EthernetFramesRxOut,\n        old(self).EthernetFramesTxIn == self.EthernetFramesTxIn,\n        old(self).EthernetFramesTxOut == self.EthernetFramesTxOut\n    {\n      self.api.unverified_get_EthernetFramesRxIn(&Ghost(self.EthernetFramesRxIn))\n    }\n    pub fn get_EthernetFramesTxIn(&mut self) -> (res : Option<SW::RawEthernetMessage>)\n      ensures\n        old(self).EthernetFramesRxIn == self.EthernetFramesRxIn,\n        old(self).EthernetFramesRxOut == self.EthernetFramesRxOut,\n        old(self).EthernetFramesTxIn == self.EthernetFramesTxIn,\n        res == self.EthernetFramesTxIn,\n        old(self).EthernetFramesTxOut == self.EthernetFramesTxOut\n    {\n      self.api.unverified_get_EthernetFramesTxIn(&Ghost(self.EthernetFramesTxIn))\n    }\n  }\n\n  pub struct Firewall_Firewall_Initialization_Api;\n  impl Firewall_Firewall_Api for Firewall_Firewall_Initialization_Api {}\n  impl Firewall_Firewall_Put_Api for Firewall_Firewall_Initialization_Api {}\n\n  pub const fn init_api() -> Firewall_Firewall_Application_Api<Firewall_Firewall_Initialization_Api> {\n    return Firewall_Firewall_Application_Api {\n      api: Firewall_Firewall_Initialization_Api {},\n\n      EthernetFramesRxIn: None,\n      EthernetFramesTxIn: None,\n      EthernetFramesRxOut: None,\n      EthernetFramesTxOut: None\n    }\n  }\n\n  pub struct Firewall_Firewall_Compute_Api;\n  impl Firewall_Firewall_Api for Firewall_Firewall_Compute_Api {}\n  impl Firewall_Firewall_Put_Api for Firewall_Firewall_Compute_Api {}\n  impl Firewall_Firewall_Get_Api for Firewall_Firewall_Compute_Api {}\n  impl Firewall_Firewall_Full_Api for Firewall_Firewall_Compute_Api {}\n\n  pub const fn compute_api() -> Firewall_Firewall_Application_Api<Firewall_Firewall_Compute_Api> {\n    return Firewall_Firewall_Application_Api {\n      api: Firewall_Firewall_Compute_Api {},\n\n      EthernetFramesRxIn: None,\n      EthernetFramesTxIn: None,\n      EthernetFramesRxOut: None,\n      EthernetFramesTxOut: None\n    }\n  }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/bridge\/test_api.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg(test)]\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse crate::bridge::extern_c_api as extern_api;\nuse data::*;\n\nuse proptest::prelude::*;\n\nuse crate::bridge::Firewall_Firewall_GUMBOX as GUMBOX;\n\npub struct PreStateContainer {\n  pub api_EthernetFramesRxIn: Option<SW::RawEthernetMessage>,\n  pub api_EthernetFramesTxIn: Option<SW::RawEthernetMessage>\n}\n\npub fn put_concrete_inputs_container(container: PreStateContainer)\n{\n  put_EthernetFramesRxIn(container.api_EthernetFramesRxIn);\n  put_EthernetFramesTxIn(container.api_EthernetFramesTxIn);\n}\n\npub fn put_concrete_inputs(\n  EthernetFramesRxIn: Option<SW::RawEthernetMessage>,\n  EthernetFramesTxIn: Option<SW::RawEthernetMessage>)\n{\n  put_EthernetFramesRxIn(EthernetFramesRxIn);\n  put_EthernetFramesTxIn(EthernetFramesTxIn);\n}\n\n\/\/\/ setter for IN EventDataPort\npub fn put_EthernetFramesRxIn(value: Option<SW::RawEthernetMessage>)\n{\n  *extern_api::IN_EthernetFramesRxIn.lock().unwrap() = value\n}\n\n\/\/\/ setter for IN EventDataPort\npub fn put_EthernetFramesTxIn(value: Option<SW::RawEthernetMessage>)\n{\n  *extern_api::IN_EthernetFramesTxIn.lock().unwrap() = value\n}\n\n\/\/\/ getter for OUT EventDataPort\npub fn get_EthernetFramesRxOut() -> Option<SW::RawEthernetMessage>\n{\n  return extern_api::OUT_EthernetFramesRxOut.lock().unwrap().clone()\n}\n\n\/\/\/ getter for OUT EventDataPort\npub fn get_EthernetFramesTxOut() -> Option<SW::RawEthernetMessage>\n{\n  return extern_api::OUT_EthernetFramesTxOut.lock().unwrap().clone()\n}\n\npub fn option_strategy_default\n  <T: Clone + std::fmt::Debug, \n   S:  Strategy<Value = T>> (base: S) -> impl Strategy<Value = Option<T>>\n{\n  option_strategy_bias(1, base)\n}\n\npub fn option_strategy_bias\n  <T: Clone + std::fmt::Debug, \n   S:  Strategy<Value = T>> (\n  bias: u32,\n  base: S) -> impl Strategy<Value = Option<T>>\n{\n  prop_oneof![\n    bias => base.prop_map(Some),\n    1 => Just(None),\n  ]\n}\n\npub fn SW_RawEthernetMessage_strategy_default() -> impl Strategy<Value = SW::RawEthernetMessage>\n{\n  SW_RawEthernetMessage_strategy_cust(any::<u8>())\n}\n\npub fn SW_RawEthernetMessage_strategy_cust<u8_strategy: Strategy<Value = u8>> (base_strategy: u8_strategy) -> impl Strategy<Value = SW::RawEthernetMessage>\n{\n  proptest::collection::vec(base_strategy, SW::SW_RawEthernetMessage_DIM_0)\n    .prop_map(|v| {\n      let boxed: Box<[u8; SW::SW_RawEthernetMessage_DIM_0]> = v.into_boxed_slice().try_into().unwrap();\n      *boxed\n  })\n}\n\npub fn SW_u16Array_strategy_default() -> impl Strategy<Value = SW::u16Array>\n{\n  SW_u16Array_strategy_cust(any::<u16>())\n}\n\npub fn SW_u16Array_strategy_cust<u16_strategy: Strategy<Value = u16>> (base_strategy: u16_strategy) -> impl Strategy<Value = SW::u16Array>\n{\n  proptest::collection::vec(base_strategy, SW::SW_u16Array_DIM_0)\n    .prop_map(|v| {\n      let boxed: Box<[u16; SW::SW_u16Array_DIM_0]> = v.into_boxed_slice().try_into().unwrap();\n      *boxed\n  })\n}\n\npub enum HarnessResult {\n  RejectedPrecondition,\n  FailedPostcondition(TestCaseError),\n  Passed,\n}\n\n\/** Contract-based test harness for the initialize entry point\n  *\/\npub fn testInitializeCB() -> HarnessResult\n{\n  \/\/ [InvokeEntryPoint]: Invoke the entry point\n  crate::Firewall_Firewall_initialize();\n\n  return HarnessResult::Passed\n}\n\n#[macro_export]\nmacro_rules!\ntestInitializeCB_macro {\n  (\n    $test_name: ident,\n    config: $config:expr\n  ) => {\n    proptest!{\n      #![proptest_config($config)]\n      #[test]\n      #[serial]\n      fn $test_name(empty in ::proptest::strategy::Just(())) {\n        match $crate::bridge::test_api::testInitializeCB() {\n          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {\n            unreachable!(\"This branch is infeasible\")\n          }\n          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {\n            return Err(e)\n          }\n          $crate::bridge::test_api::HarnessResult::Passed => { }\n        }\n      }\n    }\n  };\n}\n\n\/** Contract-based test harness for the compute entry point\n  *\n  * @param api_EthernetFramesRxIn incoming event data port\n  * @param api_EthernetFramesTxIn incoming event data port\n  *\/\npub fn testComputeCB(\n  api_EthernetFramesRxIn: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesTxIn: Option<SW::RawEthernetMessage>) -> HarnessResult\n{\n  \/\/ Initialize the app\n  crate::Firewall_Firewall_initialize();\n\n  \/\/ [PutInPorts]: Set values on the input ports\n  put_EthernetFramesRxIn(api_EthernetFramesRxIn);\n  put_EthernetFramesTxIn(api_EthernetFramesTxIn);\n\n  \/\/ [InvokeEntryPoint]: Invoke the entry point\n  crate::Firewall_Firewall_timeTriggered();\n\n  \/\/ [RetrieveOutState]: retrieve values of the output ports via get operations and GUMBO declared local state variable\n  let api_EthernetFramesRxOut = get_EthernetFramesRxOut();\n  let api_EthernetFramesTxOut = get_EthernetFramesTxOut();\n\n  \/\/ [CheckPost]: invoke the oracle function\n  if !GUMBOX::compute_CEP_Post(api_EthernetFramesRxIn, api_EthernetFramesTxIn, api_EthernetFramesRxOut, api_EthernetFramesTxOut) {\n    return HarnessResult::FailedPostcondition(TestCaseError::Fail(\"Postcondition failed: incorrect output behavior\".into()));\n  }\n\n  return HarnessResult::Passed\n}\n\n\/** Contract-based test harness for the compute entry point\n  *\/\npub fn testComputeCB_container(container: PreStateContainer) -> HarnessResult\n{\n  return testComputeCB(container.api_EthernetFramesRxIn, container.api_EthernetFramesTxIn)\n}\n\n#[macro_export]\nmacro_rules!\ntestComputeCB_macro {\n  (\n    $test_name: ident,\n    config: $config:expr,\n    api_EthernetFramesRxIn: $api_EthernetFramesRxIn_strat:expr,\n    api_EthernetFramesTxIn: $api_EthernetFramesTxIn_strat:expr\n  ) => {\n    proptest!{\n      #![proptest_config($config)]\n      #[test]\n      #[serial]\n      fn $test_name(\n        (api_EthernetFramesRxIn, api_EthernetFramesTxIn)\n        in ($api_EthernetFramesRxIn_strat, $api_EthernetFramesTxIn_strat)\n      ) {\n        match$crate::bridge::test_api::testComputeCB(api_EthernetFramesRxIn, api_EthernetFramesTxIn) {\n          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {\n            return Err(proptest::test_runner::TestCaseError::reject(\n              \"Precondition failed: invalid input combination\",\n            ))\n          }\n          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {\n            return Err(e)\n          }\n          $crate::bridge::test_api::HarnessResult::Passed => { }\n        }\n      }\n    }\n  };\n}\n\n#[macro_export]\nmacro_rules!\ntestComputeCBwLV_macro {\n  (\n    $test_name: ident,\n    config: $config:expr,\n    api_EthernetFramesRxIn: $api_EthernetFramesRxIn_strat:expr,\n    api_EthernetFramesTxIn: $api_EthernetFramesTxIn_strat:expr\n  ) => {\n    proptest!{\n      #![proptest_config($config)]\n      #[test]\n      #[serial]\n      fn $test_name(\n        (api_EthernetFramesRxIn, api_EthernetFramesTxIn)\n        in ($api_EthernetFramesRxIn_strat, $api_EthernetFramesTxIn_strat)\n      ) {\n        match $crate::bridge::test_api::testComputeCBwLV(api_EthernetFramesRxIn, api_EthernetFramesTxIn) {\n          $crate::bridge::test_api::HarnessResult::RejectedPrecondition => {\n            return Err(proptest::test_runner::TestCaseError::reject(\n              \"Precondition failed: invalid input combination\",\n            ))\n          }\n          $crate::bridge::test_api::HarnessResult::FailedPostcondition(e) => {\n            return Err(e)\n          }\n          $crate::bridge::test_api::HarnessResult::Passed => { }\n        }\n      }\n    }\n  };\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/bridge\/mod.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub mod extern_c_api;\npub mod test_api;\npub mod Firewall_Firewall_api;\npub mod Firewall_Firewall_GUMBOX;",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/bridge\/extern_c_api.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\n\/\/! C-interface for the component.\n\/\/! This code must be unsafe.\n\/\/! Assumptions about correctness are introduced and need to be verified by other means.\n\nuse data::*;\n\n#[cfg(test)]\nuse std::sync::Mutex;\n\n#[cfg(not(test))]\nextern \"C\" {\n  fn get_EthernetFramesTx(value: *mut SW::RawEthernetMessage) -> bool;\n  fn put_EthernetFramesRx(value: *mut SW::RawEthernetMessage) -> bool;\n}\n\npub fn unsafe_get_EthernetFramesTx() -> Option<SW::RawEthernetMessage>\n{\n  unsafe {\n    let value: *mut SW::RawEthernetMessage = &mut [0; SW::SW_RawEthernetMessage_DIM_0];\n    if (get_EthernetFramesTx(value)) {\n      return Some(*value);\n    } else {\n      return None;\n    }\n  }\n}\n\npub fn unsafe_put_EthernetFramesRx(value: &SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    return put_EthernetFramesRx(value as *const SW::RawEthernetMessage as *mut SW::RawEthernetMessage);\n  }\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Testing Versions\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n#[cfg(test)]\nlazy_static::lazy_static! {\n  \/\/ simulate the global C variables that point to the microkit shared memory regions.  In a full\n  \/\/ microkit system we would be able to mutate the shared memory for out ports since they're r\/w,\n  \/\/ but we couldn't do that for in ports since they are read-only\n  pub static ref IN_EthernetFramesTx: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);\n  pub static ref OUT_EthernetFramesRx: Mutex<Option<SW::RawEthernetMessage>> = Mutex::new(None);\n}\n\n#[cfg(test)]\npub fn initialize_test_globals() {\n  unsafe {\n    *IN_EthernetFramesTx.lock().unwrap() = None;\n    *OUT_EthernetFramesRx.lock().unwrap() = None;\n  }\n}\n\n#[cfg(test)]\npub fn get_EthernetFramesTx(value: *mut SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    match *IN_EthernetFramesTx.lock().unwrap() {\n      Some(v) => {\n        *value = v;\n        return true;\n      },\n      None => return false,\n    }\n  }\n}\n\n#[cfg(test)]\npub fn put_EthernetFramesRx(value: *mut SW::RawEthernetMessage) -> bool\n{\n  unsafe {\n    *OUT_EthernetFramesRx.lock().unwrap() = Some(*value);\n    return true;\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/bridge\/LowLevelEthernetDriver_LowLevelEthernetDriver_api.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse vstd::prelude::*;\nuse data::*;\nuse super::extern_c_api as extern_api;\n\nverus! {\n  pub trait LowLevelEthernetDriver_LowLevelEthernetDriver_Api {}\n\n  pub trait LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api: LowLevelEthernetDriver_LowLevelEthernetDriver_Api {\n    #[verifier::external_body]\n    fn unverified_put_EthernetFramesRx(\n      &mut self,\n      value: SW::RawEthernetMessage)\n    {\n      extern_api::unsafe_put_EthernetFramesRx(&value);\n    }\n  }\n\n  pub trait LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api: LowLevelEthernetDriver_LowLevelEthernetDriver_Api {\n    #[verifier::external_body]\n    fn unverified_get_EthernetFramesTx(\n      &mut self,\n      value: &Ghost<Option<SW::RawEthernetMessage>>) -> (res : Option<SW::RawEthernetMessage>)\n      ensures\n        res == value@\n    {\n      return extern_api::unsafe_get_EthernetFramesTx();\n    }\n  }\n\n  pub trait LowLevelEthernetDriver_LowLevelEthernetDriver_Full_Api: LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api + LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api {}\n\n  pub struct LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API: LowLevelEthernetDriver_LowLevelEthernetDriver_Api> {\n    pub api: API,\n\n    pub ghost EthernetFramesTx: Option<SW::RawEthernetMessage>,\n    pub ghost EthernetFramesRx: Option<SW::RawEthernetMessage>\n  }\n\n  impl<API: LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api> LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API> {\n    pub fn put_EthernetFramesRx(\n      &mut self,\n      value: SW::RawEthernetMessage)\n      ensures\n        self.EthernetFramesRx == Some(value),\n        old(self).EthernetFramesTx == self.EthernetFramesTx\n    {\n      self.api.unverified_put_EthernetFramesRx(value);\n      self.EthernetFramesRx = Some(value);\n    }\n  }\n\n  impl<API: LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api> LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API> {\n    pub fn get_EthernetFramesTx(&mut self) -> (res : Option<SW::RawEthernetMessage>)\n      ensures\n        old(self).EthernetFramesRx == self.EthernetFramesRx,\n        old(self).EthernetFramesTx == self.EthernetFramesTx,\n        res == self.EthernetFramesTx\n    {\n      self.api.unverified_get_EthernetFramesTx(&Ghost(self.EthernetFramesTx))\n    }\n  }\n\n  pub struct LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api;\n  impl LowLevelEthernetDriver_LowLevelEthernetDriver_Api for LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {}\n  impl LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api for LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {}\n\n  pub const fn init_api() -> LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api> {\n    return LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api {\n      api: LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api {},\n\n      EthernetFramesTx: None,\n      EthernetFramesRx: None\n    }\n  }\n\n  pub struct LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api;\n  impl LowLevelEthernetDriver_LowLevelEthernetDriver_Api for LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}\n  impl LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api for LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}\n  impl LowLevelEthernetDriver_LowLevelEthernetDriver_Get_Api for LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}\n  impl LowLevelEthernetDriver_LowLevelEthernetDriver_Full_Api for LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {}\n\n  pub const fn compute_api() -> LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api> {\n    return LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api {\n      api: LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api {},\n\n      EthernetFramesTx: None,\n      EthernetFramesRx: None\n    }\n  }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/bridge\/test_api.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg(test)]\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse crate::bridge::extern_c_api as extern_api;\nuse data::*;\n\nuse proptest::prelude::*;\n\npub struct PreStateContainer {\n  pub api_EthernetFramesTx: Option<SW::RawEthernetMessage>\n}\n\npub fn put_concrete_inputs_container(container: PreStateContainer)\n{\n  put_EthernetFramesTx(container.api_EthernetFramesTx);\n}\n\npub fn put_concrete_inputs(EthernetFramesTx: Option<SW::RawEthernetMessage>)\n{\n  put_EthernetFramesTx(EthernetFramesTx);\n}\n\n\/\/\/ setter for IN EventDataPort\npub fn put_EthernetFramesTx(value: Option<SW::RawEthernetMessage>)\n{\n  *extern_api::IN_EthernetFramesTx.lock().unwrap() = value\n}\n\n\/\/\/ getter for OUT EventDataPort\npub fn get_EthernetFramesRx() -> Option<SW::RawEthernetMessage>\n{\n  return extern_api::OUT_EthernetFramesRx.lock().unwrap().clone()\n}\n\npub fn option_strategy_default\n  <T: Clone + std::fmt::Debug, \n   S:  Strategy<Value = T>> (base: S) -> impl Strategy<Value = Option<T>>\n{\n  option_strategy_bias(1, base)\n}\n\npub fn option_strategy_bias\n  <T: Clone + std::fmt::Debug, \n   S:  Strategy<Value = T>> (\n  bias: u32,\n  base: S) -> impl Strategy<Value = Option<T>>\n{\n  prop_oneof![\n    bias => base.prop_map(Some),\n    1 => Just(None),\n  ]\n}\n\npub fn SW_RawEthernetMessage_strategy_default() -> impl Strategy<Value = SW::RawEthernetMessage>\n{\n  SW_RawEthernetMessage_strategy_cust(any::<u8>())\n}\n\npub fn SW_RawEthernetMessage_strategy_cust<u8_strategy: Strategy<Value = u8>> (base_strategy: u8_strategy) -> impl Strategy<Value = SW::RawEthernetMessage>\n{\n  proptest::collection::vec(base_strategy, SW::SW_RawEthernetMessage_DIM_0)\n    .prop_map(|v| {\n      let boxed: Box<[u8; SW::SW_RawEthernetMessage_DIM_0]> = v.into_boxed_slice().try_into().unwrap();\n      *boxed\n  })\n}\n\npub fn SW_u16Array_strategy_default() -> impl Strategy<Value = SW::u16Array>\n{\n  SW_u16Array_strategy_cust(any::<u16>())\n}\n\npub fn SW_u16Array_strategy_cust<u16_strategy: Strategy<Value = u16>> (base_strategy: u16_strategy) -> impl Strategy<Value = SW::u16Array>\n{\n  proptest::collection::vec(base_strategy, SW::SW_u16Array_DIM_0)\n    .prop_map(|v| {\n      let boxed: Box<[u16; SW::SW_u16Array_DIM_0]> = v.into_boxed_slice().try_into().unwrap();\n      *boxed\n  })\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/bridge\/mod.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub mod extern_c_api;\npub mod test_api;\npub mod LowLevelEthernetDriver_LowLevelEthernetDriver_api;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/lib.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg_attr(not(test), no_std)]\n\n#![allow(non_camel_case_types)]\n#![allow(non_snake_case)]\n#![allow(non_upper_case_globals)]\n\n#![allow(dead_code)]\n#![allow(static_mut_refs)]\n#![allow(unused_imports)]\n#![allow(unused_macros)]\n#![allow(unused_parens)]\n#![allow(unused_unsafe)]\n#![allow(unused_variables)]\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nmod bridge;\nmod component;\nmod logging;\nmod tests;\n\nuse crate::bridge::ArduPilot_ArduPilot_api::{self as api, *};\nuse crate::component::ArduPilot_ArduPilot_app::*;\nuse data::*;\n\nstatic mut app: Option<ArduPilot_ArduPilot> = None;\nstatic mut init_api: ArduPilot_ArduPilot_Application_Api<ArduPilot_ArduPilot_Initialization_Api> = api::init_api();\nstatic mut compute_api: ArduPilot_ArduPilot_Application_Api<ArduPilot_ArduPilot_Compute_Api> = api::compute_api();\n\n#[no_mangle]\npub extern \"C\" fn ArduPilot_ArduPilot_initialize() {\n  logging::init_logging();\n\n  unsafe {\n    #[cfg(test)]\n    crate::bridge::extern_c_api::initialize_test_globals();\n\n    let mut _app = ArduPilot_ArduPilot::new();\n    _app.initialize(&mut init_api);\n    app = Some(_app);\n  }\n}\n\n#[no_mangle]\npub extern \"C\" fn ArduPilot_ArduPilot_timeTriggered() {\n  unsafe {\n    if let Some(_app) = app.as_mut() {\n      _app.timeTriggered(&mut compute_api);\n    } else {\n      panic!(\"Unexpected: app is None\");\n    }\n  }\n}\n\n#[no_mangle]\npub extern \"C\" fn ArduPilot_ArduPilot_notify(channel: microkit_channel) {\n  unsafe {\n    if let Some(_app) = app.as_mut() {\n      _app.notify(channel);\n    } else {\n      panic!(\"Unexpected: app is None\");\n    }\n  }\n}\n\n\/\/ Need a Panic handler in a no_std environment\n#[panic_handler]\n#[cfg(not(test))]\nfn panic(info: &core::panic::PanicInfo) -> ! {\n  log::error!(\"PANIC: {info:#?}\");\n  loop {}\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/logging.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten if codegen is rerun\n\nuse log::LevelFilter;\n\n#[cfg(feature = \"sel4\")]\nuse sel4::debug_print;\n\n#[cfg(feature = \"sel4\")]\nuse sel4_logging::{Logger, LoggerBuilder};\n\n#[cfg(test)]\nuse std::sync::Once;\n\nconst LOG_LEVEL: LevelFilter = {\n  \/\/ LevelFilter::Off \/\/ lowest level of logging\n  \/\/ LevelFilter::Error\n  \/\/ LevelFilter::Warn\n  \/\/ LevelFilter::Info\n  \/\/ LevelFilter::Debug\n  LevelFilter::Trace \/\/ highest level of logging\n};\n\n#[cfg(feature = \"sel4\")]\npub static LOGGER: Logger = LoggerBuilder::const_default()\n    .level_filter(LOG_LEVEL)\n    .write(|s| debug_print!(\"{}\", s))\n    .build();\n\n#[cfg(test)]\nstatic INIT: Once = Once::new();\n\npub fn init_logging() {\n    #[cfg(all(feature = \"sel4\", not(test)))]\n    {\n        LOGGER.set().unwrap();\n    }\n\n    #[cfg(test)]\n    {\n        INIT.call_once(|| {\n            let _ = env_logger::builder()\n                .is_test(cfg!(test))\n                .filter_level(LOG_LEVEL)\n                .try_init();\n        });\n    }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/component\/ArduPilot_ArduPilot_app.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten if codegen is rerun\n\nuse data::*;\nuse crate::bridge::ArduPilot_ArduPilot_api::*;\n\npub struct ArduPilot_ArduPilot {\n}\n\nimpl ArduPilot_ArduPilot {\n  pub fn new() -> Self\n  {\n    Self {\n    }\n  }\n\n  pub fn initialize<API: ArduPilot_ArduPilot_Put_Api> (\n    &mut self,\n    api: &mut ArduPilot_ArduPilot_Application_Api<API>)\n  {\n    log_info(\"initialize entrypoint invoked\");\n  }\n\n  pub fn timeTriggered<API: ArduPilot_ArduPilot_Full_Api> (\n    &mut self,\n    api: &mut ArduPilot_ArduPilot_Application_Api<API>)\n  {\n    log_info(\"compute entrypoint invoked\");\n  }\n\n  pub fn notify(\n    &mut self,\n    channel: microkit_channel)\n  {\n    \/\/ this method is called when the monitor does not handle the passed in channel\n    match channel {\n      _ => {\n        log_warn_channel(channel)\n      }\n    }\n  }\n}\n\npub fn log_info(msg: &str)\n{\n  log::info!(\"{0}\", msg);\n}\n\npub fn log_warn_channel(channel: u32)\n{\n  log::warn!(\"Unexpected channel: {0}\", channel);\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/component\/mod.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub mod ArduPilot_ArduPilot_app;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/src\/tests.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg(test)]\n\n\/\/ This file will not be overwritten if codegen is rerun\n\nmod tests {\n  \/\/ NOTE: need to run tests sequentially to prevent race conditions\n  \/\/       on the app and the testing apis which are static\n  use serial_test::serial;\n\n  use crate::bridge::test_api;\n  use data::*;\n\n  #[test]\n  #[serial]\n  fn test_initialization() {\n    crate::ArduPilot_ArduPilot_initialize();\n}\n\n  #[test]\n  #[serial]\n  fn test_compute() {\n    crate::ArduPilot_ArduPilot_initialize();\n    crate::ArduPilot_ArduPilot_timeTriggered();\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/Cargo.toml",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\n[package]\nname = \"ArduPilot_ArduPilot\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nlog = \"0.4.28\"\nsel4 = { git = \"https:\/\/github.com\/seL4\/rust-sel4\", features = [\"single-threaded\"], optional = true }\nsel4-logging = { git = \"https:\/\/github.com\/seL4\/rust-sel4\", optional = true }\nlinux-raw-sys = { version = \"0.11.0\", default-features = false }\nvstd = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", default-features=false, tag=\"release\/0.2025.09.25.04e8687\"}\nverus_builtin = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", tag=\"release\/0.2025.09.25.04e8687\" }\nverus_builtin_macros = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", tag=\"release\/0.2025.09.25.04e8687\" }\ndata = { path = \"..\/data\" }\n\n[dev-dependencies]\nlazy_static = \"1.5.0\"\nonce_cell = \"1.21.3\"\nserial_test = \"3.2.0\"\nproptest = \"1.8.0\"\nenv_logger = \"0.11.8\"\n\n[lib]\npath = \"src\/lib.rs\"\ncrate-type = [\"staticlib\"]\n\n[features]\nsel4 = [\"dep:sel4\", \"dep:sel4-logging\" ]\n\n[package.metadata.verus]\nverify = true\n\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/Makefile",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\nmicrokit_sdk_config_dir := $(MICROKIT_SDK)\/board\/$(MICROKIT_BOARD)\/$(MICROKIT_CONFIG)\n\nsel4_include_dirs := $(firstword $(wildcard $(microkit_sdk_config_dir)\/include \\\n                                            $(microkit_sdk_config_dir)\/debug\/include))\n\nENV_VARS = RUSTC_BOOTSTRAP=1\n\nBUILD_ENV_VARS = $(ENV_VARS) \\\n                 SEL4_INCLUDE_DIRS=$(abspath $(sel4_include_dirs))\n\nCARGO_FLAGS = -Z build-std=core,alloc,compiler_builtins \\\n              -Z build-std-features=compiler-builtins-mem \\\n              --target aarch64-unknown-none\n\nall: build-verus-release\n\nbuild-verus-release:\n\t$(BUILD_ENV_VARS) cargo-verus build --features sel4 $(CARGO_FLAGS) --release\n\nbuild-verus:\n\t$(BUILD_ENV_VARS) cargo-verus build --features sel4 $(CARGO_FLAGS)\n\nbuild-release:\n\t$(BUILD_ENV_VARS) cargo build --features sel4 $(CARGO_FLAGS) --release\n\nbuild:\n\t$(BUILD_ENV_VARS) cargo build --features sel4 $(CARGO_FLAGS)\n\nverus:\n\t$(ENV_VARS) cargo-verus verify $(CARGO_FLAGS)\n\nverus-json:\n\t$(ENV_VARS) cargo-verus verify $(CARGO_FLAGS) -- --output-json --time > verus_results.json\n\n# Test Example:\n#   Run all unit tests\n#   Usage: make test\n#\n#   Run only unit tests whose name contains 'proptest'\n#   Usage: make test args=proptest\n\ntest-release:\n\tcargo test $(args) --release\n\ntest:\n\tcargo test $(args)\n\n# Coverage Example:\n#   Generate a test coverage report combining the results of all unit tests\n#   Usage: make coverage\n#\n#   Generate a test coverage report for unit tests whose name contains 'proptest'\n#   Usage: make coverage args=proptest\n\ncoverage:\n\tcargo install grcov\n\t@exists=0; if [ -f target\/coverage\/report\/index.html ]; then exists=1; fi; \\\n\trm -rf target\/coverage; \\\n\tCARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='target\/coverage\/cargo-test-%p-%m.profraw' \\\n\tcargo test $(args); \\\n\tgrcov . --binary-path .\/target\/debug\/deps\/ -s . -t html --branch --ignore-not-existing -o target\/coverage\/report; \\\n\tif [ $$exists -eq 0 ]; then open target\/coverage\/report\/index.html; fi\n\nclean:\n\tcargo clean\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/ArduPilot_ArduPilot\/rust-toolchain.toml",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\n[toolchain]\nchannel = \"nightly\"\ncomponents = [ \"rustfmt\", \"rust-src\", \"rustc-dev\", \"llvm-tools-preview\", \"rust-analyzer\" ]\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/lib.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg_attr(not(test), no_std)]\n\n#![allow(non_camel_case_types)]\n#![allow(non_snake_case)]\n#![allow(non_upper_case_globals)]\n\n#![allow(dead_code)]\n#![allow(static_mut_refs)]\n#![allow(unused_imports)]\n#![allow(unused_macros)]\n#![allow(unused_parens)]\n#![allow(unused_unsafe)]\n#![allow(unused_variables)]\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nmod bridge;\nmod component;\nmod logging;\nmod tests;\n\nuse crate::bridge::Firewall_Firewall_api::{self as api, *};\nuse crate::component::Firewall_Firewall_app::*;\nuse data::*;\n\nstatic mut app: Option<Firewall_Firewall> = None;\nstatic mut init_api: Firewall_Firewall_Application_Api<Firewall_Firewall_Initialization_Api> = api::init_api();\nstatic mut compute_api: Firewall_Firewall_Application_Api<Firewall_Firewall_Compute_Api> = api::compute_api();\n\n#[no_mangle]\npub extern \"C\" fn Firewall_Firewall_initialize() {\n  logging::init_logging();\n\n  unsafe {\n    #[cfg(test)]\n    crate::bridge::extern_c_api::initialize_test_globals();\n\n    let mut _app = Firewall_Firewall::new();\n    _app.initialize(&mut init_api);\n    app = Some(_app);\n  }\n}\n\n#[no_mangle]\npub extern \"C\" fn Firewall_Firewall_timeTriggered() {\n  unsafe {\n    if let Some(_app) = app.as_mut() {\n      _app.timeTriggered(&mut compute_api);\n    } else {\n      panic!(\"Unexpected: app is None\");\n    }\n  }\n}\n\n#[no_mangle]\npub extern \"C\" fn Firewall_Firewall_notify(channel: microkit_channel) {\n  unsafe {\n    if let Some(_app) = app.as_mut() {\n      _app.notify(channel);\n    } else {\n      panic!(\"Unexpected: app is None\");\n    }\n  }\n}\n\n\/\/ Need a Panic handler in a no_std environment\n#[panic_handler]\n#[cfg(not(test))]\nfn panic(info: &core::panic::PanicInfo) -> ! {\n  log::error!(\"PANIC: {info:#?}\");\n  loop {}\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/logging.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten if codegen is rerun\n\nuse log::LevelFilter;\n\n#[cfg(feature = \"sel4\")]\nuse sel4::debug_print;\n\n#[cfg(feature = \"sel4\")]\nuse sel4_logging::{Logger, LoggerBuilder};\n\n#[cfg(test)]\nuse std::sync::Once;\n\nconst LOG_LEVEL: LevelFilter = {\n  \/\/ LevelFilter::Off \/\/ lowest level of logging\n  \/\/ LevelFilter::Error\n  \/\/ LevelFilter::Warn\n  \/\/ LevelFilter::Info\n  \/\/ LevelFilter::Debug\n  LevelFilter::Trace \/\/ highest level of logging\n};\n\n#[cfg(feature = \"sel4\")]\npub static LOGGER: Logger = LoggerBuilder::const_default()\n    .level_filter(LOG_LEVEL)\n    .write(|s| debug_print!(\"{}\", s))\n    .build();\n\n#[cfg(test)]\nstatic INIT: Once = Once::new();\n\npub fn init_logging() {\n    #[cfg(all(feature = \"sel4\", not(test)))]\n    {\n        LOGGER.set().unwrap();\n    }\n\n    #[cfg(test)]\n    {\n        INIT.call_once(|| {\n            let _ = env_logger::builder()\n                .is_test(cfg!(test))\n                .filter_level(LOG_LEVEL)\n                .try_init();\n        });\n    }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/component\/Firewall_Firewall_app.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten if codegen is rerun\n\nuse data::*;\nuse crate::bridge::Firewall_Firewall_api::*;\nuse vstd::prelude::*;\n\nverus! {\n\n  pub struct Firewall_Firewall {\n  }\n\n  impl Firewall_Firewall {\n    pub fn new() -> Self\n    {\n      Self {\n      }\n    }\n\n    pub fn initialize<API: Firewall_Firewall_Put_Api> (\n      &mut self,\n      api: &mut Firewall_Firewall_Application_Api<API>)\n    {\n      log_info(\"initialize entrypoint invoked\");\n    }\n\n    pub fn timeTriggered<API: Firewall_Firewall_Full_Api> (\n      &mut self,\n      api: &mut Firewall_Firewall_Application_Api<API>)\n      requires\n        \/\/ BEGIN MARKER TIME TRIGGERED REQUIRES\n        \/\/ assume AADL_Requirement\n        \/\/   All outgoing event ports must be empty\n        old(api).EthernetFramesRxOut.is_none(),\n        old(api).EthernetFramesTxOut.is_none()\n        \/\/ END MARKER TIME TRIGGERED REQUIRES\n      ensures\n        \/\/ BEGIN MARKER TIME TRIGGERED ENSURES\n        \/\/ guarantee rx\n        (api.EthernetFramesRxIn.is_some() ==>\n          (api.EthernetFramesRxOut.is_some() ==>\n            Self::should_allow_inbound_frame_rx(api.EthernetFramesRxIn.unwrap(),true) &&\n              (api.EthernetFramesRxIn.unwrap() == api.EthernetFramesRxOut.unwrap())) &&\n            (api.EthernetFramesRxOut.is_none() ==> Self::should_allow_inbound_frame_rx(api.EthernetFramesRxIn.unwrap(),false))) &&\n          (!(api.EthernetFramesRxIn.is_some()) ==> api.EthernetFramesRxOut.is_none()),\n        \/\/ guarantee tx\n        (api.EthernetFramesTxIn.is_some() ==>\n          (api.EthernetFramesTxOut.is_some() ==>\n            Self::should_allow_outbound_frame_tx(api.EthernetFramesTxIn.unwrap(),true) &&\n              (api.EthernetFramesTxIn.unwrap() == api.EthernetFramesTxOut.unwrap())) &&\n            (api.EthernetFramesTxOut.is_none() ==> Self::should_allow_outbound_frame_tx(api.EthernetFramesTxIn.unwrap(),false))) &&\n          (!(api.EthernetFramesTxIn.is_some()) ==> api.EthernetFramesTxOut.is_none())\n        \/\/ END MARKER TIME TRIGGERED ENSURES\n    {\n      log_info(\"compute entrypoint invoked\");\n    }\n\n    pub fn notify(\n      &mut self,\n      channel: microkit_channel)\n    {\n      \/\/ this method is called when the monitor does not handle the passed in channel\n      match channel {\n        _ => {\n          log_warn_channel(channel)\n        }\n      }\n    }\n\n    \/\/ BEGIN MARKER GUMBO METHODS\n    pub open spec fn TCP_ALLOWED_PORTS() -> SW::u16Array\n    {\n      [5760u16, 0u16, 0u16, 0u16]\n    }\n\n    pub open spec fn UDP_ALLOWED_PORTS() -> SW::u16Array\n    {\n      [68u16, 0u16, 0u16, 0u16]\n    }\n\n    pub open spec fn two_bytes_to_u16(\n      byte0: u8,\n      byte1: u8) -> u16\n    {\n      (((byte0) as u16) * 256u16 + ((byte1) as u16)) as u16\n    }\n\n    pub open spec fn frame_is_wellformed_eth2(frame: SW::RawEthernetMessage) -> bool\n    {\n      if (!((frame[12] >= 6u8) &&\n        (frame[13] >= 0u8))) {\n        false\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn frame_has_ipv4(frame: SW::RawEthernetMessage) -> bool\n    {\n      Self::frame_is_wellformed_eth2(frame) ==>\n        (if (!((frame[12] == 8u8) &&\n          (frame[13] == 0u8))) {\n          false\n        } else {\n          true\n        })\n    }\n\n    pub open spec fn frame_has_ipv4_tcp(frame: SW::RawEthernetMessage) -> bool\n    {\n      Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) ==>\n        (if (frame[23] != 6u8) {\n          false\n        } else {\n          true\n        })\n    }\n\n    pub open spec fn frame_has_ipv4_udp(frame: SW::RawEthernetMessage) -> bool\n    {\n      Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) ==>\n        (if (!(frame[23] == 17u8)) {\n          false\n        } else {\n          true\n        })\n    }\n\n    pub open spec fn frame_has_ipv4_tcp_on_allowed_port(frame: SW::RawEthernetMessage) -> bool\n    {\n      Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) &&\n        Self::frame_has_ipv4_tcp(frame) ==>\n        (Self::TCP_ALLOWED_PORTS()[0] == Self::two_bytes_to_u16(frame[36],frame[37]))\n    }\n\n    pub open spec fn frame_has_ipv4_tcp_on_allowed_port_quant(frame: SW::RawEthernetMessage) -> bool\n    {\n      exists|i:int| 0 <= i < Self::TCP_ALLOWED_PORTS().len() && Self::TCP_ALLOWED_PORTS()[i] == Self::two_bytes_to_u16(frame[36],frame[37])\n    }\n\n    pub open spec fn frame_has_ipv4_udp_on_allowed_port(frame: SW::RawEthernetMessage) -> bool\n    {\n      Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) &&\n        Self::frame_has_ipv4_udp(frame) ==>\n        (Self::UDP_ALLOWED_PORTS()[0] == Self::two_bytes_to_u16(frame[36],frame[37]))\n    }\n\n    pub open spec fn frame_has_ipv4_udp_on_allowed_port_quant(frame: SW::RawEthernetMessage) -> bool\n    {\n      exists|i:int| 0 <= i < Self::UDP_ALLOWED_PORTS().len() && Self::UDP_ALLOWED_PORTS()[i] == Self::two_bytes_to_u16(frame[36],frame[37])\n    }\n\n    pub open spec fn frame_has_ipv6(frame: SW::RawEthernetMessage) -> bool\n    {\n      Self::frame_is_wellformed_eth2(frame) ==>\n        (if (!((frame[12] == 134u8) &&\n          (frame[13] == 221u8))) {\n          false\n        } else {\n          true\n        })\n    }\n\n    pub open spec fn frame_has_arp(frame: SW::RawEthernetMessage) -> bool\n    {\n      Self::frame_is_wellformed_eth2(frame) ==>\n        (if (!((frame[12] == 8u8) &&\n          (frame[13] == 6u8))) {\n          false\n        } else {\n          true\n        })\n    }\n\n    pub open spec fn hlr_1_1(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (!(Self::frame_is_wellformed_eth2(frame))) {\n        should_allow == false\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_1_2(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv6(frame)) {\n        should_allow == false\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_1_3(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) &&\n        !(Self::frame_has_ipv4_tcp(frame) || Self::frame_has_ipv4_udp(frame))) {\n        should_allow == false\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_1_4(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) &&\n        Self::frame_has_ipv4_tcp(frame) &&\n        !(Self::frame_has_ipv4_tcp_on_allowed_port(frame))) {\n        should_allow == false\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_1_5(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) &&\n        Self::frame_has_ipv4_udp(frame) &&\n        !(Self::frame_has_ipv4_udp_on_allowed_port(frame))) {\n        should_allow == false\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_1_6(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_arp(frame)) {\n        should_allow == true\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_1_7(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) &&\n        Self::frame_has_ipv4_tcp(frame) &&\n        Self::frame_has_ipv4_tcp_on_allowed_port(frame)) {\n        should_allow == true\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_1_8(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame) &&\n        Self::frame_has_ipv4_udp(frame) &&\n        Self::frame_has_ipv4_udp_on_allowed_port(frame)) {\n        should_allow == true\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn should_allow_inbound_frame_rx(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      Self::hlr_1_1(frame,should_allow) && Self::hlr_1_2(frame,should_allow) &&\n        Self::hlr_1_3(frame,should_allow) &&\n        Self::hlr_1_4(frame,should_allow) &&\n        Self::hlr_1_5(frame,should_allow) &&\n        Self::hlr_1_6(frame,should_allow) &&\n        Self::hlr_1_7(frame,should_allow) &&\n        Self::hlr_1_8(frame,should_allow)\n    }\n\n    pub open spec fn hlr_2_1(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (!(Self::frame_is_wellformed_eth2(frame))) {\n        should_allow == false\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_2_2(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv6(frame)) {\n        should_allow == false\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_2_3(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_arp(frame)) {\n        should_allow == true\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn hlr_2_4(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      if (Self::frame_is_wellformed_eth2(frame) && Self::frame_has_ipv4(frame)) {\n        should_allow == true\n      } else {\n        true\n      }\n    }\n\n    pub open spec fn should_allow_outbound_frame_tx(\n      frame: SW::RawEthernetMessage,\n      should_allow: bool) -> bool\n    {\n      Self::hlr_2_1(frame,should_allow) && Self::hlr_2_2(frame,should_allow) &&\n        Self::hlr_2_3(frame,should_allow) &&\n        Self::hlr_2_4(frame,should_allow)\n    }\n    \/\/ END MARKER GUMBO METHODS\n  }\n\n  #[verifier::external_body]\n  pub fn log_info(msg: &str)\n  {\n    log::info!(\"{0}\", msg);\n  }\n\n  #[verifier::external_body]\n  pub fn log_warn_channel(channel: u32)\n  {\n    log::warn!(\"Unexpected channel: {0}\", channel);\n  }\n\n}\n",
          "markers" : [
            {
              "type" : "TestMarker",
              "beginMarker" : "\/\/ BEGIN MARKER GUMBO METHODS",
              "endMarker" : "\/\/ END MARKER GUMBO METHODS"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "\/\/ BEGIN MARKER TIME TRIGGERED REQUIRES",
              "endMarker" : "\/\/ END MARKER TIME TRIGGERED REQUIRES"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "\/\/ BEGIN MARKER TIME TRIGGERED ENSURES",
              "endMarker" : "\/\/ END MARKER TIME TRIGGERED ENSURES"
            }
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/component\/mod.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub mod Firewall_Firewall_app;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/tests.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg(test)]\n\n\/\/ This file will not be overwritten if codegen is rerun\n\nmod tests {\n  \/\/ NOTE: need to run tests sequentially to prevent race conditions\n  \/\/       on the app and the testing apis which are static\n  use serial_test::serial;\n\n  use crate::bridge::test_api;\n  use data::*;\n\n  #[test]\n  #[serial]\n  fn test_initialization() {\n    crate::Firewall_Firewall_initialize();\n}\n\n  #[test]\n  #[serial]\n  fn test_compute() {\n    crate::Firewall_Firewall_initialize();\n    crate::Firewall_Firewall_timeTriggered();\n  }\n}\n\nmod GUMBOX_tests {\n  use serial_test::serial;\n  use proptest::prelude::*;\n\n  use crate::bridge::test_api;\n  use crate::testInitializeCB_macro;\n  use crate::testComputeCB_macro;\n  use crate::testComputeCBwLV_macro;\n\n  \/\/ number of valid (i.e., non-rejected) test cases that must be executed for the compute method.\n  const numValidComputeTestCases: u32 = 100;\n\n  \/\/ how many total test cases (valid + rejected) that may be attempted.\n  \/\/   0 means all inputs must satisfy the precondition (if present),\n  \/\/   5 means at most 5 rejected inputs are allowed per valid test case\n  const computeRejectRatio: u32 = 5;\n\n  const verbosity: u32 = 2;\n\n  testInitializeCB_macro! {\n    prop_testInitializeCB_macro, \/\/ test name\n    config: ProptestConfig { \/\/ proptest configuration, built by overriding fields from default config\n      cases: numValidComputeTestCases,\n      max_global_rejects: numValidComputeTestCases * computeRejectRatio,\n      verbose: verbosity,\n      ..ProptestConfig::default()\n    }\n  }\n\n  testComputeCB_macro! {\n    prop_testComputeCB_macro, \/\/ test name\n    config: ProptestConfig { \/\/ proptest configuration, built by overriding fields from default config\n      cases: numValidComputeTestCases,\n      max_global_rejects: numValidComputeTestCases * computeRejectRatio,\n      verbose: verbosity,\n      ..ProptestConfig::default()\n    },\n    \/\/ strategies for generating each component input\n    api_EthernetFramesRxIn: test_api::option_strategy_default(test_api::SW_RawEthernetMessage_strategy_default()),\n    api_EthernetFramesTxIn: test_api::option_strategy_default(test_api::SW_RawEthernetMessage_strategy_default())\n  }\n\n  testComputeCBwLV_macro! {\n    prop_testComputeCBwLV_macro, \/\/ test name\n    config: ProptestConfig { \/\/ proptest configuration, built by overriding fields from default config\n      cases: numValidComputeTestCases,\n      max_global_rejects: numValidComputeTestCases * computeRejectRatio,\n      verbose: verbosity,\n      ..ProptestConfig::default()\n    },\n    \/\/ strategies for generating each component input\n    api_EthernetFramesRxIn: test_api::option_strategy_default(test_api::SW_RawEthernetMessage_strategy_default()),\n    api_EthernetFramesTxIn: test_api::option_strategy_default(test_api::SW_RawEthernetMessage_strategy_default())\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/Cargo.toml",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\n[package]\nname = \"Firewall_Firewall\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nlog = \"0.4.28\"\nsel4 = { git = \"https:\/\/github.com\/seL4\/rust-sel4\", features = [\"single-threaded\"], optional = true }\nsel4-logging = { git = \"https:\/\/github.com\/seL4\/rust-sel4\", optional = true }\nlinux-raw-sys = { version = \"0.11.0\", default-features = false }\nvstd = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", default-features=false, tag=\"release\/0.2025.09.25.04e8687\"}\nverus_builtin = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", tag=\"release\/0.2025.09.25.04e8687\" }\nverus_builtin_macros = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", tag=\"release\/0.2025.09.25.04e8687\" }\ndata = { path = \"..\/data\" }\n\n[dev-dependencies]\nlazy_static = \"1.5.0\"\nonce_cell = \"1.21.3\"\nserial_test = \"3.2.0\"\nproptest = \"1.8.0\"\nenv_logger = \"0.11.8\"\n\n[lib]\npath = \"src\/lib.rs\"\ncrate-type = [\"staticlib\"]\n\n[features]\nsel4 = [\"dep:sel4\", \"dep:sel4-logging\" ]\n\n[package.metadata.verus]\nverify = true\n\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/Makefile",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\nmicrokit_sdk_config_dir := $(MICROKIT_SDK)\/board\/$(MICROKIT_BOARD)\/$(MICROKIT_CONFIG)\n\nsel4_include_dirs := $(firstword $(wildcard $(microkit_sdk_config_dir)\/include \\\n                                            $(microkit_sdk_config_dir)\/debug\/include))\n\nENV_VARS = RUSTC_BOOTSTRAP=1\n\nBUILD_ENV_VARS = $(ENV_VARS) \\\n                 SEL4_INCLUDE_DIRS=$(abspath $(sel4_include_dirs))\n\nCARGO_FLAGS = -Z build-std=core,alloc,compiler_builtins \\\n              -Z build-std-features=compiler-builtins-mem \\\n              --target aarch64-unknown-none\n\nall: build-verus-release\n\nbuild-verus-release:\n\t$(BUILD_ENV_VARS) cargo-verus build --features sel4 $(CARGO_FLAGS) --release\n\nbuild-verus:\n\t$(BUILD_ENV_VARS) cargo-verus build --features sel4 $(CARGO_FLAGS)\n\nbuild-release:\n\t$(BUILD_ENV_VARS) cargo build --features sel4 $(CARGO_FLAGS) --release\n\nbuild:\n\t$(BUILD_ENV_VARS) cargo build --features sel4 $(CARGO_FLAGS)\n\nverus:\n\t$(ENV_VARS) cargo-verus verify $(CARGO_FLAGS)\n\nverus-json:\n\t$(ENV_VARS) cargo-verus verify $(CARGO_FLAGS) -- --output-json --time > verus_results.json\n\n# Test Example:\n#   Run all unit tests\n#   Usage: make test\n#\n#   Run only unit tests whose name contains 'proptest'\n#   Usage: make test args=proptest\n\ntest-release:\n\tcargo test $(args) --release\n\ntest:\n\tcargo test $(args)\n\n# Coverage Example:\n#   Generate a test coverage report combining the results of all unit tests\n#   Usage: make coverage\n#\n#   Generate a test coverage report for unit tests whose name contains 'proptest'\n#   Usage: make coverage args=proptest\n\ncoverage:\n\tcargo install grcov\n\t@exists=0; if [ -f target\/coverage\/report\/index.html ]; then exists=1; fi; \\\n\trm -rf target\/coverage; \\\n\tCARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='target\/coverage\/cargo-test-%p-%m.profraw' \\\n\tcargo test $(args); \\\n\tgrcov . --binary-path .\/target\/debug\/deps\/ -s . -t html --branch --ignore-not-existing -o target\/coverage\/report; \\\n\tif [ $$exists -eq 0 ]; then open target\/coverage\/report\/index.html; fi\n\nclean:\n\tcargo clean\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/rust-toolchain.toml",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\n[toolchain]\nchannel = \"nightly\"\ncomponents = [ \"rustfmt\", \"rust-src\", \"rustc-dev\", \"llvm-tools-preview\", \"rust-analyzer\" ]\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/lib.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg_attr(not(test), no_std)]\n\n#![allow(non_camel_case_types)]\n#![allow(non_snake_case)]\n#![allow(non_upper_case_globals)]\n\n#![allow(dead_code)]\n#![allow(static_mut_refs)]\n#![allow(unused_imports)]\n#![allow(unused_macros)]\n#![allow(unused_parens)]\n#![allow(unused_unsafe)]\n#![allow(unused_variables)]\n\n\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nmod bridge;\nmod component;\nmod logging;\nmod tests;\n\nuse crate::bridge::LowLevelEthernetDriver_LowLevelEthernetDriver_api::{self as api, *};\nuse crate::component::LowLevelEthernetDriver_LowLevelEthernetDriver_app::*;\nuse data::*;\n\nstatic mut app: Option<LowLevelEthernetDriver_LowLevelEthernetDriver> = None;\nstatic mut init_api: LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<LowLevelEthernetDriver_LowLevelEthernetDriver_Initialization_Api> = api::init_api();\nstatic mut compute_api: LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<LowLevelEthernetDriver_LowLevelEthernetDriver_Compute_Api> = api::compute_api();\n\n#[no_mangle]\npub extern \"C\" fn LowLevelEthernetDriver_LowLevelEthernetDriver_initialize() {\n  logging::init_logging();\n\n  unsafe {\n    #[cfg(test)]\n    crate::bridge::extern_c_api::initialize_test_globals();\n\n    let mut _app = LowLevelEthernetDriver_LowLevelEthernetDriver::new();\n    _app.initialize(&mut init_api);\n    app = Some(_app);\n  }\n}\n\n#[no_mangle]\npub extern \"C\" fn LowLevelEthernetDriver_LowLevelEthernetDriver_timeTriggered() {\n  unsafe {\n    if let Some(_app) = app.as_mut() {\n      _app.timeTriggered(&mut compute_api);\n    } else {\n      panic!(\"Unexpected: app is None\");\n    }\n  }\n}\n\n#[no_mangle]\npub extern \"C\" fn LowLevelEthernetDriver_LowLevelEthernetDriver_notify(channel: microkit_channel) {\n  unsafe {\n    if let Some(_app) = app.as_mut() {\n      _app.notify(channel);\n    } else {\n      panic!(\"Unexpected: app is None\");\n    }\n  }\n}\n\n\/\/ Need a Panic handler in a no_std environment\n#[panic_handler]\n#[cfg(not(test))]\nfn panic(info: &core::panic::PanicInfo) -> ! {\n  log::error!(\"PANIC: {info:#?}\");\n  loop {}\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/logging.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten if codegen is rerun\n\nuse log::LevelFilter;\n\n#[cfg(feature = \"sel4\")]\nuse sel4::debug_print;\n\n#[cfg(feature = \"sel4\")]\nuse sel4_logging::{Logger, LoggerBuilder};\n\n#[cfg(test)]\nuse std::sync::Once;\n\nconst LOG_LEVEL: LevelFilter = {\n  \/\/ LevelFilter::Off \/\/ lowest level of logging\n  \/\/ LevelFilter::Error\n  \/\/ LevelFilter::Warn\n  \/\/ LevelFilter::Info\n  \/\/ LevelFilter::Debug\n  LevelFilter::Trace \/\/ highest level of logging\n};\n\n#[cfg(feature = \"sel4\")]\npub static LOGGER: Logger = LoggerBuilder::const_default()\n    .level_filter(LOG_LEVEL)\n    .write(|s| debug_print!(\"{}\", s))\n    .build();\n\n#[cfg(test)]\nstatic INIT: Once = Once::new();\n\npub fn init_logging() {\n    #[cfg(all(feature = \"sel4\", not(test)))]\n    {\n        LOGGER.set().unwrap();\n    }\n\n    #[cfg(test)]\n    {\n        INIT.call_once(|| {\n            let _ = env_logger::builder()\n                .is_test(cfg!(test))\n                .filter_level(LOG_LEVEL)\n                .try_init();\n        });\n    }\n}",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/component\/LowLevelEthernetDriver_LowLevelEthernetDriver_app.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ This file will not be overwritten if codegen is rerun\n\nuse data::*;\nuse crate::bridge::LowLevelEthernetDriver_LowLevelEthernetDriver_api::*;\n\npub struct LowLevelEthernetDriver_LowLevelEthernetDriver {\n}\n\nimpl LowLevelEthernetDriver_LowLevelEthernetDriver {\n  pub fn new() -> Self\n  {\n    Self {\n    }\n  }\n\n  pub fn initialize<API: LowLevelEthernetDriver_LowLevelEthernetDriver_Put_Api> (\n    &mut self,\n    api: &mut LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API>)\n  {\n    log_info(\"initialize entrypoint invoked\");\n  }\n\n  pub fn timeTriggered<API: LowLevelEthernetDriver_LowLevelEthernetDriver_Full_Api> (\n    &mut self,\n    api: &mut LowLevelEthernetDriver_LowLevelEthernetDriver_Application_Api<API>)\n  {\n    log_info(\"compute entrypoint invoked\");\n  }\n\n  pub fn notify(\n    &mut self,\n    channel: microkit_channel)\n  {\n    \/\/ this method is called when the monitor does not handle the passed in channel\n    match channel {\n      _ => {\n        log_warn_channel(channel)\n      }\n    }\n  }\n}\n\npub fn log_info(msg: &str)\n{\n  log::info!(\"{0}\", msg);\n}\n\npub fn log_warn_channel(channel: u32)\n{\n  log::warn!(\"Unexpected channel: {0}\", channel);\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/component\/mod.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\npub mod LowLevelEthernetDriver_LowLevelEthernetDriver_app;\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/src\/tests.rs",
        {
          "type" : "ITestResource",
          "content" : "#![cfg(test)]\n\n\/\/ This file will not be overwritten if codegen is rerun\n\nmod tests {\n  \/\/ NOTE: need to run tests sequentially to prevent race conditions\n  \/\/       on the app and the testing apis which are static\n  use serial_test::serial;\n\n  use crate::bridge::test_api;\n  use data::*;\n\n  #[test]\n  #[serial]\n  fn test_initialization() {\n    crate::LowLevelEthernetDriver_LowLevelEthernetDriver_initialize();\n}\n\n  #[test]\n  #[serial]\n  fn test_compute() {\n    crate::LowLevelEthernetDriver_LowLevelEthernetDriver_initialize();\n    crate::LowLevelEthernetDriver_LowLevelEthernetDriver_timeTriggered();\n  }\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/Cargo.toml",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\n[package]\nname = \"LowLevelEthernetDriver_LowLevelEthernetDriver\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nlog = \"0.4.28\"\nsel4 = { git = \"https:\/\/github.com\/seL4\/rust-sel4\", features = [\"single-threaded\"], optional = true }\nsel4-logging = { git = \"https:\/\/github.com\/seL4\/rust-sel4\", optional = true }\nlinux-raw-sys = { version = \"0.11.0\", default-features = false }\nvstd = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", default-features=false, tag=\"release\/0.2025.09.25.04e8687\"}\nverus_builtin = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", tag=\"release\/0.2025.09.25.04e8687\" }\nverus_builtin_macros = { git = \"https:\/\/github.com\/verus-lang\/verus.git\", tag=\"release\/0.2025.09.25.04e8687\" }\ndata = { path = \"..\/data\" }\n\n[dev-dependencies]\nlazy_static = \"1.5.0\"\nonce_cell = \"1.21.3\"\nserial_test = \"3.2.0\"\nproptest = \"1.8.0\"\nenv_logger = \"0.11.8\"\n\n[lib]\npath = \"src\/lib.rs\"\ncrate-type = [\"staticlib\"]\n\n[features]\nsel4 = [\"dep:sel4\", \"dep:sel4-logging\" ]\n\n[package.metadata.verus]\nverify = true\n\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/Makefile",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\nmicrokit_sdk_config_dir := $(MICROKIT_SDK)\/board\/$(MICROKIT_BOARD)\/$(MICROKIT_CONFIG)\n\nsel4_include_dirs := $(firstword $(wildcard $(microkit_sdk_config_dir)\/include \\\n                                            $(microkit_sdk_config_dir)\/debug\/include))\n\nENV_VARS = RUSTC_BOOTSTRAP=1\n\nBUILD_ENV_VARS = $(ENV_VARS) \\\n                 SEL4_INCLUDE_DIRS=$(abspath $(sel4_include_dirs))\n\nCARGO_FLAGS = -Z build-std=core,alloc,compiler_builtins \\\n              -Z build-std-features=compiler-builtins-mem \\\n              --target aarch64-unknown-none\n\nall: build-verus-release\n\nbuild-verus-release:\n\t$(BUILD_ENV_VARS) cargo-verus build --features sel4 $(CARGO_FLAGS) --release\n\nbuild-verus:\n\t$(BUILD_ENV_VARS) cargo-verus build --features sel4 $(CARGO_FLAGS)\n\nbuild-release:\n\t$(BUILD_ENV_VARS) cargo build --features sel4 $(CARGO_FLAGS) --release\n\nbuild:\n\t$(BUILD_ENV_VARS) cargo build --features sel4 $(CARGO_FLAGS)\n\nverus:\n\t$(ENV_VARS) cargo-verus verify $(CARGO_FLAGS)\n\nverus-json:\n\t$(ENV_VARS) cargo-verus verify $(CARGO_FLAGS) -- --output-json --time > verus_results.json\n\n# Test Example:\n#   Run all unit tests\n#   Usage: make test\n#\n#   Run only unit tests whose name contains 'proptest'\n#   Usage: make test args=proptest\n\ntest-release:\n\tcargo test $(args) --release\n\ntest:\n\tcargo test $(args)\n\n# Coverage Example:\n#   Generate a test coverage report combining the results of all unit tests\n#   Usage: make coverage\n#\n#   Generate a test coverage report for unit tests whose name contains 'proptest'\n#   Usage: make coverage args=proptest\n\ncoverage:\n\tcargo install grcov\n\t@exists=0; if [ -f target\/coverage\/report\/index.html ]; then exists=1; fi; \\\n\trm -rf target\/coverage; \\\n\tCARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='target\/coverage\/cargo-test-%p-%m.profraw' \\\n\tcargo test $(args); \\\n\tgrcov . --binary-path .\/target\/debug\/deps\/ -s . -t html --branch --ignore-not-existing -o target\/coverage\/report; \\\n\tif [ $$exists -eq 0 ]; then open target\/coverage\/report\/index.html; fi\n\nclean:\n\tcargo clean\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/LowLevelEthernetDriver_LowLevelEthernetDriver\/rust-toolchain.toml",
        {
          "type" : "ITestResource",
          "content" : "# This file will not be overwritten if codegen is rerun\n\n[toolchain]\nchannel = \"nightly\"\ncomponents = [ \"rustfmt\", \"rust-src\", \"rustc-dev\", \"llvm-tools-preview\", \"rust-analyzer\" ]\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "microkit\/crates\/Firewall_Firewall\/src\/bridge\/Firewall_Firewall_GUMBOX.rs",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Do not edit this file as it will be overwritten if codegen is rerun\n\nuse data::*;\n\nmacro_rules! implies {\n  ($lhs: expr, $rhs: expr) => {\n    !$lhs || $rhs\n  };\n}\n\nmacro_rules! impliesL {\n  ($lhs: expr, $rhs: expr) => {\n    !$lhs | $rhs\n  };\n}\n\npub fn TCP_ALLOWED_PORTS() -> SW::u16Array\n{\n  [5760u16, 0u16, 0u16, 0u16]\n}\n\npub fn UDP_ALLOWED_PORTS() -> SW::u16Array\n{\n  [68u16, 0u16, 0u16, 0u16]\n}\n\npub fn two_bytes_to_u16(\n  byte0: u8,\n  byte1: u8) -> u16\n{\n  ((byte0) as u16) * 256u16 + ((byte1) as u16)\n}\n\npub fn frame_is_wellformed_eth2(frame: SW::RawEthernetMessage) -> bool\n{\n  if (!((frame[12] >= 6u8) &&\n    (frame[13] >= 0u8))) {\n    false\n  } else {\n    true\n  }\n}\n\npub fn frame_has_ipv4(frame: SW::RawEthernetMessage) -> bool\n{\n  impliesL!(\n    frame_is_wellformed_eth2(frame),\n    (if (!((frame[12] == 8u8) &&\n      (frame[13] == 0u8))) {\n      false\n    } else {\n      true\n    }))\n}\n\npub fn frame_has_ipv4_tcp(frame: SW::RawEthernetMessage) -> bool\n{\n  impliesL!(\n    frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame),\n    (if (frame[23] != 6u8) {\n      false\n    } else {\n      true\n    }))\n}\n\npub fn frame_has_ipv4_udp(frame: SW::RawEthernetMessage) -> bool\n{\n  impliesL!(\n    frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame),\n    (if (!(frame[23] == 17u8)) {\n      false\n    } else {\n      true\n    }))\n}\n\npub fn frame_has_ipv4_tcp_on_allowed_port(frame: SW::RawEthernetMessage) -> bool\n{\n  impliesL!(\n    frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame) &&\n      frame_has_ipv4_tcp(frame),\n    (TCP_ALLOWED_PORTS()[0] == two_bytes_to_u16(frame[36],frame[37])))\n}\n\npub fn frame_has_ipv4_tcp_on_allowed_port_quant(frame: SW::RawEthernetMessage) -> bool\n{\n  (0..TCP_ALLOWED_PORTS().len()).any(|i| TCP_ALLOWED_PORTS()[i] == two_bytes_to_u16(frame[36],frame[37]))\n}\n\npub fn frame_has_ipv4_udp_on_allowed_port(frame: SW::RawEthernetMessage) -> bool\n{\n  impliesL!(\n    frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame) &&\n      frame_has_ipv4_udp(frame),\n    (UDP_ALLOWED_PORTS()[0] == two_bytes_to_u16(frame[36],frame[37])))\n}\n\npub fn frame_has_ipv4_udp_on_allowed_port_quant(frame: SW::RawEthernetMessage) -> bool\n{\n  (0..UDP_ALLOWED_PORTS().len()).any(|i| UDP_ALLOWED_PORTS()[i] == two_bytes_to_u16(frame[36],frame[37]))\n}\n\npub fn frame_has_ipv6(frame: SW::RawEthernetMessage) -> bool\n{\n  impliesL!(\n    frame_is_wellformed_eth2(frame),\n    (if (!((frame[12] == 134u8) &&\n      (frame[13] == 221u8))) {\n      false\n    } else {\n      true\n    }))\n}\n\npub fn frame_has_arp(frame: SW::RawEthernetMessage) -> bool\n{\n  impliesL!(\n    frame_is_wellformed_eth2(frame),\n    (if (!((frame[12] == 8u8) &&\n      (frame[13] == 6u8))) {\n      false\n    } else {\n      true\n    }))\n}\n\npub fn hlr_1_1(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (!(frame_is_wellformed_eth2(frame))) {\n    should_allow == false\n  } else {\n    true\n  }\n}\n\npub fn hlr_1_2(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_ipv6(frame)) {\n    should_allow == false\n  } else {\n    true\n  }\n}\n\npub fn hlr_1_3(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame) &&\n    !(frame_has_ipv4_tcp(frame) || frame_has_ipv4_udp(frame))) {\n    should_allow == false\n  } else {\n    true\n  }\n}\n\npub fn hlr_1_4(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame) &&\n    frame_has_ipv4_tcp(frame) &&\n    !(frame_has_ipv4_tcp_on_allowed_port(frame))) {\n    should_allow == false\n  } else {\n    true\n  }\n}\n\npub fn hlr_1_5(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame) &&\n    frame_has_ipv4_udp(frame) &&\n    !(frame_has_ipv4_udp_on_allowed_port(frame))) {\n    should_allow == false\n  } else {\n    true\n  }\n}\n\npub fn hlr_1_6(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_arp(frame)) {\n    should_allow == true\n  } else {\n    true\n  }\n}\n\npub fn hlr_1_7(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame) &&\n    frame_has_ipv4_tcp(frame) &&\n    frame_has_ipv4_tcp_on_allowed_port(frame)) {\n    should_allow == true\n  } else {\n    true\n  }\n}\n\npub fn hlr_1_8(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame) &&\n    frame_has_ipv4_udp(frame) &&\n    frame_has_ipv4_udp_on_allowed_port(frame)) {\n    should_allow == true\n  } else {\n    true\n  }\n}\n\npub fn should_allow_inbound_frame_rx(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  hlr_1_1(frame,should_allow) && hlr_1_2(frame,should_allow) &&\n    hlr_1_3(frame,should_allow) &&\n    hlr_1_4(frame,should_allow) &&\n    hlr_1_5(frame,should_allow) &&\n    hlr_1_6(frame,should_allow) &&\n    hlr_1_7(frame,should_allow) &&\n    hlr_1_8(frame,should_allow)\n}\n\npub fn hlr_2_1(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (!(frame_is_wellformed_eth2(frame))) {\n    should_allow == false\n  } else {\n    true\n  }\n}\n\npub fn hlr_2_2(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_ipv6(frame)) {\n    should_allow == false\n  } else {\n    true\n  }\n}\n\npub fn hlr_2_3(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_arp(frame)) {\n    should_allow == true\n  } else {\n    true\n  }\n}\n\npub fn hlr_2_4(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  if (frame_is_wellformed_eth2(frame) && frame_has_ipv4(frame)) {\n    should_allow == true\n  } else {\n    true\n  }\n}\n\npub fn should_allow_outbound_frame_tx(\n  frame: SW::RawEthernetMessage,\n  should_allow: bool) -> bool\n{\n  hlr_2_1(frame,should_allow) && hlr_2_2(frame,should_allow) &&\n    hlr_2_3(frame,should_allow) &&\n    hlr_2_4(frame,should_allow)\n}\n\n\/** Compute Entrypoint Contract\n  *\n  * guarantee rx\n  * @param api_EthernetFramesRxIn incoming event data port\n  * @param api_EthernetFramesRxOut outgoing event data port\n  *\/\npub fn compute_spec_rx_guarantee(\n  api_EthernetFramesRxIn: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesRxOut: Option<SW::RawEthernetMessage>) -> bool\n{\n  (implies!(\n    api_EthernetFramesRxIn.is_some(),\n    (implies!(\n      api_EthernetFramesRxOut.is_some(),\n      should_allow_inbound_frame_rx(api_EthernetFramesRxIn.unwrap(),true) &&\n        (api_EthernetFramesRxIn.unwrap() == api_EthernetFramesRxOut.unwrap()))) &&\n      (impliesL!(\n        api_EthernetFramesRxOut.is_none(),\n        should_allow_inbound_frame_rx(api_EthernetFramesRxIn.unwrap(),false))))) &&\n    (impliesL!(\n      !(api_EthernetFramesRxIn.is_some()),\n      api_EthernetFramesRxOut.is_none()))\n}\n\n\/** Compute Entrypoint Contract\n  *\n  * guarantee tx\n  * @param api_EthernetFramesTxIn incoming event data port\n  * @param api_EthernetFramesTxOut outgoing event data port\n  *\/\npub fn compute_spec_tx_guarantee(\n  api_EthernetFramesTxIn: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesTxOut: Option<SW::RawEthernetMessage>) -> bool\n{\n  (implies!(\n    api_EthernetFramesTxIn.is_some(),\n    (implies!(\n      api_EthernetFramesTxOut.is_some(),\n      should_allow_outbound_frame_tx(api_EthernetFramesTxIn.unwrap(),true) &&\n        (api_EthernetFramesTxIn.unwrap() == api_EthernetFramesTxOut.unwrap()))) &&\n      (impliesL!(\n        api_EthernetFramesTxOut.is_none(),\n        should_allow_outbound_frame_tx(api_EthernetFramesTxIn.unwrap(),false))))) &&\n    (impliesL!(\n      !(api_EthernetFramesTxIn.is_some()),\n      api_EthernetFramesTxOut.is_none()))\n}\n\n\/** CEP-T-Guar: Top-level guarantee contracts for Firewall's compute entrypoint\n  *\n  * @param api_EthernetFramesRxIn incoming event data port\n  * @param api_EthernetFramesTxIn incoming event data port\n  * @param api_EthernetFramesRxOut outgoing event data port\n  * @param api_EthernetFramesTxOut outgoing event data port\n  *\/\npub fn compute_CEP_T_Guar(\n  api_EthernetFramesRxIn: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesTxIn: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesRxOut: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesTxOut: Option<SW::RawEthernetMessage>) -> bool\n{\n  let r0: bool = compute_spec_rx_guarantee(api_EthernetFramesRxIn, api_EthernetFramesRxOut);\n  let r1: bool = compute_spec_tx_guarantee(api_EthernetFramesTxIn, api_EthernetFramesTxOut);\n\n  return r0 && r1;\n}\n\n\/** CEP-Post: Compute Entrypoint Post-Condition for Firewall\n  *\n  * @param api_EthernetFramesRxIn incoming event data port\n  * @param api_EthernetFramesTxIn incoming event data port\n  * @param api_EthernetFramesRxOut outgoing event data port\n  * @param api_EthernetFramesTxOut outgoing event data port\n  *\/\npub fn compute_CEP_Post(\n  api_EthernetFramesRxIn: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesTxIn: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesRxOut: Option<SW::RawEthernetMessage>,\n  api_EthernetFramesTxOut: Option<SW::RawEthernetMessage>) -> bool\n{\n  \/\/ CEP-Guar: guarantee clauses of Firewall's compute entrypoint\n  let r0: bool = compute_CEP_T_Guar(api_EthernetFramesRxIn, api_EthernetFramesTxIn, api_EthernetFramesRxOut, api_EthernetFramesTxOut);\n\n  return r0;\n}\n",
          "markers" : [
          ],
          "invertMarkers" : false,
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ]
    ]
  }
}
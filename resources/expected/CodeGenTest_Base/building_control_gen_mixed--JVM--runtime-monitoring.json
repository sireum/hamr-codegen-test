{
  "type" : "TestResult",
  "map" : {
    "type" : "Map",
    "entries" : [
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempUnit.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@enum object TempUnit {\n  \"Fahrenheit\"\n  \"Celsius\"\n  \"Kelvin\"\n}\n\nobject TempUnit_Payload {\n  def example(): TempUnit_Payload = {\n    return TempUnit_Payload(BuildingControl.TempUnit.byOrdinal(0).get)\n  }\n}\n\n@datatype class TempUnit_Payload(value: BuildingControl.TempUnit.Type) extends art.DataContent\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Temperature_impl.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject Temperature_impl {\n  def example(): BuildingControl.Temperature_impl = {\n    return BuildingControl.Temperature_impl(\n      degrees = Base_Types.Float_32_example(),\n      unit = BuildingControl.TempUnit.byOrdinal(0).get)\n  }\n}\n\n@datatype class Temperature_impl(\n  val degrees: F32,\n  val unit: BuildingControl.TempUnit.Type) {\n}\n\nobject Temperature_impl_Payload {\n  def example(): Temperature_impl_Payload = {\n    return Temperature_impl_Payload(BuildingControl.Temperature_impl.example())\n  }\n}\n\n@datatype class Temperature_impl_Payload(value: BuildingControl.Temperature_impl) extends art.DataContent\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/SetPoint_impl.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject SetPoint_impl {\n  def example(): BuildingControl.SetPoint_impl = {\n    return BuildingControl.SetPoint_impl(\n      low = BuildingControl.Temperature_impl.example(),\n      high = BuildingControl.Temperature_impl.example())\n  }\n}\n\n@datatype class SetPoint_impl(\n  val low: BuildingControl.Temperature_impl,\n  val high: BuildingControl.Temperature_impl) {\n}\n\nobject SetPoint_impl_Payload {\n  def example(): SetPoint_impl_Payload = {\n    return SetPoint_impl_Payload(BuildingControl.SetPoint_impl.example())\n  }\n}\n\n@datatype class SetPoint_impl_Payload(value: BuildingControl.SetPoint_impl) extends art.DataContent\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/FanAck.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@enum object FanAck {\n  \"Ok\"\n  \"Error\"\n}\n\nobject FanAck_Payload {\n  def example(): FanAck_Payload = {\n    return FanAck_Payload(BuildingControl.FanAck.byOrdinal(0).get)\n  }\n}\n\n@datatype class FanAck_Payload(value: BuildingControl.FanAck.Type) extends art.DataContent\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/FanCmd.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@enum object FanCmd {\n  \"On\"\n  \"Off\"\n}\n\nobject FanCmd_Payload {\n  def example(): FanCmd_Payload = {\n    return FanCmd_Payload(BuildingControl.FanCmd.byOrdinal(0).get)\n  }\n}\n\n@datatype class FanCmd_Payload(value: BuildingControl.FanCmd.Type) extends art.DataContent\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/Base_Types.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\nimport org.sireum.S8._\nimport org.sireum.S16._\nimport org.sireum.S32._\nimport org.sireum.S64._\nimport org.sireum.U8._\nimport org.sireum.U16._\nimport org.sireum.U32._\nimport org.sireum.U64._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject Base_Types {\n\n  type Boolean = B\n\n  type Integer = Z\n\n  type Integer_8 = S8\n  type Integer_16 = S16\n  type Integer_32 = S32\n  type Integer_64 = S64\n\n  type Unsigned_8 = U8\n  type Unsigned_16 = U16\n  type Unsigned_32 = U32\n  type Unsigned_64 = U64\n\n  \/\/ TODO: Base_Types::Natural\n\n  type Float = R\n  type Float_32 = F32\n  type Float_64 = F64\n\n  type Character = C\n  type String = org.sireum.String\n\n  type Bits = org.sireum.ISZ[B]\n\n  @datatype class Boolean_Payload(value: B) extends art.DataContent\n\n  @datatype class Integer_Payload(value: Z) extends art.DataContent\n\n  @datatype class Integer_8_Payload(value: S8) extends art.DataContent\n  @datatype class Integer_16_Payload(value: S16) extends art.DataContent\n  @datatype class Integer_32_Payload(value: S32) extends art.DataContent\n  @datatype class Integer_64_Payload(value: S64) extends art.DataContent\n\n  @datatype class Unsigned_8_Payload(value: U8) extends art.DataContent\n  @datatype class Unsigned_16_Payload(value: U16) extends art.DataContent\n  @datatype class Unsigned_32_Payload(value: U32) extends art.DataContent\n  @datatype class Unsigned_64_Payload(value: U64) extends art.DataContent\n\n  @datatype class Float_Payload(value: R) extends art.DataContent\n  @datatype class Float_32_Payload(value: F32) extends art.DataContent\n  @datatype class Float_64_Payload(value: F64) extends art.DataContent\n\n  @datatype class Character_Payload(value: C) extends art.DataContent\n  @datatype class String_Payload(value: String) extends art.DataContent\n\n  @datatype class Bits_Payload(value: ISZ[B]) extends art.DataContent\n\n  def Boolean_example(): Boolean = {\n    Contract(Ensures(Res == F))\n    return F\n  }\n\n\n  def Integer_example(): Integer = {\n    Contract(Ensures(Res == z\"0\"))\n    return z\"0\"\n  }\n\n  def Integer_8_example(): Integer_8 = {\n    Contract(Ensures(Res == s8\"0\"))\n    return s8\"0\"\n  }\n\n  def Integer_16_example(): Integer_16 = {\n    Contract(Ensures(Res == s16\"0\"))\n    return s16\"0\"\n  }\n\n  def Integer_32_example(): Integer_32 = {\n    Contract(Ensures(Res == s32\"0\"))\n    return s32\"0\"\n  }\n\n  def Integer_64_example(): Integer_64 = {\n    Contract(Ensures(Res == s64\"0\"))\n    return s64\"0\"\n  }\n\n\n  def Unsigned_8_example(): Unsigned_8 = {\n    Contract(Ensures(Res == u8\"0\"))\n    return u8\"0\"\n  }\n\n  def Unsigned_16_example(): Unsigned_16 = {\n    Contract(Ensures(Res == u16\"0\"))\n    return u16\"0\"\n  }\n\n  def Unsigned_32_example(): Unsigned_32 = {\n    Contract(Ensures(Res == u32\"0\"))\n    return u32\"0\"\n  }\n\n  def Unsigned_64_example(): Unsigned_64 = {\n    Contract(Ensures(Res == u64\"0\"))\n    return u64\"0\"\n  }\n\n\n  def Float_example(): Float = {\n    Contract(Ensures(Res == r\"0\"))\n    return r\"0\"\n  }\n\n  def Float_32_example(): Float_32 = {\n    Contract(Ensures(Res == f32\"0\"))\n    return f32\"0\"\n  }\n\n  def Float_64_example(): Float_64 = {\n    Contract(Ensures(Res == f64\"0\"))\n    return f64\"0\"\n  }\n\n\n  def Character_example(): Character = {\n    Contract(Ensures(Res == ' '))\n    return ' '\n  }\n\n  def String_example(): String = {\n    Contract(Ensures(Res == \"\"))\n    return \"\"\n  }\n\n\n  def Bits_example(): Bits = {\n    Contract(Ensures(Res == ISZ[B]()))\n    return ISZ[B]()\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/main\/architecture\/building_control_gen_mixed__JVM__runtime_monitoring\/Arch.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\nimport art._\nimport art.PortMode._\nimport art.DispatchPropertyProtocol._\nimport art.Art.BridgeId._\nimport art.Art.PortId._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject Arch {\n  val BuildingControlDemo_i_Instance_tcp_tempSensor : building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge = {\n    val currentTemp = Port[BuildingControl.Temperature_impl] (id = portId\"0\", name = \"BuildingControlDemo_i_Instance_tcp_tempSensor_currentTemp\", mode = DataOut)\n    val tempChanged = Port[art.Empty] (id = portId\"1\", name = \"BuildingControlDemo_i_Instance_tcp_tempSensor_tempChanged\", mode = EventOut)\n\n    building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempSensor_i_tcp_tempSensor_Bridge(\n      id = bridgeId\"0\",\n      name = \"BuildingControlDemo_i_Instance_tcp_tempSensor\",\n      dispatchProtocol = Periodic(period = 1000),\n      dispatchTriggers = None(),\n\n      currentTemp = currentTemp,\n      tempChanged = tempChanged\n    )\n  }\n  val BuildingControlDemo_i_Instance_tcp_tempControl : building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempControl_i_tcp_tempControl_Bridge = {\n    val currentTemp = Port[BuildingControl.Temperature_impl] (id = portId\"2\", name = \"BuildingControlDemo_i_Instance_tcp_tempControl_currentTemp\", mode = DataIn)\n    val fanAck = Port[BuildingControl.FanAck.Type] (id = portId\"3\", name = \"BuildingControlDemo_i_Instance_tcp_tempControl_fanAck\", mode = EventIn)\n    val setPoint = Port[BuildingControl.SetPoint_impl] (id = portId\"4\", name = \"BuildingControlDemo_i_Instance_tcp_tempControl_setPoint\", mode = EventIn)\n    val fanCmd = Port[BuildingControl.FanCmd.Type] (id = portId\"5\", name = \"BuildingControlDemo_i_Instance_tcp_tempControl_fanCmd\", mode = EventOut)\n    val tempChanged = Port[art.Empty] (id = portId\"6\", name = \"BuildingControlDemo_i_Instance_tcp_tempControl_tempChanged\", mode = EventIn)\n\n    building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempControl_i_tcp_tempControl_Bridge(\n      id = bridgeId\"1\",\n      name = \"BuildingControlDemo_i_Instance_tcp_tempControl\",\n      dispatchProtocol = Sporadic(min = 1000),\n      dispatchTriggers = None(),\n\n      currentTemp = currentTemp,\n      fanAck = fanAck,\n      setPoint = setPoint,\n      fanCmd = fanCmd,\n      tempChanged = tempChanged\n    )\n  }\n  val BuildingControlDemo_i_Instance_tcp_fan : building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.Fan_i_tcp_fan_Bridge = {\n    val fanCmd = Port[BuildingControl.FanCmd.Type] (id = portId\"7\", name = \"BuildingControlDemo_i_Instance_tcp_fan_fanCmd\", mode = EventIn)\n    val fanAck = Port[BuildingControl.FanAck.Type] (id = portId\"8\", name = \"BuildingControlDemo_i_Instance_tcp_fan_fanAck\", mode = EventOut)\n\n    building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.Fan_i_tcp_fan_Bridge(\n      id = bridgeId\"2\",\n      name = \"BuildingControlDemo_i_Instance_tcp_fan\",\n      dispatchProtocol = Sporadic(min = 1000),\n      dispatchTriggers = None(),\n\n      fanCmd = fanCmd,\n      fanAck = fanAck\n    )\n  }\n\n  val ad : ArchitectureDescription = {\n\n    ArchitectureDescription(\n      components = IS[Art.BridgeId, Bridge] (BuildingControlDemo_i_Instance_tcp_tempSensor, BuildingControlDemo_i_Instance_tcp_tempControl, BuildingControlDemo_i_Instance_tcp_fan),\n\n      connections = IS[Art.ConnectionId, UConnection] (Connection(from = BuildingControlDemo_i_Instance_tcp_tempSensor.currentTemp, to = BuildingControlDemo_i_Instance_tcp_tempControl.currentTemp),\n                                                       Connection(from = BuildingControlDemo_i_Instance_tcp_tempSensor.tempChanged, to = BuildingControlDemo_i_Instance_tcp_tempControl.tempChanged),\n                                                       Connection(from = BuildingControlDemo_i_Instance_tcp_tempControl.fanCmd, to = BuildingControlDemo_i_Instance_tcp_fan.fanCmd),\n                                                       Connection(from = BuildingControlDemo_i_Instance_tcp_fan.fanAck, to = BuildingControlDemo_i_Instance_tcp_tempControl.fanAck))\n    )\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/architecture\/building_control_gen_mixed__JVM__runtime_monitoring\/Demo.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\nimport art.scheduling.Scheduler\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject Demo extends App {\n\n  \/** @return the scheduler to use for JVM based simulation as well as the 'default' scheduler\n    *         that will be used when taking this program down to C\/Linux.  Refer to\n    *         'bin\/run.sh -h' if you want to use a specific scheduler for C.  If the scheduler\n    *         accepts a schedule and you want to provide that in C then just pass None()\n    *\n    *         If you want to use the legacy scheduler for C then you must use\n    *           bin\/transpile.cmd --legacy\n    *           bin\/compile.cmd\n    *           bin\/run.sh --legacy\n    *\/\n  def defaultScheduler(): Scheduler = {\n    return Schedulers.getRoundRobinScheduler(None())\n  }\n\n  def main(args: ISZ[String]): Z = {\n    Cli(' ').parseRun(args, 0) match {\n      case Some(o: Cli.RunOption) =>\n        val scheduler: Scheduler = o.scheduler match {\n          case Cli.RunChoice.Default => defaultScheduler()\n          case Cli.RunChoice.RoundRobin => Schedulers.getRoundRobinScheduler(None())\n          case Cli.RunChoice.Static => Schedulers.getStaticSchedulerH(MNone())\n          case Cli.RunChoice.Legacy => Schedulers.getLegacyScheduler()\n        }\n\n        Platform.setup()\n\n        art.Art.run(Arch.ad, scheduler)\n\n        Platform.tearDown()\n      case Some(o: Cli.HelpOption) =>\n      case _ => return 1\n    }\n    return 0\n  }\n}\n\nobject Cli {\n\n  @datatype trait RunTopOption\n\n  @datatype class HelpOption extends RunTopOption\n\n  @enum object RunChoice {\n    'Default\n    'RoundRobin\n    'Static\n    'Legacy\n  }\n\n  @datatype class RunOption(\n                             val help: String,\n                             val args: ISZ[String],\n                             val scheduler: RunChoice.Type\n                           ) extends RunTopOption\n}\n\nimport Cli._\n\n@record class Cli(val pathSep: C) {\n\n  def parseRunChoiceH(arg: String): Option[RunChoice.Type] = {\n    arg match {\n      case \"default\" => return Some(RunChoice.Default)\n      case \"roundRobin\" => return Some(RunChoice.RoundRobin)\n      case \"static\" => return Some(RunChoice.Static)\n      case \"legacy\" => return Some(RunChoice.Legacy)\n      case s =>\n        eprintln(s\"Expecting one of the following: { default, roundRobin, static, legacy }, but found '$s'.\")\n        return None()\n    }\n  }\n\n  def parseRunChoice(args: ISZ[String], i: Z): Option[RunChoice.Type] = {\n    if (i >= args.size) {\n      eprintln(\"Expecting one of the following: { default, roundRobin, static, legacy }, but none found.\")\n      return None()\n    }\n    val r = parseRunChoiceH(args(i))\n    return r\n  }\n\n  def parseRun(args: ISZ[String], i: Z): Option[RunTopOption] = {\n\n    def help(): Unit = {\n      println(\"Run Slang Embedded Program\")\n      println()\n      println(\"Usage: <option>*\")\n      println()\n      println(\"Available Options:\")\n      println(\"-s, --scheduler          The scheduler to use.  See Demo.scala for information\")\n      println(\"                           on 'default' (expects one of { default, roundRobin,\")\n      println(\"                           static, legacy }; default: default)\")\n      println(\"-h, --help               Display this information\")\n    }\n\n    var scheduler: RunChoice.Type = RunChoice.Default\n    var j = i\n    var isOption = T\n    while (j < args.size && isOption) {\n      var arg = args(j)\n      if (arg == \"-h\" || arg == \"--help\") {\n        help()\n        return Some(HelpOption())\n      } else if (arg == \"-s\" || arg == \"--scheduler\") {\n        val o: Option[RunChoice.Type] = parseRunChoice(args, j + 1)\n        o match {\n          case Some(v) => scheduler = v\n          case _ => return None()\n        }\n      } else {\n        eprintln(s\"Unrecognized option '$arg'.\")\n        return None()\n      }\n      j = j + 2\n    }\n\n    return Some(RunOption(\"\", args, scheduler))\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/architecture\/building_control_gen_mixed__JVM__runtime_monitoring\/Schedulers.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.legacy.Legacy\nimport art.scheduling.roundrobin.RoundRobin\nimport art.scheduling.static.Schedule.{DSchedule, DScheduleSpec}\nimport art.scheduling.static._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@datatype class ProcessorTimingProperties(val clockPeriod: Option[Z],\n                                          val framePeriod: Option[Z],\n                                          val maxDomain: Option[Z],\n                                          val slotTime: Option[Z])\n\n@datatype class ThreadTimingProperties(val domain: Option[Z],\n                                       val computeExecutionTime: Option[(Z, Z)])\n\nobject Schedulers {\n\n  val threadNickNames: Map[String, Art.BridgeId] = Map(\n    ISZ(\n      Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.name ~> Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id,\n      Arch.BuildingControlDemo_i_Instance_tcp_tempControl.name ~> Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id,\n      Arch.BuildingControlDemo_i_Instance_tcp_fan.name ~> Arch.BuildingControlDemo_i_Instance_tcp_fan.id)\n  )\n\n  val revThreadNickNames: Map[Art.BridgeId, String] = Map.empty[Art.BridgeId, String] ++ (for (e <- threadNickNames.entries) yield e._2 ~> e._1)\n\n  val BuildingControlDemo_i_Instance_proc_timingProperties: ProcessorTimingProperties = ProcessorTimingProperties(\n    clockPeriod = None(),\n    framePeriod = None(),\n    maxDomain = None(),\n    slotTime = None())\n\n  val BuildingControlDemo_i_Instance_tcp_tempSensor_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = None(),\n    domain = None())\n\n  val BuildingControlDemo_i_Instance_tcp_tempControl_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = None(),\n    domain = None())\n\n  val BuildingControlDemo_i_Instance_tcp_fan_timingProperties: ThreadTimingProperties = ThreadTimingProperties(\n    computeExecutionTime = None(),\n    domain = None())\n\n\n  \/**********************************************************************\n   * Round Robin Scheduler\n   *********************************************************************\/\n\n  \/\/ roundRobinSchedule represents the component dispatch order\n  val roundRobinSchedule: ISZ[Art.BridgeId] = {\n    \/\/ convert IS[Art.BridgeId, art.Bridge] to an IS[Z, Art.BridgeId] to allow bridges to be dispatched\n    \/\/ multiple times during a hyper-period\n    var ret: ISZ[Art.BridgeId] = ISZ()\n    for (e <- Arch.ad.components) {\n      ret = ret :+ e.id\n    }\n    ret\n  }\n\n  def getRoundRobinScheduler(schedule: Option[ISZ[Art.BridgeId]]): RoundRobin = {\n    if (roundRobinSchedule.isEmpty) {} \/\/ line needed for transpiler; do not remove\n    schedule match {\n      case Some(s) => return RoundRobin(s)\n      case _ => return RoundRobin(ScheduleProviderI.getRoundRobinOrder())\n    }\n  }\n\n  \/**********************************************************************\n   * Static Scheduler\n   *********************************************************************\/\n\n  val framePeriod: Z = 1000\n  val numComponents: Z = Arch.ad.components.size\n  val maxExecutionTime: Z = numComponents \/ framePeriod\n\n  \/\/ defaultStaticSchedule represents the component dispatch order\n  val defaultStaticSchedule: DScheduleSpec = DScheduleSpec(0, 0, DSchedule(ISZ(\n    Schedule.Slot(0, maxExecutionTime),\n    Schedule.Slot(1, maxExecutionTime),\n    Schedule.Slot(2, maxExecutionTime)\n  )))\n\n  val defaultDomainToBridgeIdMap: ISZ[Art.BridgeId] = ISZ(\n    \/* domain 0 *\/ Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id,\n    \/* domain 1 *\/ Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id,\n    \/* domain 2 *\/ Arch.BuildingControlDemo_i_Instance_tcp_fan.id\n  )\n\n  def getStaticSchedulerH(userProvided: MOption[(DScheduleSpec, ISZ[Art.BridgeId], Map[String, Art.BridgeId], CommandProvider)]): StaticScheduler = {\n    if (defaultStaticSchedule.schedule.slots.isEmpty && defaultDomainToBridgeIdMap.isEmpty && threadNickNames.isEmpty) {} \/\/ line needed for transpiler; do not remove\n    userProvided match {\n      case MSome((schedule_, domainToBridgeIdMap_, threadNickNames_, commandProvider)) =>\n        return getStaticScheduler(schedule_, domainToBridgeIdMap_, threadNickNames_, commandProvider)\n      case _ =>\n        return getStaticScheduler(\n          ScheduleProviderI.getStaticSchedule(),\n          \/\/ TODO: get the following from extension so they can be customized via C\n          defaultDomainToBridgeIdMap,\n          threadNickNames,\n          DefaultCommandProvider())\n    }\n  }\n\n  def getStaticScheduler(schedule: DScheduleSpec,\n                         domainToBridgeIdMap: ISZ[Art.BridgeId],\n                         threadNickNames: Map[String, Art.BridgeId],\n                         commandProvider: CommandProvider): StaticScheduler = {\n    return StaticScheduler(schedule, Arch.ad.components, domainToBridgeIdMap, threadNickNames,\n      if (commandProvider.isInstanceOf[InfoCommandProvider])\n        commandProvider.asInstanceOf[InfoCommandProvider].init(\n          threadNickNames,\n          schedule.schedule.slots.size,\n          domainToBridgeIdMap\n        )\n      else commandProvider)\n  }\n\n\n  \/**********************************************************************\n   * Legacy Scheduler\n   *********************************************************************\/\n\n  def getLegacyScheduler(): Legacy = {\n    return Legacy(Arch.ad.components)\n  }\n}\n\n\/\/ the purpose of this extension is to allow users to provide custom schedules\n\/\/ at the C level after transpiling\n@ext(name = \"ScheduleProvider\") object ScheduleProviderI {\n  def getRoundRobinOrder(): ISZ[Art.BridgeId] = $\n\n  def getStaticSchedule(): DScheduleSpec = $\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/architecture\/building_control_gen_mixed__JVM__runtime_monitoring\/ScheduleProvider.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.static.Schedule.DScheduleSpec\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject ScheduleProvider {\n\n  def getRoundRobinOrder(): ISZ[Art.BridgeId] = {\n    return Schedulers.roundRobinSchedule\n  }\n\n  def getStaticSchedule(): DScheduleSpec = {\n    return Schedulers.defaultStaticSchedule\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/inspector\/building_control_gen_mixed__JVM__runtime_monitoring\/InspectorDemo.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring\n\nimport art.{ArchitectureDescription, Bridge, DataContent, UPort}\nimport org.reactivestreams.Publisher\nimport org.sireum.hamr.inspector.common.{Filter, Injection, InspectionBlueprint, Msg, Rule}\nimport org.sireum.hamr.inspector.capabilities.InspectorCapabilitiesLauncher\nimport org.sireum.hamr.inspector.gui.InspectorGUILauncher\nimport org.sireum.hamr.inspector.stream.Flux\n\nobject InspectorDemo extends App {\n\n  {\n    InspectorCapabilitiesLauncher.run(Blueprint)\n\n    val filters: Set[Filter] = Set(NoFilter, EvensOnly)\n    val rules: Set[Rule] = Set(Require100OrMore)\n    val injections: Set[Injection] = Set()\n\n    InspectorGUILauncher.run(Blueprint, filters, rules, injections, args)\n  }\n\n  object Blueprint extends InspectionBlueprint {\n    override def ad(): ArchitectureDescription = Arch.ad\n    override def serializer(): DataContent => String = JSON.from_artDataContent(_, true).value\n    override def deserializer(): String => DataContent = JSON.to_artDataContent(_).left\n  }\n\n  object NoFilter extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in\n  }\n\n  object EvensOnly extends Filter {\n    override def filter(in: Flux[Msg]): Publisher[Msg] = in.filter(_.sequence % 2 == 0)\n  }\n\n  object Require100OrMore extends Rule {\n    override def rule(in: Flux[Msg]): Publisher[_] = in.skip(99).next().single()\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art.Art\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n@msig trait TempSensor_i_tcp_tempSensor_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor)\n  }\n\n  \/** helper function to check TempSensor_i_tcp_tempSensor's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param currentTemp method that will be called with the value of the outgoing data\n   *        port 'currentTemp'.\n   * @param tempChanged method that will be called with the number of events to be sent\n   *        on the outgoing event port 'tempChanged'.\n   *\/\n  def check_concrete_output(currentTemp: BuildingControl.Temperature_impl => B,\n                            tempChanged: Z => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    val currentTempValue: BuildingControl.Temperature_impl = get_currentTemp().get\n    if(!currentTemp(currentTempValue)) {\n      testFailures = testFailures :+ st\"'currentTemp' did not match expected: value of the outgoing data port is ${currentTempValue}\"\n    }\n    \/\/ TODO: event port getter should return the number of events in\n    \/\/       the output queue when queue sizes > 1 support is added to ART\n    val tempChangedValue: Z = if(get_tempChanged().nonEmpty) z\"1\" else z\"0\"\n    if(!tempChanged(tempChangedValue)) {\n      testFailures = testFailures :+ st\"'tempChanged' did not match expected: ${tempChangedValue} events were in the outgoing event queue\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ getter for out DataPort\n  def get_currentTemp(): Option[BuildingControl.Temperature_impl] = {\n    val value: Option[BuildingControl.Temperature_impl] = get_currentTemp_payload() match {\n      case Some(BuildingControl.Temperature_impl_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port currentTemp.  Expecting 'BuildingControl.Temperature_impl_Payload' but received ${v}\")\n      case _ => None[BuildingControl.Temperature_impl]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out DataPort\n  def get_currentTemp_payload(): Option[BuildingControl.Temperature_impl_Payload] = {\n    return Art.observeOutInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.initialization_api.currentTemp_Id).asInstanceOf[Option[BuildingControl.Temperature_impl_Payload]]\n  }\n\n  \/\/ getter for out EventPort\n  def get_tempChanged(): Option[art.Empty] = {\n    val value: Option[art.Empty] = get_tempChanged_payload() match {\n      case Some(art.Empty()) => Some(art.Empty())\n      case Some(v) => halt(s\"Unexpected payload on port tempChanged.  Expecting 'art.Empty' but received ${v}\")\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventPort\n  def get_tempChanged_payload(): Option[art.Empty] = {\n    return Art.observeOutInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.initialization_api.tempChanged_Id).asInstanceOf[Option[art.Empty]]\n  }\n\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\nabstract class TempSensor_i_tcp_tempSensor_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  TempSensor_i_tcp_tempSensor_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass TempSensor_i_tcp_tempSensor_Test extends TempSensor_i_tcp_tempSensor_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\nimport building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.{TempSensor_i_tcp_tempSensor => component}\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@datatype class TempSensor_i_tcp_tempSensor_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  currentTemp: Port[BuildingControl.Temperature_impl],\n  tempChanged: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](currentTemp),\n\n    eventIns = ISZ[art.UPort](),\n\n    eventOuts = ISZ[art.UPort](tempChanged)\n  )\n\n  val initialization_api : TempSensor_i_Initialization_Api = {\n    val api = TempSensor_i_Initialization_Api(\n      id,\n      currentTemp.id,\n      tempChanged.id\n    )\n    TempSensor_i_tcp_tempSensor_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : TempSensor_i_Operational_Api = {\n    val api = TempSensor_i_Operational_Api(\n      id,\n      currentTemp.id,\n      tempChanged.id\n    )\n    TempSensor_i_tcp_tempSensor_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    TempSensor_i_tcp_tempSensor_Bridge.EntryPoints(\n      id,\n\n      currentTemp.id,\n      tempChanged.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject TempSensor_i_tcp_tempSensor_Bridge {\n\n  var c_initialization_api: Option[TempSensor_i_Initialization_Api] = None()\n  var c_operational_api: Option[TempSensor_i_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    TempSensor_i_tcp_tempSensor_BridgeId : Art.BridgeId,\n    currentTemp_Id : Art.PortId,\n    tempChanged_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: TempSensor_i_Initialization_Api,\n    operational_api: TempSensor_i_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS()\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS(currentTemp_Id)\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(tempChanged_Id)\n\n    def initialise(): Unit = {\n      TempSensor_i_tcp_tempSensor_EntryPoint_Companion.pre_initialise()\n\n      \/\/ implement the following method in 'component':  def initialise(api: TempSensor_i_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n\n      TempSensor_i_tcp_tempSensor_EntryPoint_Companion.post_initialise()\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      TempSensor_i_tcp_tempSensor_Injection_Service.pre_receiveInput()\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      TempSensor_i_tcp_tempSensor_EntryPoint_Companion.pre_compute()\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: TempSensor_i_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      TempSensor_i_tcp_tempSensor_EntryPoint_Companion.post_compute()\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: TempSensor_i_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: TempSensor_i_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      \/\/ implement the following in 'component':  def timeTriggered(api: TempSensor_i_Operational_Api): Unit = {}\n      component.timeTriggered(operational_api)\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_Injection_Service.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@msig trait TempSensor_i_tcp_tempSensor_Injection_Provider {\n  def pre_receiveInput(): Unit\n}\n\nobject TempSensor_i_tcp_tempSensor_Injection_Service {\n\n  var providers: MSZ[TempSensor_i_tcp_tempSensor_Injection_Provider] = MSZ()\n\n  def register(provider: TempSensor_i_tcp_tempSensor_Injection_Provider): Unit = {\n    providers = providers :+ provider\n  }\n\n  def pre_receiveInput(): Unit = {\n    for (provider <- providers) {\n      provider.pre_receiveInput()\n    }\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_EntryPoint_Companion.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject TempSensor_i_tcp_tempSensor_EntryPoint_Companion {\n\n  var last_api_currentTemp: Option[BuildingControl.Temperature_impl] = None()\n\n  \/** get the value of outgoing data port currentTemp.  If a 'fresh' value wasn't sent\n    * during the last dispatch then return last_api_currentTemp.get.\n    * Note: this requires outgoing data ports to be initialized during the\n    * initialization phase or prior to system testing.\n    *\/\n  def get_api_currentTemp: BuildingControl.Temperature_impl = {\n    Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.operational_api.currentTemp_Id) match {\n      case Some(BuildingControl.Temperature_impl_Payload(value)) =>\n        last_api_currentTemp = Some(value)\n        return value\n      case _ if last_api_currentTemp.isEmpty =>\n        assert(F, \"No value found on outgoing data port currentTemp.\\n                  Note: values placed during the initialization phase will persist across dispatches\")\n        halt(\"No value found on outgoing data port currentTemp.\\n                  Note: values placed during the initialization phase will persist across dispatches\")\n      case _ => return last_api_currentTemp.get\n    }\n  }\n  var preStateContainer_wL: Option[TempSensor_i_tcp_tempSensor_PreState_Container_PS] = None()\n\n  def pre_initialise(): Unit = {\n    \/\/ assume\/require contracts cannot refer to incoming ports or\n    \/\/ state variables so nothing to do here\n  }\n\n  def post_initialise(): Unit = {\n    \/\/ block the component while its post-state values are retrieved\n    val postStateContainer_wL =\n      TempSensor_i_tcp_tempSensor_PostState_Container_PS(\n        api_tempChanged = Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.operational_api.tempChanged_Id).asInstanceOf[Option[art.Empty]],\n        api_currentTemp = get_api_currentTemp)\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_postInit, postStateContainer_wL)\n  }\n\n  def pre_compute(): Unit = {\n    \/\/ block the component while its pre-state values are retrieved\n    preStateContainer_wL = Some(\n      TempSensor_i_tcp_tempSensor_PreState_Container_PS())\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])\n  }\n\n  def post_compute(): Unit = {\n    \/\/ block the component while its post-state values are retrieved\n    val postStateContainer_wL =\n      TempSensor_i_tcp_tempSensor_PostState_Container_PS(\n        api_tempChanged = Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.operational_api.tempChanged_Id).asInstanceOf[Option[art.Empty]],\n        api_currentTemp = get_api_currentTemp)\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_SystemTestAPI.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring.SystemTestSuiteSlang.runtimeMonitorStream\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject TempSensor_i_tcp_tempSensor_SystemTestAPI {\n  \/** helper method to set the values of all incoming ports\n    *\/\n  def put_concrete_inputs(): Unit = {\n  }\n\n\n\n  def fetchContainer(): building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempSensor_i_tcp_tempSensor_PostState_Container_PS = {\n    if (runtimeMonitorStream.contains(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id)) {\n      val (_, postContainer_) = runtimeMonitorStream.get(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id).get\n      return postContainer_.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempSensor_i_tcp_tempSensor_PostState_Container_PS]\n    }\n    else {\n      assert(F, s\"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.name}\")\n      halt(s\"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.name}\")\n    }\n  }\n\n  def check_concrete_outputs(api_tempChanged: Option[art.Empty],\n                             api_currentTemp: BuildingControl.Temperature_impl): Unit = {\n    var failureReasons: ISZ[ST] = ISZ()\n\n    val actual_tempChanged = get_api_tempChanged()\n    if (api_tempChanged != actual_tempChanged) {\n      failureReasons = failureReasons :+ st\"'tempChanged' did not match expected.  Expected: $api_tempChanged, Actual: $actual_tempChanged\"\n    }\n    val actual_currentTemp = get_api_currentTemp()\n    if (api_currentTemp != actual_currentTemp) {\n      failureReasons = failureReasons :+ st\"'currentTemp' did not match expected.  Expected: $api_currentTemp, Actual: $actual_currentTemp\"\n    }\n\n    assert(failureReasons.isEmpty, st\"${(failureReasons, \"\\n\")}\".render)\n  }\n\n  def get_api_tempChanged(): Option[art.Empty] = {\n    return fetchContainer().api_tempChanged\n  }\n\n  def get_api_currentTemp(): BuildingControl.Temperature_impl = {\n    return fetchContainer().api_currentTemp\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n@sig trait TempSensor_i_Api {\n  def id: Art.BridgeId\n  def currentTemp_Id : Art.PortId\n  def tempChanged_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing data port\n  @spec var currentTemp: BuildingControl.Temperature_impl = $\n\n  def put_currentTemp(value : BuildingControl.Temperature_impl) : Unit = {\n    Contract(\n      Modifies(currentTemp),\n      Ensures(\n        currentTemp == value\n      )\n    )\n    Spec {\n      currentTemp = value\n    }\n\n    Art.putValue(currentTemp_Id, BuildingControl.Temperature_impl_Payload(value))\n  }\n\n  \/\/ Logika spec var representing port state for outgoing event port\n  @spec var tempChanged: Option[art.Empty] = $\n\n  def put_tempChanged() : Unit = {\n    Contract(\n      Modifies(tempChanged),\n      Ensures(\n        tempChanged == Some(Empty())\n      )\n    )\n    Spec {\n      tempChanged = Some(Empty())\n    }\n\n    Art.putValue(tempChanged_Id, art.Empty())\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class TempSensor_i_Initialization_Api (\n  val id: Art.BridgeId,\n  val currentTemp_Id : Art.PortId,\n  val tempChanged_Id : Art.PortId) extends TempSensor_i_Api\n\n@datatype class TempSensor_i_Operational_Api (\n  val id: Art.BridgeId,\n  val currentTemp_Id : Art.PortId,\n  val tempChanged_Id : Art.PortId) extends TempSensor_i_Api {\n\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/component\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject TempSensor_i_tcp_tempSensor {\n\n  def initialise(api: TempSensor_i_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.put_currentTemp(BuildingControl.Temperature_impl.example())\n    api.put_tempChanged()\n  }\n\n  def timeTriggered(api: TempSensor_i_Operational_Api): Unit = {\n    \/\/ example api usage\n\n\n  }\n\n  def finalise(api: TempSensor_i_Operational_Api): Unit = { }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_Containers.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\nimport building_control_gen_mixed__JVM__runtime_monitoring.util.Container\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n\/\/ containers for the pre and post state values of ports and state variables\n\n@sig trait TempSensor_i_tcp_tempSensor_PreState_Container extends Container {\n}\n\n\/\/ container for incoming ports\n@datatype class TempSensor_i_tcp_tempSensor_PreState_Container_P (\n  ) extends TempSensor_i_tcp_tempSensor_PreState_Container\n\n\/\/ container for incoming ports and state variables\n@datatype class TempSensor_i_tcp_tempSensor_PreState_Container_PS (\n  ) extends TempSensor_i_tcp_tempSensor_PreState_Container\n\n@sig trait TempSensor_i_tcp_tempSensor_PostState_Container extends Container {\n  def api_tempChanged: Option[art.Empty]\n  def api_currentTemp: BuildingControl.Temperature_impl\n}\n\n\/\/ container for outgoing ports\n@datatype class TempSensor_i_tcp_tempSensor_PostState_Container_P (\n  val api_tempChanged: Option[art.Empty],\n  val api_currentTemp: BuildingControl.Temperature_impl) extends TempSensor_i_tcp_tempSensor_PostState_Container\n\n\/\/ container for outgoing ports and state variables\n@datatype class TempSensor_i_tcp_tempSensor_PostState_Container_PS (\n  val api_tempChanged: Option[art.Empty],\n  val api_currentTemp: BuildingControl.Temperature_impl) extends TempSensor_i_tcp_tempSensor_PostState_Container\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art.Art\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n@msig trait TempControl_i_tcp_tempControl_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.BuildingControlDemo_i_Instance_tcp_tempControl)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.BuildingControlDemo_i_Instance_tcp_tempControl)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.BuildingControlDemo_i_Instance_tcp_tempControl)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.BuildingControlDemo_i_Instance_tcp_tempControl)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param currentTemp payload for data port currentTemp\n   * @param fanAck payloads for event data port fanAck.\n   *   ART currently supports single element event data queues so\n   *   only the last element of fanAck will be used\n   * @param setPoint payloads for event data port setPoint.\n   *   ART currently supports single element event data queues so\n   *   only the last element of setPoint will be used\n   * @param tempChanged the number of events to place in the tempChanged event port queue.\n   *   ART currently supports single element event queues so at most\n   *   one event will be placed in the queue.\n   *\/\n  def put_concrete_inputs(currentTemp : BuildingControl.Temperature_impl,\n                          fanAck : ISZ[BuildingControl.FanAck.Type],\n                          setPoint : ISZ[BuildingControl.SetPoint_impl],\n                          tempChanged : Z): Unit = {\n    put_currentTemp(currentTemp)\n    for(v <- fanAck){\n      put_fanAck(v)\n    }\n    for(v <- setPoint){\n      put_setPoint(v)\n    }\n    for(i <- 0 until tempChanged) {\n      put_tempChanged()\n    }\n  }\n\n\n  \/** helper function to check TempControl_i_tcp_tempControl's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param fanCmd method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'fanCmd'.\n   *\/\n  def check_concrete_output(fanCmd: ISZ[BuildingControl.FanCmd.Type] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var fanCmdValue: ISZ[BuildingControl.FanCmd.Type] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_fanCmd().nonEmpty) { fanCmdValue = fanCmdValue :+ get_fanCmd().get }\n    if(!fanCmd(fanCmdValue)) {\n      testFailures = testFailures :+ st\"'fanCmd' did not match expected: received ${fanCmdValue.size} events with the following payloads ${fanCmdValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in DataPort\n  def put_currentTemp(value : BuildingControl.Temperature_impl): Unit = {\n    Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.currentTemp_Id, BuildingControl.Temperature_impl_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_fanAck(value : BuildingControl.FanAck.Type): Unit = {\n    Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanAck_Id, BuildingControl.FanAck_Payload(value))\n  }\n\n  \/\/ setter for in EventDataPort\n  def put_setPoint(value : BuildingControl.SetPoint_impl): Unit = {\n    Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.setPoint_Id, BuildingControl.SetPoint_impl_Payload(value))\n  }\n\n  \/\/ setter for in EventPort\n  def put_tempChanged(): Unit = {\n    Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.tempChanged_Id, art.Empty())\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_fanCmd(): Option[BuildingControl.FanCmd.Type] = {\n    val value: Option[BuildingControl.FanCmd.Type] = get_fanCmd_payload() match {\n      case Some(BuildingControl.FanCmd_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port fanCmd.  Expecting 'BuildingControl.FanCmd_Payload' but received ${v}\")\n      case _ => None[BuildingControl.FanCmd.Type]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_fanCmd_payload(): Option[BuildingControl.FanCmd_Payload] = {\n    return Art.observeOutInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.initialization_api.fanCmd_Id).asInstanceOf[Option[BuildingControl.FanCmd_Payload]]\n  }\n\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\nabstract class TempControl_i_tcp_tempControl_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  TempControl_i_tcp_tempControl_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass TempControl_i_tcp_tempControl_Test extends TempControl_i_tcp_tempControl_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\nimport building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.{TempControl_i_tcp_tempControl => component}\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@datatype class TempControl_i_tcp_tempControl_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  currentTemp: Port[BuildingControl.Temperature_impl],\n  fanAck: Port[BuildingControl.FanAck.Type],\n  setPoint: Port[BuildingControl.SetPoint_impl],\n  fanCmd: Port[BuildingControl.FanCmd.Type],\n  tempChanged: Port[art.Empty]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](currentTemp),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](fanAck,\n                              setPoint,\n                              tempChanged),\n\n    eventOuts = ISZ[art.UPort](fanCmd)\n  )\n\n  val initialization_api : TempControl_i_Initialization_Api = {\n    val api = TempControl_i_Initialization_Api(\n      id,\n      currentTemp.id,\n      fanAck.id,\n      setPoint.id,\n      fanCmd.id,\n      tempChanged.id\n    )\n    TempControl_i_tcp_tempControl_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : TempControl_i_Operational_Api = {\n    val api = TempControl_i_Operational_Api(\n      id,\n      currentTemp.id,\n      fanAck.id,\n      setPoint.id,\n      fanCmd.id,\n      tempChanged.id\n    )\n    TempControl_i_tcp_tempControl_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    TempControl_i_tcp_tempControl_Bridge.EntryPoints(\n      id,\n\n      currentTemp.id,\n      fanAck.id,\n      setPoint.id,\n      fanCmd.id,\n      tempChanged.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject TempControl_i_tcp_tempControl_Bridge {\n\n  var c_initialization_api: Option[TempControl_i_Initialization_Api] = None()\n  var c_operational_api: Option[TempControl_i_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    TempControl_i_tcp_tempControl_BridgeId : Art.BridgeId,\n    currentTemp_Id : Art.PortId,\n    fanAck_Id : Art.PortId,\n    setPoint_Id : Art.PortId,\n    fanCmd_Id : Art.PortId,\n    tempChanged_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: TempControl_i_Initialization_Api,\n    operational_api: TempControl_i_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS(currentTemp_Id)\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(fanAck_Id,\n                                             setPoint_Id,\n                                             tempChanged_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(fanCmd_Id)\n\n    def initialise(): Unit = {\n      TempControl_i_tcp_tempControl_EntryPoint_Companion.pre_initialise()\n\n      \/\/ implement the following method in 'component':  def initialise(api: TempControl_i_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n\n      TempControl_i_tcp_tempControl_EntryPoint_Companion.post_initialise()\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(TempControl_i_tcp_tempControl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      TempControl_i_tcp_tempControl_Injection_Service.pre_receiveInput()\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == fanAck_Id){\n          val Some(BuildingControl.FanAck_Payload(value)) = Art.getValue(fanAck_Id)\n\n          TempControl_i_tcp_tempControl_EntryPoint_Companion.pre_compute(fanAck_Id)\n\n          \/\/ implement the following in 'component':  def handle_fanAck(api: TempControl_i_Operational_Api, value: BuildingControl.FanAck.Type): Unit = {}\n          component.handle_fanAck(operational_api, value)\n\n          TempControl_i_tcp_tempControl_EntryPoint_Companion.post_compute()\n        }\n        else if(portId == setPoint_Id){\n          val Some(BuildingControl.SetPoint_impl_Payload(value)) = Art.getValue(setPoint_Id)\n\n          TempControl_i_tcp_tempControl_EntryPoint_Companion.pre_compute(setPoint_Id)\n\n          \/\/ implement the following in 'component':  def handle_setPoint(api: TempControl_i_Operational_Api, value: BuildingControl.SetPoint_impl): Unit = {}\n          component.handle_setPoint(operational_api, value)\n\n          TempControl_i_tcp_tempControl_EntryPoint_Companion.post_compute()\n        }\n        else if(portId == tempChanged_Id) {\n          TempControl_i_tcp_tempControl_EntryPoint_Companion.pre_compute(tempChanged_Id)\n\n          \/\/ implement the following in 'component':  def handle_tempChanged(api: TempControl_i_Operational_Api): Unit = {}\n          component.handle_tempChanged(operational_api)\n\n          TempControl_i_tcp_tempControl_EntryPoint_Companion.post_compute()\n        }\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: TempControl_i_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: TempControl_i_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(TempControl_i_tcp_tempControl_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == fanAck_Id){\n          val Some(BuildingControl.FanAck_Payload(value)) = Art.getValue(fanAck_Id)\n\n          \/\/ implement the following in 'component':  def handle_fanAck(api: TempControl_i_Operational_Api, value: BuildingControl.FanAck.Type): Unit = {}\n          component.handle_fanAck(operational_api, value)\n        }\n        else if(portId == setPoint_Id){\n          val Some(BuildingControl.SetPoint_impl_Payload(value)) = Art.getValue(setPoint_Id)\n\n          \/\/ implement the following in 'component':  def handle_setPoint(api: TempControl_i_Operational_Api, value: BuildingControl.SetPoint_impl): Unit = {}\n          component.handle_setPoint(operational_api, value)\n        }\n        else if(portId == tempChanged_Id) {\n          \/\/ implement the following in 'component':  def handle_tempChanged(api: TempControl_i_Operational_Api): Unit = {}\n          component.handle_tempChanged(operational_api)\n        }\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_Injection_Service.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@msig trait TempControl_i_tcp_tempControl_Injection_Provider {\n  def pre_receiveInput(): Unit\n}\n\nobject TempControl_i_tcp_tempControl_Injection_Service {\n\n  var providers: MSZ[TempControl_i_tcp_tempControl_Injection_Provider] = MSZ()\n\n  def register(provider: TempControl_i_tcp_tempControl_Injection_Provider): Unit = {\n    providers = providers :+ provider\n  }\n\n  def pre_receiveInput(): Unit = {\n    for (provider <- providers) {\n      provider.pre_receiveInput()\n    }\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_EntryPoint_Companion.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject TempControl_i_tcp_tempControl_EntryPoint_Companion {\n\n  var preStateContainer_wL: Option[TempControl_i_tcp_tempControl_PreState_Container_PS] = None()\n\n  def pre_initialise(): Unit = {\n    \/\/ assume\/require contracts cannot refer to incoming ports or\n    \/\/ state variables so nothing to do here\n  }\n\n  def post_initialise(): Unit = {\n    \/\/ block the component while its post-state values are retrieved\n    val postStateContainer_wL =\n      TempControl_i_tcp_tempControl_PostState_Container_PS(\n        api_fanCmd = \n          if (Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanCmd_Id).nonEmpty)\n            Some(Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanCmd_Id).get.asInstanceOf[BuildingControl.FanCmd_Payload].value)\n          else None())\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_postInit, postStateContainer_wL)\n  }\n\n  def pre_compute(dispatchedEventPortId: Art.PortId): Unit = {\n    \/\/ block the component while its pre-state values are retrieved\n    preStateContainer_wL = Some(\n      TempControl_i_tcp_tempControl_PreState_Container_PS(\n        api_tempChanged = \n          if (dispatchedEventPortId == Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.tempChanged_Id)\n            Art.observeInPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.tempChanged_Id).asInstanceOf[Option[art.Empty]]\n          else None(), \n        api_fanAck = \n          if (dispatchedEventPortId == Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanAck_Id)\n            if (Art.observeInPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanAck_Id).nonEmpty)\n              Some(Art.observeInPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanAck_Id).get.asInstanceOf[BuildingControl.FanAck_Payload].value)\n            else None()\n          else None(), \n        api_setPoint = \n          if (dispatchedEventPortId == Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.setPoint_Id)\n            if (Art.observeInPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.setPoint_Id).nonEmpty)\n              Some(Art.observeInPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.setPoint_Id).get.asInstanceOf[BuildingControl.SetPoint_impl_Payload].value)\n            else None()\n          else None(), \n        api_currentTemp = Art.observeInPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.currentTemp_Id).get.asInstanceOf[BuildingControl.Temperature_impl_Payload].value))\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])\n  }\n\n  def post_compute(): Unit = {\n    \/\/ block the component while its post-state values are retrieved\n    val postStateContainer_wL =\n      TempControl_i_tcp_tempControl_PostState_Container_PS(\n        api_fanCmd = \n          if (Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanCmd_Id).nonEmpty)\n            Some(Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanCmd_Id).get.asInstanceOf[BuildingControl.FanCmd_Payload].value)\n          else None())\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_SystemTestAPI.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring.SystemTestSuiteSlang.runtimeMonitorStream\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject TempControl_i_tcp_tempControl_SystemTestAPI {\n  \/** helper method to set the values of all incoming ports\n    * @param api_tempChanged incoming event port\n    * @param api_fanAck incoming event data port\n    * @param api_setPoint incoming event data port\n    * @param api_currentTemp incoming data port\n    *\/\n  def put_concrete_inputs(api_tempChanged: Option[art.Empty],\n                          api_fanAck: Option[BuildingControl.FanAck.Type],\n                          api_setPoint: Option[BuildingControl.SetPoint_impl],\n                          api_currentTemp: BuildingControl.Temperature_impl): Unit = {\n    put_tempChanged(api_tempChanged)\n    put_fanAck(api_fanAck)\n    put_setPoint(api_setPoint)\n    put_currentTemp(api_currentTemp)\n  }\n\n  \/\/ setter for incoming event  port\n  def put_tempChanged(value: Option[art.Empty]): Unit = {\n    value match {\n      case Some(v) => Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.tempChanged_Id, v)\n      case _ =>\n    }\n  }\n\n  \/\/ setter for incoming event data port\n  def put_fanAck(value: Option[BuildingControl.FanAck.Type]): Unit = {\n    value match {\n      case Some(v) => Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanAck_Id, BuildingControl.FanAck_Payload(v))\n      case _ =>\n    }\n  }\n\n  \/\/ setter for incoming event data port\n  def put_setPoint(value: Option[BuildingControl.SetPoint_impl]): Unit = {\n    value match {\n      case Some(v) => Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.setPoint_Id, BuildingControl.SetPoint_impl_Payload(v))\n      case _ =>\n    }\n  }\n\n  \/\/ setter for incoming data port\n  def put_currentTemp(value: BuildingControl.Temperature_impl): Unit = {\n    Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.currentTemp_Id, BuildingControl.Temperature_impl_Payload(value))\n  }\n\n  def fetchContainer(): building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempControl_i_tcp_tempControl_PostState_Container_PS = {\n    if (runtimeMonitorStream.contains(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id)) {\n      val (_, postContainer_) = runtimeMonitorStream.get(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id).get\n      return postContainer_.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempControl_i_tcp_tempControl_PostState_Container_PS]\n    }\n    else {\n      assert(F, s\"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_tempControl.name}\")\n      halt(s\"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_tempControl.name}\")\n    }\n  }\n\n  def check_concrete_outputs(api_fanCmd: Option[BuildingControl.FanCmd.Type]): Unit = {\n    var failureReasons: ISZ[ST] = ISZ()\n\n    val actual_fanCmd = get_api_fanCmd()\n    if (api_fanCmd != actual_fanCmd) {\n      failureReasons = failureReasons :+ st\"'fanCmd' did not match expected.  Expected: $api_fanCmd, Actual: $actual_fanCmd\"\n    }\n\n    assert(failureReasons.isEmpty, st\"${(failureReasons, \"\\n\")}\".render)\n  }\n\n  def get_api_fanCmd(): Option[BuildingControl.FanCmd.Type] = {\n    return fetchContainer().api_fanCmd\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n@sig trait TempControl_i_Api {\n  def id: Art.BridgeId\n  def currentTemp_Id : Art.PortId\n  def fanAck_Id : Art.PortId\n  def setPoint_Id : Art.PortId\n  def fanCmd_Id : Art.PortId\n  def tempChanged_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var fanCmd: Option[BuildingControl.FanCmd.Type] = $\n\n  def put_fanCmd(value : BuildingControl.FanCmd.Type) : Unit = {\n    Contract(\n      Modifies(fanCmd),\n      Ensures(\n        fanCmd == Some(value)\n      )\n    )\n    Spec {\n      fanCmd = Some(value)\n    }\n\n    Art.putValue(fanCmd_Id, BuildingControl.FanCmd_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class TempControl_i_Initialization_Api (\n  val id: Art.BridgeId,\n  val currentTemp_Id : Art.PortId,\n  val fanAck_Id : Art.PortId,\n  val setPoint_Id : Art.PortId,\n  val fanCmd_Id : Art.PortId,\n  val tempChanged_Id : Art.PortId) extends TempControl_i_Api\n\n@datatype class TempControl_i_Operational_Api (\n  val id: Art.BridgeId,\n  val currentTemp_Id : Art.PortId,\n  val fanAck_Id : Art.PortId,\n  val setPoint_Id : Art.PortId,\n  val fanCmd_Id : Art.PortId,\n  val tempChanged_Id : Art.PortId) extends TempControl_i_Api {\n\n  \/\/ Logika spec var representing port state for incoming data port\n  @spec var currentTemp: BuildingControl.Temperature_impl = $\n\n  def get_currentTemp() : Option[BuildingControl.Temperature_impl] = {\n    Contract(\n      Ensures(\n        Res == Some(currentTemp)\n      )\n    )\n    val value : Option[BuildingControl.Temperature_impl] = Art.getValue(currentTemp_Id) match {\n      case Some(BuildingControl.Temperature_impl_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port currentTemp.  Expecting 'BuildingControl.Temperature_impl_Payload' but received ${v}\")\n        None[BuildingControl.Temperature_impl]()\n      case _ => None[BuildingControl.Temperature_impl]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var fanAck: Option[BuildingControl.FanAck.Type] = $\n\n  def get_fanAck() : Option[BuildingControl.FanAck.Type] = {\n    Contract(\n      Ensures(\n        Res == fanAck\n      )\n    )\n    val value : Option[BuildingControl.FanAck.Type] = Art.getValue(fanAck_Id) match {\n      case Some(BuildingControl.FanAck_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port fanAck.  Expecting 'BuildingControl.FanAck_Payload' but received ${v}\")\n        None[BuildingControl.FanAck.Type]()\n      case _ => None[BuildingControl.FanAck.Type]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var setPoint: Option[BuildingControl.SetPoint_impl] = $\n\n  def get_setPoint() : Option[BuildingControl.SetPoint_impl] = {\n    Contract(\n      Ensures(\n        Res == setPoint\n      )\n    )\n    val value : Option[BuildingControl.SetPoint_impl] = Art.getValue(setPoint_Id) match {\n      case Some(BuildingControl.SetPoint_impl_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port setPoint.  Expecting 'BuildingControl.SetPoint_impl_Payload' but received ${v}\")\n        None[BuildingControl.SetPoint_impl]()\n      case _ => None[BuildingControl.SetPoint_impl]()\n    }\n    return value\n  }\n\n  \/\/ Logika spec var representing port state for incoming event port\n  @spec var tempChanged: Option[art.Empty] = $\n\n  def get_tempChanged() : Option[art.Empty] = {\n    Contract(\n      Ensures(\n        Res == tempChanged\n      )\n    )\n    val value : Option[art.Empty] = Art.getValue(tempChanged_Id) match {\n      case Some(Empty()) => Some(Empty())\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port tempChanged.  Expecting 'Empty' but received ${v}\")\n        None[art.Empty]()\n      case _ => None[art.Empty]()\n    }\n    return value\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/component\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject TempControl_i_tcp_tempControl {\n\n  def initialise(api: TempControl_i_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.put_fanCmd(BuildingControl.FanCmd.byOrdinal(0).get)\n  }\n\n  def handle_fanAck(api: TempControl_i_Operational_Api, value: BuildingControl.FanAck.Type): Unit = {\n    api.logInfo(\"example handle_fanAck implementation\")\n    api.logInfo(s\"  received $value\")\n    \/\/ example api usage\n\n    val apiUsage_currentTemp: Option[BuildingControl.Temperature_impl] = api.get_currentTemp()\n    api.logInfo(s\"Received on data port currentTemp: ${apiUsage_currentTemp}\")\n    val apiUsage_fanAck: Option[BuildingControl.FanAck.Type] = api.get_fanAck()\n    api.logInfo(s\"Received on event data port fanAck: ${apiUsage_fanAck}\")\n    val apiUsage_setPoint: Option[BuildingControl.SetPoint_impl] = api.get_setPoint()\n    api.logInfo(s\"Received on event data port setPoint: ${apiUsage_setPoint}\")\n    val apiUsage_tempChanged: Option[art.Empty] = api.get_tempChanged()\n    api.logInfo(s\"Received on event port tempChanged: ${apiUsage_tempChanged}\")\n  }\n\n  def handle_setPoint(api: TempControl_i_Operational_Api, value: BuildingControl.SetPoint_impl): Unit = {\n    api.logInfo(\"example handle_setPoint implementation\")\n    api.logInfo(s\"  received $value\")\n  }\n\n  def handle_tempChanged(api: TempControl_i_Operational_Api): Unit = {\n    api.logInfo(\"example handle_tempChanged implementation\")\n    api.logInfo(\"  received event\")\n  }\n\n  def finalise(api: TempControl_i_Operational_Api): Unit = { }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_Containers.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\nimport building_control_gen_mixed__JVM__runtime_monitoring.util.Container\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n\/\/ containers for the pre and post state values of ports and state variables\n\n@sig trait TempControl_i_tcp_tempControl_PreState_Container extends Container {\n  def api_tempChanged: Option[art.Empty]\n  def api_fanAck: Option[BuildingControl.FanAck.Type]\n  def api_setPoint: Option[BuildingControl.SetPoint_impl]\n  def api_currentTemp: BuildingControl.Temperature_impl\n}\n\n\/\/ container for incoming ports\n@datatype class TempControl_i_tcp_tempControl_PreState_Container_P (\n  val api_tempChanged: Option[art.Empty],\n  val api_fanAck: Option[BuildingControl.FanAck.Type],\n  val api_setPoint: Option[BuildingControl.SetPoint_impl],\n  val api_currentTemp: BuildingControl.Temperature_impl) extends TempControl_i_tcp_tempControl_PreState_Container\n\n\/\/ container for incoming ports and state variables\n@datatype class TempControl_i_tcp_tempControl_PreState_Container_PS (\n  val api_tempChanged: Option[art.Empty],\n  val api_fanAck: Option[BuildingControl.FanAck.Type],\n  val api_setPoint: Option[BuildingControl.SetPoint_impl],\n  val api_currentTemp: BuildingControl.Temperature_impl) extends TempControl_i_tcp_tempControl_PreState_Container\n\n@sig trait TempControl_i_tcp_tempControl_PostState_Container extends Container {\n  def api_fanCmd: Option[BuildingControl.FanCmd.Type]\n}\n\n\/\/ container for outgoing ports\n@datatype class TempControl_i_tcp_tempControl_PostState_Container_P (\n  val api_fanCmd: Option[BuildingControl.FanCmd.Type]) extends TempControl_i_tcp_tempControl_PostState_Container\n\n\/\/ container for outgoing ports and state variables\n@datatype class TempControl_i_tcp_tempControl_PostState_Container_PS (\n  val api_fanCmd: Option[BuildingControl.FanCmd.Type]) extends TempControl_i_tcp_tempControl_PostState_Container\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_TestApi.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art.Art\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n@msig trait Fan_i_tcp_fan_TestApi {\n\n  def BeforeEntrypoint(): Unit = {\n    Art.initTest(Arch.BuildingControlDemo_i_Instance_tcp_fan)\n  }\n\n  def AfterEntrypoint(): Unit = {\n    Art.finalizeTest(Arch.BuildingControlDemo_i_Instance_tcp_fan)\n  }\n\n  def testCompute(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testCompute(Arch.BuildingControlDemo_i_Instance_tcp_fan)\n  }\n\n  def testInitialise(): Unit = {\n    Art.manuallyClearOutput()\n    Art.testInitialise(Arch.BuildingControlDemo_i_Instance_tcp_fan)\n  }\n\n  \/** helper function to set the values of all input ports.\n   * @param fanCmd payloads for event data port fanCmd.\n   *   ART currently supports single element event data queues so\n   *   only the last element of fanCmd will be used\n   *\/\n  def put_concrete_inputs(fanCmd : ISZ[BuildingControl.FanCmd.Type]): Unit = {\n    for(v <- fanCmd){\n      put_fanCmd(v)\n    }\n  }\n\n\n  \/** helper function to check Fan_i_tcp_fan's\n   * output ports.  Use named arguments to check subsets of the output ports.\n   * @param fanAck method that will be called with the payloads to be sent\n   *        on the outgoing event data port 'fanAck'.\n   *\/\n  def check_concrete_output(fanAck: ISZ[BuildingControl.FanAck.Type] => B): Unit = {\n    var testFailures: ISZ[ST] = ISZ()\n\n    var fanAckValue: ISZ[BuildingControl.FanAck.Type] = ISZ()\n    \/\/ TODO: event data port getter should return all of the events\/payloads\n    \/\/       received on event data ports when queue sizes > 1 support is added\n    \/\/       to ART\n    if(get_fanAck().nonEmpty) { fanAckValue = fanAckValue :+ get_fanAck().get }\n    if(!fanAck(fanAckValue)) {\n      testFailures = testFailures :+ st\"'fanAck' did not match expected: received ${fanAckValue.size} events with the following payloads ${fanAckValue}\"\n    }\n\n    assert(testFailures.isEmpty, st\"${(testFailures, \"\\n\")}\".render)\n  }\n\n\n  \/\/ setter for in EventDataPort\n  def put_fanCmd(value : BuildingControl.FanCmd.Type): Unit = {\n    Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanCmd_Id, BuildingControl.FanCmd_Payload(value))\n  }\n\n  \/\/ getter for out EventDataPort\n  def get_fanAck(): Option[BuildingControl.FanAck.Type] = {\n    val value: Option[BuildingControl.FanAck.Type] = get_fanAck_payload() match {\n      case Some(BuildingControl.FanAck_Payload(v)) => Some(v)\n      case Some(v) => halt(s\"Unexpected payload on port fanAck.  Expecting 'BuildingControl.FanAck_Payload' but received ${v}\")\n      case _ => None[BuildingControl.FanAck.Type]()\n    }\n    return value\n  }\n\n  \/\/ payload getter for out EventDataPort\n  def get_fanAck_payload(): Option[BuildingControl.FanAck_Payload] = {\n    return Art.observeOutInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_fan.initialization_api.fanAck_Id).asInstanceOf[Option[BuildingControl.FanAck_Payload]]\n  }\n\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_ScalaTest.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.sireum.$internal.MutableMarker\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\nabstract class Fan_i_tcp_fan_ScalaTest extends\n  AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with\n  Fan_i_tcp_fan_TestApi {\n\n  var clonable: Boolean = true\n  var owned: Boolean = false\n\n  override def string: org.sireum.String = {\n    this.toString()\n  }\n\n  override def $clonable: Boolean = {\n    return clonable\n  }\n\n  override def $clonable_=(b: Boolean): MutableMarker = {\n    clonable = b\n    return this\n  }\n\n  override def $owned: Boolean = {\n    return owned\n  }\n\n  override def $owned_=(b: Boolean): MutableMarker = {\n    owned = b\n    return this\n  }\n\n  override def $clone: MutableMarker = {\n    \/\/ not expecting users to want to clone realizations of this abstract class\n    return this\n  }\n\n  override def beforeEach(): Unit = {\n    BeforeEntrypoint()\n  }\n\n  override def afterEach(): Unit = {\n    AfterEntrypoint()\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_Test.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl._\n\n\/\/ This file will not be overwritten so is safe to edit\nclass Fan_i_tcp_fan_Test extends Fan_i_tcp_fan_ScalaTest {\n\n  test(\"Example Unit Test for Initialise Entry Point\"){\n    \/\/ Initialise Entry Point doesn't read input port values, so just proceed with\n    \/\/ launching the entry point code\n    testInitialise()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n\n  test(\"Example Unit Test for Compute Entry Point\"){\n    \/\/ use put_XXX methods from test\/util\/..\/YYY_TestApi to seed input ports with values\n    testCompute()\n    \/\/ use get_XXX methods and check_concrete_output() from test\/util\/..\/YYY_TestApi\n    \/\/ retrieve values from output ports and check against expected results\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_Bridge.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\nimport building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.{Fan_i_tcp_fan => component}\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@datatype class Fan_i_tcp_fan_Bridge(\n  val id: Art.BridgeId,\n  val name: String,\n  val dispatchProtocol: DispatchPropertyProtocol,\n  val dispatchTriggers: Option[ISZ[Art.PortId]],\n\n  fanCmd: Port[BuildingControl.FanCmd.Type],\n  fanAck: Port[BuildingControl.FanAck.Type]\n  ) extends Bridge {\n\n  val ports : Bridge.Ports = Bridge.Ports(\n    dataIns = ISZ[art.UPort](),\n\n    dataOuts = ISZ[art.UPort](),\n\n    eventIns = ISZ[art.UPort](fanCmd),\n\n    eventOuts = ISZ[art.UPort](fanAck)\n  )\n\n  val initialization_api : Fan_i_Initialization_Api = {\n    val api = Fan_i_Initialization_Api(\n      id,\n      fanCmd.id,\n      fanAck.id\n    )\n    Fan_i_tcp_fan_Bridge.c_initialization_api = Some(api)\n    api\n  }\n\n  val operational_api : Fan_i_Operational_Api = {\n    val api = Fan_i_Operational_Api(\n      id,\n      fanCmd.id,\n      fanAck.id\n    )\n    Fan_i_tcp_fan_Bridge.c_operational_api = Some(api)\n    api\n  }\n\n  val entryPoints : Bridge.EntryPoints =\n    Fan_i_tcp_fan_Bridge.EntryPoints(\n      id,\n\n      fanCmd.id,\n      fanAck.id,\n\n      dispatchTriggers,\n\n      initialization_api,\n      operational_api)\n}\n\nobject Fan_i_tcp_fan_Bridge {\n\n  var c_initialization_api: Option[Fan_i_Initialization_Api] = None()\n  var c_operational_api: Option[Fan_i_Operational_Api] = None()\n\n  @datatype class EntryPoints(\n    Fan_i_tcp_fan_BridgeId : Art.BridgeId,\n    fanCmd_Id : Art.PortId,\n    fanAck_Id : Art.PortId,\n    dispatchTriggers : Option[ISZ[Art.PortId]],\n    initialization_api: Fan_i_Initialization_Api,\n    operational_api: Fan_i_Operational_Api) extends Bridge.EntryPoints {\n\n    val dataInPortIds: ISZ[Art.PortId] = IS()\n\n    val eventInPortIds: ISZ[Art.PortId] = IS(fanCmd_Id)\n\n    val dataOutPortIds: ISZ[Art.PortId] = IS()\n\n    val eventOutPortIds: ISZ[Art.PortId] = IS(fanAck_Id)\n\n    def initialise(): Unit = {\n      Fan_i_tcp_fan_EntryPoint_Companion.pre_initialise()\n\n      \/\/ implement the following method in 'component':  def initialise(api: Fan_i_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n\n      Fan_i_tcp_fan_EntryPoint_Companion.post_initialise()\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def compute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(Fan_i_tcp_fan_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Fan_i_tcp_fan_Injection_Service.pre_receiveInput()\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == fanCmd_Id){\n          val Some(BuildingControl.FanCmd_Payload(value)) = Art.getValue(fanCmd_Id)\n\n          Fan_i_tcp_fan_EntryPoint_Companion.pre_compute(fanCmd_Id)\n\n          \/\/ implement the following in 'component':  def handle_fanCmd(api: Fan_i_Operational_Api, value: BuildingControl.FanCmd.Type): Unit = {}\n          component.handle_fanCmd(operational_api, value)\n\n          Fan_i_tcp_fan_EntryPoint_Companion.post_compute()\n        }\n      }\n\n      Art.sendOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    def finalise(): Unit = {\n      \/\/ implement the following method in 'component':  def finalise(api: Fan_i_Operational_Api): Unit = {}\n      component.finalise(operational_api)\n    }\n\n    override\n    def testInitialise(): Unit = {\n      \/\/ implement the following method in 'component':  def initialise(api: Fan_i_Initialization_Api): Unit = {}\n      component.initialise(initialization_api)\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n\n    override\n    def testCompute(): Unit = {\n      \/\/ transpiler friendly filter\n      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {\n        var r = ISZ[Art.PortId]()\n        val opsTriggers = ops.ISZOps(triggers)\n        for(e <- receivedEvents) {\n          if(opsTriggers.contains(e)) {\n            r = r :+ e\n          }\n        }\n        return r\n      }\n\n      \/\/ fetch received events ordered by highest urgency then earliest arrival-time\n      val EventTriggered(receivedEvents) = Art.dispatchStatus(Fan_i_tcp_fan_BridgeId)\n\n      \/\/ remove non-dispatching event ports\n      val dispatchableEventPorts: ISZ[Art.PortId] =\n        if(dispatchTriggers.isEmpty) receivedEvents\n        else filter(receivedEvents, dispatchTriggers.get)\n\n      Art.receiveInput(eventInPortIds, dataInPortIds)\n\n      for(portId <- dispatchableEventPorts) {\n        if(portId == fanCmd_Id){\n          val Some(BuildingControl.FanCmd_Payload(value)) = Art.getValue(fanCmd_Id)\n\n          \/\/ implement the following in 'component':  def handle_fanCmd(api: Fan_i_Operational_Api, value: BuildingControl.FanCmd.Type): Unit = {}\n          component.handle_fanCmd(operational_api, value)\n        }\n      }\n\n      Art.releaseOutput(eventOutPortIds, dataOutPortIds)\n    }\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_Injection_Service.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@msig trait Fan_i_tcp_fan_Injection_Provider {\n  def pre_receiveInput(): Unit\n}\n\nobject Fan_i_tcp_fan_Injection_Service {\n\n  var providers: MSZ[Fan_i_tcp_fan_Injection_Provider] = MSZ()\n\n  def register(provider: Fan_i_tcp_fan_Injection_Provider): Unit = {\n    providers = providers :+ provider\n  }\n\n  def pre_receiveInput(): Unit = {\n    for (provider <- providers) {\n      provider.pre_receiveInput()\n    }\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_EntryPoint_Companion.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject Fan_i_tcp_fan_EntryPoint_Companion {\n\n  var preStateContainer_wL: Option[Fan_i_tcp_fan_PreState_Container_PS] = None()\n\n  def pre_initialise(): Unit = {\n    \/\/ assume\/require contracts cannot refer to incoming ports or\n    \/\/ state variables so nothing to do here\n  }\n\n  def post_initialise(): Unit = {\n    \/\/ block the component while its post-state values are retrieved\n    val postStateContainer_wL =\n      Fan_i_tcp_fan_PostState_Container_PS(\n        api_fanAck = \n          if (Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanAck_Id).nonEmpty)\n            Some(Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanAck_Id).get.asInstanceOf[BuildingControl.FanAck_Payload].value)\n          else None())\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.BuildingControlDemo_i_Instance_tcp_fan.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_postInit, postStateContainer_wL)\n  }\n\n  def pre_compute(dispatchedEventPortId: Art.PortId): Unit = {\n    \/\/ block the component while its pre-state values are retrieved\n    preStateContainer_wL = Some(\n      Fan_i_tcp_fan_PreState_Container_PS(\n        api_fanCmd = \n          if (dispatchedEventPortId == Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanCmd_Id)\n            if (Art.observeInPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanCmd_Id).nonEmpty)\n              Some(Art.observeInPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanCmd_Id).get.asInstanceOf[BuildingControl.FanCmd_Payload].value)\n            else None()\n          else None()))\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.BuildingControlDemo_i_Instance_tcp_fan.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])\n  }\n\n  def post_compute(): Unit = {\n    \/\/ block the component while its post-state values are retrieved\n    val postStateContainer_wL =\n      Fan_i_tcp_fan_PostState_Container_PS(\n        api_fanAck = \n          if (Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanAck_Id).nonEmpty)\n            Some(Art.observeOutPortVariable(Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanAck_Id).get.asInstanceOf[BuildingControl.FanAck_Payload].value)\n          else None())\n\n    \/\/ the rest can now be performed via a different thread\n    building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.BuildingControlDemo_i_Instance_tcp_fan.id, building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_SystemTestAPI.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring.SystemTestSuiteSlang.runtimeMonitorStream\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject Fan_i_tcp_fan_SystemTestAPI {\n  \/** helper method to set the values of all incoming ports\n    * @param api_fanCmd incoming event data port\n    *\/\n  def put_concrete_inputs(api_fanCmd: Option[BuildingControl.FanCmd.Type]): Unit = {\n    put_fanCmd(api_fanCmd)\n  }\n\n  \/\/ setter for incoming event data port\n  def put_fanCmd(value: Option[BuildingControl.FanCmd.Type]): Unit = {\n    value match {\n      case Some(v) => Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_fan.operational_api.fanCmd_Id, BuildingControl.FanCmd_Payload(v))\n      case _ =>\n    }\n  }\n\n  def fetchContainer(): building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.Fan_i_tcp_fan_PostState_Container_PS = {\n    if (runtimeMonitorStream.contains(Arch.BuildingControlDemo_i_Instance_tcp_fan.id)) {\n      val (_, postContainer_) = runtimeMonitorStream.get(Arch.BuildingControlDemo_i_Instance_tcp_fan.id).get\n      return postContainer_.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.Fan_i_tcp_fan_PostState_Container_PS]\n    }\n    else {\n      assert(F, s\"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_fan.name}\")\n      halt(s\"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_fan.name}\")\n    }\n  }\n\n  def check_concrete_outputs(api_fanAck: Option[BuildingControl.FanAck.Type]): Unit = {\n    var failureReasons: ISZ[ST] = ISZ()\n\n    val actual_fanAck = get_api_fanAck()\n    if (api_fanAck != actual_fanAck) {\n      failureReasons = failureReasons :+ st\"'fanAck' did not match expected.  Expected: $api_fanAck, Actual: $actual_fanAck\"\n    }\n\n    assert(failureReasons.isEmpty, st\"${(failureReasons, \"\\n\")}\".render)\n  }\n\n  def get_api_fanAck(): Option[BuildingControl.FanAck.Type] = {\n    return fetchContainer().api_fanAck\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/bridge\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_Api.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport art._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n@sig trait Fan_i_Api {\n  def id: Art.BridgeId\n  def fanCmd_Id : Art.PortId\n  def fanAck_Id : Art.PortId\n\n  \/\/ Logika spec var representing port state for outgoing event data port\n  @spec var fanAck: Option[BuildingControl.FanAck.Type] = $\n\n  def put_fanAck(value : BuildingControl.FanAck.Type) : Unit = {\n    Contract(\n      Modifies(fanAck),\n      Ensures(\n        fanAck == Some(value)\n      )\n    )\n    Spec {\n      fanAck = Some(value)\n    }\n\n    Art.putValue(fanAck_Id, BuildingControl.FanAck_Payload(value))\n  }\n\n  def logInfo(msg: String): Unit = {\n    Art.logInfo(id, msg)\n  }\n\n  def logDebug(msg: String): Unit = {\n    Art.logDebug(id, msg)\n  }\n\n  def logError(msg: String): Unit = {\n    Art.logError(id, msg)\n  }\n}\n\n@datatype class Fan_i_Initialization_Api (\n  val id: Art.BridgeId,\n  val fanCmd_Id : Art.PortId,\n  val fanAck_Id : Art.PortId) extends Fan_i_Api\n\n@datatype class Fan_i_Operational_Api (\n  val id: Art.BridgeId,\n  val fanCmd_Id : Art.PortId,\n  val fanAck_Id : Art.PortId) extends Fan_i_Api {\n\n  \/\/ Logika spec var representing port state for incoming event data port\n  @spec var fanCmd: Option[BuildingControl.FanCmd.Type] = $\n\n  def get_fanCmd() : Option[BuildingControl.FanCmd.Type] = {\n    Contract(\n      Ensures(\n        Res == fanCmd\n      )\n    )\n    val value : Option[BuildingControl.FanCmd.Type] = Art.getValue(fanCmd_Id) match {\n      case Some(BuildingControl.FanCmd_Payload(v)) => Some(v)\n      case Some(v) =>\n        Art.logError(id, s\"Unexpected payload on port fanCmd.  Expecting 'BuildingControl.FanCmd_Payload' but received ${v}\")\n        None[BuildingControl.FanCmd.Type]()\n      case _ => None[BuildingControl.FanCmd.Type]()\n    }\n    return value\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/component\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ This file will not be overwritten so is safe to edit\nobject Fan_i_tcp_fan {\n\n  def initialise(api: Fan_i_Initialization_Api): Unit = {\n    \/\/ example api usage\n\n    api.logInfo(\"Example info logging\")\n    api.logDebug(\"Example debug logging\")\n    api.logError(\"Example error logging\")\n\n    api.put_fanAck(BuildingControl.FanAck.byOrdinal(0).get)\n  }\n\n  def handle_fanCmd(api: Fan_i_Operational_Api, value: BuildingControl.FanCmd.Type): Unit = {\n    api.logInfo(\"example handle_fanCmd implementation\")\n    api.logInfo(s\"  received $value\")\n    \/\/ example api usage\n\n    val apiUsage_fanCmd: Option[BuildingControl.FanCmd.Type] = api.get_fanCmd()\n    api.logInfo(s\"Received on event data port fanCmd: ${apiUsage_fanCmd}\")\n  }\n\n  def finalise(api: Fan_i_Operational_Api): Unit = { }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_Containers.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\nimport building_control_gen_mixed__JVM__runtime_monitoring.util.Container\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n\/\/ containers for the pre and post state values of ports and state variables\n\n@sig trait Fan_i_tcp_fan_PreState_Container extends Container {\n  def api_fanCmd: Option[BuildingControl.FanCmd.Type]\n}\n\n\/\/ container for incoming ports\n@datatype class Fan_i_tcp_fan_PreState_Container_P (\n  val api_fanCmd: Option[BuildingControl.FanCmd.Type]) extends Fan_i_tcp_fan_PreState_Container\n\n\/\/ container for incoming ports and state variables\n@datatype class Fan_i_tcp_fan_PreState_Container_PS (\n  val api_fanCmd: Option[BuildingControl.FanCmd.Type]) extends Fan_i_tcp_fan_PreState_Container\n\n@sig trait Fan_i_tcp_fan_PostState_Container extends Container {\n  def api_fanAck: Option[BuildingControl.FanAck.Type]\n}\n\n\/\/ container for outgoing ports\n@datatype class Fan_i_tcp_fan_PostState_Container_P (\n  val api_fanAck: Option[BuildingControl.FanAck.Type]) extends Fan_i_tcp_fan_PostState_Container\n\n\/\/ container for outgoing ports and state variables\n@datatype class Fan_i_tcp_fan_PostState_Container_PS (\n  val api_fanAck: Option[BuildingControl.FanAck.Type]) extends Fan_i_tcp_fan_PostState_Container\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/SystemTestSuiteSlang.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\nimport art.scheduling.Scheduler\nimport art.{Art, DataContent}\nimport building_control_gen_mixed__JVM__runtime_monitoring.SystemTestSuiteSlang._\nimport building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.{GumboXDispatcher, ObservationKind, RuntimeMonitor, RuntimeMonitorListener}\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject SystemTestSuiteSlang {\n  \/\/ for now just keep the last post state for a bridge\n  var runtimeMonitorStream: Map[Art.BridgeId, (ObservationKind.Type, DataContent)] = Map.empty\n}\n\n@msig trait SystemTestSuiteSlang extends RuntimeMonitorListener {\n\n  def scheduler: Scheduler\n\n  override def init(modelInfo: building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ModelInfo): Unit = {\n  }\n\n  override def finalise(): Unit = {\n  }\n\n  override def observeInitialisePostState(bridgeId: Art.BridgeId, observationKind: ObservationKind.Type, post: DataContent): Unit = {\n    runtimeMonitorStream = runtimeMonitorStream + (bridgeId ~> (observationKind, post))\n\n  }\n\n  override def observeComputePreState(bridgeId: art.Art.BridgeId, observationKind: building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.Type, pre: Option[art.DataContent]): Unit = {\n  }\n\n  override def observeComputePrePostState(bridgeId: Art.BridgeId,\n                                          observationKind: ObservationKind.Type,\n                                          pre: Option[art.DataContent],\n                                          post: DataContent): Unit = {\n    runtimeMonitorStream = runtimeMonitorStream + (bridgeId ~> (observationKind, post))\n\n  }\n\n  def beforeEachSlang(): Unit = {\n    runtimeMonitorStream = Map.empty\n\n    RuntimeMonitor.registerListener(this)\n\n    Platform.setup()\n    Art.initSystemTest(Arch.ad, scheduler)\n  }\n\n  def afterEachSlang(): Unit = {\n    Art.finalizeSystemTest()\n    Platform.tearDown()\n  }\n\n  def must_match[A](expected: A, actual: A): Unit = {\n    assert(expected == actual, s\"Expected: $expected, Actual: $actual\")\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/SystemTestSuite.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.{BeforeAndAfterEach, OneInstancePerTest}\nimport org.sireum.$internal.MutableMarker\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nabstract class SystemTestSuite extends AnyFunSuite with OneInstancePerTest with BeforeAndAfterEach with SystemTestSuiteSlang {\n\n  override protected def beforeEach(): Unit = {\n    beforeEachSlang()\n  }\n\n  override protected def afterEach(): Unit = {\n    afterEachSlang()\n  }\n\n  override def string: String = toString()\n\n  override def $clonable: Boolean = false\n\n  override def $clonable_=(b: Boolean): MutableMarker = this\n\n  override def $owned: Boolean = false\n\n  override def $owned_=(b: Boolean): MutableMarker = this\n\n  override def $clone: MutableMarker = this\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/ObservationKind.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@enum object ObservationKind {\n  \"BuildingControlDemo_i_Instance_tcp_tempSensor_postInit\"\n  \"BuildingControlDemo_i_Instance_tcp_tempSensor_preCompute\"\n  \"BuildingControlDemo_i_Instance_tcp_tempSensor_postCompute\"\n  \"BuildingControlDemo_i_Instance_tcp_tempControl_postInit\"\n  \"BuildingControlDemo_i_Instance_tcp_tempControl_preCompute\"\n  \"BuildingControlDemo_i_Instance_tcp_tempControl_postCompute\"\n  \"BuildingControlDemo_i_Instance_tcp_fan_postInit\"\n  \"BuildingControlDemo_i_Instance_tcp_fan_preCompute\"\n  \"BuildingControlDemo_i_Instance_tcp_fan_postCompute\"\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/GumboXDispatcher.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject GumboXDispatcher {\n  def checkContract(observationKind: ObservationKind.Type, preContainer: Option[art.DataContent], postContainer: Option[art.DataContent]): B = {\n    observationKind match {\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_postInit =>\n        \/\/ checking the post-state values of tempSensor's initialise entrypoint is not required\n        return T\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_preCompute =>\n        \/\/ checking the pre-state values of tempSensor's compute entrypoint is not required\n        return T\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_postCompute =>\n        \/\/ checking the post-state values of tempSensor's compute entrypoint is not required\n        return T\n\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_postInit =>\n        \/\/ checking the post-state values of tempControl's initialise entrypoint is not required\n        return T\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_preCompute =>\n        \/\/ checking the pre-state values of tempControl's compute entrypoint is not required\n        return T\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_postCompute =>\n        \/\/ checking the post-state values of tempControl's compute entrypoint is not required\n        return T\n\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_postInit =>\n        \/\/ checking the post-state values of fan's initialise entrypoint is not required\n        return T\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_preCompute =>\n        \/\/ checking the pre-state values of fan's compute entrypoint is not required\n        return T\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_postCompute =>\n        \/\/ checking the post-state values of fan's compute entrypoint is not required\n        return T\n\n      case _ => halt(\"Infeasible\")\n    }\n  }\n\n  def genTestSuite(testCases: ISZ[(Z, ISZ[ST])]): Unit = {\n    val tq = \"\\\"\\\"\\\"\"\n\n    val testRoot = Os.path(\".\") \/ \"src\" \/ \"test\" \/ \"bridge\"\n\n    val TempSensor_i_tcp_tempSensor_id = Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id\n    val TempControl_i_tcp_tempControl_id = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id\n    val Fan_i_tcp_fan_id = Arch.BuildingControlDemo_i_Instance_tcp_fan.id\n\n    def genUniqueSuiteName(path: Os.Path, prefix: String): String = {\n      var i = 0\n      while(true) {\n        val cand = path \/ s\"${prefix}_${i}.scala\"\n        if (!cand.exists) {\n          return s\"${prefix}_${i}\"\n        }\n        i = i + 1\n      }\n      halt(\"Infeasible\")\n    }\n\n    for (p <- testCases) {\n      art.Art.BridgeId.fromZ(p._1) match {\n        case TempSensor_i_tcp_tempSensor_id =>\n          val prefix = \"TempSensor_i_tcp_tempSensor_RM_TestSuite\"\n          val path = testRoot \/+ ISZ(\"building_control_gen_mixed__JVM__runtime_monitoring\",\"BuildingControl\")\n          val suiteName = genUniqueSuiteName(path, prefix)\n\n          val testSuite =\n            st\"\"\"package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n                |\n                |import org.sireum._\n                |import building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl._\n                |\n                |class ${suiteName} extends TempSensor_i_tcp_tempSensor_GumboX_TestHarness_ScalaTest {\n                |  val verbose: B = T\n                |\n                |  ${p._2}\n                |}\"\"\"\n          val filename = path \/ s\"${suiteName}.scala\"\n          filename.writeOver(testSuite.render)\n          println(s\"Wrote: ${filename.toUri}\")\n        case TempControl_i_tcp_tempControl_id =>\n          val prefix = \"TempControl_i_tcp_tempControl_RM_TestSuite\"\n          val path = testRoot \/+ ISZ(\"building_control_gen_mixed__JVM__runtime_monitoring\",\"BuildingControl\")\n          val suiteName = genUniqueSuiteName(path, prefix)\n\n          val testSuite =\n            st\"\"\"package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n                |\n                |import org.sireum._\n                |import building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl._\n                |\n                |class ${suiteName} extends TempControl_i_tcp_tempControl_ScalaTest {\n                |  val verbose: B = T\n                |\n                |  ${p._2}\n                |}\"\"\"\n          val filename = path \/ s\"${suiteName}.scala\"\n          filename.writeOver(testSuite.render)\n          println(s\"Wrote: ${filename.toUri}\")\n        case Fan_i_tcp_fan_id =>\n          val prefix = \"Fan_i_tcp_fan_RM_TestSuite\"\n          val path = testRoot \/+ ISZ(\"building_control_gen_mixed__JVM__runtime_monitoring\",\"BuildingControl\")\n          val suiteName = genUniqueSuiteName(path, prefix)\n\n          val testSuite =\n            st\"\"\"package building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl\n                |\n                |import org.sireum._\n                |import building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl._\n                |\n                |class ${suiteName} extends Fan_i_tcp_fan_ScalaTest {\n                |  val verbose: B = T\n                |\n                |  ${p._2}\n                |}\"\"\"\n          val filename = path \/ s\"${suiteName}.scala\"\n          filename.writeOver(testSuite.render)\n          println(s\"Wrote: ${filename.toUri}\")\n        case x => halt(s\"Infeasible bridge id: $x\")\n      }\n    }\n  }\n\n  def genTestCase(observationKind: ObservationKind.Type, preContainer: Option[String], postContainer: Option[String], testNameSuffix: Option[String]): ST = {\n    val tq = \"\\\"\\\"\\\"\"\n    val suffix: String =\n      if (testNameSuffix.nonEmpty) testNameSuffix.get\n      else \"\"\n\n    observationKind match {\n\n\n\n      case _ => return st\"\/\/ TODO ${observationKind}\"\n    }\n  }\n\n  def getUpdates(bridge_id: art.Art.BridgeId, observationKind: ObservationKind.Type, container: art.DataContent): Map[String, String] = {\n    observationKind match {\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_postInit =>\n        var updates: Map[String, String] = Map.empty\n        val postContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempSensor_i_tcp_tempSensor_PostState_Container_PS]\n        updates = updates + s\"${bridge_id}_Out_currentTemp\" ~> postContainer.api_currentTemp.string\n        if (postContainer.api_tempChanged.nonEmpty) {\n          updates = updates + s\"${bridge_id}_Out_tempChanged\" ~> postContainer.api_tempChanged.get.string\n        }\n        return updates\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_postInit =>\n        var updates: Map[String, String] = Map.empty\n        val postContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempControl_i_tcp_tempControl_PostState_Container_PS]\n        if (postContainer.api_fanCmd.nonEmpty) {\n          updates = updates + s\"${bridge_id}_Out_fanCmd\" ~> postContainer.api_fanCmd.get.string\n        }\n        return updates\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_postInit =>\n        var updates: Map[String, String] = Map.empty\n        val postContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.Fan_i_tcp_fan_PostState_Container_PS]\n        if (postContainer.api_fanAck.nonEmpty) {\n          updates = updates + s\"${bridge_id}_Out_fanAck\" ~> postContainer.api_fanAck.get.string\n        }\n        return updates\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_preCompute =>\n        var updates: Map[String, String] = Map.empty\n        val preContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempSensor_i_tcp_tempSensor_PreState_Container_PS]\n        return updates\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_preCompute =>\n        var updates: Map[String, String] = Map.empty\n        val preContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempControl_i_tcp_tempControl_PreState_Container_PS]\n        updates = updates + s\"${bridge_id}_In_currentTemp\" ~> preContainer.api_currentTemp.string\n        if (preContainer.api_fanAck.nonEmpty) {\n          updates = updates + s\"${bridge_id}_In_fanAck\" ~> preContainer.api_fanAck.get.string\n        }\n        if (preContainer.api_setPoint.nonEmpty) {\n          updates = updates + s\"${bridge_id}_In_setPoint\" ~> preContainer.api_setPoint.get.string\n        }\n        if (preContainer.api_tempChanged.nonEmpty) {\n          updates = updates + s\"${bridge_id}_In_tempChanged\" ~> preContainer.api_tempChanged.get.string\n        }\n        return updates\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_preCompute =>\n        var updates: Map[String, String] = Map.empty\n        val preContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.Fan_i_tcp_fan_PreState_Container_PS]\n        if (preContainer.api_fanCmd.nonEmpty) {\n          updates = updates + s\"${bridge_id}_In_fanCmd\" ~> preContainer.api_fanCmd.get.string\n        }\n        return updates\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempSensor_postCompute =>\n        var updates: Map[String, String] = Map.empty\n        val postContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempSensor_i_tcp_tempSensor_PostState_Container_PS]\n        updates = updates + s\"${bridge_id}_Out_currentTemp\" ~> postContainer.api_currentTemp.string\n        if (postContainer.api_tempChanged.nonEmpty) {\n          updates = updates + s\"${bridge_id}_Out_tempChanged\" ~> postContainer.api_tempChanged.get.string\n        }\n        return updates\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_tempControl_postCompute =>\n        var updates: Map[String, String] = Map.empty\n        val postContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.TempControl_i_tcp_tempControl_PostState_Container_PS]\n        if (postContainer.api_fanCmd.nonEmpty) {\n          updates = updates + s\"${bridge_id}_Out_fanCmd\" ~> postContainer.api_fanCmd.get.string\n        }\n        return updates\n      case building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ObservationKind.BuildingControlDemo_i_Instance_tcp_fan_postCompute =>\n        var updates: Map[String, String] = Map.empty\n        val postContainer = container.asInstanceOf[building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.Fan_i_tcp_fan_PostState_Container_PS]\n        if (postContainer.api_fanAck.nonEmpty) {\n          updates = updates + s\"${bridge_id}_Out_fanAck\" ~> postContainer.api_fanAck.get.string\n        }\n        return updates\n      case _ => return Map.empty\n    }\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/ModelInfo.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject ModelInfo {\n  val TempSensor_i_tcp_tempSensor_MI : Component =\n    Component(\n      name = \"TempSensor_i_tcp_tempSensor\",\n      id = Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id.toZ,\n      dispatchProtocol = iDispatchProtocol.Periodic,\n      state = ISZ(\n        Port(\n          name = \"currentTemp\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.currentTemp.id.toZ,\n          kind = PortKind.Data,\n          direction = StateDirection.Out,\n          slangType = \"\"),\n        Port(\n          name = \"tempChanged\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.tempChanged.id.toZ,\n          kind = PortKind.Event,\n          direction = StateDirection.Out,\n          slangType = \"\")))\n\n  val TempControl_i_tcp_tempControl_MI : Component =\n    Component(\n      name = \"TempControl_i_tcp_tempControl\",\n      id = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id.toZ,\n      dispatchProtocol = iDispatchProtocol.Sporadic,\n      state = ISZ(\n        Port(\n          name = \"currentTemp\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.currentTemp.id.toZ,\n          kind = PortKind.Data,\n          direction = StateDirection.In,\n          slangType = \"\"),\n        Port(\n          name = \"fanAck\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.fanAck.id.toZ,\n          kind = PortKind.EventData,\n          direction = StateDirection.In,\n          slangType = \"\"),\n        Port(\n          name = \"setPoint\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.setPoint.id.toZ,\n          kind = PortKind.EventData,\n          direction = StateDirection.In,\n          slangType = \"\"),\n        Port(\n          name = \"fanCmd\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.fanCmd.id.toZ,\n          kind = PortKind.EventData,\n          direction = StateDirection.Out,\n          slangType = \"\"),\n        Port(\n          name = \"tempChanged\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_tempControl.tempChanged.id.toZ,\n          kind = PortKind.Event,\n          direction = StateDirection.In,\n          slangType = \"\")))\n\n  val Fan_i_tcp_fan_MI : Component =\n    Component(\n      name = \"Fan_i_tcp_fan\",\n      id = Arch.BuildingControlDemo_i_Instance_tcp_fan.id.toZ,\n      dispatchProtocol = iDispatchProtocol.Sporadic,\n      state = ISZ(\n        Port(\n          name = \"fanCmd\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_fan.fanCmd.id.toZ,\n          kind = PortKind.EventData,\n          direction = StateDirection.In,\n          slangType = \"\"),\n        Port(\n          name = \"fanAck\",\n          id = Arch.BuildingControlDemo_i_Instance_tcp_fan.fanAck.id.toZ,\n          kind = PortKind.EventData,\n          direction = StateDirection.Out,\n          slangType = \"\")))\n\n  val modelInfo: ModelInfo =\n    ModelInfo(ISZ(\n     TempSensor_i_tcp_tempSensor_MI,\n     TempControl_i_tcp_tempControl_MI,\n     Fan_i_tcp_fan_MI))\n}\n\n@datatype class ModelInfo(val components: ISZ[Component])\n\n@datatype class Component(val name: String,\n                          val id: Z,\n                          val dispatchProtocol: iDispatchProtocol.Type,\n                          val state: ISZ[StateElement])\n\n@enum object iDispatchProtocol {\n  \"Sporadic\"\n  \"Periodic\"\n}\n\n@enum object StateDirection {\n  \"In\"\n  \"Out\"\n}\n\n@sig trait StateElement {\n  def name: String\n\n  def id: Z\n\n  def slangType: String\n\n  def direction: StateDirection.Type\n}\n\n@enum object PortKind {\n  \"Data\"\n  \"Event\"\n  \"EventData\"\n}\n\n@datatype class Port(val name: String,\n                     val id: Z,\n                     val kind: PortKind.Type,\n                     val direction: StateDirection.Type,\n                     val slangType: String) extends StateElement\n\n@datatype class StateVariable(val name: String,\n                              val id: Z,\n                              val direction: StateDirection.Type,\n                              val slangType: String) extends StateElement\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/RuntimeMonitor.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport org.sireum._\nimport art.Art.BridgeId\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@msig trait RuntimeMonitorListener {\n  def init(modelInfo: ModelInfo): Unit\n\n  def finalise(): Unit\n\n  \/**\n    * Called before the initialise entrypoint calls sendOutput\n    *\/\n  def observeInitialisePostState(bridgeId: BridgeId, observationKind: ObservationKind.Type, post: art.DataContent): Unit\n\n  \/**\n    * Called after the compute entrypoint calls receiveInput and before it\n    * invokes the behavior code\n    *\/\n  def observeComputePreState(bridgeId: BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent]): Unit\n\n  \/**\n    * Called after the compute entrypoint calls receiveInput and before it\n    * invokes the behavior code\n    *\/\n  def observeComputePrePostState(bridgeId: BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent], post: art.DataContent): Unit\n}\n\n@ext object RuntimeMonitor {\n\n  def registerListener(listener: RuntimeMonitorListener): Unit = $\n\n  def init(modelInfo: ModelInfo): Unit = $\n\n  def finalise(): Unit = $\n\n  def observeInitialisePostState(bridgeId: BridgeId, observationKind: ObservationKind.Type, post: art.DataContent): Unit = $\n\n  def observeComputePreState(bridgeId: BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent]): Unit = $\n\n  def observeComputePrePostState(bridgeId: BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent], post: art.DataContent): Unit = $\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/RuntimeMonitor_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport org.sireum._\nimport art.Art._\n\nimport java.awt.GraphicsEnvironment\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject RuntimeMonitor_Ext {\n\n  \/** you use the java.awt.headless system property to enable\/disable guis.\n    * e.g. in scala test context\n    *\n    *   override def beforeEach(): Unit = {\n    *     System.setProperty(\"java.awt.headless\", \"true\")\n    *     super.beforeEach()\n    *   }\n    *\n    *\/\n\n  val baseListeners: ISZ[RuntimeMonitorListener] =\n    if (GraphicsEnvironment.isHeadless) ISZ()\n    else {\n      ISZ(\n        \/\/ add\/remove listeners here\n\n\n        \/\/ BEGIN MARKER RUNTIME MONITORING\n\n        \/\/ if you don't want to use the following runtime monitors then surround this marker block\n        \/\/ with a block comment \/** .. **\/ to prevent codegen from emitting an error if it's rerun\n\n        \/\/ new GumboXRuntimeMonitor_Ext(),\n\n        new HamrVisionRuntimeMonitor(HamrVision.cp)\n\n        \/\/ END MARKER RUNTIME MONITORING\n      )\n    }\n\n  var externalListeners: ISZ[RuntimeMonitorListener] = ISZ()\n\n  def registerListener(listener: RuntimeMonitorListener): Unit = {\n    externalListeners = externalListeners :+ listener\n  }\n\n  def init(modelInfo: ModelInfo): Unit = {\n    for (l <- baseListeners) {\n      l.init(modelInfo)\n    }\n    for (l <- externalListeners) {\n      l.init(modelInfo)\n    }\n  }\n\n  def finalise(): Unit = {\n    for (l <- baseListeners) {\n      l.finalise()\n    }\n\n    for (l <- externalListeners) {\n      l.finalise()\n    }\n    \/\/ deregister external listeners\n    externalListeners = ISZ()\n  }\n\n  def observeInitialisePostState(bridgeId: BridgeId, observationKind: ObservationKind.Type, post: art.DataContent): Unit = {\n    for (l <- baseListeners) {\n      l.observeInitialisePostState(bridgeId, observationKind, post)\n    }\n\n    for (l <- externalListeners) {\n      l.observeInitialisePostState(bridgeId, observationKind, post)\n    }\n  }\n\n  def observeComputePreState(bridgeId: BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent]): Unit = {\n    for (l <- baseListeners) {\n      l.observeComputePreState(bridgeId, observationKind, pre)\n    }\n\n    for (l <- externalListeners) {\n      l.observeComputePreState(bridgeId, observationKind, pre)\n    }\n  }\n\n  def observeComputePrePostState(bridgeId: BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent], post: art.DataContent): Unit = {\n    for (l <- baseListeners) {\n      l.observeComputePrePostState(bridgeId, observationKind, pre, post)\n    }\n\n    for (l <- externalListeners) {\n      l.observeComputePrePostState(bridgeId, observationKind, pre, post)\n    }\n  }\n}",
          "markers" : [
            {
              "type" : "TestMarker",
              "beginMarker" : "\/\/ BEGIN MARKER RUNTIME MONITORING",
              "endMarker" : "\/\/ END MARKER RUNTIME MONITORING"
            }
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/GumboXRuntimeMonitor.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring.Schedulers\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject GumboXRuntimeMonitor {\n  \/\/ assign a new map to threadNickNames to provide custom nicknames (e.g. shorter)\n  \/\/ for 1 or more of the threads in the system\n  var threadNickNames: Map[art.Art.BridgeId, String] = Schedulers.revThreadNickNames\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/GumboXRuntimeMonitor_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport art.Art.BridgeId\nimport building_control_gen_mixed__JVM__runtime_monitoring.JSON\nimport org.sireum.$internal.MutableMarker\nimport org.sireum._\n\nimport java.awt.event.WindowEvent\nimport java.awt.{BorderLayout, Dimension}\nimport javax.swing._\nimport javax.swing.table.AbstractTableModel\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nclass GumboXRuntimeMonitor_Ext extends JFrame with RuntimeMonitorListener {\n\n  val testDir = Os.path(\".\") \/ \"src\" \/ \"test\" \/ \"bridge\" \/ \"building_control_gen_mixed__JVM__runtime_monitoring\"\n\n  var jtable: JTable = _\n  var model: TableModel = _\n  var scrollToBottom: B = T\n  val threadNickNames = GumboXRuntimeMonitor.threadNickNames\n\n  def init(modelInfo: ModelInfo): Unit = {\n    this.setTitle(\"GumboX Runtime Monitor\")\n\n    model = new TableModel()\n    jtable = new JTable()\n    jtable.setModel(model)\n\n    val js = new JScrollPane(jtable)\n    js.setVisible(true)\n    add(js, BorderLayout.CENTER)\n\n    val btnGenTestSuite = new JButton(\"Generate TestSuite\")\n    btnGenTestSuite.addActionListener(e => {\n      if (jtable.getSelectedRows.nonEmpty) {\n        var testCases: Map[Z, ISZ[ST]] = Map.empty\n\n        for (row <- jtable.getSelectedRows) {\n          val data = model.getRow(row)\n          val id = data.bridgeId.toZ\n          testCases = testCases + id ~>\n            (testCases.getOrElse(id, ISZ[ST]()) :+\n              GumboXDispatcher.genTestCase(data.observationKind, data.pre, data.post, Some(s\": $row\")))\n        }\n        GumboXDispatcher.genTestSuite(testCases.entries)\n      }\n    })\n    \/*\n    val btnGenTestCase = new JButton(\"Generate Test Case\")\n\n    btnGenTestCase.addActionListener(e => {\n      if (jtable.getSelectedRow >= 0) {\n        val data = model.getRow(jtable.getSelectedRow)\n\n        if (data.observationKind.string.native.contains(\"post\")) {\n          val testCase = GumboXDispatcher.genTestCase(data.observationKind, data.pre, data.post, None())\n\n          val clip = Toolkit.getDefaultToolkit.getSystemClipboard\n          val strse1 = new StringSelection(testCase.render.native)\n          clip.setContents(strse1, strse1)\n\n          val txt = st\"\"\"<html><pre>${testCase.render}<\/pre><\/html>\"\"\"\n          val lbl = new JLabel(txt.render.native)\n\n          val viz = new JFrame()\n          viz.add(lbl)\n\n          viz.pack()\n          viz.setVisible(true)\n        }\n      }\n    })\n\n    val btnVisualize = new JButton(\"Visualize\")\n\n    btnVisualize.addActionListener(e => {\n      if (jtable.getSelectedRow >= 0) {\n        val data = model.getRow(jtable.getSelectedRow)\n\n        val preOpt: Option[ST] = if (data.pre.nonEmpty) Some(st\"Pre: ${JSON.to_artDataContent(data.pre.get).left}\") else None()\n        val postOpt: Option[ST] = if (data.post.nonEmpty) Some(st\"Post: ${JSON.to_artDataContent(data.post.get).left}\") else None()\n\n        val txt =\n          st\"\"\"<html>\n              |  <pre>\n              |    Component: ${data.bridgeId}\n              |    Observation Kind: ${data.observationKind}\n              |    <hr>\n              |    ${preOpt}\n              |    ${postOpt}\n              |  <\/pre>\n              |<\/html>\"\"\"\n\n        val lbl = new JLabel(txt.render.native)\n\n        val viz = new JFrame()\n        viz.add(lbl)\n\n        viz.pack()\n        viz.setVisible(true)\n      }\n    })\n    *\/\n    val jpbutton = new JPanel()\n\n    val chkScroll = new JCheckBox(\"Scroll to bottom\")\n    chkScroll.setSelected(scrollToBottom)\n    chkScroll.addActionListener(e =>\n      scrollToBottom = chkScroll.isSelected\n    )\n    jpbutton.add(chkScroll)\n\n    \/\/jpbutton.add(Box.createRigidArea(new Dimension(10, 0)))\n    jpbutton.setLayout(new BoxLayout(jpbutton, BoxLayout.LINE_AXIS))\n    jpbutton.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10))\n    jpbutton.add(Box.createHorizontalGlue())\n\n    jpbutton.add(btnGenTestSuite)\n    jpbutton.add(Box.createRigidArea(new Dimension(10, 0)))\n\n    \/\/jpbutton.add(btnGenTestCase)\n    \/\/jpbutton.add(Box.createRigidArea(new Dimension(10, 0)))\n\n    \/\/jpbutton.add(btnVisualize)\n\n\n    add(jpbutton, BorderLayout.PAGE_END)\n\n    pack()\n    setResizable(true)\n    setLocation(800, 0)\n    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE)\n    setVisible(true)\n  }\n\n  def finalise(): Unit = {\n    this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING))\n  }\n\n  def observeInitialisePostState(bridge: art.Art.BridgeId, observationKind: ObservationKind.Type, post: art.DataContent): Unit = {\n    SwingUtilities.invokeLater(() => dispatch(bridge, observationKind, None(), Some(post)))\n  }\n\n  def observeComputePreState(bridge: art.Art.BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent]): Unit = {\n    SwingUtilities.invokeLater(() => dispatch(bridge, observationKind, pre, None()))\n  }\n\n  def observeComputePrePostState(bridge: art.Art.BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent], post: art.DataContent): Unit = {\n    SwingUtilities.invokeLater(() => dispatch(bridge, observationKind, pre, Some(post)))\n  }\n\n  def dispatch(bridgeId: art.Art.BridgeId, observationKind: ObservationKind.Type, pre: Option[art.DataContent], post: Option[art.DataContent]): Unit = {\n    val componentName = threadNickNames.get(bridgeId) match {\n      case Some(nickName) => nickName.native\n      case _ => bridgeId.string.native\n    }\n    val s = observationKind.string.native\n    val simpleKind = s.substring(s.lastIndexOf(\"_\") + 1, s.length)\n    model.addRow(Row(bridgeId, observationKind,\n      componentName, simpleKind,\n      GumboXDispatcher.checkContract(observationKind, pre, post),\n      if (pre.nonEmpty) Some(JSON.from_artDataContent(pre.get, T)) else None(),\n      if (post.nonEmpty) Some(JSON.from_artDataContent(post.get, T)) else None()))\n    if (scrollToBottom) {\n      jtable.scrollRectToVisible(jtable.getCellRect(jtable.getRowCount() - 1, 0, true));\n    }\n  }\n\n  override def string: String = toString()\n\n  override def $clonable: Boolean = false\n\n  override def $clonable_=(b: Boolean): MutableMarker = this\n\n  override def $owned: Boolean = false\n\n  override def $owned_=(b: Boolean): MutableMarker = this\n\n  override def $clone: MutableMarker = this\n}\n\ncase class Row(bridgeId: BridgeId, observationKind: ObservationKind.Type,\n               componentName: String, simpleKind: String, result: Boolean, pre: Option[String], post: Option[String])\n\nclass TableModel() extends AbstractTableModel {\n  val columnNames = Array(\"Component\", \"Kind\", \"Satisified\")\n\n  var data: ISZ[Row] = ISZ()\n\n  def addRow(row: Row): Unit = {\n    data = data :+ row\n    fireTableRowsInserted(data.size.toInt - 1, data.size.toInt - 1)\n  }\n\n  def getRow(row: Int): Row = {\n    return data(row)\n  }\n\n  override def getRowCount: Int = {\n    return data.size.toInt\n  }\n\n  override def getColumnCount: Int = {\n    return columnNames.length\n  }\n\n  override def getColumnName(column: Int): java.lang.String = {\n    return columnNames(column)\n  }\n\n  override def getValueAt(rowIndex: Int, columnIndex: Int): Object = {\n    return columnIndex match {\n      case 0 => data(rowIndex).componentName.native\n      case 1 => data(rowIndex).simpleKind.native\n      case 2 => data(rowIndex).result.string.native\n      case _ => halt(\"Infeasible\")\n    }\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/HamrVision.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport org.sireum._\nimport art.scheduling.static.CommandProvider\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject HamrVision {\n\n  var cp: MOption[CommandProvider] = MNone()\n\n  def getCommandProvider(): CommandProvider = {\n    cp = MSome(HamrVisionRuntimeMonitorI.getCommandProvider())\n    return cp.get\n  }\n}\n\n@ext object HamrVisionRuntimeMonitorI {\n  def getCommandProvider(): CommandProvider = $\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/HamrVisionRuntimeMonitorI_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor\n\nimport art.scheduling.static._\nimport art.{Art, DataContent}\nimport org.sireum.$internal.MutableMarker\nimport org.sireum._\nimport org.sireum.hamr.vision.treetable.{Category, Entry, JTreeTable, Row => hvRow}\nimport org.sireum.hamr.vision.value.{StringValue, Value}\n\nimport java.awt.{BorderLayout, Dimension, GridBagConstraints, GridBagLayout}\nimport java.util.concurrent.{Executors, LinkedBlockingDeque, TimeUnit}\nimport javax.swing._\nimport scala.concurrent.{ExecutionContext, ExecutionContextExecutorService, Future}\nimport scala.jdk.CollectionConverters._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject HamrVisionRuntimeMonitorI_Ext {\n  def getCommandProvider(): CommandProvider = {\n    return new HamrVisionCommandProvider()\n  }\n}\n\nclass HamrVisionCommandProvider extends JPanel with InfoCommandProvider {\n\n  var threadNickNames: Map[String, art.Art.BridgeId] = Map.empty\n\n  var numSlots: Z = 0\n\n  var displayOrder: ISZ[Art.BridgeId] = IS()\n\n  var clearColorsCallback: () => Unit = _\n\n  val blockingQueue: LinkedBlockingDeque[Command] = new LinkedBlockingDeque[Command](1)\n\n  val jlNextThread = new JLabel()\n  val jlSlot = new JLabel()\n  val jlDomain = new JLabel()\n  val jlHyperPeriod = new JLabel()\n\n  var lastHP = z\"0\"\n  var cleared: B = F\n\n  def init(threadNickNames: Map[String, Art.BridgeId],\n           numSlots: Z,\n           displayOrder: ISZ[Art.BridgeId]): CommandProvider = {\n    this.threadNickNames = threadNickNames\n    this.numSlots = numSlots\n    this.displayOrder = displayOrder\n\n    var y = 0\n    var x = 0\n    val gbc = new GridBagConstraints()\n\n    def gadd(panel: JComponent, jcomponent: JComponent): Unit = {\n      gbc.gridy = y\n      gbc.gridx = x\n      gbc.anchor = if (x == 0) GridBagConstraints.EAST else GridBagConstraints.WEST\n      panel.add(jcomponent, gbc)\n      y = y + x\n      x = (x + 1) % 2\n    }\n\n    val leftPanel = new JPanel()\n\n    {\n      x = 0\n      y = 0\n\n      leftPanel.setLayout(new GridBagLayout())\n\n      val spnHStep = new JSpinner(new SpinnerNumberModel(1, 1, 100, 1))\n\n      val btnHStep: JButton = new JButton(\"Hyper period Step\")\n      btnHStep.addActionListener(e => {\n        val numSteps = Z(spnHStep.getValue.string).get\n        blockingQueue.offer(Hstep(numSteps), 100, TimeUnit.MILLISECONDS)\n      })\n      gadd(leftPanel, btnHStep)\n      gadd(leftPanel, spnHStep)\n\n      val spnSstep = new JSpinner(new SpinnerNumberModel(1, 1, 100, 1))\n\n      val btnSstep: JButton = new JButton(\"Slot Step\")\n      btnSstep.addActionListener(e => {\n        val numSteps = Z(spnSstep.getValue.string).get\n        blockingQueue.offer(Sstep(numSteps), 100, TimeUnit.MILLISECONDS)\n      })\n      gadd(leftPanel, btnSstep)\n      gadd(leftPanel, spnSstep)\n\n      val nickOrder: ISZ[Predef.String] = {\n        val rev: Map[art.Art.BridgeId, String] = Map.empty ++ (for (e <- threadNickNames.entries) yield e._2 ~> e._1)\n        var ret: ISZ[Predef.String] = ISZ()\n        for(i <- displayOrder) {\n          rev.get(i) match {\n            case Some(k) => ret = ret :+ k.string.native\n            case _ => ret = ret :+ i.string.native\n          }\n        }\n        ret\n      }\n      val cmbThreads = new JComboBox[Predef.String](new java.util.Vector(nickOrder.elements.asJava))\n      cmbThreads.setSelectedIndex(0)\n      val btnRunToThread = new JButton(\"Run To Thread\")\n      btnRunToThread.addActionListener(e => {\n        val thread = cmbThreads.getSelectedItem.asInstanceOf[Predef.String]\n        blockingQueue.offer(RunToThread(thread))\n      })\n      gadd(leftPanel, btnRunToThread)\n      gadd(leftPanel, cmbThreads)\n    }\n\n    val rightPanel = new JPanel()\n\n    {\n      val rightLayout = new GridBagLayout()\n      rightPanel.setLayout(rightLayout)\n\n      y = 0\n      x = 0\n\n      gadd(rightPanel, new JLabel(\"Hyper Period: \"))\n      gadd(rightPanel, jlHyperPeriod)\n\n      gadd(rightPanel, new JLabel(\"Slot: \"))\n      gadd(rightPanel, jlSlot)\n\n      \/\/gadd(rightPanel, new JLabel(\"Domain: \"))\n      \/\/gadd(rightPanel, jlDomain)\n\n      gadd(rightPanel, new JLabel(\"Next Thread: \"))\n      gadd(rightPanel, jlNextThread)\n\n    }\n    val panel = new JPanel(new GridBagLayout())\n    x = 0\n    y = 0\n    gadd(panel, leftPanel)\n    gadd(panel, rightPanel)\n\n    \/\/ add some dummy spacers to try and get left and right panels to\n    \/\/ always be in the exactly in the middle\n    val spacer = new JPanel()\n    spacer.setPreferredSize(new Dimension(600, 1))\n    val spacer2 = new JPanel()\n    spacer2.setPreferredSize(new Dimension(600, 1))\n    gadd(panel, spacer)\n    gadd(panel, spacer2)\n\n    this.add(panel, BorderLayout.CENTER)\n\n    return this\n  }\n\n  override def nextCommand(): Command = {\n    val s = Explorer.scheduleState\n    jlHyperPeriod.setText(s.hyperperiodNum.string.native)\n    jlSlot.setText(s.slotNum.string.native)\n    jlDomain.setText(Schedule.getDomainFromScheduleState(s).string.native)\n    jlNextThread.setText(Schedule.getThreadNickNameFromScheduleState(s).native)\n\n    val nextHP = s.hyperperiodNum\n    if (lastHP != nextHP) {\n      clearColorsCallback()\n      lastHP = nextHP\n    }\n    return blockingQueue.take()\n  }\n\n  override def string: String = toString\n\n  override def $clonable: Boolean = F\n\n  override def $clonable_=(b: Boolean): MutableMarker = this\n\n  override def $owned: Boolean = F\n\n  override def $owned_=(b: Boolean): MutableMarker = this\n\n  override def $clone: MutableMarker = this\n}\n\nclass HamrVisionRuntimeMonitor(cp: MOption[CommandProvider]) extends RuntimeMonitorListener {\n\n  var visionTreeTable: JTreeTable = _\n\n  def clearColors(): Unit = {\n    visionTreeTable.clearColor()\n  }\n\n  def modelInfoEntry(modelInfo: ModelInfo): ISZ[Entry] = {\n    val revMap: Map[art.Art.BridgeId, String] = cp match {\n      case MSome(i: InfoCommandProvider) => Map.empty ++ (for (e <- i.threadNickNames.entries) yield (e._2, e._1))\n      case _ => Map.empty\n    }\n\n    val orderComponents: ISZ[Component] =\n      cp match {\n        case MSome(i: InfoCommandProvider) =>\n          if (i.displayOrder.nonEmpty) {\n            val map = Map.empty ++ (for (c <- modelInfo.components) yield (art.Art.BridgeId.fromZ(c.id), c))\n            val uniqueIds = Set.empty[art.Art.BridgeId]() ++ i.displayOrder\n            for (id <- uniqueIds.elements) yield map.get(id).get\n          } else {\n            modelInfo.components\n          }\n        case _ => modelInfo.components\n      }\n\n    var components: ISZ[Entry] = ISZ()\n\n    for (c <- orderComponents) {\n      var inputs: ISZ[Entry] = ISZ()\n      var outputs: ISZ[Entry] = ISZ()\n\n      for (state <- c.state) {\n        val kind: String = state match {\n          case i: Port =>\n            s\"${if (state.direction == StateDirection.In) \"Incoming\" else \"Outgoing\"} Port\"\n          case i: StateVariable =>\n            s\"${if (state.direction == StateDirection.In) \"Pre\" else \"Post\"} State Variable\"\n        }\n        val id = s\"${c.id}_${state.direction}_${state.name}\"\n        state.direction match {\n          case StateDirection.In =>\n            inputs = inputs :+\n              hvRow(rowId = id.string, values = ISZ(StringValue(state.name), StringValue(kind), StringValue(\"\")))\n          case StateDirection.Out =>\n            outputs = outputs :+\n              hvRow(rowId = id.string, values = ISZ(StringValue(state.name), StringValue(kind), StringValue(\"\")))\n        }\n      }\n      val componentName: String = revMap.get(art.Art.BridgeId.fromZ(c.id)) match {\n        case Some(nick) => nick\n        case _ => c.name\n      }\n      var children: ISZ[Entry] = ISZ()\n      if (inputs.nonEmpty) {\n        children = children :+ Category(displayName = \"Inputs\", children = inputs)\n      }\n      if (outputs.nonEmpty) {\n        children = children :+ Category(displayName = \"Outputs\", children = outputs)\n      }\n      components = components :+ Category(displayName = componentName, children = children)\n    }\n    return components\n  }\n\n  override def init(modelInfo: ModelInfo): Unit = {\n    val entries = modelInfoEntry(modelInfo)\n    visionTreeTable = new JTreeTable(entries, ISZ(\"State Element\", \"Description\", \"Value\"))\n\n    val visionFrame = new JFrame()\n    val visionPane = new JScrollPane(visionTreeTable)\n    visionFrame.add(visionPane, BorderLayout.CENTER)\n    cp match {\n      case MSome(i: HamrVisionCommandProvider) =>\n        visionFrame.add(i, BorderLayout.SOUTH)\n        i.clearColorsCallback = clearColors _\n      case MSome(x) => halt(s\"Not expecting $x\")\n      case _ =>\n    }\n    visionFrame.setTitle(\"HAMR Vision Runtime Monitor\")\n    visionFrame.pack()\n    visionFrame.setSize(new java.awt.Dimension(800, 600))\n    visionFrame.setVisible(true)\n  }\n\n  def updateOutPorts(bridge: art.Art.BridgeId, observationKind: ObservationKind.Type, post: art.DataContent): Unit = {\n    val m: Map[String, String] = GumboXDispatcher.getUpdates(bridge, observationKind, post)\n    for (entry <- m.entries) {\n      visionTreeTable.update(entry._1, ISZ[Option[Value]](None(), None(), Some(StringValue(entry._2))))\n    }\n  }\n\n  def updateInPorts(bridge: art.Art.BridgeId, observationKind: ObservationKind.Type, pre: art.DataContent): Unit = {\n    val m: Map[String, String] = GumboXDispatcher.getUpdates(bridge, observationKind, pre)\n    for (entry <- m.entries) {\n      visionTreeTable.update(entry._1, ISZ[Option[Value]](None(), None(), Some(StringValue(entry._2))))\n    }\n  }\n\n  protected implicit val context: ExecutionContextExecutorService = ExecutionContext.fromExecutorService(Executors.newSingleThreadExecutor())\n\n  override def observeInitialisePostState(bridgeId: Art.BridgeId, observationKind: ObservationKind.Type, post: DataContent): Unit = {\n    Future(updateOutPorts(bridgeId, observationKind, post))\n  }\n\n  override def observeComputePreState(bridgeId: Art.BridgeId, observationKind: ObservationKind.Type, pre: Option[DataContent]): Unit = {\n    \/\/ TODO: really want to run updates in a separate, non-blocking thread. HamrVision should not block\n    \/\/       the Slang program, nor any other running swing GUI -- I don't think SwingUtilities.invokeLater\n    \/\/       guarantees the latter\n    Future(updateInPorts(bridgeId, observationKind, pre.get))\n  }\n\n  override def observeComputePrePostState(bridgeId: Art.BridgeId, observationKind: ObservationKind.Type, pre: Option[DataContent], post: DataContent): Unit = {\n    Future(updateOutPorts(bridgeId, observationKind, post))\n  }\n\n  override def string: String = toString\n\n  override def finalise(): Unit = {}\n\n  override def $clonable: Boolean = F\n\n  override def $clonable_=(b: Boolean): MutableMarker = this\n\n  override def $owned: Boolean = F\n\n  override def $owned_=(b: Boolean): MutableMarker = this\n\n  override def $clone: MutableMarker = this\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/architecture\/building_control_gen_mixed__JVM__runtime_monitoring\/Platform.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\n\nobject Platform {\n\n  def setup(): Unit = {\n    \/\/ BEGIN MARKER PLATFORM SETUP\n    {\n      \/\/ Contributions from GumboX Plugin\n      building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.init(building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.ModelInfo.modelInfo)\n    }\n    \/\/ END MARKER PLATFORM SETUP\n  }\n\n  def tearDown(): Unit = {\n    \/\/ BEGIN MARKER PLATFORM TEARDOWN\n    {\n      \/\/ Contributions from GumboX Plugin\n      building_control_gen_mixed__JVM__runtime_monitoring.runtimemonitor.RuntimeMonitor.finalise()\n    }\n    \/\/ END MARKER PLATFORM TEARDOWN\n  }\n}",
          "markers" : [
            {
              "type" : "TestMarker",
              "beginMarker" : "\/\/ BEGIN MARKER PLATFORM SETUP",
              "endMarker" : "\/\/ END MARKER PLATFORM SETUP"
            },
            {
              "type" : "TestMarker",
              "beginMarker" : "\/\/ BEGIN MARKER PLATFORM TEARDOWN",
              "endMarker" : "\/\/ END MARKER PLATFORM TEARDOWN"
            }
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/bin\/project.cmd",
        {
          "type" : "ITestResource",
          "content" : "::\/*#! 2> \/dev\/null                                   #\r\n@ 2>\/dev\/null # 2>nul & echo off & goto BOF           #\r\nif [ -z \"${SIREUM_HOME}\" ]; then                      #\r\n  echo \"Please set SIREUM_HOME env var\"               #\r\n  exit -1                                             #\r\nfi                                                    #\r\nexec \"${SIREUM_HOME}\/bin\/sireum\" slang run \"$0\" \"$@\"    #\r\n:BOF\r\nsetlocal\r\nif not defined SIREUM_HOME (\r\n  echo Please set SIREUM_HOME env var\r\n  exit \/B -1\r\n)\r\n\"%SIREUM_HOME%\\bin\\sireum.bat\" slang run %0 %*\r\nexit \/B %errorlevel%\r\n::!#*\/\r\n\/\/ #Sireum\r\n\r\n\/\/ Example Sireum Proyek build definitions -- the contents of this file will not be overwritten\r\n\/\/\r\n\/\/ To install Sireum (Proyek and IVE) see https:\/\/sireum.org\/getting-started\/\r\n\/\/\r\n\/\/ The following commands should be executed in the parent of the 'bin' directory.\r\n\/\/\r\n\/\/ Command Line:\r\n\/\/   To run the demo from the command line using the default scheduler:\r\n\/\/     sireum proyek run . building_control_gen_mixed__JVM__runtime_monitoring.Demo\r\n\/\/\r\n\/\/   To see the available CLI options:\r\n\/\/     sireum proyek run . building_control_gen_mixed__JVM__runtime_monitoring.Demo -h\r\n\/\/\r\n\/\/   To run the example unit tests from the command line:\r\n\/\/     sireum proyek test .\r\n\/\/\r\n\/\/   To build an executable jar:\r\n\/\/     sireum proyek assemble --uber --main building_control_gen_mixed__JVM__runtime_monitoring.Demo .\r\n\/\/\r\n\/\/ Sireum IVE:\r\n\/\/\r\n\/\/   Create the IVE project if Codegen was not run locally or if its no-proyek-ive\r\n\/\/   option was used:\r\n\/\/     sireum proyek ive .\r\n\/\/\r\n\/\/   Then in IVE select 'File > Open ...' and navigate to the parent of the\r\n\/\/   'bin' directory and click 'OK'.\r\n\/\/\r\n\/\/   To run the demo from within Sireum IVE:\r\n\/\/     Right click src\/main\/architecture\/building_control_gen_mixed__JVM__runtime_monitoring\/Demo.scala and choose \"Run 'Demo'\"\r\n\/\/\r\n\/\/   To run the unit test cases from within Sireum IVE:\r\n\/\/     Right click the src\/test\/bridge and choose \"Run ScalaTests in bridge\"\r\n\r\nimport org.sireum._\r\nimport org.sireum.project.{Module, Project, Target}\r\n\r\nval home: Os.Path = Os.slashDir.up.canon\r\n\r\nval slangModule: Module = Module(\r\n  id = \"BuildingControlDemo_i_Instance\",\r\n  basePath = (home \/ \"src\").string,\r\n  subPathOpt = None(),\r\n  deps = ISZ(),\r\n  targets = ISZ(Target.Jvm),\r\n  ivyDeps = ISZ(\"org.sireum.kekinian::library:\",\r\n                \"org.sireum.kekinian::hamr-vision:\"),\r\n  sources = for(m <- ISZ(\"art\", \"architecture\", \"bridge\", \"component\", \"data\", \"nix\", \"seL4Nix\", \"util\")) yield (Os.path(\"main\") \/ m).string,\r\n  resources = ISZ(),\r\n  testSources = for (m <- ISZ(\"bridge\", \"system\", \"util\")) yield (Os.path(\"test\") \/ m).string,\r\n  testResources = ISZ(),\r\n  publishInfoOpt = None()\r\n)\r\n\r\nval inspectorModule: Module = slangModule(\r\n  sources = slangModule.sources :+ (Os.path(\"main\") \/ \"inspector\").string,\r\n  ivyDeps = slangModule.ivyDeps ++ ISZ(\"org.sireum:inspector-capabilities:\", \"org.sireum:inspector-gui:\", \"org.sireum:inspector-services-jvm:\")\r\n)\r\n\r\nval slangProject: Project = Project.empty + slangModule\r\nval inspectorProject: Project = Project.empty + inspectorModule\r\n\r\nval prj: Project = slangProject\r\n\/\/val prj: Project = inspectorProject()\r\n\r\nprintln(project.JSON.fromProject(prj, T))\r\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : true,
          "makeCRLF" : true,
          "isDatatype" : false
        }
      ],
      [
        "slang\/versions.properties",
        {
          "type" : "ITestResource",
          "content" : "org.sireum.slang-embedded-art%%slang-embedded-art%=bf6233a\n\norg.sireum%inspector-capabilities%=0.6-SNAPSHOT\norg.sireum%inspector-gui%=0.6-SNAPSHOT\norg.sireum%inspector-services-jvm%=0.6-SNAPSHOT\n\norg.sireum.kekinian%%hamr-vision%=a06e5530c2\n\n# remove the following entries if you want to use the versions\n# that ship with sireum (i.e. $SIREUM_HOME\/bin\/sireum --version)\n\n# Scala compiler plugin for Slang\norg.sireum%%scalac-plugin%=4.20241022.278d005\n\norg.sireum.kekinian%%library%=a06e5530c2\n\norg.scala-lang%scala-library%=2.13.15\norg.scalatest%%scalatest%%=3.2.19\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/build.sc",
        {
          "type" : "ITestResource",
          "content" : "import mill._\nimport scalalib._\n\n\/\/ Example mill build -- the contents of this file will not be overwritten.\n\/\/\n\/\/ A custom mill build for Sireum can be obtained from https:\/\/github.com\/sireum\/rolling\/releases\/tag\/mill\n\/\/ On Windows, rename 'mill' to 'mill.bat'\n\/\/\n\/\/ To run the demo from the command line:\n\/\/   mill building_control_gen_mixed__JVM__runtime_monitoring.run\n\/\/\n\/\/ To run the example unit tests:\n\/\/   mill building_control_gen_mixed__JVM__runtime_monitoring.tests\n\/\/\n\/\/ Sireum IVE: Installation instructions available at https:\/\/sireum.org\/getting-started\/\n\/\/\n\/\/   First cd to the directory containing this file and execute the following:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/sireum tools ivegen -f -m mill -n slang ..\/\n\/\/\n\/\/   Then in IVE select 'File > Open ...' and navigate to the directory\n\/\/   containing this file then click 'OK'.  To have the codebase and its\n\/\/   test suites recompiled upon changes, run:\n\/\/\n\/\/     $SIREUM_HOME\/bin\/mill -w building_control_gen_mixed__JVM__runtime_monitoring.tests.compile\n\/\/\n\/\/ Visual Studio Code:\n\/\/   Follow Sireum Kekinian's instructions for setting up a development\n\/\/   environment using Scala Metals: https:\/\/github.com\/sireum\/kekinian#scala-metals\n\/\/   Then open the folder containing this file in VS Code and import the\n\/\/   mill build when asked.\n\n\nobject `building_control_gen_mixed__JVM__runtime_monitoring` extends slangEmbeddedProject\n\ntrait SlangEmbeddedModule extends ScalaModule {\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n  \/\/ to get the most recent versions of the following dependencies\n\n  \/\/ versions.properties key: org.scala-lang%scala-library%\n  val scalaVer = \"2.13.15\"\n\n  \/\/ versions.properties key: org.scalatest%%scalatest%%\n  val scalaTestVersion = \"3.2.19\"\n\n  \/\/ versions.properties key: org.sireum%%scalac-plugin%\n  \/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20241022.278d005\n  val sireumScalacVersion = \"4.20241022.278d005\"\n\n\n  \/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n  \/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/a06e5530c2\n  val kekinianVersion = \"a06e5530c2\"\n\n\n  val inspectorVersion = \"0.6-SNAPSHOT\"\n\n  val formsRtVersion = \"7.0.3\"\n\n\n  def scalaVersion = scalaVer\n\n  override def javacOptions = T { Seq(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"utf8\") }\n\n  override def scalacOptions = T { Seq(\n    \"-release:8\",\n    \"-deprecation\",\n    \"-Yrangepos\",\n    \"-Ydelambdafy:method\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Xfatal-warnings\",\n    \"-language:postfixOps\"\n  ) }\n\n  override def ivyDeps = Agg(\n    ivy\"org.sireum.kekinian::library::${kekinianVersion}\",\n    ivy\"org.sireum.kekinian::hamr-vision::${kekinianVersion}\",\n\n    \/\/ Jetbrains UI Designer\n    ivy\"com.intellij:forms_rt:${formsRtVersion}\"\n  )\n\n  override def scalacPluginIvyDeps = Agg(ivy\"org.sireum::scalac-plugin::${sireumScalacVersion}\")\n\n  override def repositories = super.repositories :+ coursier.Repositories.jitpack\n\n  override def mainClass = T { Some(\"building_control_gen_mixed__JVM__runtime_monitoring.Demo\") }\n\n  implicit def osPath2PathRef(p: os.Path): PathRef = PathRef(p)\n}\n\ntrait slangEmbeddedProject extends SlangEmbeddedModule {\n\n  def contributedSources: Seq[PathRef] = Seq(\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"architecture\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"art\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"bridge\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"component\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"data\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"nix\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"seL4Nix\",\n    millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"util\"\n  )\n\n  override def sources = T.sources(contributedSources)\n\n  object tests extends Tests {\n\n    final override def millSourcePath = super.millSourcePath \/ os.up \/ os.up \/ \"src\" \/ \"test\"\n\n    override def sources = T.sources( millSourcePath \/ \"bridge\",\n                                      millSourcePath \/ \"system\",\n                                      millSourcePath \/ \"util\" )\n\n    override def ivyDeps = Agg(ivy\"org.scalatest::scalatest::${scalaTestVersion}\")\n\n    override def testFrameworks = T { Seq(\"org.scalatest.tools.Framework\") }\n  }\n}\n\ntrait slangEmbeddedInspectorProject extends slangEmbeddedProject {\n\n  override def mainClass = T { Some(\"building_control_gen_mixed__JVM__runtime_monitoring.InspectorDemo\") }\n\n  override def contributedSources =\n    super.contributedSources :+ millSourcePath \/ os.up \/ \"src\" \/ \"main\" \/ \"inspector\"\n\n  \/\/ FIXME: 2021.01.04 - the following doesn't work due to javafx\/mill resolution issue\n  \/\/        -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767\n  \/\/ override def ivyDeps = Agg(\n  \/\/   ivy\"org.sireum::inspector-capabilities::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-gui::${inspectorVersion}\",\n  \/\/   ivy\"org.sireum::inspector-services-jvm::${inspectorVersion}\"\n\n  \/\/ workaround to #767 -- refer to https:\/\/github.com\/lihaoyi\/mill\/issues\/767#issuecomment-652799588\n  override def unmanagedClasspath = T {\n    import coursier._\n\n    val files = Fetch().addDependencies(\n      dep\"org.sireum:inspector-capabilities:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-gui:0.6-SNAPSHOT\",\n      dep\"org.sireum:inspector-services-jvm:0.6-SNAPSHOT\"\n    ).addRepositories(\n      Repositories.sonatype(\"releases\"),\n      Repositories.jitpack\n    ).run()\n    val pathRefs = files.map(f => PathRef(os.Path(f)))\n    Agg(pathRefs : _*)\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/build.sbt",
        {
          "type" : "ITestResource",
          "content" : "\/\/ Example sbt build definitions -- the contents of this file will not be overwritten\n\/\/\n\/\/ sbt can be obtained from https:\/\/www.scala-sbt.org\/download.html\n\/\/\n\/\/ To run the demo from the command line using the default scheduler:\n\/\/   sbt run\n\/\/\n\/\/ To see the available CLI options:\n\/\/   sbt \"run -h\"\n\/\/\n\/\/ To run the example unit tests from the command line:\n\/\/   sbt test\n\/\/\n\/\/ To build a runnable\/executable jar:\n\/\/   sbt assembly\n\/\/\n\/\/ To skip running the unit tests while building the executable jar:\n\/\/   sbt 'set test in assembly := {}' assembly\n\/\/ on Linux\/Mac, or\n\/\/   sbt \"set test in assembly := {}\" assembly\n\/\/ on Windows\n\/\/\n\/\/ Sireum IVE: Installation instructions available at https:\/\/sireum.org\/getting-started\/\n\/\/\n\/\/   In IVE select 'File > Open ...' and navigate to the directory containing\n\/\/   this file then click 'OK'.\n\/\/\n\/\/   To run the demo from within Sireum IVE:\n\/\/     Right click src\/main\/architecture\/building_control_gen_mixed__JVM__runtime_monitoring\/Demo.scala and choose \"Run 'Demo'\"\n\/\/\n\/\/   To run the unit test cases from within Sireum IVE:\n\/\/     Right click the src\/test\/bridge directory and choose \"Run ScalaTests in bridge\"\n\/\/\n\/\/   NOTE: A ClassNotFoundException may be raised the first time you try to\n\/\/         run the demo or unit tests.  If this occurs simply delete the directory\n\/\/         named 'target' and retry\n\n\nlazy val BuildingControlDemo_i_Instance = slangEmbeddedProject(\"BuildingControlDemo_i_Instance\", \".\")\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/blob\/master\/versions.properties\n\/\/ to get the most recent versions of the following dependencies\n\n\/\/ versions.properties key: org.scala-lang%scala-library%\nval scalaVer = \"2.13.15\"\n\n\/\/ versions.properties key: org.scalatest%%scalatest%%\nval scalaTestVersion = \"3.2.19\"\n\n\/\/ versions.properties key: org.sireum%%scalac-plugin%\n\/\/ https:\/\/github.com\/sireum\/scalac-plugin\/tree\/4.20241022.278d005\nval sireumScalacVersion = \"4.20241022.278d005\"\n\n\n\/\/ refer to https:\/\/github.com\/sireum\/kekinian\/releases to get the latest\n\/\/ Sireum Kekinian release: https:\/\/github.com\/sireum\/kekinian\/tree\/a06e5530c2\nval kekinianVersion = \"a06e5530c2\"\n\n\nval inspectorVersion = \"0.6-SNAPSHOT\"\n\nval formsRtVersion = \"7.0.3\"\n\n\n\nval commonSettings = Seq(\n  organization := \"org.sireum\",\n  incOptions := incOptions.value.withLogRecompileOnMacro(false),\n  scalaVersion := scalaVer,\n  scalacOptions := Seq(\"-release:8\", \"-deprecation\",\n    \"-Ydelambdafy:method\", \"-feature\", \"-unchecked\", \"-Xfatal-warnings\"),\n  Test \/ parallelExecution := true,\n  resolvers ++= Resolver.sonatypeOssRepos(\"public\") ++ Seq(\"jitpack\" at \"https:\/\/jitpack.io\"),\n  addCompilerPlugin(\"org.sireum\" %% \"scalac-plugin\" % sireumScalacVersion),\n  ThisBuild \/ evictionErrorLevel := Level.Warn,\n  libraryDependencies ++= Seq(\n    \"org.sireum.kekinian\" %% \"library\" % kekinianVersion withSources(),\n    \"org.sireum.kekinian\" %% \"hamr-vision\" % kekinianVersion withSources()\n  )\n)\n\nimport sbtassembly.AssemblyPlugin.defaultUniversalScript\nval slangEmbeddedSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/art\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/architecture\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/bridge\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/component\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/data\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/seL4Nix\",\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/util\",\n\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/bridge\",\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/system\",\n  Compile \/ unmanagedSourceDirectories in Test += baseDirectory.value \/ \"src\/test\/util\",\n\n  libraryDependencies += \"org.scalatest\" %% \"scalatest\" % scalaTestVersion % \"test\",\n\n  \/\/ Jetbrains UI Designer\n  libraryDependencies += \"com.intellij\" % \"forms_rt\" % formsRtVersion,\n\n  mainClass in (Compile, run) := Some(\"building_control_gen_mixed__JVM__runtime_monitoring.Demo\"),\n\n  mainClass in assembly := Some(\"building_control_gen_mixed__JVM__runtime_monitoring.Demo\"),\n  assemblyJarName in assembly := \"BuildingControlDemo_i_Instance.jar\",\n  assemblyOption in assembly := (assemblyOption in assembly).value.copy(prependShellScript = Some(defaultUniversalScript(shebang = false))),\n\n  assemblyMergeStrategy in assembly := {\n    case PathList(\"META-INF\", xs @ _*) => MergeStrategy.discard\n    case x => MergeStrategy.first\n  }\n)\n\nval slangEmbeddedInspectorSettings = Seq(\n  Compile \/ unmanagedSourceDirectories += baseDirectory.value \/ \"src\/main\/inspector\",\n\n  libraryDependencies += \"org.sireum\" % \"inspector-capabilities\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-gui\" % inspectorVersion withSources(),\n  libraryDependencies += \"org.sireum\" % \"inspector-services-jvm\" % inspectorVersion withSources(),\n\n  mainClass in (Compile, run) := Some(\"building_control_gen_mixed__JVM__runtime_monitoring.InspectorDemo\"),\n)\n\ndef slangEmbeddedProject(projId: String, projectDirectory: String) =\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings)\n\ndef slangEmbeddedInspectorProject(projId: String, projectDirectory: String) = {\n  Project(id = projId, base = file(projectDirectory)).\n    settings(commonSettings ++ slangEmbeddedSettings ++ slangEmbeddedInspectorSettings)\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/project\/build.properties",
        {
          "type" : "ITestResource",
          "content" : "sbt.version=1.9.0\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/project\/plugins.sbt",
        {
          "type" : "ITestResource",
          "content" : "addSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"0.15.0\")\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/util\/Container.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.util\n\nimport org.sireum._\n\n@sig trait Container extends art.DataContent\n\n@datatype class EmptyContainer extends Container\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/util\/UnitTestConfiguration.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/#Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring.util\n\nimport org.sireum._\nimport building_control_gen_mixed__JVM__runtime_monitoring.util.Container\nimport building_control_gen_mixed__JVM__runtime_monitoring.GumboXUtil.GumboXResult\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\n@msig trait UnitTestConfiguration {\n  def name: String\n  def description: String\n  def profile: Profile\n  def test(c: Container): GumboXResult.Type\n  def genReplay: (Container, String, GumboXResult.Type) => Option[String]\n  def verbose: B\n}\n\n@msig trait UnitTestConfigurationBatch extends UnitTestConfiguration {\n  def numTests: Z\n  def numTestVectorGenRetries: Z\n  def failOnUnsatPreconditions: B\n}\n\n@msig trait Profile {\n  def next: Container\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/util\/MutableBase.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring.util\n\nimport org.sireum._\nimport org.sireum.$internal.MutableMarker\n\ntrait MutableBase extends MutableMarker {\n  def string: String = super.toString\n\n  override def $clonable: Boolean = false\n\n  override def $clonable_=(b: Boolean): MutableMarker = this\n\n  override def $owned: Boolean = false\n\n  override def $owned_=(b: Boolean): MutableMarker = this\n\n  override def $clone: MutableMarker = this\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/GumboXUtil.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\n\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\n\nobject GumboXUtil {\n\n  @enum object GumboXResult {\n    \"Pre_Condition_Unsat\"\n    \"Post_Condition_Pass\"\n    \"Post_Condition_Fail\"\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/test\/system\/building_control_gen_mixed__JVM__runtime_monitoring\/SystemTests.scala",
        {
          "type" : "ITestResource",
          "content" : "package building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.static._\n\n\/\/ This file will not be overwritten so is safe to edit\n\nclass SystemTests extends SystemTestSuite {\n\n  \/\/ note: this is overriding SystemTestSuite's 'def scheduler: Scheduler'\n  \/\/       abstract method\n  var scheduler: StaticScheduler = Schedulers.getStaticSchedulerH(MNone())\n\n  def compute(isz: ISZ[Command]): Unit = {\n    scheduler = scheduler(commandProvider = ISZCommandProvider(isz :+ Stop()))\n\n    Art.computePhase(scheduler)\n  }\n\n  override def beforeEach(): Unit = {\n    \/\/ uncomment the following to disable the various guis\n    \/\/System.setProperty(\"java.awt.headless\", \"true\")\n\n    \/\/ uncomment the following to suppress (or potentially redirect) ART's log stream\n    \/\/art.ArtNative_Ext.logStream = new java.io.PrintStream(new java.io.OutputStream {\n    \/\/  override def write(b: Int): Unit = {}\n    \/\/})\n\n    \/\/ uncomment the following to suppress (or potentially redirect) the static scheduler's log stream\n    \/\/art.scheduling.static.StaticSchedulerIO_Ext.logStream = new java.io.PrintStream(new java.io.OutputStream {\n    \/\/  override def write(b: Int): Unit = {}\n    \/\/})\n\n    super.beforeEach()\n  }\n\n  \/\/ Suggestion: add the following import renamings of the components' SystemTestAPIs,\n  \/\/             replacing nickname with shortened versions that are easier to reference\n  \/\/ import building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.{TempSensor_i_tcp_tempSensor_SystemTestAPI => nickname}\n  \/\/ import building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.{TempControl_i_tcp_tempControl_SystemTestAPI => nickname}\n  \/\/ import building_control_gen_mixed__JVM__runtime_monitoring.BuildingControl.{Fan_i_tcp_fan_SystemTestAPI => nickname}\n\n  test(\"Example system test\") {\n    \/\/ run the initialization phase\n    Art.initializePhase(scheduler)\n\n    \/\/ run components' compute entrypoints through one hyper-period\n    compute(ISZ(Hstep(1)))\n\n    \/\/ use the component SystemTestAPIs' put methods to change the prestate values for components\n    \/\/ TODO\n\n    \/\/ run another hyper-period\n    compute(ISZ(Hstep(1)))\n\n    \/\/ use the component SystemTestAPIs' check or get methods to check the poststate values for components\n    \/\/ TODO\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArchitectureDescription.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n\n@datatype class ArchitectureDescription(components: IS[Art.BridgeId, Bridge],\n                                        connections: IS[Art.ConnectionId, UConnection]) {\n  @spec val allPorts: ISZ[UPort] = $\n\n  @spec def allPortsSpec(i: Z): ISZ[UPort] = $\n  \/*\n    l\"\"\"\n    = base:  ISZ[UPort](), if i == 0\n    = rec:   components(i).ports.all ++ allPorts(i - 1), if 0 < i \u2227 i < components.size\n  \"\"\"\n\n  l\"\"\" invariant\n\n         AllPorts:\n           allPorts \u2261 allPortsSpec(components.size - 1)\n\n         ComponentIdUnique:\n           \u2200i: [0, components.size)\n             \u2200j: [0, components.size)\n               i \u2260 j \u2192 components(i).id \u2260 components(j).id\n\n         PortIdUnique:\n           \u2200i: [0, allPorts.size)\n             \u2200j: [0, allPorts.size)\n               i \u2260 j \u2192 allPorts(i).id \u2260 allPorts(j).id\n   \"\"\"\n  *\/\n}\n\n@datatype trait UConnection {\n  \/*\n  l\"\"\" invariant\n         FromPortOut:   from.mode \u2261 PortMode.DataOut \u2228 from.mode \u2261 PortMode.EventOut\n         DataPort:    (from.mode \u2261 PortMode.DataOut) \u2261 (to.mode \u2261 PortMode.DataIn)\n         EventPort:  (from.mode \u2261 PortMode.EventOut) \u2261 (to.mode \u2261 PortMode.EventIn)  \"\"\"\n  *\/\n\n  def from: UPort\n\n  def to: UPort\n}\n\n@datatype class Connection(val from: UPort, val to: UPort)\n  extends UConnection\n\n\n@enum object PortMode {\n  'DataIn\n  'DataOut\n  'EventIn\n  'EventOut\n}\n\n@datatype trait UPort {\n  def id: Art.PortId\n\n  def name: String\n\n  def mode: PortMode.Type\n}\n\n@datatype trait PortProto extends UPort\n\n@datatype class Port[T](val id: Art.PortId,\n                        val name: String,\n                        val mode: PortMode.Type)\n  extends PortProto\n\n@datatype trait UrgentPortProto extends UPort {\n  def urgency: Z\n}\n\n@datatype class UrgentPort[T](val id: Art.PortId,\n                              val name: String,\n                              val mode: PortMode.Type,\n                              val urgency: Z)\n  extends UrgentPortProto\n\n@sig trait Bridge {\n  def id: Art.BridgeId\n\n  def name: String\n\n  def ports: Bridge.Ports\n\n  def entryPoints: Bridge.EntryPoints\n\n  def dispatchProtocol: DispatchPropertyProtocol\n}\n\n\nobject Bridge {\n\n  \/\/ initialise()  ( compute() )* finalise()\n  @sig trait EntryPoints {\n\n    def initialise(): Unit\n\n    def compute(): Unit\n\n    def finalise(): Unit\n\n    def testCompute(): Unit = {\n      println(\"Default testCompute\")\n    }\n\n    def testInitialise(): Unit = {\n      println(\"Default testInitialise\")\n    }\n  }\n\n  @datatype class Ports(dataIns: ISZ[UPort],\n                        dataOuts: ISZ[UPort],\n                        eventIns: ISZ[UPort],\n                        eventOuts: ISZ[UPort])\n\n}\n\n\n@datatype trait DispatchPropertyProtocol\n\nobject DispatchPropertyProtocol {\n\n  @datatype class Periodic(period: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Aperiodic() extends DispatchPropertyProtocol\n\n  @datatype class Sporadic(min: Z) extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Timed() extends DispatchPropertyProtocol\n\n  \/\/ @datatype class Hybrid() extends DispatchPropertyProtocol\n}\n\n@datatype trait DispatchStatus\n\n@datatype class TimeTriggered() extends DispatchStatus\n\n@datatype class EventTriggered(portIds: ISZ[Art.PortId]) extends DispatchStatus",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/Art.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.scheduling.Scheduler\n\nobject Art {\n\n  @range(min = 0, max = 2, index = T) class BridgeId\n\n  @range(min = 0, max = 8, index = T) class PortId\n\n  @range(min = 0, max = 3, index = T) class ConnectionId\n\n  type Time = S64 \/\/ Z might be too small after transpiling\n\n  val numComponents: Z = 3\n  val numPorts: Z = 9\n  val numConnections: Z = 4\n\n  val logTitle: String = \"Art\"\n\n  val bridges: MSZ[Option[Bridge]] = MS.create(numComponents, None[Bridge]())\n  val ports: MS[Art.PortId, Option[UPort]] = MS.create[Art.PortId, Option[UPort]](numPorts, None[UPort]())\n  val connections: MS[Art.PortId, IS[Art.ConnectionId, Art.PortId]] = MS.create[Art.PortId, IS[Art.ConnectionId, Art.PortId]](numPorts, IS())\n\n  \/\/ Note on transpiling:\n  \/\/ ports and connections are not touched\/transpiled when targeting seL4. Bridges\n  \/\/ are isolated when transpiling so BridgeId.Max could be 0, but changing Min\/Max is\n  \/\/ not currently supported by the transpiler so instead bridges is defined as an MSZ\n  \/\/ so that that its size can be set to 1 and thus reduce stack space requirements\n\n\n  @pure def bridge(bridgeId: Art.BridgeId): Bridge = {\n    return bridges(bridgeId.toZ).get\n  }\n\n  @pure def port(p: Art.PortId): UPort = {\n    return ports(p).get\n  }\n\n  def register(bridge: Bridge): Unit = {\n    bridges(bridge.id.toZ) = Some(bridge)\n    bridge.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (periodic: $period)\")\n      case DispatchPropertyProtocol.Sporadic(min) =>\n        ArtNative.logInfo(logTitle, s\"Registered component: ${bridge.name} (sporadic: $min)\")\n    }\n\n    def r(uports: ISZ[UPort]): Unit = {\n      for (port <- uports) {\n        ports(port.id) = Some(port)\n        \/* transpiler does not emit an extractor for matches in nested functions\n        port.mode match {\n          case PortMode.DataIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data in)\")\n          case PortMode.DataOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (data out)\")\n          case PortMode.EventIn => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event in)\")\n          case PortMode.EventOut => ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} (event out)\")\n        }\n        *\/\n        val typ: String = if (port.mode == PortMode.DataIn) \"(data in)\" else if (port.mode == PortMode.DataOut) \"(data out)\" else if (port.mode == PortMode.EventOut) \"(event out)\" else if (port.mode == PortMode.EventIn) \"(event in)\" else \"(infeasible)\"\n        ArtNative.logInfo(logTitle, s\"- Registered port: ${port.name} $typ\")\n      }\n    }\n\n    r(bridge.ports.dataIns)\n    r(bridge.ports.dataOuts)\n    r(bridge.ports.eventIns)\n    r(bridge.ports.eventOuts)\n  }\n\n  \/\/ can't find definition in the standard ??\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = { \/\/ DISPATCH_STATUS\n    return ArtNative.dispatchStatus(bridgeId)\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ RECEIVE_INPUT\n    ArtNative.receiveInput(eventPortIds, dataPortIds)\n  }\n\n  def putValue(portId: PortId, data: DataContent): Unit = { \/\/ PUT_VALUE\n    ArtNative.putValue(portId, data)\n  }\n\n  def getValue(portId: PortId): Option[DataContent] = { \/\/ GET_VALUE\n    return ArtNative.getValue(portId)\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    ArtNative.sendOutput(eventPortIds, dataPortIds)\n  }\n\n  \/** The seL4 platform doesn't use the bridges data structure and its\n    * version of the loggers ignore the 'title' parameter. Not pattern matching\n    * here as that adds an Option to the stack which increases the stack size.\n    *\/\n  def logInfo(bridgeId: Art.BridgeId, msg: String): Unit = {\n    if (bridges(bridgeId.toZ).nonEmpty) {\n      ArtNative.logInfo(bridges(bridgeId.toZ).get.name, msg)\n    } else {\n      ArtNative.logInfo(\"\", msg)\n    }\n  }\n\n  def logError(bridgeId: Art.BridgeId, msg: String): Unit = {\n    if (bridges(bridgeId.toZ).nonEmpty) {\n      ArtNative.logError(bridges(bridgeId.toZ).get.name, msg)\n    } else {\n      ArtNative.logError(\"\", msg)\n    }\n  }\n\n  def logDebug(bridgeId: Art.BridgeId, msg: String): Unit = {\n    if (bridges(bridgeId.toZ).nonEmpty) {\n      ArtNative.logDebug(bridges(bridgeId.toZ).get.name, msg)\n    } else {\n      ArtNative.logDebug(\"\", msg)\n    }\n  }\n\n  def connect(from: UPort, to: UPort): Unit = {\n    connections(from.id) = connections(from.id) :+ to.id\n    ArtNative.logInfo(logTitle, s\"Connected ports: ${from.name} -> ${to.name}\")\n  }\n\n  \/\/ JH: Refactor\n  \/\/ Define explicit assemble phase (to support both test and execution modes)\n  def assemble(system: ArchitectureDescription): Unit = {\n    for (component <- system.components) {\n      register(component)\n    }\n\n    for (connection <- system.connections) {\n      connect(connection.from, connection.to)\n    }\n  }\n\n  def run(system: ArchitectureDescription,\n          scheduler: Scheduler): Unit = {\n\n    assemble(system)\n\n    setUpArchitecture()\n    setUpPlatform()\n    setUpSystemState(scheduler)\n\n    initializePhase(scheduler)\n    computePhase(scheduler)\n    finalizePhase(scheduler)\n\n    tearDownSystemState()\n    tearDownPlatform()\n    tearDownArchitecture()\n  }\n\n  def initializePhase(scheduler: Scheduler): Unit = {\n    ArtNative.initializePhase()\n    scheduler.initializationPhase()\n  }\n\n  def computePhase(scheduler: Scheduler): Unit = {\n    ArtNative.computePhase()\n    scheduler.computePhase()\n  }\n\n  def finalizePhase(scheduler: Scheduler): Unit = {\n    ArtNative.finalizePhase()\n    scheduler.finalizePhase()\n  }\n\n  def setUpArchitecture(): Unit = {}\n\n  def tearDownArchitecture(): Unit = {}\n\n  def setUpPlatform(): Unit = {}\n\n  def tearDownPlatform(): Unit = {}\n\n  def setUpSystemState(scheduler: Scheduler): Unit = {\n    ArtNative.setUpSystemState()\n    scheduler.initialize()\n  }\n\n  def tearDownSystemState(): Unit = {\n    ArtNative.tearDownSystemState()\n  }\n\n  def time(): Time = {\n    return ArtNative.time()\n  }\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Clears any existing ports and bridges, then sets up ports\/bridges for the next test.\n   *\n   * Automatically called by BridgeTestSuite before each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = None()\n    }\n\n    \/\/ remove all connections\n    for (i <- connections.indices) {\n      connections(i) = IS()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n\n    \/\/ register bridge passed to this method\n    register(bridge)\n\n    \/\/ call ArtNative to reset the state of the specific thread component\n    ArtNative.initTest(bridge)\n  }\n\n  \/**\n  * Executes a component (identified by bridge) Initialize Entry Point (application code)\n  * for the purposes of unit testing.\n  *\n  * This infrastructure method is called with automatically generated unit testing support code.\n  * The developer-facing version of this method (called by a developer unit test)\n  * provided by the unit testing support code hides the bridge argument.  The bridge\n  * value is retrieved from the testing infrastructure code before passing the call\n  * through to this method.\n  *\/\n  def testInitialise(bridge: Bridge): Unit = {\n    ArtNative.testInitialise(bridge)\n  }\n\n  \/**\n   * Executes a component (identified by bridge) Compute Entry Point (application code)\n   * for the purposes of unit testing.\n   *\n   * This infrastructure method is called with automatically generated unit testing support code.\n   * The developer-facing version of this method (called by a developer unit test)\n   * provided by the unit testing support code hides the bridge argument.  The bridge\n   * value is retrieved from the testing infrastructure code before passing the call\n   * through to this method.\n   *\/\n  def testCompute(bridge: Bridge): Unit = {\n    ArtNative.testCompute(bridge)\n  }\n\n\n  def finalizeTest(bridge: Bridge): Unit = {\n    ArtNative.finalizeTest(bridge)\n  }\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def initSystemTest(system: ArchitectureDescription,\n                     scheduler: Scheduler): Unit = {\n    \/\/ remove all bridges\n    for (i <- bridges.indices) {\n      bridges(i) = None()\n    }\n\n    \/\/ remove all connections\n    for (i <- connections.indices) {\n      connections(i) = IS()\n    }\n\n    \/\/ remove all ports\n    for (i <- ports.indices) {\n      ports(i) = None()\n    }\n    \/\/ It seems to me that it might be best to do this once and for all (not for every test) as it is really\n    \/\/ a static description of the model that will not be changing.\n    assemble(system)\n\n    \/\/ let ArtNative reset itself as well\n    ArtNative.initSystemTest(scheduler)\n  }\n\n  \/\/  def executeSystemTest(): Unit = {\n  \/\/    ArtNative.executeTest()\n  \/\/  }\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def finalizeSystemTest(): Unit = {\n    ArtNative.finalizeSystemTest()\n  }\n\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    ArtNative.releaseOutput(eventPortIds, dataPortIds)\n  }\n\n  def manuallyClearOutput(): Unit = {\n    ArtNative.manuallyClearOutput()\n  }\n\n  def insertInInfrastructurePort(dstPortId: Art.PortId, data: DataContent): Unit = {\n    ArtNative.insertInInfrastructurePort(dstPortId, data)\n  }\n\n  def observeInInfrastructurePort(portId: Art.PortId): Option[DataContent] = {\n    return ArtNative.observeInInfrastructurePort(portId)\n  }\n\n  def observeOutInfrastructurePort(portId: Art.PortId): Option[DataContent] = {\n    return ArtNative.observeOutInfrastructurePort(portId)\n  }\n\n  def observeInPortVariable(portId: Art.PortId): Option[DataContent] = {\n    return ArtNative.observeInPortVariable(portId)\n  }\n\n  def observeOutPortVariable(portId: Art.PortId): Option[DataContent] = {\n    return ArtNative.observeOutPortVariable(portId)\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtDebug.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@ext object ArtDebug {\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = $\n\n  def registerListener(listener: ArtListener): Unit = $\n\n  def setDebugObject[T](key: String, o: T): Unit = $\n\n  def getDebugObject[T](key: String): Option[T] = $\n}\n\n@msig trait ArtListener {\n\n  \/\/ lifecycle information\n  def start(time: Art.Time): Unit\n\n  def stop(time: Art.Time): Unit\n\n  \/\/ communication information\n  def output(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Art.Time): Unit\n\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtDebug_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.Art.Time\nimport scala.collection.mutable.{Map => MMap, Set => MSet}\n\nobject ArtDebug_Ext {\n  private val debugObjects: MMap[String, Any] = ArtNative_Ext.concMap()\n  private val listeners: MSet[ArtListener] = concSet()\n\n  protected[art] def start(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.start(time))\n  }\n\n  protected[art] def stop(): Unit = {\n    val time = Art.time()\n    listeners.foreach((listener: ArtListener) => listener.stop(time))\n  }\n\n  protected[art] def outputCallback(src: Art.PortId, dst: Art.PortId, data: DataContent, time: Time): Unit = {\n    listeners.foreach((listener: ArtListener) => listener.output(src, dst, data, time))\n  }\n\n  def setDebugObject[T](key: String, o: T): Unit = {\n    ArtNative.logDebug(Art.logTitle, s\"Set debug object for $key\")\n    debugObjects(key) = o\n  }\n\n  def getDebugObject[T](key: String): Option[T] = {\n    debugObjects.get(key) match {\n      case scala.Some(o) => Some(o.asInstanceOf[T])\n      case _ => None[T]()\n    }\n  }\n\n  def injectPort(bridgeId: Art.BridgeId, port: Art.PortId, data: DataContent): Unit = {\n\n    val bridge = Art.bridges(bridgeId.toZ).get\n\n    if (bridge.ports.dataOuts.elements.map(_.id).contains(port) ||\n      bridge.ports.eventOuts.elements.map(_.id).contains(port)) {\n\n      ArtNative.logDebug(Art.logTitle, s\"Injecting from port ${Art.ports(port).get.name}\")\n\n      ArtNative.putValue(port, data)\n\n      ArtNative.sendOutput(bridge.ports.eventOuts.map(_.id), bridge.ports.dataOuts.map(_.id))\n    } else {\n      ArtNative.logDebug(Art.logTitle, s\"Injecting to port ${Art.ports(port).get.name}\")\n\n      \/\/ right now, there is no difference between treatment of data and event ports, but keep the logic\n      \/\/ separate for further refactoring\n      if (bridge.ports.dataIns.elements.map(_.id).contains(port)) {\n        ArtNative_Ext.inInfrastructurePorts(port.toZ) = ArtMessage(data)\n      } else {\n        ArtNative_Ext.inInfrastructurePorts(port.toZ) = ArtMessage(data)\n      }\n    }\n  }\n\n  def registerListener(listener: ArtListener): Unit = {\n    listeners.add(listener)\n  }\n\n  def concSet[K](): MSet[K] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    val m: java.util.Set[K] = java.util.concurrent.ConcurrentHashMap.newKeySet()\n    m.asScala\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtNative.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.scheduling.Scheduler\n\n@ext object ArtNative {\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = $\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = $\n\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = $\n\n  def getValue(portId: Art.PortId): Option[DataContent] = $\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n\n  def logInfo(title: String, msg: String): Unit = $\n\n  def logError(title: String, msg: String): Unit = $\n\n  def logDebug(title: String, msg: String): Unit = $\n\n\n  def tearDownSystemState(): Unit = $\n\n  def setUpSystemState(): Unit = $\n\n  \/\/ JH: Refactor\n  def initializePhase(): Unit = $\n\n  \/\/ JH: Refactor\n  def computePhase(): Unit = $\n\n  \/\/ JH: Refactor\n  def finalizePhase(): Unit = $\n\n  def time(): Art.Time = $\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Calls the initialize entry points on all registered bridges.\n   *\n   * An analogue to this method does not show up in developer-written unit tests because\n   * the it's invoked behind the scenes by the automatically generated unit test infrastructure\n   * as a prelude to each test.\n   *\n   *\/\n  def initTest(bridge: Bridge): Unit = $\n\n  \/**\n   * Executes the application code in the Initialize Entry Point for the component (identified\n   * by given bridge) for the purposes of testing.\n   *\n   * Precondition: testInit() has been called prior.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n  *\/\n  def testInitialise(bridge: Bridge): Unit = $\n\n  \/**\n   * Executes the application code in the Compute Entry Point for the component (identified\n   * by given bridge) for the purposes of testing.\n   *\n   * Precondition: initTest() has been called prior.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def testCompute(bridge: Bridge): Unit = $\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   *\n   * An analogue to this method does not show up in developer-written unit tests because\n   * the it's invoked behind the scenes by the automatically generated unit test infrastructure\n   * as a postlude to each test.\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = $\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def initSystemTest(scheduler: Scheduler): Unit = $\n\n  \/\/  def executeSystemTest(): Unit = $\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def finalizeSystemTest(): Unit = $\n\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = $\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be used by users to manually\n   * clear the output if desired. This is useful for tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = $\n\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInInfrastructurePort(dstPortId: Art.PortId, data: DataContent): Unit = $\n\n  \/**\n   * Returns the value of an infrastructure in port.\n   *\n   * @param portId the id of the INPUT infrastructure port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeInInfrastructurePort(portId: Art.PortId): Option[DataContent] = $\n\n  \/**\n   * Returns the value of an infrastructure out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutInfrastructurePort(portId: Art.PortId): Option[DataContent] = $\n\n  \/**\n     * Returns the value of an application in port.\n     *\n     * @param portId the id of the INPUT port to return a value from\n     * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n     *\/\n  def observeInPortVariable(portId: Art.PortId): Option[DataContent] = $\n\n  \/**\n     * Returns the value of an application out port.\n     *\n     * @param portId the id of the OUTPUT port to return a value from\n     * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n     *\/\n  def observeOutPortVariable(portId: Art.PortId): Option[DataContent] = $\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtNativeSlang.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\nimport art.DispatchPropertyProtocol.{Periodic, Sporadic}\nimport org.sireum.S64._\n\nobject ArtSlangMessage {\n  val UNSET_TIME: Art.Time = s64\"-1\"\n}\n\n@datatype class ArtSlangMessage(data: DataContent,\n\n                                srcPortId: Art.PortId,\n                                dstPortId: Option[Art.PortId],\n\n                                \/\/ when putValue was called by producer\n                                putValueTimestamp: Art.Time,\n\n                                \/\/ when sendOutput transferred message from out port var of producer\n                                sendOutputTimestamp: Art.Time,\n\n                                \/\/ when message arrived via transport layer\n                                dstArrivalTimestamp: Art.Time,\n\n                                \/\/ when receiveInput transferred message to in port vars of consumer\n                                receiveInputTimestamp: Art.Time\n                               )\n\nobject ArtNativeSlang {\n\n  var inInfrastructurePorts: Map[Z, ArtSlangMessage] = Map.empty\n  var outInfrastructurePorts: Map[Z, ArtSlangMessage] = Map.empty\n  var inPortVariables: Map[Z, ArtSlangMessage] = Map.empty\n  var outPortVariables: Map[Z, ArtSlangMessage] = Map.empty\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    assert(Art.bridges(bridgeId.toZ).nonEmpty, s\"Bridge ${bridgeId} does not exist\")\n\n    Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n\n        val eventIns = Art.bridges(bridgeId.toZ).get.ports.eventIns\n\n        var hasEvents = F\n        \/\/ transpiler workaround -- doesn't support .exists\n        for (e <- eventIns) {\n          if (inInfrastructurePorts.contains(e.id.toZ)) {\n            hasEvents = T\n          }\n        }\n        return hasEvents\n    }\n  }\n\n  \/\/ transpiler friendly comparator\n  def lt(a: art.UPort, b: art.UPort): B = { \/\/ reverse sort\n    val r: B = (a, b) match {\n      \/\/ sorting function to make prioritized sequence of event port ids\n      \/\/   compare p1 to p2  (p1 represents the port to process earlier, i.e., should have priority)\n      case (p1: UrgentPortProto, p2: UrgentPortProto) =>\n        \/\/ if p1 has a strictly less urgency it comes after p2\n        if (p1.urgency < p2.urgency) F\n        \/\/ if p1 has a strictly greater urgency, it comes before p2\n        else if (p1.urgency > p2.urgency) T\n        \/\/ if p1 and p2 have the same urgency, the ordering is determined by arrival timestamps\n        else inInfrastructurePorts.get(p1.id.toZ).get.dstArrivalTimestamp < inInfrastructurePorts.get(p2.id.toZ).get.dstArrivalTimestamp\n      case (_: UrgentPortProto, _: PortProto) => T \/\/ urgent ports take precedence\n      case (_: PortProto, _: UrgentPortProto) => F \/\/ urgent ports take precedence\n      case (p1: PortProto, p2: PortProto) =>\n        inInfrastructurePorts.get(p1.id.toZ).get.dstArrivalTimestamp < inInfrastructurePorts.get(p2.id.toZ).get.dstArrivalTimestamp\n    }\n    return r\n  }\n\n  \/\/ transpiler friendly sort\n  def sort(ports: ISZ[UPort]): ISZ[UPort] = {\n    def insert(p: UPort, sorted: ISZ[UPort]): ISZ[UPort] = {\n      if (sorted.isEmpty) {\n        return ISZ[UPort](p)\n      }\n      else {\n        if (lt(sorted(0), p)) {\n          return sorted(0) +: insert(p, ops.ISZOps(sorted).tail)\n        }\n        else {\n          return p +: sorted\n        }\n      }\n    }\n\n    if (ports.isEmpty) {\n      return ports\n    }\n    else {\n      val sorted = sort(ops.ISZOps(ports).tail)\n      return insert(ports(0), sorted)\n    }\n  }\n\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val ret: DispatchStatus = Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case Periodic(_) => TimeTriggered()\n      case Sporadic(_) =>\n        \/\/ get ids for non-empty input event ports\n        val uports: ISZ[UPort] =\n          for (p <- Art.bridges(bridgeId.toZ).get.ports.eventIns if inInfrastructurePorts.get(p.id.toZ).nonEmpty) yield p\n\n        if (uports.isEmpty) {\n          halt(s\"Unexpected: shouldDispatch() should have returned true in order to get here, however the incoming event ports are empty for bridge id ${bridgeId}\")\n        }\n\n        val urgentFifo = sort(uports)\n        EventTriggered(for (p <- urgentFifo) yield p.id)\n    }\n    return ret\n  }\n\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ remove any old events from previous dispatch\n    for (portId <- eventPortIds if inPortVariables.contains(portId.toZ)) {\n      inPortVariables = inPortVariables - ((portId.toZ, inPortVariables.get(portId.toZ).get))\n    }\n\n    \/\/ transfer received data\/events from the infrastructure ports to the port variables\n    for (portId <- eventPortIds) {\n      inInfrastructurePorts.get(portId.toZ) match {\n        case Some(data) =>\n          inInfrastructurePorts = inInfrastructurePorts - ((portId.toZ, data))\n          inPortVariables = inPortVariables + (portId.toZ ~> data(receiveInputTimestamp = Art.time()))\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      inInfrastructurePorts.get(portId.toZ) match {\n        case Some(data) =>\n          inPortVariables = inPortVariables + (portId.toZ ~> data)\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    \/\/ wrap the Art.DataContent value into an ArtMessage with time stamps\n    outPortVariables = outPortVariables + (portId.toZ ~>\n      ArtSlangMessage(data = data, srcPortId = portId, putValueTimestamp = Art.time(),\n        dstPortId = None(), sendOutputTimestamp = ArtSlangMessage.UNSET_TIME, dstArrivalTimestamp = ArtSlangMessage.UNSET_TIME, receiveInputTimestamp = ArtSlangMessage.UNSET_TIME))\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ To return the value of the port to the application code, project\n    \/\/ out the actual payload value (v.data) from ArtMessage (which includes timestamps, etc.)\n    \/\/ to Art.DataContent (the \"top\"\/union data type supported by Art.\n    \/\/ The projecting preserves the option of structure of ArtMessage value.\n    if (inPortVariables.contains(portId.toZ)) {\n      return Some(inPortVariables.get(portId.toZ).get.data)\n    } else {\n      return None()\n    }\n  }\n\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      outPortVariables.get(srcPortId.toZ) match {\n        case Some(msg) => {\n\n          \/\/ move payload from out port port variables to the out infrastructure ports\n          outInfrastructurePorts = outInfrastructurePorts + (srcPortId.toZ ~> msg)\n          outPortVariables = outPortVariables - ((srcPortId.toZ, msg))\n\n          \/\/ simulate sending msg via transport middleware\n          for (dstPortId <- Art.connections(srcPortId)) {\n            val _msg = msg(dstPortId = Some(dstPortId), sendOutputTimestamp = Art.time())\n\n            \/\/ send via middleware\n\n            inInfrastructurePorts = inInfrastructurePorts + (dstPortId.toZ ~>\n              _msg(dstArrivalTimestamp = Art.time()))\n          }\n\n          \/\/ payload delivered so remove it from out infrastructure port\n          outInfrastructurePorts = outInfrastructurePorts - ((srcPortId.toZ, msg))\n        }\n        case _ =>\n      }\n    }\n    \/\/ could clear outPortVariables for passed in portids but not strictly necessary\n  }\n\n  \/**\n   * Returns the value of an in infrastructure port.\n   *\n   * @param portId the id of the INPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeInInfrastructurePort(portId: Art.PortId): Option[DataContent] = {\n    \/\/ right now, with event data port queues limited to size one, there is no difference in the logic\n    \/\/ between how data ports are treated, and how event\/event data ports are treated.\n    Art.port(portId).mode match {\n      case PortMode.DataIn =>\n        inInfrastructurePorts.get(portId.toZ) match {\n          case Some(value) => return Some(value.data)\n          case _ => return None()\n        }\n      case PortMode.EventIn =>\n        inInfrastructurePorts.get(portId.toZ) match {\n          case Some(value) => return Some(value.data)\n          case _ => return None()\n        }\n      case _ => {\n        assert(false, \"expecting in port\")\n        return None()\n      }\n    }\n  }\n\n  \/**\n   * Returns the value of an infrastructure out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutInfrastructurePort(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: would be changed when we refactor to support event queues of size > 1\n    outInfrastructurePorts.get(portId.toZ) match {\n      case Some(value) => return Some(value.data)\n      case _ => return None()\n    }\n  }\n\n  \/**\n   * Returns the value of an application in port.\n   *\n   * @param portId the id of the INPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeInPortVariable(portId: Art.PortId): Option[DataContent] = {\n    \/\/ right now, with event data port queues limited to size one, there is no difference in the logic\n    \/\/ between how data ports are treated, and how event\/event data ports are treated.\n    Art.port(portId).mode match {\n      case PortMode.DataIn =>\n        inPortVariables.get(portId.toZ) match {\n          case Some(value) => return Some(value.data)\n          case _ => return None()\n        }\n      case PortMode.EventIn =>\n        inPortVariables.get(portId.toZ) match {\n          case Some(value) => return Some(value.data)\n          case _ => return None()\n        }\n      case _ => {\n        assert(false, \"expecting in port\")\n        return None()\n      }\n    }\n  }\n\n  \/**\n     * Returns the value of an application out port.\n     *\n     * @param portId the id of the OUTPUT port to return a value from\n     * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n     *\/\n  def observeOutPortVariable(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: would be changed when we refactor to support event queues of size > 1\n    outPortVariables.get(portId.toZ) match {\n      case Some(value) => return Some(value.data)\n      case _ => return None()\n    }\n  }\n\n  def logInfo(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n  def logDebug(title: String, msg: String): Unit = {\n    eprint(title)\n    eprint(\": \")\n    eprintln(msg)\n  }\n\n  def logError(title: String, msg: String): Unit = {\n    print(title)\n    print(\": \")\n    println(msg)\n  }\n\n\n  def setUpSystemState(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n  def tearDownSystemState(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n\n  def initializePhase(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n  def computePhase(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n  def finalizePhase(): Unit = {\n    \/\/ probably nothing to do here\n  }\n\n\n  def time(): Art.Time = {\n    return Process.time()\n  }\n}\n\n@ext(name = \"art.ArtNative_Ext\") object Process {\n  def time(): Art.Time = $\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtNative_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art\n\nimport org.sireum._\nimport art.DispatchPropertyProtocol.{Periodic, Sporadic}\nimport art.scheduling.Scheduler\nimport org.sireum.S64._\nimport scala.collection.mutable.{Map => MMap}\n\nobject ArtMessage {\n  val UNSET_TIME: Art.Time = s64\"-1\"\n}\n\ncase class ArtMessage(data: DataContent,\n\n                      var srcPortId: Option[Art.PortId] = None(),\n                      var dstPortId: Option[Art.PortId] = None(),\n\n                      \/\/ when putValue was called by producer\n                      var putValueTimestamp: Art.Time = ArtMessage.UNSET_TIME,\n\n                      \/\/ when sendOutput transferred message from out port var of producer\n                      var sendOutputTimestamp: Art.Time = ArtMessage.UNSET_TIME,\n\n                      \/\/ when message arrived via transport layer\n                      var dstArrivalTimestamp: Art.Time = ArtMessage.UNSET_TIME,\n\n                      \/\/ when receiveInput transferred message to in port vars of consumer\n                      var receiveInputTimestamp: Art.Time = ArtMessage.UNSET_TIME\n                     )\n\nobject ArtNative_Ext {\n  val noTime: Art.Time = s64\"0\"\n\n  val slowdown: Z = 1\n\n  \/\/================================================================\n  \/\/   A r c h i t e c t u r e     D e s c r i p t i o n\n  \/\/================================================================\n\n  \/\/ Architecture description includes any data structures built from Arch information\n  \/\/ to support system execution (i.e., by making certain types of lookup of Arch\n  \/\/ information easier).   This information persists across runs, i.e., it doesn't\n  \/\/ need to be changed between different runs of the system as long as the architecture\n  \/\/ has not changed.\n\n  \/\/ JH: Refactored - moved out of legacy run method to enable separate\n  \/\/ init\/compute\/finalize phase methods.\n  \/\/    This structure is essentially a helper for accessing the Arch description.\n  \/\/    We should study the Arch description to assess (more systematically)\n  \/\/    what types of helpers are needed and where they would go.\n  \/*\n  var activeBridges: IS[Art.BridgeId, Art.BridgeId] = ISZ()\n  def setUpArchitecture() : Unit = {\n    for(e <- Art.bridges.elements if(e.nonEmpty)) {\n      activeBridges = activeBridges :+ e.get.id\n    }\n  }\n  def tearDownArchitecture() : Unit = {\n    activeBridges = IS[Art.BridgeId, Art.BridgeId]()\n  }\n  *\/\n\n  \/\/================================================================\n  \/\/   P l a t f o r m     S t a t e\n  \/\/================================================================\n\n  \/\/ Architecture description includes any infrastructure necessary to\n  \/\/ support the platform including communication instrastructure and\n  \/\/ other resources that may exist across multiple executions\n\n  \/*\n  def setUpPlatform() : Unit = {\n  }\n  def tearDownPlatform() : Unit = {\n  }\n  *\/\n\n  \/\/================================================================\n  \/\/   S y s t e m     S t a t e\n  \/\/================================================================\n\n  val inInfrastructurePorts: MMap[Z, ArtMessage] = concMap()\n  val outInfrastructurePorts: MMap[Z, ArtMessage] = concMap()\n  val inPortVariables: MMap[Z, ArtMessage] = concMap()\n  val outPortVariables: MMap[Z, ArtMessage] = concMap()\n\n\n  \/\/ Initializes system state in preparation for execution of initialize, compute, and finalize phases\n  \/\/ System state includes any state associated with system execution, e.g., things that would need to be\n  \/\/ set up and cleared between runs, but does not include things related to system architecture or platform\n  \/\/ infrastructure that could persist between runs.\n\n  def setUpSystemState(): Unit = {\n    inInfrastructurePorts.clear()\n    inPortVariables.clear()\n    outPortVariables.clear()\n    outInfrastructurePorts.clear()\n\n    \/\/ cancel pending ArtTimer callbacks (also done after a test completes)\n    ArtTimer_Ext.scheduledCallbacks.keys.foreach(ArtTimer_Ext.cancel)\n\n    \/\/scheduler.initialize()\n  }\n\n  def tearDownSystemState(): Unit = {\n    inInfrastructurePorts.clear()\n    inPortVariables.clear()\n    outPortVariables.clear()\n    outInfrastructurePorts.clear()\n\n    \/\/ cancel pending ArtTimer callbacks (also done after a test completes)\n    ArtTimer_Ext.scheduledCallbacks.keys.foreach(ArtTimer_Ext.cancel)\n  }\n\n\n  \/\/===============================================================================\n  \/\/  Port-related AADL run-time services\n  \/\/===============================================================================\n\n  \/\/ JH: Refactored -- renamed port data structures\n  \/\/ TODO -- Consider whether changing the value from ArtMessage to Art.DataContent should happen here (instead of in getValue)\n  def receiveInput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = {\n    \/\/ remove any old events from previous dispatch\n    for (portId <- eventPortIds if inPortVariables.contains(portId.toZ)) {\n      inPortVariables -= portId.toZ\n    }\n\n    \/\/ transfer received data\/events from the infrastructure ports to the port variables\n    for (portId <- eventPortIds) {\n      inInfrastructurePorts.get(portId.toZ) match {\n        case scala.Some(data) =>\n          inInfrastructurePorts -= portId.toZ \/\/ dequeue from infrastructure port\n          inPortVariables(portId.toZ) = data \/\/ when we shift to queue size greater than 1, we would enqueue here\n        case _ =>\n      }\n    }\n    for (portId <- dataPortIds) {\n      inInfrastructurePorts.get(portId.toZ) match {\n        case scala.Some(data) =>\n          \/\/ for data ports, we don't dequeue from infrastastructure ports\n          inPortVariables(portId.toZ) = data\n        case _ =>\n      }\n    }\n  }\n\n  def putValue(portId: Art.PortId, data: DataContent): Unit = {\n    \/\/ wrap the Art.DataContent value into an ArtMessage with time stamps\n    outPortVariables(portId.toZ) = ArtMessage(data = data, srcPortId = Some(portId), putValueTimestamp = Art.time())\n  }\n\n  def getValue(portId: Art.PortId): Option[DataContent] = {\n    \/\/ To return the value of the port to the application code, project\n    \/\/ out the actual payload value (v.data) from ArtMessage (which includes timestamps, etc.)\n    \/\/ to Art.DataContent (the \"top\"\/union data type supported by Art.\n    \/\/ The projecting preserves the option of structure of ArtMessage value.\n    val data = inPortVariables.get(portId.toZ) match {\n      case scala.Some(v) => org.sireum.Some(v.data)\n      case _ => org.sireum.None[DataContent]()\n    }\n    return data\n  }\n\n  \/\/ JH: Refactored\n  \/\/      - change names of port data structures\n  \/\/      - introduce a distinction between output port variables and output infrastructure ports\n  \/\/ ToDo: Introduce the concept of a distinct transfer method.\n  \/\/  The way that implementation treats outPortVariables and outInfrastructurePorts is almost nonsensical\n  \/\/  until that refactoring is made.\n  def sendOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ SEND_OUTPUT\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      outPortVariables.get(srcPortId.toZ) match {\n        case scala.Some(msg) =>\n          \/\/ move payload from out port port variables to the out infrastructure ports\n          outInfrastructurePorts(srcPortId.toZ) = outPortVariables(srcPortId.toZ)\n          outPortVariables -= srcPortId.toZ\n\n          \/\/ simulate sending msg via transport middleware\n          for (dstPortId <- Art.connections(srcPortId).elements) {\n\n            val _msg = msg.copy(dstPortId = Some(dstPortId), sendOutputTimestamp = Art.time())\n\n            Art.port(dstPortId).mode match {\n              \/\/ right now, there is no difference in the logic between data and event ports,\n              \/\/ but keep the code separate for future refactorings\n              case PortMode.DataIn | PortMode.DataOut =>\n                inInfrastructurePorts(dstPortId.toZ) = _msg\n              case PortMode.EventIn | PortMode.EventOut =>\n                inInfrastructurePorts(dstPortId.toZ) = _msg\n            }\n\n            _msg.dstArrivalTimestamp = Art.time()\n\n            ArtDebug_Ext.outputCallback(srcPortId, dstPortId, _msg.data, _msg.dstArrivalTimestamp)\n          }\n\n          \/\/ payload delivered so remove it from out infrastructure port\n          outInfrastructurePorts -= srcPortId.toZ\n        case _ =>\n      }\n    }\n  }\n\n  \/\/ JH: Refactor\n  \/\/ Manually added by JH to support debugging framework\n  \/\/  -- to support being able to see inputs and outputs of a a thread (before\/after compute),\n  \/\/     clearing of output ports is removed from send_output.\n  \/\/  This function is called by scheduler, before calling compute to initialize the\n  \/\/  component port state\n  def clearPortVariables(bridgeId: Art.BridgeId): Unit = {\n    \/\/ val b = Art.bridge(bridgeId) -- refactor\n    \/\/ ToDo: the computation of input\/output port ids should be helper functions in Bridge\n    \/\/ compute inPortIds\n    val inPortIds = Art.bridges(bridgeId.toZ).get.ports.eventIns.elements.map(_.id) ++ Art.bridges(bridgeId.toZ).get.ports.dataIns.elements.map(_.id)\n    \/\/ iterate through inPortIds and clear the value of each corresponding port variable\n    for (portId <- inPortIds) {\n      inPortVariables -= portId.toZ;\n    }\n    \/\/ compute outPortIds\n    val outPortIds = Art.bridges(bridgeId.toZ).get.ports.eventOuts.elements.map(_.id) ++ Art.bridges(bridgeId.toZ).get.ports.dataOuts.elements.map(_.id)\n    \/\/ iterate through outPortIds and clear the value of each corresponding port variable\n    for (portId <- outPortIds) {\n      outPortVariables -= portId.toZ\n    }\n  }\n\n  \/\/===============================================================================\n  \/\/  HAMR Library Services\n  \/\/===============================================================================\n\n  def logInfo(title: String, msg: String): Unit = log(\"info\", title, msg)\n\n  def logError(title: String, msg: String): Unit = log(\"error\", title, msg)\n\n  def logDebug(title: String, msg: String): Unit = log(\"debug\", title, msg)\n\n  def time(): Art.Time = toS64(System.currentTimeMillis())\n\n  \/\/===============================================================================\n  \/\/  AADL Thread\/Scheduling services\n  \/\/===============================================================================\n\n  \/\/ JH: Refactor to match logic in semantics, group with dispatch status\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    assert(Art.bridges(bridgeId.toZ).nonEmpty, s\"Bridge ${bridgeId} does not exist\")\n\n    Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(_) => return T\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        return Art.bridges(bridgeId.toZ).get.ports.eventIns.elements.exists(\n          port => inInfrastructurePorts.contains(port.id.toZ))\n    }\n  }\n\n  \/\/ JH: Refactored -- renamed port data structures\n  \/\/     ToDo: add comments justifying various sections of the logic by reference to standard clauses\n  def dispatchStatus(bridgeId: Art.BridgeId): DispatchStatus = {\n    val ret: DispatchStatus = Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case Periodic(_) => TimeTriggered()\n      case Sporadic(_) =>\n        \/\/ get ids for non-empty input event ports\n        val portIds = ISZ[Art.PortId](Art.bridges(bridgeId.toZ).get.ports.eventIns.map((u: UPort) => u.id).elements.filter((i: Art.PortId) => inInfrastructurePorts.get(i.toZ).nonEmpty): _*)\n        val urgentFifo: Seq[Art.PortId] = portIds.map((pid: Art.PortId) => Art.port(pid)).elements.sortWith { \/\/ reverse sort\n          \/\/ sorting function to make prioritized sequence of event port ids\n          \/\/   compare p1 to p2  (p1 represents the port to process earlier, i.e., should have priority)\n          case (p1: UrgentPort[_], p2: UrgentPort[_]) => Z\n            \/\/ if p1 has a strictly less urgency it comes after p2\n            if (p1.urgency < p2.urgency) F\n            \/\/ if p1 has a strictly greater urgency, it comes before p2\n            else if (p1.urgency > p2.urgency) T\n            \/\/ if p1 and p2 have the same urgency, the ordering is determined by arrival timestamps\n            else inInfrastructurePorts(p1.id.toZ).dstArrivalTimestamp < inInfrastructurePorts(p2.id.toZ).dstArrivalTimestamp\n          case (_: UrgentPort[_], _: Port[_]) => T \/\/ urgent ports take precedence\n          case (_: Port[_], _: UrgentPort[_]) => F \/\/ urgent ports take precedence\n          case (p1: Port[_], p2: Port[_]) =>\n            inInfrastructurePorts(p1.id.toZ).dstArrivalTimestamp < inInfrastructurePorts(p2.id.toZ).dstArrivalTimestamp\n        }.map(_.id)\n        EventTriggered(ISZ[Art.PortId](urgentFifo: _*))\n    }\n    return ret\n  }\n\n  \/\/===============================================================================\n  \/\/  AADL Execution Phases\n  \/\/\n  \/\/   Note: this could be synchronized a bit more with thread states \/ hybrid automata\n  \/\/   in AADL standard\n  \/\/===============================================================================\n\n  def initializePhase(): Unit = {\n    logInfo(Art.logTitle, s\"Initializing component...\")\n  }\n\n  def computePhase(): Unit = {\n    logInfo(Art.logTitle, s\"Begin execution...\")\n  }\n\n  def finalizePhase(): Unit = {\n    logInfo(Art.logTitle, s\"End execution...\")\n\n    ArtTimer_Ext.finalise()\n  }\n\n  var logStream: java.io.PrintStream = System.out\n\n  def log(kind: String, title: String, msg: String): Unit = {\n    logStream.println(st\"\"\"{ \"log\" : \"$kind\", \"title\" : ${Json.Printer.printString(title)}, \"msg\" : ${Json.Printer.printString(msg)}, \"time\" : \"${time()}\" }\"\"\".render)\n    logStream.flush()\n  }\n\n  def toS64(value: Long): S64 = S64(value)\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n\n\n\n\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/ TESTING \/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\n\n  \/**\n   * Sets up the state of a thread component (identified by bridge) for the purpose of\n   * testing.\n   *\n   * An analogue to this method does not show up in developer-written unit tests because\n   * it's invoked behind the scenes by the automatically generated unit test infrastructure\n   * as a prelude to each test.\n   *\/\n  def initTest(bridge: Bridge): Unit = {\n    \/\/ delete ALL port values\n    inInfrastructurePorts.clear()\n    inPortVariables.clear()\n    outPortVariables.clear()\n    outInfrastructurePorts.clear()\n\n    \/\/ cancel pending ArtTimer callbacks (also done after a test completes)\n    ArtTimer_Ext.scheduledCallbacks.keys.foreach(ArtTimer_Ext.cancel)\n\n    bridge.entryPoints.testInitialise()\n    logInfo(Art.logTitle, s\"Initialized bridge: ${bridge.name}\")\n  }\n\n  \/**\n   * Executes the application code in the Initialize Entry Point for the component (identified\n   * by given bridge) for the purposes of testing.  This is achieved by\n   * calling the testInitialise() method on given bridge.\n   *\n   * Precondition: initTest() has been called prior.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def testInitialise(bridge: Bridge): Unit = {\n    bridge.entryPoints.testInitialise()\n  }\n\n  \/**\n   * Executes the application code in the Compute Entry Point for the component (identified\n   * by given bridge) for the purposes of testing.  This is achieved by\n   * calling the testCompute() method on given bridge.\n   *\n   * Precondition: initTest() has been called prior.\n   *\n   * Unlike [[Art.run()]], this method does NOT wrap compute calls in a try-catch block.\n   * This is to ensure no exceptions are overlooked during testing.\n   *\/\n  def testCompute(bridge: Bridge): Unit = {\n    bridge.entryPoints.testCompute()\n  }\n\n  \/**\n   * Calls the finalize entry points on all registered bridges.\n   * Testers should NOT call this method because BridgeTestSuite will automatically call this method after each test.\n   *\n   *\/\n  def finalizeTest(bridge: Bridge): Unit = {\n    bridge.entryPoints.finalise()\n    logInfo(Art.logTitle, s\"Finalized bridge: ${bridge.name}\")\n\n    \/\/ cancel pending ArtTimer callbacks (also done before a test begins)\n    ArtTimer_Ext.scheduledCallbacks.keys.foreach(ArtTimer_Ext.cancel)\n  }\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def initSystemTest(scheduler: Scheduler): Unit = {\n    Art.setUpArchitecture()\n    Art.setUpPlatform()\n    Art.setUpSystemState(scheduler)\n    logInfo(Art.logTitle, s\"Initialized system for system test\")\n  }\n\n  \/\/  def executeSystemTest(): Unit = $\n\n  \/\/ JH: Refactored\n  \/\/   add system test capability\n  def finalizeSystemTest(): Unit = {\n    Art.tearDownSystemState()\n    Art.tearDownPlatform()\n    Art.tearDownArchitecture()\n  }\n\n  \/\/ JH: Refactor\n  \/\/  Add code to address the fact that out port variables are now distinct from\n  \/\/  out infrastructure ports,  i.e., we must copy from out port variables to\n  \/\/  out infrastructure ports\n  \/**\n   * A method that replaces bridge.compute()'s calls to [[Art.sendOutput()]] in\n   * its equivalent testCompute() method.\n   *\n   * This method is currently a NO-OP, but may gain functionality later.\n   *\n   * @param eventPortIds the event ports to be \"copied and cleared\" (but currently nothing happens)\n   * @param dataPortIds the data ports to be \"copied and cleared\" (but currently nothing happens)\n   *\/\n  def releaseOutput(eventPortIds: ISZ[Art.PortId], dataPortIds: ISZ[Art.PortId]): Unit = { \/\/ testing SEND_OUTPUT\n    \/\/ note: sendOutput is usually accessed via:\n    \/\/   Art.sendOutput -> ArtNative.sendOutput -> ArtNative_Ext.sendOutput\n    \/\/JH added:\n    for (srcPortId <- eventPortIds ++ dataPortIds) {\n      outPortVariables.get(srcPortId.toZ) match {\n        case scala.Some(msg) =>\n          outInfrastructurePorts(srcPortId.toZ) = outPortVariables(srcPortId.toZ)\n        case _ =>\n      }\n    }\n  }\n\n  \/**\n   * Because a bridge's testCompute() doesn't clear outputs, this method can be\n   * used by users to manually clear the output if desired. This is useful for\n   * tests involving multiple dispatches.\n   *\/\n  def manuallyClearOutput(): Unit = {\n    outPortVariables.clear()\n  }\n\n  \/\/ JH: Refactor\n  \/\/ ToDo: Rename the functions below to align with the variable names inInfrastructurePort, etc.\n  \/**\n   * Inserts a value into an \"infrastructure in\" port. For testing only, normally\n   * this is handled by Art.\n   *\n   * @param dstPortId the portId to place the passed [[DataContent]] into\n   * @param data the [[DataContent]] which will be placed in the dstPort\n   *\/\n  def insertInInfrastructurePort(dstPortId: Art.PortId, data: DataContent): Unit = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    val artMessage = ArtMessage(data = data, dstPortId = Some(dstPortId), dstArrivalTimestamp = Art.time())\n    \/\/ note: right now, there is no difference in the logic between data and event ports, but keep the\n    \/\/ logic separate for future refactoring\n    Art.port(dstPortId).mode match {\n      case PortMode.DataIn | PortMode.DataOut =>\n        inInfrastructurePorts(dstPortId.toZ) = artMessage\n      case PortMode.EventIn | PortMode.EventOut =>\n        inInfrastructurePorts(dstPortId.toZ) = artMessage\n    }\n  }\n\n\n  \/**\n   * Returns the value of an in infrastructure port.\n   *\n   * @param portId the id of the INPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeInInfrastructurePort(portId: Art.PortId): Option[DataContent] = {\n    \/\/ right now, with event data port queues limited to size one, there is no difference in the logic\n    \/\/ between how data ports are treated, and how event\/event data ports are treated.\n    Art.port(portId).mode match {\n      case PortMode.DataIn =>\n        inInfrastructurePorts.get(portId.toZ) match {\n          case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n          case scala.None => org.sireum.None[DataContent]()\n        }\n      case PortMode.EventIn =>\n        inInfrastructurePorts.get(portId.toZ) match {\n          case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n          case scala.None => org.sireum.None[DataContent]()\n        }\n      case _ => {\n        assert(false, \"expecting in port\")\n        org.sireum.None[DataContent]()\n      }\n    }\n  }\n\n  \/**\n   * Returns the value of an infrastructure out port.\n   *\n   * @param portId the id of the OUTPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeOutInfrastructurePort(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: would be changed when we refactor to support event queues of size > 1\n    outInfrastructurePorts.get(portId.toZ) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n\n  \/**\n   * Returns the value of an application in port.\n   *\n   * @param portId the id of the INPUT port to return a value from\n   * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n   *\/\n  def observeInPortVariable(portId: Art.PortId): Option[DataContent] = {\n    \/\/ right now, with event data port queues limited to size one, there is no difference in the logic\n    \/\/ between how data ports are treated, and how event\/event data ports are treated.\n    Art.port(portId).mode match {\n      case PortMode.DataIn =>\n        inPortVariables.get(portId.toZ) match {\n          case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n          case scala.None => org.sireum.None[DataContent]()\n        }\n      case PortMode.EventIn =>\n        inPortVariables.get(portId.toZ) match {\n          case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n          case scala.None => org.sireum.None[DataContent]()\n        }\n      case _ => {\n        assert(false, \"expecting in port\")\n        org.sireum.None[DataContent]()\n      }\n    }\n  }\n\n  \/**\n     * Returns the value of an application out port.\n     *\n     * @param portId the id of the OUTPUT port to return a value from\n     * @return If the port is non-empty, a [[Some]] of [[DataContent]]. Otherwise [[None]].\n     *\/\n  def observeOutPortVariable(portId: Art.PortId): Option[DataContent] = {\n    \/\/ note: that could would be changed when we refactor to support event queues of size > 1\n    outPortVariables.get(portId.toZ) match {\n      case scala.Some(value: ArtMessage) => org.sireum.Some[DataContent](value.data)\n      case scala.None => org.sireum.None[DataContent]()\n    }\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtTimer.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait TimerCallback {\n  def callback(): Unit\n}\n\n@ext object ArtTimer {\n\n  def schedule(id: String, replaceExisting: B, delay: Art.Time, callback: () => Unit): Unit = $\n\n  \/\/ if transpiling then use this version as transpiler does not support function passing\n  def scheduleTrait(id: String, replaceExisting: B, delay: Art.Time, callback: TimerCallback): Unit = $\n\n  def cancel(id: String): Unit = $\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/ArtTimer_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art\n\nimport org.sireum.S64._\nimport org.sireum.{B, F, String, T}\n\nimport java.util.concurrent.atomic.AtomicBoolean\nimport java.util.concurrent.{Executors, TimeUnit}\nimport scala.collection.mutable.{Map => MMap}\n\nobject ArtTimer_Ext {\n\n  protected[art] val scheduledCallbacks: MMap[String, AtomicBoolean] = ArtNative_Ext.concMap()\n  private val executor = Executors.newSingleThreadScheduledExecutor()\n\n  def finalise(): Unit = {\n    executor.shutdownNow()\n    ArtNative.logInfo(Art.logTitle, \"Finalized ArtTimer\")\n  }\n\n  def cancel(id: String): Unit = {\n    scheduledCallbacks.get(id) match {\n      case Some(b) =>\n        val userRequested = b.get()\n        b.set(F)\n        scheduledCallbacks.remove(id)\n        if (userRequested) {\n          ArtNative.logInfo(Art.logTitle, s\"Callback cleared for $id\")\n        }\n      case _ =>\n    }\n  }\n\n  def scheduleTrait(id: String, replaceExisting: B, delay: Art.Time, callback: TimerCallback): Unit = {\n    schedule(id, replaceExisting, delay, callback.callback _)\n  }\n\n  def schedule(id: String, replaceExisting: B, delay: Art.Time, callback: () => Unit): Unit = {\n    if (scheduledCallbacks.get(id).nonEmpty) {\n      if (!replaceExisting) {\n        ArtNative.logInfo(Art.logTitle, s\"Callback already scheduled for $id\")\n        return\n      } else {\n        cancel(id)\n      }\n    }\n\n    if (delay < s64\"0\") {\n      ArtNative.logInfo(Art.logTitle, s\"Invalid delay time: ${delay}.  Value must be non-negative.\")\n      return\n    }\n\n    \/\/ the below runnable will be run in a separate thread when it's\n    \/\/ dispatched by the executor. If the user requests to cancel the\n    \/\/ timeout before that then shouldInvokeCallback will be set to\n    \/\/ false and therefore the callback will not be invoked\n    val shouldInvokeCallback = new AtomicBoolean(T)\n\n    val task = new Runnable {\n      override def run(): Unit = {\n        if (shouldInvokeCallback.get()) {\n          shouldInvokeCallback.set(F)\n          cancel(id)\n\n          callback()\n        }\n      }\n    }\n\n    scheduledCallbacks.put(id, shouldInvokeCallback)\n\n    val adjusted = delay.toMP.toLong * ArtNative_Ext.slowdown.toMP.toLong\n    executor.schedule(task, adjusted, TimeUnit.MILLISECONDS)\n\n    ArtNative.logInfo(Art.logTitle, s\"Callback scheduled for $id: $delay ms\")\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/DataContent.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art\n\nimport org.sireum._\n\n@sig trait DataContent\n\n@datatype class Empty extends art.DataContent",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/Scheduler.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling\n\nimport org.sireum._\n\n\/\/ msig to allow schedulers to have mutable state\n@msig trait Scheduler {\n\n  def initialize(): Unit\n\n  def initializationPhase(): Unit\n\n  def computePhase(): Unit\n\n  def finalizePhase(): Unit\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/legacy\/Legacy.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.legacy\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.Scheduler\n\n@record class Legacy(bridges: IS[Art.BridgeId, art.Bridge]) extends Scheduler {\n\n  override def initialize(): Unit = {}\n\n  override def initializationPhase(): Unit = {\n    for (bridge <- bridges) {\n      bridge.entryPoints.initialise()\n      Art.logInfo(bridge.id, s\"Initialized bridge: ${bridge.name}\")\n    }\n  }\n\n  override def computePhase(): Unit = {\n    LegacyInterface.computePhase(bridges)\n  }\n\n  override def finalizePhase(): Unit = {\n    for (bridge <- bridges) {\n      bridge.entryPoints.finalise()\n      Art.logInfo(bridge.id, s\"Finalized bridge: ${bridge.name}\")\n    }\n  }\n}\n\n@ext object LegacyInterface {\n  def computePhase(bridges: IS[Art.BridgeId, art.Bridge]): Unit = $\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/legacy\/LegacyInterface_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art.scheduling.legacy\n\nimport art.{Art, ArtNative, ArtNative_Ext, DispatchPropertyProtocol}\nimport scala.collection.mutable.{Map => MMap}\nimport org.sireum._\n\nobject LegacyInterface_Ext {\n  val slowdown: Z = 1\n\n  def computePhase(bridges: IS[Art.BridgeId, art.Bridge]): Unit = {\n    var terminated = false\n    var numTerminated: Z = 0\n\n    for (bridge <- bridges) {\n\n      val (rate, isSporadic) = bridge.dispatchProtocol match {\n        case DispatchPropertyProtocol.Periodic(period) => (period, F)\n        case DispatchPropertyProtocol.Sporadic(min) => (min, T)\n      }\n\n      new Thread(() => {\n        ArtNative.logInfo(Art.logTitle, s\"Thread for ${bridge.name} instantiated.\")\n        ArtNative_Ext.synchronized {\n          ArtNative_Ext.wait()\n        }\n        while (!terminated) {\n          Thread.sleep((rate * slowdown).toMP.toLong)\n          if (ArtNative.shouldDispatch(bridge.id)) {\n            try {\n              bridge.synchronized {\n                bridge.entryPoints.compute()\n              }\n            }\n            catch {\n              case x: Throwable =>\n                x.printStackTrace()\n                terminated = true\n            }\n          }\n        }\n        ArtNative_Ext.synchronized {\n          numTerminated += 1\n        }\n      }).start()\n    }\n\n    Thread.sleep(1000)\n\n    ArtNative.logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    ArtNative_Ext.synchronized {\n      ArtNative_Ext.notifyAll()\n    }\n\n    Console.in.readLine()\n    terminated = true\n\n    while (numTerminated != bridges.size) {\n      Thread.sleep(1000)\n    }\n  }\n\n  def concMap[K, V](): MMap[K, V] = {\n    import org.sireum.$internal.CollectionCompat.Converters._\n    new java.util.concurrent.ConcurrentHashMap[K, V].asInstanceOf[java.util.Map[K, V]].asScala\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/nop\/NopScheduler.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.nop\n\nimport org.sireum._\nimport art.scheduling.Scheduler\n\n@record class NopScheduler extends Scheduler {\n\n  override def initialize(): Unit = {}\n\n  override def initializationPhase(): Unit = {}\n\n  override def computePhase(): Unit = {}\n\n  override def finalizePhase(): Unit = {}\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/roundrobin\/RoundRobin.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage art.scheduling.roundrobin\n\nimport org.sireum._\nimport art.scheduling.Scheduler\nimport art.{Art, ArtNative, DispatchPropertyProtocol}\nimport org.sireum.S64._\n\n@record class RoundRobin(schedule: ISZ[Art.BridgeId]) extends Scheduler {\n\n  var lastDispatch: MS[Art.BridgeId, Art.Time] = MS.create[Art.BridgeId, Art.Time](schedule.size, s64\"0\")\n  var lastSporadic: MS[Art.BridgeId, Art.Time] = MS.create[Art.BridgeId, Art.Time](schedule.size, s64\"0\")\n\n  override def initialize(): Unit = {\n    RoundRobinExtensions.init()\n  }\n\n  override def initializationPhase(): Unit = {\n    for (bridgeId <- schedule) {\n      Art.bridges(bridgeId.toZ).get.entryPoints.initialise()\n      Art.logInfo(bridgeId, s\"Initialized bridge: ${Art.bridges(bridgeId.toZ).get.name}\")\n    }\n  }\n\n  def shouldDispatch(bridgeId: Art.BridgeId): B = {\n    Art.bridges(bridgeId.toZ).get.dispatchProtocol match {\n      case DispatchPropertyProtocol.Periodic(period) =>\n        if (Art.time() - lastDispatch(bridgeId) > conversions.Z.toS64(period)) {\n          return ArtNative.shouldDispatch(bridgeId) \/\/ will always return true\n        } else {\n          return F\n        }\n      case DispatchPropertyProtocol.Sporadic(minRate) =>\n        if (Art.time() - lastSporadic(bridgeId) < conversions.Z.toS64(minRate)) {\n          return F\n        } else {\n          \/\/ check if there are events waiting in incoming infrastructure port\n          return ArtNative.shouldDispatch(bridgeId)\n        }\n    }\n  }\n\n  override def computePhase(): Unit = {\n    while (!RoundRobinExtensions.shouldStop()) {\n      for (bridgeId <- schedule) {\n        if (shouldDispatch(bridgeId)) {\n          lastDispatch(bridgeId) = Art.time()\n          Art.bridges(bridgeId.toZ).get.entryPoints.compute()\n\n          if (Art.bridges(bridgeId.toZ).get.dispatchProtocol.isInstanceOf[DispatchPropertyProtocol.Sporadic]) {\n            lastSporadic(bridgeId) = Art.time()\n          }\n        }\n      }\n    }\n  }\n\n  override def finalizePhase(): Unit = {\n    for (bridgeId <- schedule) {\n      Art.bridges(bridgeId.toZ).get.entryPoints.finalise()\n      Art.logInfo(bridgeId, s\"Finalized bridge: ${Art.bridges(bridgeId.toZ).get.name}\")\n    }\n  }\n}\n\n@ext object RoundRobinExtensions {\n  def init(): Unit = $\n\n  def shouldStop(): B = $\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/roundrobin\/RoundRobinExtensions_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art.scheduling.roundrobin\n\nimport art.{Art, ArtNative}\nimport org.sireum.B\nimport java.util.concurrent.atomic.AtomicBoolean\n\nobject RoundRobinExtensions_Ext {\n  var terminated = new AtomicBoolean(false)\n\n  def init(): Unit = {\n    ArtNative.logInfo(Art.logTitle, s\"Start execution (press Enter twice to terminate) ...\")\n\n    new Thread(() => {\n      Console.in.readLine()\n      terminated.set(true)\n    }).start()\n  }\n\n  def shouldStop(): B = {\n    return terminated.get()\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/CliCommandProvider.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\n\n@record class CliCommandProvider extends CommandProvider {\n  override def nextCommand(): Command = {\n    return getCommand()\n  }\n\n  def getCommand(): Command = {\n    val cmdString: String = StaticSchedulerIO.getCommand(\"HAMR> \")\n    val args: ISZ[String] = ops.StringOps(cmdString).split(c => c == ' ')\n    val arg0: String = args(0)\n    if (arg0 == \"x\") {\n      return Stop()\n    } else if (arg0 == \"s\") {\n      var numSteps: Z = 1\n      if (args.size > 1) {\n        Z(args(1)) match {\n          case Some(numStepsCli) => numSteps = numStepsCli\n          case None() => return Unsupported()\n        }\n      }\n      return Sstep(numSteps)\n    } else if (arg0 == \"help\") {\n      return Help()\n    } else if (arg0 == \"h\") {\n      var numSteps: Z = 1\n      if (args.size > 1) {\n        Z(args(1)) match {\n          case Some(numStepsCli) => numSteps = numStepsCli\n          case None() => return Unsupported()\n        }\n      }\n      return Hstep(numSteps)\n    } else if (arg0 == \"i\") {\n      if (args.size < 2) {\n        println(\"i requires a second option\")\n        return Help()\n      }\n      \/\/ need to insert a check for size greater than 1\n      if (args(1) == \"st\") {\n        return Infostate()\n      } else if (args(1) == \"sc\") {\n        return Infoschedule()\n      } else if (args(1) == \"out\") {\n        return InfoOutputs()\n      } else if (args(1) == \"in\") {\n        return InfoInputs()\n      } else if (args(1) == \"cpn\") {\n        if (args.size > 2) {\n          Z(args(2)) match {\n            case Some(bridgeId) => return InfoComponentStateId(bridgeId)\n            case None() => return Unsupported() \/\/ expected bridgeId arg is not an integer\n          }\n        }\n        return Unsupported() \/\/ incorrect number of arguments for \"i cp\" (missing bridge id arg)\n      } else if (args(1) == \"cp\") {\n        if (args.size > 2) {\n          return InfoComponentState(args(2))\n        }\n        return Unsupported() \/\/ incorrect number of arguments for \"i cp\" (missing bridge id arg)\n      } else if (args(1) == \"nn\") {\n        return InfoThreadNickNames()\n      } \/\/ incorrect number of arguments for \"i cp\" (missing bridge id arg)\n      else { \/\/ ... no other info commands supported\n        return Unsupported()\n      }\n    } else if (arg0 == \"rh\") {\n      Z(args(1)) match {\n        case Some(hpTarget) => return RunToHP(hpTarget)\n        case None() => return Unsupported()\n      }\n    } else if (arg0 == \"rd\") {\n      Z(args(1)) match {\n        case Some(domainIdTarget) => return RunToDomain(domainIdTarget)\n        case None() => return Unsupported()\n      }\n    } else if (arg0 == \"rt\") {\n      val threadNickName = args(1)\n      return RunToThread(threadNickName)\n    } else if (arg0 == \"rs\") {\n      if (args.size == 2) { \/\/ run to slot\n        Z(args(1)) match {\n          case Some(slotNumTarget) => return RunToSlot(slotNumTarget)\n          case None() => return Unsupported()\n        }\n      } else if (args.size == 3) { \/\/ run to state\n        (Z(args(1)), Z(args(2))) match {\n          case (Some(hpNum), Some(slotNum)) => return RunToState(hpNum, slotNum)\n          case _ => return Unsupported()\n        }\n      } else {\n        return Unsupported()\n      }\n    } else {\n      return Unsupported()\n    }\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/CliInfoProvider.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.Art.BridgeId\nimport art.scheduling.static.Schedule.DScheduleSpec\n\nobject CliInfoProvider {\n\n  \/\/ prototyping APIs that any HAMR debugging interface should support\n  def message(m: String): Unit = {\n    StaticSchedulerIO.message(m)\n  }\n\n  def printHelpMessage(): Unit = {\n    println(\"s <n?>     - step n slots (default 0)\")\n    println(\"h <n?>     - step n hyper-periods (default 0)\")\n    println(\"rs <n>     - run to slot n (wrap to next hyper-period if needed)\")\n    println(\"rs <h> <n> - run to state hyperperiod h and slot n (do nothing if past this state)\")\n    println(\"rh <n>     - run to hyper-period n (do nothing if already past the beginning of hyper-period n)\")\n    println(\"rt <name>  - run to slot containing thread with nickname <name>\")\n    println(\"i st       - show current state\")\n    println(\"i sc       - show schedule and current position\")\n    println(\"i out      - show output port values of most recently run thread\")\n    println(\"i in       - show input  port values of next thread to run\")\n    println(\"i cp <nickname> - show port values of component with given nickname\")\n    println(\"i nn       - show thread nicknames\")\n    println(\"x          - exit\")\n    println()\n  }\n\n  def formatState(scheduleState: Explorer.ScheduleState, domain: Z, bridgeId: BridgeId, threadNickName: String): String = {\n    \/\/ val outString = \"STATE: slot#: \" + scheduleState.slotNum.toString + \" ; HP#: \" + scheduleState.hyperperiodNum.toString\n    return s\"STATE: HP#: ${scheduleState.hyperperiodNum} slot#: ${scheduleState.slotNum} domain: $domain  thread: $threadNickName ($bridgeId)\"\n  }\n\n  def formatStateH(scheduleState: Explorer.ScheduleState): String = {\n    val domain = Schedule.getDomainFromScheduleState(scheduleState)\n    val bridgeId = Schedule.getBridgeIdFromScheduleState(scheduleState)\n    val threadNickName = Schedule.getThreadNickNameFromScheduleState(scheduleState)\n    return formatState(scheduleState, domain, bridgeId, threadNickName)\n  }\n\n  \/\/ The \"show\" methods below need to be refactored to better support MVC\n\n  def showNickNames(): Unit = {\n    message(\" Thread Nicknames\")\n    message(\"-------------------\")\n    for (e <- StaticScheduler.threadNickNames.keys) {\n      message(e)\n    }\n  }\n\n  def showState(scheduleState: Explorer.ScheduleState, domain: Z, bridgeId: BridgeId, threadNickName: String): Unit = {\n    message(formatState(scheduleState, domain, bridgeId, threadNickName))\n  }\n\n  def showStateH(scheduleState: Explorer.ScheduleState): Unit = {\n    message(formatStateH(scheduleState))\n  }\n\n  def showSchedule(scheduleState: Explorer.ScheduleState, dScheduleSpec: Schedule.DScheduleSpec): Unit = {\n    val slots = dScheduleSpec.schedule.slots\n    val hyperPeriodLength = dScheduleSpec.hyperPeriod\n    val hyperPeriodNum = scheduleState.hyperperiodNum\n    val stateSlotNum = scheduleState.slotNum\n    message(s\" Schedule ($hyperPeriodLength tot ticks) HP#: $hyperPeriodNum\")\n    message(\"-------------------------------------------------\")\n    var slotNum: Z = 0\n    for (s <- slots) {\n      var prefix: String = \"  \"\n      var suffix: String = \"\"\n      if (slotNum == stateSlotNum) {\n        val (elaspedHPTicks, remainingHPTicks) = Schedule.computeElaspedRemainingHPTicks(slotNum, dScheduleSpec)\n        prefix = \" *\"\n        suffix = s\"(elapsed= $elaspedHPTicks, remaining=$remainingHPTicks)\"\n      }\n      message(s\"${prefix}$slotNum [domain=${s.domain},length=${s.length}] $suffix\")\n      slotNum = slotNum + 1\n    }\n    message(\"-------------------------------------------------\")\n  }\n\n  def showStep(preScheduleState: Explorer.ScheduleState,\n               postScheduleState: Explorer.ScheduleState,\n               dScheduleSpec: DScheduleSpec): Unit = {\n    val slotNum = preScheduleState.slotNum\n    val slot = dScheduleSpec.schedule.slots(slotNum)\n    val domain = slot.domain\n    val bridgeId = Schedule.getBridgeIdFromSlotNumber(slotNum)\n    val length = slot.length\n    message(\"============= S t e p =============\")\n    message(s\"PRE-${formatState(preScheduleState, Schedule.getDomainFromScheduleState(preScheduleState), Schedule.getBridgeIdFromScheduleState(preScheduleState), Schedule.getThreadNickNameFromScheduleState(preScheduleState))}\")\n    message(s\"   Executing:  Domain#: $domain   Max Duration: $length\")\n    message(s\"POST-${formatState(postScheduleState, Schedule.getDomainFromScheduleState(postScheduleState), Schedule.getBridgeIdFromScheduleState(postScheduleState), Schedule.getThreadNickNameFromScheduleState(postScheduleState))}\")\n  }\n\n  def showHyperPeriodBoundary(scheduleState: Explorer.ScheduleState): Unit = {\n    message(s\"********* Hyper-Period ${scheduleState.hyperperiodNum} (beginning) **********\")\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/Command.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\n\n@msig trait CommandProvider {\n  def nextCommand(): Command\n}\n\n@msig trait InfoCommandProvider extends CommandProvider {\n  def threadNickNames: Map[String, art.Art.BridgeId]\n  def numSlots: Z\n  def displayOrder: ISZ[art.Art.BridgeId]\n\n  def init(threadNickNames: Map[String, art.Art.BridgeId], numSlots: Z, displayOrder: ISZ[art.Art.BridgeId]): CommandProvider\n}\n\n@datatype trait Command\n\n@datatype class Unrecognized extends Command\n\n@datatype class Unsupported extends Command\n\n\/\/ end debugging session\n@datatype class Stop extends Command\n\n\/\/ display support commands\n@datatype class Help extends Command\n\n\/\/ step numSteps of slots\n@datatype class Sstep(numSteps: Z) extends Command\n\n\/\/ step numSteps of hyper-periods\n@datatype class Hstep(numSteps: Z) extends Command\n\n\/\/ run to hp#\n@datatype class RunToHP(hpNum: Z) extends Command\n\n\/\/ run to scheduler state (hp#,slot#)\n@datatype class RunToState(hpNum: Z, slotNum: Z) extends Command\n\n\/\/ run to domain\n@datatype class RunToDomain(domainId: Z) extends Command\n\n\/\/ run to thread\n@datatype class RunToSlot(slotNum: Z) extends Command\n\n\/\/ run to thread\n@datatype class RunToThread(ThreadId: String) extends Command\n\n\/\/ get info current state (hyper-period number, slot number)\n@datatype class Infostate extends Command\n\n\/\/ get info of domain schedule with next slot to be executed marked\n@datatype class Infoschedule extends Command\n\n\/\/ get values of input ports of component to be executed in the next slot\n@datatype class InfoInputs extends Command\n\n\/\/ get values of output ports of component that was executed in the previous slot\n@datatype class InfoOutputs extends Command\n\n\/\/ get values of input and outputs ports for the given component the last time that it was executed\n@datatype class InfoComponentStateId(bridgeId: Z) extends Command\n\n@datatype class InfoComponentState(threadNickName: String) extends Command\n\n\/\/ show thread nicknames\n@datatype class InfoThreadNickNames extends Command\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/CommandInterpreter.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.Art.BridgeId\n\nobject CommandInterpreter {\n\n  def message(str: String): Unit = {\n    CliInfoProvider.message(str)\n  }\n\n  def interpretCmd(cmd: Command): B = {\n    var done: B = false\n    cmd match {\n      case _: Help =>\n        CliInfoProvider.printHelpMessage()\n\n      case Sstep(n) =>\n        assert(n >= 1)\n        message(s\"...Stepping $n slot(s)\")\n        Explorer.stepSystemNSlotsIMP(n)\n\n      case Hstep(n) =>\n        assert(n >= 1)\n        message(s\"...Stepping $n hyper-period(s)\")\n        if (n == 1) {\n          Explorer.stepSystemOneHPIMP()\n        } else if (Explorer.isHyperPeriodBoundaryH()) {\n          Explorer.stepSystemNHPIMP(n)\n        } else {\n          message(\"Command not applicable: not on hyper-period boundary\")\n        }\n\n      case RunToHP(hpNum) =>\n        assert(hpNum >= 0 & hpNum <= 1000)\n        Explorer.runToHP(hpNum)\n\n      case RunToSlot(slotNum) =>\n        assert(slotNum >= 0 & slotNum < Schedule.dScheduleSpec.schedule.slots.size)\n        message(s\"...Running to slot# $slotNum\")\n        Explorer.runToSlot(slotNum)\n\n      case RunToThread(threadNickName) =>\n        Explorer.runToThread(threadNickName)\n\n      case RunToState(hpNum, slotNum) =>\n        assert(hpNum >= 0 & hpNum <= 1000)\n        assert(slotNum >= 0 & slotNum < Schedule.dScheduleSpec.schedule.slots.size)\n        Explorer.runToState(hpNum, slotNum)\n\n      case RunToDomain(domainId) =>\n        assert(0 <= domainId & domainId <= Schedule.dScheduleSpec.maxDomain)\n        Explorer.runToDomain(domainId)\n\n      case _: Stop => done = T\n\n      case _: Infostate =>\n        val s = Explorer.scheduleState\n        CliInfoProvider.showState(s, Schedule.getDomainFromScheduleState(s), Schedule.getBridgeIdFromScheduleState(s), Schedule.threadNickName(Schedule.getBridgeIdFromScheduleState(s)))\n\n      case _: Infoschedule =>\n        CliInfoProvider.showSchedule(Explorer.scheduleState, Schedule.dScheduleSpec)\n\n      case _: InfoInputs =>\n        StateObserver.printPortContentsInputsCurrent()\n\n      case _: InfoOutputs =>\n        StateObserver.printPortContentsOutputsCurrent()\n\n      case InfoComponentStateId(bridgId) =>\n        StateObserver.printPortContents(BridgeId.fromZ(bridgId))\n\n      case InfoComponentState(threadNickName) =>\n        StateObserver.printPortContentsByNickName(threadNickName)\n\n      case _: InfoThreadNickNames =>\n        CliInfoProvider.showNickNames()\n\n      case _: Unrecognized => message(\"Unrecognized command\")\n\n      case _: Unsupported => message(\"Unsupported command\")\n\n      case _ =>\n    }\n    return done\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/DefaultCommandProvider.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage art.scheduling.static\n\nimport org.sireum._\n\n@record class DefaultCommandProvider extends CommandProvider {\n  override def nextCommand(): Command = {\n    return Hstep(1)\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/Explorer.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.{Art, ArtNative}\nimport art.scheduling.static.Schedule._\n\n\/\/ Possible commands\/concepts\n\/\/\n\/\/ init system\n\/\/ s n - step n slots; n >= 1, if n >= remaining slots in hyper-period, then run to end of hyper-period\n\/\/ h n - step n hyper-periods; n >= 1\n\/\/ executing info display mode\n\/\/  show domain \/ bridge\n\/\/  show infrastructure input \/ output ports\n\/\/  show in\/out ports for selected components\n\/\/  inject certain values on input ports (random, specific, random with constraints, generator, seeded from test vector)\n\/\/ run until various conditions\n\/\/ check contract \/ constraint (component-wise or global)\n\/\/ checkpoint state, rollback to checkpointed state\n\/\/ save step as unit tests\n\/\/ calculate dependences during execution\n\n\n\/\/ stepDSchedule(2,dScheduleSpec1)\n\n\/\/ var inpt: Z = 0\n\/\/ inpt = readInt()\n\nobject Explorer {\n\n  \/\/================ schedule state ====================\n\n  \/\/ data structure for schedule state\n  \/\/   - zero-based indexing into the time-line of the scheduler\n  @datatype class ScheduleState(slotNum: Z, hyperperiodNum: Z)\n\n  \/\/ \"invariant\" for schedule state\n  def validState(state: ScheduleState, dScheduleSpec: DScheduleSpec): B = {\n    val slotNum = state.slotNum\n    \/\/ TODO: also check valid scheduleSpec??\n    val slotInRange: B = slotNum >= 0 & slotNum < dScheduleSpec.schedule.slots.size\n    val hyperperiodInRange: B = state.hyperperiodNum >= 0\n    return slotInRange & hyperperiodInRange\n  }\n\n  def isHyperPeriodBoundary(state: ScheduleState): B = {\n    return state.slotNum == 0\n  }\n\n  def isHyperPeriodBoundaryH(): B = {\n    return isHyperPeriodBoundary(scheduleState)\n  }\n\n  \/\/ schedule state \"global\" variable\n  var scheduleState: ScheduleState = initialScheduleState()\n\n  \/\/ helper method to define initial state value\n  def initialScheduleState(): ScheduleState = {\n    return ScheduleState(0, 0)\n  }\n\n  \/\/ method to initialize schedule state\n  def initializeScheduleStateIMP(): Unit = {\n    scheduleState = initialScheduleState()\n  }\n\n  def isInitial(scheduleState: ScheduleState): B = {\n    return scheduleState == initialScheduleState()\n  }\n\n  def isInitialIMP(): B = {\n    return isInitial(scheduleState)\n  }\n\n  \/\/=============== stepping functions ===================\n\n  \/\/ -- methods for executing thread in a particular slot in the schedule.\n  \/\/    A thread can be referenced by slot data structure or by slot number (two different methods)\n\n  \/\/ execute thread by slot data structure\n  def executeSlotIMP(slot: Slot): Unit = {\n    val domainId: Z = slot.domain\n    val bridgeId: Art.BridgeId = Schedule.domainToBridgeIdMap(domainId)\n    \/\/ val bridge: Bridge = Art.bridges(bridgeId).get  -- debug with Robby\n    \/\/ This is cause an Invalid 'None' operation 'get' exception\n    \/\/ Art.clearPortVariables(bridgeId)\n    \/\/ bridge.entryPoints.compute()  -- debug with Robby\n    \/\/ Art.bridges(bridgeId).asInstanceOf[MSome[Bridge]].value.entryPoints.compute()\n    if (ArtNative.shouldDispatch(bridgeId)) {\n      Art.bridges(bridgeId.toZ).get.entryPoints.compute()\n    }\n  }\n\n  \/\/ execute thread by slot number\n  def executeSlotNumIMP(slotNum: Z): Unit = {\n    \/\/ pre-condition\n    assert(slotNum >= 0 & slotNum < dScheduleSpec.schedule.slots.size, s\"slotNum: ${slotNum}, Slot Size: ${dScheduleSpec.schedule.slots.size}\")\n    \/\/ body\n    val slots = dScheduleSpec.schedule.slots\n    executeSlotIMP(slots(slotNum))\n  }\n\n  \/\/ -- methods for updating schedule state (these do not actually execute the thread)\n\n  \/\/ purely functional method to compute the next schedule state\n  def nextState(state: ScheduleState, dScheduleSpec: DScheduleSpec): ScheduleState = {\n    \/\/ pre-condition\n    assert(validState(state, dScheduleSpec))\n    \/\/ body\n    val slots = dScheduleSpec.schedule.slots\n    var nextSlotNum = state.slotNum + 1\n    var nextHyperPeriodNum = state.hyperperiodNum\n    \/\/ handle wrap around\n    if (nextSlotNum == slots.size) {\n      nextSlotNum = 0\n      nextHyperPeriodNum = nextHyperPeriodNum + 1\n    }\n    return ScheduleState(nextSlotNum, nextHyperPeriodNum)\n  }\n\n  \/\/ purely functional method to compute the next schedule state\n  def previousState(state: ScheduleState, dScheduleSpec: DScheduleSpec): Option[ScheduleState] = {\n    \/\/ pre-condition\n    assert(validState(state, dScheduleSpec))\n    \/\/ body\n    if (isInitial(state)) {\n      return None()\n    }\n\n    val slots = dScheduleSpec.schedule.slots\n\n    var nextSlotNum = state.slotNum - 1 \/\/ assume for now we don't wrap around\n    var nextHyperPeriodNum = state.hyperperiodNum \/\/ assume for now we stay at same hyper-period\n\n    \/\/ handle wrap around\n    if (state.slotNum == 0) { \/\/ if current state has initial slot number, then wrap to end\n      nextSlotNum = slots.size - 1 \/\/ set nextSlotNum to last slot number\n      nextHyperPeriodNum = nextHyperPeriodNum - 1 \/\/ this is sound since we already checked that current state is not initial\n    }\n    return Some(ScheduleState(nextSlotNum, nextHyperPeriodNum))\n  }\n\n  \/\/ advance the state to the next schedule slot (side-effecting schedule state)\n  def advanceStateIMP(): Unit = {\n    scheduleState = nextState(scheduleState, dScheduleSpec)\n  }\n\n  def stepSystemOneSlotIMP(info: B): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    \/\/ assert(validDScheduleSpec(dScheduleSpec))\n    assert(validState(scheduleState, dScheduleSpec))\n    \/\/ body\n    \/\/   execute thread in current slot\n    val preScheduleState = scheduleState\n    executeSlotNumIMP(scheduleState.slotNum)\n    \/\/   advance the schedule state\n    advanceStateIMP()\n    val postScheduleState = scheduleState\n    if (info) {\n      CliInfoProvider.showStep(preScheduleState, postScheduleState, dScheduleSpec)\n    }\n  }\n\n  def stepSystemNSlotsIMP(numSlots: Z): Unit = {\n    \/\/ pre-condition\n    assert(numSlots > 0)\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    \/\/ body\n    for (i <- 1 to numSlots) {\n      stepSystemOneSlotIMP(T)\n    }\n  }\n\n  \/\/ Steps the system one hyper-period.\n  \/\/ Does not require the system to be on a hyper-period boundary.\n  \/\/ If state indicates that hyper-period is already in progress, the method will run to the start of the next hyper-period.\n  def stepSystemOneHPIMP(): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    \/\/ var currentSlotNum: Z = scheduleState.slotNum\n    val numStepsToStartOfHP: Z = dScheduleSpec.schedule.slots.size - scheduleState.slotNum\n    stepSystemNSlotsIMP(numStepsToStartOfHP)\n    \/\/ assert that current state is at the beginning of a HP\n    assert(isHyperPeriodBoundary(scheduleState))\n\n    CliInfoProvider.showHyperPeriodBoundary(scheduleState)\n  }\n\n  \/\/ Steps the system N hyper-periods.\n  \/\/ Make an somewhat arbitrary but rational decision that this method should not be\n  \/\/ called when the system is not on a hyper-period boundary (start of hyper-period)\n  def stepSystemNHPIMP(numHyperPeriods: Z): Unit = {\n    for (hpcount <- 1 to numHyperPeriods) {\n      stepSystemOneHPIMP()\n    }\n  }\n\n  \/\/ Runs the system to the start of the given hyper-period number\n  def runToHP(hpNum: Z): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    assert(hpNum >= 0)\n    \/\/ body\n\n    CliInfoProvider.message(s\"...Running to beginning of hyper-period# $hpNum\")\n\n    while (scheduleState.hyperperiodNum < hpNum) {\n      stepSystemOneSlotIMP(F)\n    }\n\n    CliInfoProvider.message(\"*********** Run to ... Completed *************\")\n\n    CliInfoProvider.showStateH(scheduleState)\n  }\n\n  \/\/ Runs the system to the start of the given state (hp# and slot#)\n  def runToState(hpNum: Z, slotNum: Z): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    assert(hpNum >= 0)\n    assert(slotNum >= 0 & slotNum < Schedule.dScheduleSpec.schedule.slots.size)\n    \/\/ body\n\n    CliInfoProvider.message(s\"...Running to state [hp = $hpNum, slot = $slotNum]\")\n\n    while (scheduleState.hyperperiodNum < hpNum) {\n      stepSystemOneSlotIMP(F)\n    }\n    while (scheduleState.slotNum < slotNum) {\n      stepSystemOneSlotIMP(F)\n    }\n\n    CliInfoProvider.message(\"*********** Run to ... Completed *************\")\n\n    CliInfoProvider.showStateH(scheduleState)\n  }\n\n  \/\/ Runs the system to the start of the given slot#\n  def runToSlot(slotNum: Z): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    assert(slotNum >= 0 & slotNum < Schedule.dScheduleSpec.schedule.slots.size)\n    \/\/ body\n    while (scheduleState.slotNum != slotNum) {\n      stepSystemOneSlotIMP(F)\n    }\n\n    CliInfoProvider.message(\"*********** Run to ... Completed *************\")\n\n    CliInfoProvider.showStateH(scheduleState)\n  }\n\n  \/\/ Runs the system to the start of the given domain\n  def runToDomain(domainId: Z): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    assert(domainId >= 0 & domainId <= Schedule.dScheduleSpec.maxDomain)\n    \/\/ body\n    CliInfoProvider.message(s\"...Running to domain $domainId\")\n\n    while (Schedule.dScheduleSpec.schedule.slots(scheduleState.slotNum).domain != domainId) {\n      stepSystemOneSlotIMP(F)\n    }\n\n    CliInfoProvider.message(\"*********** Run to ... Completed *************\")\n\n    CliInfoProvider.showStateH(scheduleState)\n  }\n\n\n  \/\/ Runs the system to the start of the given domain\n  def runToThread(threadNickName: String): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    assert(validState(scheduleState, dScheduleSpec))\n    val bridgeId = StaticScheduler.threadNickNames.get(threadNickName).get \/\/ ToDo: fix error handling\n    val domainId = StaticScheduler.bridgeIdToDomainMap(bridgeId)\n\n    CliInfoProvider.message(s\"...Running to thread $threadNickName (domain $domainId)\")\n    while (Schedule.dScheduleSpec.schedule.slots(scheduleState.slotNum).domain != domainId) {\n      stepSystemOneSlotIMP(F)\n    }\n    CliInfoProvider.message(\"*********** Run to ... Completed *************\")\n\n    CliInfoProvider.showStateH(scheduleState)\n  }\n\n\n  \/\/ Runs the system according to the static schedule without debugging, but still uses the debugging scheduling state\n  def runSystem(): Unit = {\n    \/\/ pre-condition (invariants on scheduleState and dScheduleSpec)\n    \/\/ assert valid schedule\n    \/\/ body\n    CliInfoProvider.message (s\"...Running system according to static schedule\")\n\n    Explorer.initializeScheduleStateIMP()\n    var systemStopCondition: B = false \/\/ right now we don't have a system stop condition\n    while (!systemStopCondition) {\n      executeSlotNumIMP(scheduleState.slotNum)\n      advanceStateIMP()\n      for (i <- 1 to 100000) {\n        None[String]()\n      }\n    }\n  }\n}\n\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/ISZCommandProvider.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage art.scheduling.static\n\nimport org.sireum._\n\n@record class ISZCommandProvider(commands: ISZ[Command]) extends CommandProvider {\n\n  var index: Z = 0\n\n  override def nextCommand(): Command = {\n    assert(commands.nonEmpty, \"commands must be non-empty\")\n    assert(index >= 0 && index < commands.size, s\"index must be >= 0 and < ${commands.size}\")\n\n    if (index == commands.size - 1 && !commands(index).isInstanceOf[Stop]) {\n      assert(F, \"Last command must be Stop\")\n      halt(\"Last command must be Stop\")\n    }\n    index = index + 1\n    return commands(index - 1)\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/Schedule.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.static.Explorer.ScheduleState\n\nobject Schedule {\n\n  \/\/ const dschedule_t ksDomSchedule[] = { \/\/ (1 tick == 2ms)\n  \/\/  { .domain = 0, .length = 100 }, \/\/ all other seL4 threads, init, 200ms\n  \/\/  { .domain = 1, .length =   5 }, \/\/ pacer        10ms\n  \/\/  { .domain = 0, .length =  95 }, \/\/ domain0     190ms\n  \/\/  { .domain = 2, .length =   5 }, \/\/ source       10ms\n  \/\/  { .domain = 0, .length =  95 }, \/\/ domain0     190ms\n  \/\/  { .domain = 3, .length =   5 }, \/\/ destination  10ms\n  \/\/  { .domain = 0, .length = 195 }, \/\/ domain0     390ms\n  \/\/ };\n\n  \/\/ const word_t ksDomScheduleLength = sizeof(ksDomSchedule) \/ sizeof(dschedule_t);\n\n  @datatype class DScheduleSpec(maxDomain: Z, \/\/ the highest domain # used\n                                hyperPeriod: Z, \/\/ the hyper period in ticks\n                                schedule: DSchedule)\n\n  \/\/ contract invariants on schedule\n\n  @datatype class DSchedule(slots: ISZ[Slot])\n\n  \/\/ contract invariants on schedule\n\n  @datatype class Slot(domain: Z, length: Z)\n\n  val emptyDScheduleSpec: DScheduleSpec = DScheduleSpec(0, 0, DSchedule(ISZ()))\n\n  \/\/ ---------- schedule structure\n\n  var dScheduleSpec: DScheduleSpec = emptyDScheduleSpec\n  var domainToBridgeIdMap: ISZ[Art.BridgeId] = ISZ()\n\n  def setSchedule(spec: DScheduleSpec,\n                  domainsToBridgeMap: ISZ[Art.BridgeId]): Unit = {\n    \/\/ pre-condition -- all structural invariants for the domain schedule hold\n    validDScheduleSpec(spec)\n    \/\/ checking period for each thread requires alignment with model -- cannot check that here -- client should guarantee\n    \/\/ body\n    dScheduleSpec = spec\n    domainToBridgeIdMap = domainsToBridgeMap\n    \/\/\n    \/\/ Technically, after this point, the schedule is \"frozen\" and we should have to check the invariant properties on the\n    \/\/ schedule again.\n  }\n\n  \/\/ --------- helper method for accessing schedule info\n\n  def getBridgeIdFromSlot(slot: Slot): Art.BridgeId = {\n    return domainToBridgeIdMap(slot.domain)\n  }\n\n  def getBridgeIdFromSlotNumber(slotNum: Z): Art.BridgeId = {\n    return getBridgeIdFromSlot(dScheduleSpec.schedule.slots(slotNum))\n  }\n\n  def getBridgeIdFromScheduleState(scheduleState: ScheduleState): Art.BridgeId = {\n    return getBridgeIdFromSlotNumber(scheduleState.slotNum)\n  }\n\n  def getDomainFromSlotNum(slotNum: Z): Z = {\n    return dScheduleSpec.schedule.slots(slotNum).domain\n  }\n\n  def getDomainFromScheduleState(scheduleState: Explorer.ScheduleState): Z = {\n    return getDomainFromSlotNum(scheduleState.slotNum)\n  }\n\n  def threadNickName(bridgeId: Art.BridgeId): String = {\n    for (e <- StaticScheduler.threadNickNames.entries) {\n      if (e._2 == bridgeId) {\n        return e._1\n      }\n    }\n    return \"<not found>\"\n  }\n\n  def getThreadNickNameFromScheduleState(scheduleState: Explorer.ScheduleState): String = {\n    val bridgeId = Schedule.getBridgeIdFromSlotNumber(scheduleState.slotNum)\n    return threadNickName(bridgeId)\n  }\n\n  \/\/ ------------- contract invariants on schedule -------------\n\n  \/\/ aggregate invariant on static schedule\n  def validDScheduleSpec(dScheduleSpec: DScheduleSpec): B = {\n    return checkMaxDomain(dScheduleSpec) &&\n      checkNoMissingDomain(dScheduleSpec) &&\n      checkHyperPeriodTicks(dScheduleSpec)\n  }\n\n  \/\/ Invariant: no domain id referenced in a slot exceeds the specified max domain\n  def checkMaxDomain(dScheduleSpec: DScheduleSpec): B = {\n    \/\/ Note: transpiler doesn't current support function passing\n    \/\/return All(dScheduleSpec.schedule.slots)(s => s.domain <= dScheduleSpec.maxDomain)\n    for (s <- dScheduleSpec.schedule.slots if s.domain > dScheduleSpec.maxDomain) {\n      return F\n    }\n    return T\n  }\n\n  \/\/ Invariant: every domain 0 .. maxDomain is referenced by at least one slot\n  def checkNoMissingDomain(dScheduleSpec: DScheduleSpec): B = {\n    \/\/ NOTE: transpiler doesn't currently support function passing\n    \/\/return All(0 until dScheduleSpec.maxDomain)(d =>\n    \/\/  Exists(dScheduleSpec.schedule.slots)(s => s.domain == d)\n    \/\/)\n    for (d <- 0 until dScheduleSpec.maxDomain) {\n      var exists: B = F\n      for (s <- dScheduleSpec.schedule.slots if !exists) {\n        exists = exists || s.domain == d\n      }\n      if (!exists) {\n        return F\n      }\n    }\n    return T\n  }\n\n  \/\/ Invariant: the total time (in ticks) across all slots matches the specified hyper-period\n  def checkHyperPeriodTicks(dScheduleSpec: DScheduleSpec): B = {\n    var computedHyperPeriod: Z = 0\n    for (s <- dScheduleSpec.schedule.slots) {\n      computedHyperPeriod = computedHyperPeriod + s.length\n    }\n    return (computedHyperPeriod == dScheduleSpec.hyperPeriod)\n  }\n\n\n  \/\/ add Clock period\n\n  \/\/ This property is not an invariant per se, but rather a consistency property between the model-specified\n  \/\/ thread periods and the implied periods in the static schedule.  Thus, this property is omitted from the\n  \/\/ structural invariant on the static schedule.\n  \/\/\n  \/\/ Model-consistency: for a given domain, the period implied by the schedule (calculated period) matches\n  \/\/ the period (parameter) specified in the model\n  \/*\n   * @param domain identifier of domain to be checked\n   * @param period specified period of domain in ticks\n   * @param dScheduleSpec static schedule\n   *\/\n  def checkPeriodTicks(domain: Z, period: Z, dScheduleSpec: DScheduleSpec): B = {\n    var computedPeriod: Z = 0 \/\/ computed period in ticks\n    var computedTicksBeforeOccurrence: Z = 0\n    \/\/ number of ticks before first occurrence\n    \/\/ used to determine period, when periods \"wraps around\" the schedule\n    var occurrence: Z = 0 \/\/ how many times has domain occurred so far in schedule\n\n    for (s <- dScheduleSpec.schedule.slots) {\n      \/\/ println(occurrence, \", \", computedTicksBeforeOccurrence, \", \", computedPeriod)\n      if (s.domain == domain) { \/\/ if we are at a slot for the domain in the schedule\n        \/\/ if this is not the first occurrence, then we have computed the time (in ticks)\n        \/\/ since the last occurrence, so compare computed period to specified period\n        if (occurrence > 0) {\n          if (computedPeriod != period) {\n            return false\n          }\n        }\n        \/\/ at all occurrences (first or otherwise), increment the occurrence counter\n        occurrence = occurrence + 1\n        \/\/ re-start the accumulation of time leading to period\n        computedPeriod = s.length \/\/ \"initialize\" the computed period with length of domain's time slot\n      } else {\n        \/\/\n        if (occurrence > 0) { \/\/ if we have previously encountered the domain in the schedule\n          computedPeriod = computedPeriod + s.length \/\/ add current time slice\n        } else {\n          \/\/ if we haven't see the domain yet, add the time to the \"before occurrence\" accumulator\n          computedTicksBeforeOccurrence = computedTicksBeforeOccurrence + s.length\n        }\n      }\n    }\n    \/\/ println(occurrence, \", \", computedTicksBeforeOccurrence, \", \", computedPeriod)\n    \/\/ at this point, we have reached the end of the schedule.  We need to check for the domain\n    \/\/ as it wraps around.  Given our other invariants, we know that the domain occurs at least\n    \/\/ once.  So computedPeriod should hold the time since it was seen, whereas\n    \/\/ computedTicksBeforeOccurrence should hold the time before it was seen.\n    \/\/ The sum of these values should equal the period.\n    return (computedPeriod + computedTicksBeforeOccurrence == period)\n  }\n\n  def computeElaspedRemainingHPTicks(slotNum: Z, dScheduleSpec: DScheduleSpec): (Z, Z) = {\n    \/\/ pre-condition\n    \/\/  TODO: well-formed dScheduleSpec\n    \/\/  TODO: valid slotNum (define function for below)\n    assert(0 <= slotNum & slotNum < dScheduleSpec.schedule.slots.size)\n    \/\/ body\n    var elaspedHPTicks: Z = 0\n    for (s <- 0 until slotNum) {\n      elaspedHPTicks = elaspedHPTicks + dScheduleSpec.schedule.slots(0).length\n    }\n    val remainingHPTicks: Z = dScheduleSpec.hyperPeriod - elaspedHPTicks\n    return (elaspedHPTicks, remainingHPTicks)\n  }\n}\n\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/StateObserver.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.{Art, DataContent}\n\nobject StateObserver {\n\n  def observeInPortValue(bridgeId: Art.BridgeId, portId: Art.PortId): Option[DataContent] = {\n    return Art.observeInInfrastructurePort(portId)\n  }\n\n  def observeOutPortValue(bridgeId: Art.BridgeId, portId: Art.PortId): Option[DataContent] = {\n    return Art.observeOutPortVariable(portId)\n  }\n\n  def observeInPortValues(bridgeId: Art.BridgeId): ISZ[(String, Option[DataContent])] = {\n    val bridge = Art.bridges(bridgeId.toZ).get\n    var portValues: ISZ[(String, Option[DataContent])] = ISZ()\n\n    for (port <- bridge.ports.dataIns) {\n      portValues = portValues :+ ((port.name, Art.observeInInfrastructurePort(port.id)))\n    }\n\n    for (port <- bridge.ports.eventIns) {\n      portValues = portValues :+ ((port.name, Art.observeInInfrastructurePort(port.id)))\n    }\n    return portValues\n  }\n\n  def observeOutPortValues(bridgeId: Art.BridgeId): ISZ[(String, Option[DataContent])] = {\n    val bridge = Art.bridges(bridgeId.toZ).get\n    var portValues: ISZ[(String, Option[DataContent])] = ISZ()\n\n    for (port <- bridge.ports.dataOuts) {\n      portValues = portValues :+ ((port.name, Art.observeOutPortVariable(port.id)))\n    }\n\n    for (port <- bridge.ports.eventOuts) {\n      portValues = portValues :+ ((port.name, Art.observeOutPortVariable(port.id)))\n    }\n    return portValues\n  }\n\n  def observeInPortValuesByNickName(threadNickName: String): ISZ[(String, Option[DataContent])] = {\n    halt(\"TODO\")\n    \/\/val bridgeId = art.StaticScheduling.threadNickNames.get(threadNickName).get \/\/ ToDo: fix error handling\n    \/\/return observeInPortValues(bridgeId)\n  }\n\n  def observeOutPortValuesByNickName(threadNickName: String): ISZ[(String, Option[DataContent])] = {\n    halt(\"TODO\")\n    \/\/val bridgeId = art.StaticScheduling.threadNickNames.get(threadNickName).get \/\/ ToDo: fix error handling\n    \/\/return observeOutPortValues(bridgeId)\n  }\n\n  \/\/=======================================================================\n  \/\/ State Observations (primary methods for interpreting debug commands)\n  \/\/=======================================================================\n\n  def printPortContentsInputsCurrent(): Unit = {\n    val bridgeId = Schedule.getBridgeIdFromSlotNumber(Explorer.scheduleState.slotNum)\n    val inPortInfo = observeInPortValues(bridgeId)\n\n    println(\"****************************\")\n    println(s\"   Next Component: ${Schedule.threadNickName(bridgeId)} (id = $bridgeId)\")\n    println(\"****************************\")\n    println(\" Input Ports\")\n    println(\" ===============\")\n    printPortInfo(inPortInfo)\n  }\n\n  def printPortContentsOutputsCurrent(): Unit = {\n    val previousStateOpt: Option[Explorer.ScheduleState] =\n      Explorer.previousState(Explorer.scheduleState, Schedule.dScheduleSpec)\n\n    previousStateOpt match {\n      case Some(previousState) => {\n        val bridgeId = Schedule.getBridgeIdFromSlotNumber(previousState.slotNum)\n        val outPortInfo = observeOutPortValues(bridgeId)\n        println(\"****************************\")\n        println(s\"   Previous Component: ${Schedule.threadNickName(bridgeId)} (id = $bridgeId)\")\n        println(\"****************************\")\n        println(\" Output Ports\")\n        println(\" ===============\")\n        printPortInfo(outPortInfo)\n      }\n      case None() => {\n        println(\"(initial state - no previous state to show)\")\n      }\n    }\n  }\n\n  def printPortInfo(portVals: ISZ[(String, Option[DataContent])]): Unit = {\n    for (e <- portVals) {\n      println(s\"${e._1} = ${e._2}\")\n    }\n  }\n\n  def printPortContents(bridgeId: Art.BridgeId): Unit = {\n    val inPortInfo = observeInPortValues(bridgeId)\n    val outPortInfo = observeOutPortValues(bridgeId)\n    println(\"****************************\")\n    println(s\"   Component: ${Schedule.threadNickName(bridgeId)} (id = $bridgeId)\")\n    println(\"****************************\")\n    println(\" Input Ports\")\n    println(\" ===============\")\n    printPortInfo(inPortInfo)\n    println()\n    println(\" Output Ports\")\n    println(\" ================\")\n    printPortInfo(outPortInfo)\n  }\n\n  def printPortContentsByNickName(threadNickName: String): Unit = {\n    val bridgeId = StaticScheduler.threadNickNames.get(threadNickName).get \/\/ ToDo: fix error handling\n    printPortContents(bridgeId)\n  }\n}",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/StaticScheduler.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\npackage art.scheduling.static\n\nimport org.sireum._\nimport art.Art\nimport art.scheduling.Scheduler\nimport art.scheduling.static.Schedule.DScheduleSpec\n\nobject StaticScheduler {\n  var threadNickNames: Map[String, Art.BridgeId] = Map.empty\n  var domainToBridgeIdMap: ISZ[Art.BridgeId] = ISZ()\n\n  def bridgeIdToDomainMap(bridgeId: Art.BridgeId): Z = {\n    for (i <- 0 until domainToBridgeIdMap.size if bridgeId == domainToBridgeIdMap(i)) {\n      return i\n    }\n    assert(F, s\"domain for $bridgeId not found\")\n    halt(s\"domain for $bridgeId not found\")\n  }\n}\n\n@record class StaticScheduler(staticSchedule: DScheduleSpec,\n                              bridges: IS[Art.BridgeId, art.Bridge],\n                              domainToBridgeIdMap: ISZ[Art.BridgeId],\n                              threadNickNames: Map[String, Art.BridgeId],\n                              commandProvider: CommandProvider) extends Scheduler {\n\n  override def initialize(): Unit = {\n    StaticScheduler.threadNickNames = threadNickNames\n    StaticScheduler.domainToBridgeIdMap = domainToBridgeIdMap\n\n    Schedule.setSchedule(staticSchedule, domainToBridgeIdMap)\n\n    Explorer.initializeScheduleStateIMP()\n  }\n\n  override def initializationPhase(): Unit = {\n    for (bridgeId <- domainToBridgeIdMap) {\n      bridges(bridgeId).entryPoints.initialise()\n      art.Art.logInfo(bridgeId, s\"Initialized bridge: ${bridges(bridgeId).name}\")\n    }\n  }\n\n  override def computePhase(): Unit = {\n    var done: B = F\n    while (!done) {\n      done = CommandInterpreter.interpretCmd(commandProvider.nextCommand())\n    }\n  }\n\n  override def finalizePhase(): Unit = {\n    for (bridgeId <- domainToBridgeIdMap) {\n      bridges(bridgeId).entryPoints.finalise()\n      art.Art.logInfo(bridgeId, s\"Finalized bridge: ${bridges(bridgeId).name}\")\n    }\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/StaticSchedulerIO.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage art.scheduling.static\n\nimport org.sireum._\n\n@ext object StaticSchedulerIO {\n  def getCommand(prompt: String): String = $\n\n  def message(m: String): Unit = $\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/art\/art\/scheduling\/static\/StaticSchedulerIO_Ext.scala",
        {
          "type" : "ITestResource",
          "content" : "package art.scheduling.static\n\nimport org.sireum._\n\nimport scala.io.StdIn.readLine\n\nobject StaticSchedulerIO_Ext {\n  var logStream: java.io.PrintStream = System.out\n\n  def getCommand(prompt: String): String = {\n    print(prompt)\n    val command = readLine()\n    return command\n  }\n\n  def message(m: String): Unit = {\n    logStream.println(m)\n    logStream.flush()\n  }\n}\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : false
        }
      ],
      [
        "slang\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/Aux_Types.scala",
        {
          "type" : "ITestResource",
          "content" : "\/\/ #Sireum\n\npackage building_control_gen_mixed__JVM__runtime_monitoring\n\nimport org.sireum._\n\n\/\/ This file will not be overwritten so is safe to edit\n\n\/\/ Any datatype definitions placed in this file will be processed by sergen and SlangCheck\n",
          "markers" : [
          ],
          "overwrite" : false,
          "makeExecutable" : false,
          "makeCRLF" : false,
          "isDatatype" : true
        }
      ],
      [
        "slang\/bin\/sergen.cmd",
        {
          "type" : "ITestResource",
          "content" : "::\/*#! 2> \/dev\/null                                   #\r\n@ 2>\/dev\/null # 2>nul & echo off & goto BOF           #\r\nif [ -z \"${SIREUM_HOME}\" ]; then                      #\r\n  echo \"Please set SIREUM_HOME env var\"               #\r\n  exit -1                                             #\r\nfi                                                    #\r\nexec \"${SIREUM_HOME}\/bin\/sireum\" slang run \"$0\" \"$@\"    #\r\n:BOF\r\nsetlocal\r\nif not defined SIREUM_HOME (\r\n  echo Please set SIREUM_HOME env var\r\n  exit \/B -1\r\n)\r\n\"%SIREUM_HOME%\\bin\\sireum.bat\" slang run %0 %*\r\nexit \/B %errorlevel%\r\n::!#*\/\r\n\/\/ #Sireum\r\n\r\nimport org.sireum._\r\n\r\nval sireum = Os.path(Os.env(\"SIREUM_HOME\").get) \/ \"bin\" \/ (if (Os.isWin) \"sireum.bat\" else \"sireum\")\r\n\r\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\r\n\r\n\/\/ create serializers\/deserializers for the Slang types used in the project\r\n\r\nval files: ISZ[String] = ISZ(\"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempUnit.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Temperature_impl.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/SetPoint_impl.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/FanAck.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/FanCmd.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/Base_Types.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_Containers.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_Containers.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_Containers.scala\",\r\n                             \"..\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/ObservationKind.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/util\/Container.scala\",\r\n                             \"..\/src\/main\/art\/art\/DataContent.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/Aux_Types.scala\")\r\n\r\nval toolargs: String = st\"${(files, \" \")}\".render\r\n\r\n(Os.slashDir.up \/ \"src\" \/ \"main\" \/ \"util\" \/ \"building_control_gen_mixed__JVM__runtime_monitoring\").mkdirAll()\r\n\r\nproc\"$sireum tools sergen -p building_control_gen_mixed__JVM__runtime_monitoring -m json,msgpack -o ${Os.slashDir.up}\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring $toolargs\".at(Os.slashDir).console.runCheck()\r\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : true,
          "isDatatype" : false
        }
      ],
      [
        "slang\/bin\/slangcheck.cmd",
        {
          "type" : "ITestResource",
          "content" : "::\/*#! 2> \/dev\/null                                   #\r\n@ 2>\/dev\/null # 2>nul & echo off & goto BOF           #\r\nif [ -z \"${SIREUM_HOME}\" ]; then                      #\r\n  echo \"Please set SIREUM_HOME env var\"               #\r\n  exit -1                                             #\r\nfi                                                    #\r\nexec \"${SIREUM_HOME}\/bin\/sireum\" slang run \"$0\" \"$@\"    #\r\n:BOF\r\nsetlocal\r\nif not defined SIREUM_HOME (\r\n  echo Please set SIREUM_HOME env var\r\n  exit \/B -1\r\n)\r\n\"%SIREUM_HOME%\\bin\\sireum.bat\" slang run %0 %*\r\nexit \/B %errorlevel%\r\n::!#*\/\r\n\/\/ #Sireum\r\n\r\nimport org.sireum._\r\n\r\nval sireum = Os.path(Os.env(\"SIREUM_HOME\").get) \/ \"bin\" \/ (if (Os.isWin) \"sireum.bat\" else \"sireum\")\r\n\r\n\/\/ Do not edit this file as it will be overwritten if HAMR codegen is rerun\r\n\r\n\/\/ create SlangCheck artifacts for the Slang types used in the project\r\n\r\nval files: ISZ[String] = ISZ(\"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempUnit.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Temperature_impl.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/SetPoint_impl.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/FanAck.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/FanCmd.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/Base_Types.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempSensor_i_tcp_tempSensor_Containers.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/TempControl_i_tcp_tempControl_Containers.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/BuildingControl\/Fan_i_tcp_fan_Containers.scala\",\r\n                             \"..\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring\/runtimemonitor\/ObservationKind.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/util\/Container.scala\",\r\n                             \"..\/src\/main\/art\/art\/DataContent.scala\",\r\n                             \"..\/src\/main\/data\/building_control_gen_mixed__JVM__runtime_monitoring\/Aux_Types.scala\")\r\n\r\nval toolargs: String = st\"${(files, \" \")}\".render\r\n\r\n(Os.slashDir.up \/ \"src\" \/ \"main\" \/ \"util\" \/ \"building_control_gen_mixed__JVM__runtime_monitoring\").mkdirAll()\r\n\r\nproc\"$sireum proyek slangcheck -p building_control_gen_mixed__JVM__runtime_monitoring -o ${Os.slashDir.up}\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring ${Os.slashDir.up} $toolargs\".at(Os.slashDir).console.runCheck()\r\n\r\n\/\/ call to the tools version of SlangCheck which does not invoke Tipe\r\n\/\/proc\"$sireum tools slangcheck generator -p building_control_gen_mixed__JVM__runtime_monitoring -o ${Os.slashDir.up}\/src\/main\/util\/building_control_gen_mixed__JVM__runtime_monitoring $toolargs\".at(Os.slashDir).console.runCheck()\r\n",
          "markers" : [
          ],
          "overwrite" : true,
          "makeExecutable" : true,
          "makeCRLF" : true,
          "isDatatype" : false
        }
      ]
    ]
  }
}